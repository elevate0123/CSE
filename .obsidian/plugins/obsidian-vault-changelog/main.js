var c=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var F=Object.prototype.hasOwnProperty;var C=(l,n,e)=>n in l?c(l,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[n]=e;var y=(l,n)=>{for(var e in n)c(l,e,{get:n[e],enumerable:!0})},S=(l,n,e,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of v(n))!F.call(l,s)&&s!==e&&c(l,s,{get:()=>n[s],enumerable:!(t=E(n,s))||t.enumerable});return l};var w=l=>S(c({},"__esModule",{value:!0}),l);var h=(l,n,e)=>C(l,typeof n!="symbol"?n+"":n,e);var b={};y(b,{default:()=>m});module.exports=w(b);var r=require("obsidian");var o=require("obsidian");var x=require("obsidian");var u=class extends x.AbstractInputSuggest{constructor(e,t){super(e,t);h(this,"inputEl");this.inputEl=t}getSuggestions(e){let t=e.toLowerCase(),s=this.app.vault.getAllFolders(),a=this.app.vault.getFiles().filter(d=>d.extension==="md"),i=[];return s.forEach(d=>{let g=d.path;g.toLowerCase().contains(t)&&i.push(g+"/")}),a.forEach(d=>{let g=d.path;g.toLowerCase().contains(t)&&i.push(g)}),i}renderSuggestion(e,t){t.setText(e)}selectSuggestion(e){this.inputEl.value=e,this.inputEl.trigger("input"),this.close()}};var f={autoUpdate:!1,changelogPath:"Changelog.md",datetimeFormat:"YYYY-MM-DD[T]HHmm",maxRecentFiles:25,excludedFolders:[]},p=class extends o.PluginSettingTab{constructor(e,t){super(e,t);h(this,"plugin");this.plugin=t}renderExcludedFolders(e){if(e.empty(),this.plugin.settings.excludedFolders.length===0){e.createEl("div",{text:"No excluded folders"});return}this.plugin.settings.excludedFolders.forEach(t=>{let s=e.createDiv("excluded-folder-item");s.createSpan({text:t}),s.createEl("button",{text:"\u2715",cls:"excluded-folder-remove"}).addEventListener("click",async()=>{let i=this.plugin.settings.excludedFolders.indexOf(t);i>-1&&(this.plugin.settings.excludedFolders.splice(i,1),await this.plugin.saveSettings(),this.renderExcludedFolders(e))})})}display(){let{containerEl:e}=this,{settings:t}=this.plugin;e.empty(),new o.Setting(e).setName("Auto update").setDesc("Automatically update changelog on vault changes").addToggle(a=>a.setValue(t.autoUpdate).onChange(async i=>{t.autoUpdate=i,await this.plugin.saveSettings(),i?this.plugin.enableAutoUpdate():this.plugin.disableAutoUpdate()})),new o.Setting(e).setName("Changelog path").setDesc("Relative path including filename and extension").addText(a=>{a.setPlaceholder("Folder/Changelog.md").setValue(t.changelogPath).onChange(async i=>{t.changelogPath=(0,o.normalizePath)(i),await this.plugin.saveSettings()}),new u(this.app,a.inputEl)}),new o.Setting(e).setName("Datetime format").setDesc("Moment.js datetime format string").addText(a=>a.setPlaceholder("YYYY-MM-DD[T]HHmm").setValue(t.datetimeFormat).onChange(async i=>{if(!((0,o.moment)().format(i)!=="Invalid date")){a.setValue(t.datetimeFormat),new o.Notice("Invalid datetime format");return}t.datetimeFormat=i,await this.plugin.saveSettings()})),new o.Setting(e).setName("Max recent files").setDesc("Maximum number of recently edited files to include").addText(a=>a.setValue(t.maxRecentFiles.toString()).onChange(async i=>{let d=Number(i);if(isNaN(d)||d<1){a.setValue(t.maxRecentFiles.toString());return}t.maxRecentFiles=d,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Excluded folders"});let s=e.createDiv("excluded-folders-list");this.renderExcludedFolders(s),new o.Setting(e).setName("Add excluded folder").setDesc("Folders to exclude from the changelog").addText(a=>{a.setPlaceholder("folder/path/"),new u(this.app,a.inputEl)}).addButton(a=>{a.setButtonText("Add").onClick(async()=>{var d;let i=(d=a.buttonEl.parentElement)==null?void 0:d.querySelector("input");if(i){let g=i.value;g&&!t.excludedFolders.includes(g)&&(t.excludedFolders.push(g),await this.plugin.saveSettings(),i.value="",this.renderExcludedFolders(s))}})})}};var T=`
.excluded-folders-list {
	margin-bottom: 1em;
}

.excluded-folder-item {
	display: flex;
	justify-content: space-between;
	align-items: center;
	background-color: var(--background-secondary);
	border-radius: 4px;
	padding: 4px 8px;
	margin-bottom: 6px;
}

.excluded-folder-remove {
	cursor: pointer;
	border: none;
	background: transparent;
	color: var(--text-muted);
	padding: 0 4px;
	font-size: 14px;
}

.excluded-folder-remove:hover {
	color: var(--text-error);
}`,m=class extends r.Plugin{constructor(){super(...arguments);h(this,"settings",f);h(this,"styleEl")}async onload(){await this.loadSettings(),this.addSettingTab(new p(this.app,this)),this.addCommand({id:"update-changelog",name:"Update Changelog",callback:()=>this.updateChangelog()}),this.styleEl=document.createElement("style"),this.styleEl.textContent=T,document.head.appendChild(this.styleEl),this.onVaultChange=(0,r.debounce)(this.onVaultChange.bind(this),200),this.enableAutoUpdate()}onunload(){this.styleEl&&this.styleEl.parentNode&&this.styleEl.parentNode.removeChild(this.styleEl)}enableAutoUpdate(){this.settings.autoUpdate&&(this.registerEvent(this.app.vault.on("modify",this.onVaultChange)),this.registerEvent(this.app.vault.on("delete",this.onVaultChange)),this.registerEvent(this.app.vault.on("rename",this.onVaultChange)))}disableAutoUpdate(){this.app.vault.off("modify",this.onVaultChange),this.app.vault.off("delete",this.onVaultChange),this.app.vault.off("rename",this.onVaultChange)}onVaultChange(e){e.path!==this.settings.changelogPath&&this.updateChangelog()}async updateChangelog(){let e=await this.generateChangelog();await this.writeToFile(this.settings.changelogPath,e)}async generateChangelog(){let e=this.getRecentlyEditedFiles(),t="";return e.forEach(s=>{let a=(0,r.moment)(s.stat.mtime).format(this.settings.datetimeFormat);t+=`- ${a} \xB7 [[${s.basename}]]
`}),t}getRecentlyEditedFiles(){return this.app.vault.getMarkdownFiles().filter(e=>{if(e.path===this.settings.changelogPath)return!1;for(let t of this.settings.excludedFolders)if(e.path.startsWith(t))return!1;return!0}).sort((e,t)=>t.stat.mtime-e.stat.mtime).slice(0,this.settings.maxRecentFiles)}async writeToFile(e,t){let s=this.app.vault.getAbstractFileByPath(e);s||(s=await this.app.vault.create(e,"")),s instanceof r.TFile?await this.app.vault.modify(s,t):new r.Notice(`Could not update changelog at path: ${e}`)}async loadSettings(){let e=await this.loadData();this.settings={...f,...e}}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */