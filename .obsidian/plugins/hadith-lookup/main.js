/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HadithLookupPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  api: "https://hadithunlocked.com/{result.ref}?json",
  quranTemplate: `> [!note]
> {result[0].chapter.title} {result[0].num_ar} - {result[0].body}
> 
> [[{result[0].chapter.title_en} {result[0].num}]] - {result[0].body_en}

`,
  passageTemplate: `> [!note]
> {result[0].chapter.title} {result[0].num_ar} - {result[0].body}
> 
> [[{result[0].chapter.title_en} {result[0].num}]] - {result[0].body_en}

`,
  hadithTemplate: `> [!tip] {result[0].title_en}
> {result[0].book_shortName} {result[0].num} - {result[0].chain}
> {result[0].body} 
> {result[0].footnote} \u2013 {result[0].grade_grade} ({result[0].grader_shortName})
> 
> [[{result[0].book_shortName_en} {result[0].num}]] - {result[0].chain_en}
> {result[0].body_en}
> {result[0].footnote_en} \u2013 {result[0].grade_grade_en} ({result[0].grader_shortName_en})

`
};
var HadithLookupPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "fetch-hadith",
      name: "Fetch hadith or Quran using the selected reference",
      editorCallback: async (editor, view) => {
        let ref = editor.getSelection().trim().toLowerCase();
        let templateType = "hadith";
        if (ref.startsWith("quran"))
          templateType = "quran";
        if (ref.match(/^quran:.+:\d+-\d+/) || ref.match(/^quran:.+:\d+/)) {
          ref = ref.replace(/^quran/, "passage");
          templateType = "passage";
        }
        if (ref.match(/^quran:.+:\d+/)) {
          ref = ref.replace(/(\d+)/, "$1-$1");
        }
        try {
          const res = await fetch(fillIn(this.settings.api, { ref }));
          const resStr = await res.text();
          const result2 = resStr === "" ? {} : JSON.parse(resStr);
          result2[0].num = (result2[0].num + "").replace(/:/, "\uA789");
          if (templateType === "hadith")
            editor.replaceSelection(fillIn(this.settings.hadithTemplate, result2));
          else if (templateType === "quran")
            editor.replaceSelection(fillIn(this.settings.quranTemplate, result2));
          else if (templateType === "passage")
            editor.replaceSelection(fillIn(this.settings.passageTemplate, result2));
          else
            editor.replaceSelection(JSON.stringify(result2[0]));
        } catch (error) {
          new import_obsidian.Notice(`Lookup failed: ${error.message}`);
          console.error(error.stack);
        }
      }
    });
    this.addCommand({
      id: "search-hadith",
      name: "Find hadith or Quran using the selected text",
      editorCallback: async (editor, view) => {
        try {
          const res = await fetch("https://hadithunlocked.com?json&q=" + editor.getSelection());
          let resStr = await res.text();
          resStr = resStr.replace(/<\/?i>/g, "");
          const result2 = resStr === "" ? {} : JSON.parse(resStr);
          let text = "";
          for (let i2 = 0; i2 < result2.length && i2 < 5; i2++)
            text += `> ${result2[i2].book_shortName} \u2013 ${result2[i2].body}
> ${result2[i2].book_alias}:${result2[i2].num} \u2013 ${result2[i2].body_en}

`;
          editor.replaceSelection(`* * *

${text}* * *
`);
        } catch (error) {
          new import_obsidian.Notice(`Lookup failed: ${error.message}`);
          console.error(error.stack);
        }
      }
    });
    this.addSettingTab(new HadithLookupSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var HadithLookupSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API").setDesc("Hadith lookup API: Default is the Hadith Unlocked API").addText((text) => text.setPlaceholder("").setValue(this.plugin.settings.api).onChange(async (value) => {
      this.plugin.settings.api = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Quran template").setDesc("For single ayah references, e.g. quran:2:255").addTextArea((text) => text.setPlaceholder("").setValue(this.plugin.settings.quranTemplate).onChange(async (value) => {
      this.plugin.settings.quranTemplate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Quran passage template").setDesc("For passage references e.g. quran:2:255-258").addTextArea((text) => text.setPlaceholder("").setValue(this.plugin.settings.passageTemplate).onChange(async (value) => {
      this.plugin.settings.passageTemplate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Hadith template").setDesc("For hadith references e.g. muslim:55a").addTextArea((text) => text.setPlaceholder("").setValue(this.plugin.settings.hadithTemplate).onChange(async (value) => {
      this.plugin.settings.hadithTemplate = value;
      await this.plugin.saveSettings();
    }));
  }
};
function fillIn(s, result) {
  const matches = [...s.matchAll(/{([^}]+)}/g)];
  if (matches) {
    for (let i = 0; i < matches.length; i++) {
      let replacement = eval(matches[i][1]);
      if (!replacement)
        replacement = "";
      s = s.replaceAll(matches[i][0], replacement);
    }
  }
  return s;
}

/* nosourcemap */