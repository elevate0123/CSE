/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn2(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type2;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromType(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type2.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type2.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init4 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init4(payload));
                } catch (x3) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type2, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type2,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type2, config, children2) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children2;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type2 && type2.defaultProps) {
            var defaultProps = type2.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type2, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children2) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children2;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index6) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index6.toString(36);
        }
        function mapIntoArray(children2, array2, escapedPrefix, nameSoFar, callback) {
          var type2 = typeof children2;
          if (type2 === "undefined" || type2 === "boolean") {
            children2 = null;
          }
          var invokeCallback = false;
          if (children2 === null) {
            invokeCallback = true;
          } else {
            switch (type2) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children2.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children2;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array2.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children2)) {
            for (var i = 0; i < children2.length; i++) {
              child = children2[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children2);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children2;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else if (type2 === "object") {
              var childrenString = String(children2);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children2, func, context) {
          if (children2 == null) {
            return children2;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children2, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children2) {
          var n = 0;
          mapChildren(children2, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children2, forEachFunc, forEachContext) {
          mapChildren(children2, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children2) {
          return mapChildren(children2, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children2) {
          if (!isValidElement(children2)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children2;
        }
        function createContext2(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef2(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type2) {
          if (typeof type2 === "string" || typeof type2 === "function") {
            return true;
          }
          if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type2 === "object" && type2 !== null) {
            if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type2, compare) {
          {
            if (!isValidElementType(type2)) {
              error("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type2,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type2.name && !type2.displayName) {
                  type2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState7(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init4) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init4);
        }
        function useRef4(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect5(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create2, deps);
        }
        function useInsertionEffect(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create2, deps);
        }
        function useLayoutEffect2(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create2, deps);
        }
        function useCallback3(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo2(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create2, deps);
        }
        function useImperativeHandle2(ref, create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create2, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x3) {
                var match = x3.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn2);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x3) {
                  control = x3;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x3) {
                  control = x3;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x3) {
                control = x3;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn2.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn2.displayName);
                        }
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init4 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init4(payload), source, ownerFn);
                } catch (x3) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type2 = element.type;
            if (type2 === null || type2 === void 0 || typeof type2 === "string") {
              return;
            }
            var propTypes;
            if (typeof type2 === "function") {
              propTypes = type2.propTypes;
            } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type2.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type2);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type2);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type2, props, children2) {
          var validType = isValidElementType(type2);
          if (!validType) {
            var info = "";
            if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type2 === null) {
              typeString = "null";
            } else if (isArray(type2)) {
              typeString = "array";
            } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type2;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type2);
            }
          }
          if (type2 === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type2) {
          var validatedFactory = createElementWithValidation.bind(null, type2);
          validatedFactory.type = type2;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type2
                });
                return type2;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children2) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext2;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef2;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback3;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect5;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle2;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect2;
        exports.useMemo = useMemo2;
        exports.useReducer = useReducer;
        exports.useRef = useRef4;
        exports.useState = useState7;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/.pnpm/react@18.2.0/node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index6 = heap.length;
          heap.push(node);
          siftUp(heap, node, index6);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index6 = i;
          while (index6 > 0) {
            var parentIndex = index6 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index6] = parent;
              index6 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index6 = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index6 < halfLength) {
            var leftIndex = (index6 + 1) * 2 - 1;
            var left2 = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right2 = heap[rightIndex];
            if (compare(left2, node) < 0) {
              if (rightIndex < length && compare(right2, left2) < 0) {
                heap[index6] = right2;
                heap[rightIndex] = node;
                index6 = rightIndex;
              } else {
                heap[index6] = left2;
                heap[leftIndex] = node;
                index6 = leftIndex;
              }
            } else if (rightIndex < length && compare(right2, node) < 0) {
              heap[index6] = right2;
              heap[rightIndex] = node;
              index6 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a2, b) {
          var diff = a2.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a2.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer2 = peek(timerQueue);
          while (timer2 !== null) {
            if (timer2.callback === null) {
              pop(timerQueue);
            } else if (timer2.startTime <= currentTime) {
              pop(timerQueue);
              timer2.sortIndex = timer2.expirationTime;
              push(taskQueue, timer2);
            } else {
              return;
            }
            timer2 = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout2;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout2 = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout2 = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout2 = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout2;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/.pnpm/scheduler@0.23.0/node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React20 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React20.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn2(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type2;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type2, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type2 === BOOLEANISH_STRING || type2 === BOOLEAN || type2 === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type2;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type2 = propertyInfo.type;
              node[propertyName] = type2 === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x3) {
                var match = x3.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn2);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x3) {
                  control = x3;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x3) {
                  control = x3;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x3) {
                control = x3;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn2.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn2.displayName);
                        }
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init4 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init4(payload), source, ownerFn);
                } catch (x3) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x3) {
            return "\nError generating stack: " + x3.message + "\n" + x3.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromType(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type2.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type2.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init4 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init4(payload));
                } catch (x3) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type2 = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type2;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type2;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type2, type2.render, "ForwardRef");
            case Fragment:
              return "Fragment";
            case HostComponent:
              return type2;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type2);
            case Mode:
              if (type2 === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type2 === "function") {
                return type2.displayName || type2.name || null;
              }
              if (typeof type2 === "string") {
                return type2;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString2(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type2 = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type2 === "checkbox" || type2 === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get4 = descriptor.get, set4 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get4.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set4.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type2 = props.type;
          if (value != null) {
            if (type2 === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString2(value);
              }
            } else if (node.value !== toString2(value)) {
              node.value = toString2(value);
            }
          } else if (type2 === "submit" || type2 === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type2 = props.type;
            var isButton = type2 === "submit" || type2 === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString2(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type2, value) {
          if (type2 !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString2(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString2(value)) {
              node.defaultValue = toString2(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React20.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString2(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString2(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString2(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children2 = props.children, defaultValue = props.defaultValue;
            if (children2 != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children2)) {
                  if (children2.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children2 = children2[0];
                }
                defaultValue = children2;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString2(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString2(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type2) {
          switch (type2) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type2) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type2);
          }
          if (parentNamespace === SVG_NAMESPACE && type2 === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode2 = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode2.firstChild) {
                node.appendChild(svgNode2.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_5, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue2 = styles[styleName];
              if (styleValue2 != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue2, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue2 = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue2);
            } else {
              style2[styleName] = styleValue2;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type2, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid2 = validateProperty(type2, key);
              if (!isValid2) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
            }
          }
        }
        function validateProperties(type2, props) {
          if (isCustomComponent(type2, props)) {
            return;
          }
          warnInvalidARIAProps(type2, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type2, props) {
          {
            if (type2 !== "input" && type2 !== "textarea" && type2 !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type2 === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type2);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type2);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type2, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid2 = validateProperty$1(type2, key, props[key], eventRegistry);
              if (!isValid2) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
            }
          }
        };
        function validateProperties$2(type2, props, eventRegistry) {
          if (isCustomComponent(type2, props)) {
            return;
          }
          warnUnknownProperties(type2, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn2, bookkeeping) {
          return fn2(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn2, a2, b) {
          if (isInsideEventHandler) {
            return fn2(a2, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn2, a2, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type2, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type2));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a2, b, c2, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b, c2, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a2, b, c2, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b, c2, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get3(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set3(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get3(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.return !== b.return) {
              a2 = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a2.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a2.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now4 = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root4, children2) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root4, children2);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root4, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root4.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root4, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root4, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root4) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root4);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index7 = 0; index7 < TotalLanes; index7++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x3) {
          var asUint = x3 >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root4, wipLanes) {
          var pendingLanes = root4.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root4.suspendedLanes;
          var pingedLanes = root4.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root4.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root4.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index7 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index7;
              nextLanes |= entanglements[index7];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root4, lanes) {
          var eventTimes = root4.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            var eventTime = eventTimes[index7];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root4, currentTime) {
          var pendingLanes = root4.pendingLanes;
          var suspendedLanes = root4.suspendedLanes;
          var pingedLanes = root4.pingedLanes;
          var expirationTimes = root4.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            var expirationTime = expirationTimes[index7];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index7] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root4.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root4) {
          return getHighestPriorityLanes(root4.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root4) {
          var everythingButOffscreen = root4.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root4, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root4, lanes) {
          return (lanes & root4.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a2, b) {
          return (a2 & b) !== NoLanes;
        }
        function isSubsetOfLanes(set4, subset) {
          return (set4 & subset) === subset;
        }
        function mergeLanes(a2, b) {
          return a2 | b;
        }
        function removeLanes(set4, subset) {
          return set4 & ~subset;
        }
        function intersectLanes(a2, b) {
          return a2 & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a2, b) {
          return a2 !== NoLane && a2 < b ? a2 : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root4, updateLane, eventTime) {
          root4.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root4.suspendedLanes = NoLanes;
            root4.pingedLanes = NoLanes;
          }
          var eventTimes = root4.eventTimes;
          var index7 = laneToIndex(updateLane);
          eventTimes[index7] = eventTime;
        }
        function markRootSuspended(root4, suspendedLanes) {
          root4.suspendedLanes |= suspendedLanes;
          root4.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root4.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            expirationTimes[index7] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root4, pingedLanes, eventTime) {
          root4.pingedLanes |= root4.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root4, remainingLanes) {
          var noLongerPendingLanes = root4.pendingLanes & ~remainingLanes;
          root4.pendingLanes = remainingLanes;
          root4.suspendedLanes = NoLanes;
          root4.pingedLanes = NoLanes;
          root4.expiredLanes &= remainingLanes;
          root4.mutableReadLanes &= remainingLanes;
          root4.entangledLanes &= remainingLanes;
          var entanglements = root4.entanglements;
          var eventTimes = root4.eventTimes;
          var expirationTimes = root4.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            entanglements[index7] = NoLanes;
            eventTimes[index7] = NoTimestamp;
            expirationTimes[index7] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root4, entangledLanes) {
          var rootEntangledLanes = root4.entangledLanes |= entangledLanes;
          var entanglements = root4.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            if (lane & entangledLanes | entanglements[index7] & entangledLanes) {
              entanglements[index7] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root4, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root4.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root4, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index7 = laneToIndex(lanes);
            var lane = 1 << index7;
            var updaters = pendingUpdatersLaneMap[index7];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root4, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
          var memoizedUpdaters = root4.memoizedUpdaters;
          while (lanes > 0) {
            var index7 = laneToIndex(lanes);
            var lane = 1 << index7;
            var updaters = pendingUpdatersLaneMap[index7];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root4, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn2) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn2();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a2, b) {
          return a2 !== 0 && a2 < b ? a2 : b;
        }
        function lowerEventPriority(a2, b) {
          return a2 === 0 || a2 > b ? a2 : b;
        }
        function isHigherEventPriority(a2, b) {
          return a2 !== 0 && a2 < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root4) {
          var currentState = root4.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn2) {
          _attemptSynchronousHydration = fn2;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn2) {
          attemptContinuousHydration = fn2;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn2) {
          attemptHydrationAtCurrentPriority = fn2;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn2) {
          getCurrentUpdatePriority$1 = fn2;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn2) {
          attemptHydrationAtPriority = fn2;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root4 = nearestMounted.stateNode;
                if (isRootDehydrated(root4)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent2;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root4 = nearestMounted.stateNode;
                if (isRootDehydrated(root4)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive2
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            passive: passive2
          });
          return listener;
        }
        var root3 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root3 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root3 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start3;
          var startValue = startText;
          var startLength = startValue.length;
          var end2;
          var endValue = getText();
          var endLength = endValue.length;
          for (start3 = 0; start3 < startLength; start3++) {
            if (startValue[start3] !== endValue[start3]) {
              break;
            }
          }
          var minEnd = startLength - start3;
          for (end2 = 1; end2 <= minEnd; end2++) {
            if (startValue[startLength - end2] !== endValue[endLength - end2]) {
              break;
            }
          }
          var sliceTail = end2 > 1 ? 1 - end2 : void 0;
          fallbackText = endValue.slice(start3, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root3) {
            return root3.value;
          }
          return root3.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x3, y3) {
          return x3 === y3 && (x3 !== 0 || 1 / x3 === 1 / y3) || x3 !== x3 && y3 !== y3;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root4, offset2) {
          var node = getLeafNode(root4);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset2 && nodeEnd >= offset2) {
                return {
                  node,
                  offset: offset2 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection2 = win.getSelection && win.getSelection();
          if (!selection2 || selection2.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection2.anchorNode, anchorOffset = selection2.anchorOffset, focusNode = selection2.focusNode, focusOffset = selection2.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start3 = -1;
          var end2 = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start3 = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end2 = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start3 = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end2 = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start3 === -1 || end2 === -1) {
            return null;
          }
          return {
            start: start3,
            end: end2
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection2 = win.getSelection();
          var length = node.textContent.length;
          var start3 = Math.min(offsets.start, length);
          var end2 = offsets.end === void 0 ? start3 : Math.min(offsets.end, length);
          if (!selection2.extend && start3 > end2) {
            var temp = end2;
            end2 = start3;
            start3 = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start3);
          var endMarker = getNodeForCharacterOffset(node, end2);
          if (startMarker && endMarker) {
            if (selection2.rangeCount === 1 && selection2.anchorNode === startMarker.node && selection2.anchorOffset === startMarker.offset && selection2.focusNode === endMarker.node && selection2.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection2.removeAllRanges();
            if (start3 > end2) {
              selection2.addRange(range);
              selection2.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection2.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection2;
          if ("selectionStart" in input) {
            selection2 = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection2 = getOffsets(input);
          }
          return selection2 || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start3 = offsets.start;
          var end2 = offsets.end;
          if (end2 === void 0) {
            end2 = start3;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start3;
            input.selectionEnd = Math.min(end2, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection2 = win.getSelection();
            return {
              anchorNode: selection2.anchorNode,
              anchorOffset: selection2.anchorOffset,
              focusNode: selection2.focusNode,
              focusOffset: selection2.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type2 = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type2, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type2, props) {
            validateProperties(type2, props);
            validateProperties$1(type2, props);
            validateProperties$2(type2, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names2 = [];
            attributeNames.forEach(function(name) {
              names2.push(name);
            });
            error("Extra attributes from the server: %s", names2);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop2() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop2;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type2, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type2);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type2, props);
              if (!isCustomComponentTag && type2 !== type2.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type2);
              }
            }
            if (type2 === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type2, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type2);
              if (type2 === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type2);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type2)) {
                warnedUnknownTags[type2] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type2);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type2;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type2 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root4 = rootContainerInstance.documentElement;
              namespace = root4 ? root4.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type2 = container.tagName;
              namespace = getChildNamespace(ownNamespace, type2);
              break;
            }
          }
          {
            var validatedTag = type2.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type2, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type2);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type2);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type2, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type2, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type2, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type2, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type2, props, rootContainerInstance);
          switch (type2) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type2, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type2, oldProps, newProps);
        }
        function shouldSetTextContent(type2, props) {
          return type2 === "textarea" || type2 === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type2, newProps, internalInstanceHandle) {
          switch (type2) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type2, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type2, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type2, props) {
          if (instance.nodeType !== ELEMENT_NODE || type2.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type2, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type2, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type2, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type2);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type2, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type2);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type2, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type2);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index6 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index6 < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index6]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index6];
          valueStack[index6] = null;
          {
            fiberStack[index6] = null;
          }
          index6--;
        }
        function push(cursor, value, fiber) {
          index6++;
          valueStack[index6] = cursor.current;
          {
            fiberStack[index6] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type2 = workInProgress2.type;
            var contextTypes = type2.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type2) {
          {
            var childContextTypes = type2.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type2, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type2.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type2, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type2, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id2.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index7) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index7 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id2 = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id2;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id2) {
          return 1 << getBitLength(id2) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type2 = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type2);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type2 = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type2);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set4) {
            var array2 = [];
            set4.forEach(function(value) {
              array2.push(value);
            });
            return array2.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update3 = createUpdate(NoTimestamp, lane);
                    update3.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update3.next = update3;
                      } else {
                        update3.next = pending.next;
                        pending.next = update3;
                      }
                      sharedQueue.pending = update3;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update3, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update3.next = update3;
            pushConcurrentUpdateQueue(queue);
          } else {
            update3.next = interleaved.next;
            interleaved.next = update3;
          }
          queue.interleaved = update3;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update3, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update3.next = update3;
            pushConcurrentUpdateQueue(queue);
          } else {
            update3.next = interleaved.next;
            interleaved.next = update3;
          }
          queue.interleaved = update3;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update3, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update3.next = update3;
            pushConcurrentUpdateQueue(queue);
          } else {
            update3.next = interleaved.next;
            interleaved.next = update3;
          }
          queue.interleaved = update3;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root4 = node.stateNode;
            return root4;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone2 = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone2;
          }
        }
        function createUpdate(eventTime, lane) {
          var update3 = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update3;
        }
        function enqueueUpdate(fiber, update3, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update3.next = update3;
            } else {
              update3.next = pending.next;
              pending.next = update3;
            }
            sharedQueue.pending = update3;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update3, lane);
          }
        }
        function entangleTransitions(root4, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root4, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update3 = firstBaseUpdate;
                do {
                  var clone2 = {
                    eventTime: update3.eventTime,
                    lane: update3.lane,
                    tag: update3.tag,
                    payload: update3.payload,
                    callback: update3.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone2;
                  } else {
                    newLast.next = clone2;
                    newLast = clone2;
                  }
                  update3 = update3.next;
                } while (update3 !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update3, prevState, nextProps, instance) {
          switch (update3.tag) {
            case ReplaceState: {
              var payload = update3.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update3.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update3 = firstBaseUpdate;
            do {
              var updateLane = update3.lane;
              var updateEventTime = update3.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone2 = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update3.tag,
                  payload: update3.payload,
                  callback: update3.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone2;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update3.tag,
                    payload: update3.payload,
                    callback: update3.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update3, newState, props, instance);
                var callback = update3.callback;
                if (callback !== null && update3.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update3];
                  } else {
                    effects.push(update3);
                  }
                }
              }
              update3 = update3.next;
              if (update3 === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update3 = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect4 = effects[i];
              var callback = effect4.callback;
              if (callback !== null) {
                effect4.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React20.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type2, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type2) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get3(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update3 = createUpdate(eventTime, lane);
            update3.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update3.callback = callback;
            }
            var root4 = enqueueUpdate(fiber, update3, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
              entangleTransitions(root4, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get3(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update3 = createUpdate(eventTime, lane);
            update3.tag = ReplaceState;
            update3.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update3.callback = callback;
            }
            var root4 = enqueueUpdate(fiber, update3, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
              entangleTransitions(root4, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get3(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update3 = createUpdate(eventTime, lane);
            update3.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update3.callback = callback;
            }
            var root4 = enqueueUpdate(fiber, update3, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
              entangleTransitions(root4, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set3(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init4 = lazyType._init;
          return init4(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone2 = createWorkInProgress(fiber, pendingProps);
            clone2.index = 0;
            clone2.sibling = null;
            return clone2;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init4 = newChild._init;
                  return createChild(returnFiber, init4(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init4 = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init4(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init4 = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init4(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init4 = child._init;
                  warnOnInvalidKey(init4(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init4 = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init4(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (c2 === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion = 2;
        var Layout = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root4, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root4.mutableSourceEagerHydrationData == null) {
            root4.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root4.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children2 = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children2 = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children2;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init4) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init4 !== void 0) {
            initialState = init4(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch2];
        }
        function updateReducer(reducer, initialArg, init4) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update3 = first;
            do {
              var updateLane = update3.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone2 = {
                  lane: updateLane,
                  action: update3.action,
                  hasEagerState: update3.hasEagerState,
                  eagerState: update3.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone2;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone2;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update3.action,
                    hasEagerState: update3.hasEagerState,
                    eagerState: update3.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update3.hasEagerState) {
                  newState = update3.eagerState;
                } else {
                  var action = update3.action;
                  newState = reducer(newState, action);
                }
              }
              update3 = update3.next;
            } while (update3 !== null && update3 !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch2 = queue.dispatch;
          return [hook.memoizedState, dispatch2];
        }
        function rerenderReducer(reducer, initialArg, init4) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch2 = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update3 = firstRenderPhaseUpdate;
            do {
              var action = update3.action;
              newState = reducer(newState, action);
              update3 = update3.next;
            } while (update3 !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch2];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root4 = getWorkInProgressRoot();
            if (root4 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root4, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root4 = getWorkInProgressRoot();
            if (root4 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root4, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root4 !== null) {
            scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch2];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create2, destroy, deps) {
          var effect4 = {
            tag,
            create: create2,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect4.next = effect4;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect4;
              effect4.next = firstEffect;
              componentUpdateQueue.lastEffect = effect4;
            }
          }
          return effect4;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
        }
        function mountEffect(create2, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
          }
        }
        function updateEffect(create2, deps) {
          return updateEffectImpl(Passive, Passive$1, create2, deps);
        }
        function mountInsertionEffect(create2, deps) {
          return mountEffectImpl(Update, Insertion, create2, deps);
        }
        function updateInsertionEffect(create2, deps) {
          return updateEffectImpl(Update, Insertion, create2, deps);
        }
        function mountLayoutEffect(create2, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create2, deps);
        }
        function updateLayoutEffect(create2, deps) {
          return updateEffectImpl(Update, Layout, create2, deps);
        }
        function imperativeHandleEffect(create2, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create2();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create2();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start3 = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start3;
          return [isPending, start3];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start3 = hook.memoizedState;
          return [isPending, start3];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start3 = hook.memoizedState;
          return [isPending, start3];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root4 = getWorkInProgressRoot();
          var identifierPrefix = root4.identifierPrefix;
          var id2;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id2 = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id2 += "H" + localId.toString(32);
            }
            id2 += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id2;
          return id2;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id2 = hook.memoizedState;
          return id2;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update3 = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update3);
          } else {
            var root4 = enqueueConcurrentHookUpdate(fiber, queue, update3, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
              entangleTransitionUpdate(root4, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update3 = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update3);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update3.hasEagerState = true;
                  update3.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update3, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root4 = enqueueConcurrentHookUpdate(fiber, queue, update3, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
              entangleTransitionUpdate(root4, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update3) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update3.next = update3;
          } else {
            update3.next = pending.next;
            pending.next = update3;
          }
          queue.pending = update3;
        }
        function entangleTransitionUpdate(root4, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root4, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init4) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init4);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init4) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init4);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init4) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init4);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init4) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init4);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init4) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init4);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init4) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init4);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init4) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init4);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root4 = parentFiber.stateNode;
                  root4.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root4 = parentFiber.stateNode;
                  if (root4 !== null) {
                    root4.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update3 = createUpdate(NoTimestamp, lane);
          update3.tag = CaptureUpdate;
          update3.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update3.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update3;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update3 = createUpdate(NoTimestamp, lane);
          update3.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update3.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update3.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update3.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update3;
        }
        function attachPingListener(root4, wakeable, lanes) {
          var pingCache = root4.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root4.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root4, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root4, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root4, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update3 = createUpdate(NoTimestamp, SyncLane);
                  update3.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update3, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root4, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root4, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root4, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root4, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root4, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update3 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update3);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type2 = Component.type;
            if (isSimpleFunctionComponent(type2) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type2;
              {
                resolvedType = resolveFunctionForHotReloading(type2);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type2);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type2));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init4 = lazyComponent._init;
                try {
                  outerMemoType = init4(payload);
                } catch (x3) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update3 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update3);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root4 = workInProgress2.stateNode;
          if (root4.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root4.pendingContext, root4.pendingContext !== root4.context);
          } else if (root4.context) {
            pushTopLevelContextObject(workInProgress2, root4.context, false);
          }
          pushHostContainer(workInProgress2, root4.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root4 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type2 = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type2, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type2, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init4 = lazyComponent._init;
          var Component = init4(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root4 = getWorkInProgressRoot();
              if (root4 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root4, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root4, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index7) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type2 = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type2, index7, type2);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children2, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
              if (isArray(children2)) {
                for (var i = 0; i < children2.length; i++) {
                  if (!validateSuspenseListNestedChild(children2[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children2);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children2);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root4 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type2 = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type2 ? _unresolvedProps2 : resolveDefaultProps(type2, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type2, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type2 = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type2, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type2, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type2, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now4() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now4() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now4();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root4 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root4 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root4, firstChild) {
          focusedInstanceHandle = prepareForCommit(root4.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root4 = finishedWork.stateNode;
                  clearContainer(root4.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect4 = firstEffect;
            do {
              if ((effect4.tag & flags) === flags) {
                var destroy = effect4.destroy;
                effect4.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect4 = effect4.next;
            } while (effect4 !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect4 = firstEffect;
            do {
              if ((effect4.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create2 = effect4.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect4.destroy = create2();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect4.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect4.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect4.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect4 = effect4.next;
            } while (effect4 !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root4 = parentFiber.stateNode;
                          root4.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type2 = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type2, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root4 = parentFiber.stateNode;
                            root4.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root4, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root4, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect4 = firstEffect;
                    do {
                      var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect4 = effect4.next;
                    } while (effect4 !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root4, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root4;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root4);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root4, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root4, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root4);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root4, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type2 = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type2, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root4.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root4, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root4, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root4, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root4, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root4;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root4, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root4, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(child, root4, committedLanes);
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root4, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root4, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root4, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root4, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root4, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now4() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now4();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now4();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition2 = ReactCurrentBatchConfig$3.transition;
              if (!transition2._updatedFibers) {
                transition2._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition2._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root4, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root4, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root4 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root4, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root4 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root4, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root4, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root4, lane, eventTime) {
          var current2 = root4.current;
          current2.lanes = lane;
          markRootUpdated(root4, lane, eventTime);
          ensureRootIsScheduled(root4, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function ensureRootIsScheduled(root4, currentTime) {
          var existingCallbackNode = root4.callbackNode;
          markStarvedLanesAsExpired(root4, currentTime);
          var nextLanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root4.callbackNode = null;
            root4.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root4.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root4.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root4));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root4));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root4));
          }
          root4.callbackPriority = newCallbackPriority;
          root4.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root4, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root4.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root4.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root4, lanes) && !includesExpiredLane(root4, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root4, lanes) : renderRootSync(root4, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root4, NoLanes);
              markRootSuspended$1(root4, lanes);
              ensureRootIsScheduled(root4, now4());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root4, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root4, lanes);
              var finishedWork = root4.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root4, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root4, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root4, NoLanes);
                  markRootSuspended$1(root4, lanes);
                  ensureRootIsScheduled(root4, now4());
                  throw _fatalError;
                }
              }
              root4.finishedWork = finishedWork;
              root4.finishedLanes = lanes;
              finishConcurrentRender(root4, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root4, now4());
          if (root4.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root4);
          }
          return null;
        }
        function recoverFromConcurrentError(root4, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root4)) {
            var rootWorkInProgress = prepareFreshStack(root4, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root4.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root4, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root4, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root4, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now4();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root4, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root4.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root4, suspendedLanes);
                    break;
                  }
                  root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root4, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root4, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now4() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root4, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root4, suspendedLanes);
        }
        function performSyncWorkOnRoot(root4) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root4, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root4, now4());
            return null;
          }
          var exitStatus = renderRootSync(root4, lanes);
          if (root4.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root4, NoLanes);
            markRootSuspended$1(root4, lanes);
            ensureRootIsScheduled(root4, now4());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root4.current.alternate;
          root4.finishedWork = finishedWork;
          root4.finishedLanes = lanes;
          commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root4, now4());
          return null;
        }
        function flushRoot(root4, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root4, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root4, now4());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn2, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn2(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn2, a2, b, c2, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn2(a2, b, c2, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn2) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn2) {
              return fn2();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root4, lanes) {
          root4.finishedWork = null;
          root4.finishedLanes = NoLanes;
          var timeoutHandle = root4.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root4.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root4;
          var rootWorkInProgress = createWorkInProgress(root4.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root4, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root4, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now4();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root4, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root4.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root4, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root4, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root4, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root4, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root4.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root4, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root4, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root4, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root4, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root4, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root4, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root4.finishedWork;
          var lanes = root4.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root4.finishedWork = null;
          root4.finishedLanes = NoLanes;
          if (finishedWork === root4.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root4.callbackNode = null;
          root4.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root4, remainingLanes);
          if (root4 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root4, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root4, finishedWork, lanes);
            resetAfterCommit(root4.containerInfo);
            root4.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root4, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root4.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root4;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root4.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root4.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root4.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root4, now4());
          if (recoverableErrors !== null) {
            var onRecoverableError = root4.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root4.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root4.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root4 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root4;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root4 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root4.current);
          commitPassiveMountEffects(root4, root4.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root4, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root4.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root4 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root4;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root4);
          {
            var stateNode = root4.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update3 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root4 = enqueueUpdate(rootFiber, update3, SyncLane);
          var eventTime = requestEventTime();
          if (root4 !== null) {
            markRootUpdated(root4, SyncLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update3 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root4 = enqueueUpdate(fiber, update3, SyncLane);
                var eventTime = requestEventTime();
                if (root4 !== null) {
                  markRootUpdated(root4, SyncLane, eventTime);
                  ensureRootIsScheduled(root4, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root4, wakeable, pingedLanes) {
          var pingCache = root4.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root4, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root4);
          if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now4() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root4, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root4, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root4 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root4, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root4.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root4, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root4) {
          {
            if (root4.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type2) {
          {
            if (resolveFamily === null) {
              return type2;
            }
            var family = resolveFamily(type2);
            if (family === void 0) {
              return type2;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type2) {
          return resolveFunctionForHotReloading(type2);
        }
        function resolveForwardRefForHotReloading(type2) {
          {
            if (resolveFamily === null) {
              return type2;
            }
            var family = resolveFamily(type2);
            if (family === void 0) {
              if (type2 !== null && type2 !== void 0 && typeof type2.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type2.render);
                if (type2.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type2.displayName !== void 0) {
                    syntheticType.displayName = type2.displayName;
                  }
                  return syntheticType;
                }
              }
              return type2;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root4, update3) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update3.staleFamilies, updatedFamilies = update3.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root4, element) {
          {
            if (root4.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root4, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type2;
                break;
              case ForwardRef:
                candidateType = type2.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root4, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type2;
                break;
              case ForwardRef:
                candidateType = type2.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type2) {
          return typeof type2 === "function" && !shouldConstruct$1(type2) && type2.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type2;
          if (typeof type2 === "function") {
            if (shouldConstruct$1(type2)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type2 === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type2) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type2 === "object" && type2 !== null) {
                    switch (type2.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type2 == null ? type2 : typeof type2) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type2;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type2 = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root4 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root4.current = uninitializedFiber;
          uninitializedFiber.stateNode = root4;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root4;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children2, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children: children2,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get3(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get3(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root4 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root4.context = getContextForSubtree(null);
          var current2 = root4.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update3 = createUpdate(eventTime, lane);
          update3.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update3, lane);
          scheduleInitialHydrationOnRoot(root4, lane, eventTime);
          return root4;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update3 = createUpdate(eventTime, lane);
          update3.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update3.callback = callback;
          }
          var root4 = enqueueUpdate(current$1, update3, lane);
          if (root4 !== null) {
            scheduleUpdateOnFiber(root4, current$1, lane, eventTime);
            entangleTransitions(root4, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root4 = fiber.stateNode;
              if (isRootDehydrated(root4)) {
                var lanes = getHighestPriorityPendingLanes(root4);
                flushRoot(root4, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root5 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root5 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root5, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root4 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root4 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root4 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root4 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path5, index7) {
            var key = path5[index7];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index7 + 1 === path5.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path5, index7 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path5) {
            return copyWithDeleteImpl(obj, path5, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index7) {
            var oldKey = oldPath[index7];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index7 + 1 === oldPath.length) {
              var newKey = newPath[index7];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index7 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn2("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn2("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path5, index7, value) {
            if (index7 >= path5.length) {
              return value;
            }
            var key = path5[index7];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path5, index7 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path5, value) {
            return copyWithSetImpl(obj, path5, 0, value);
          };
          var findHook = function(fiber, id2) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id2 > 0) {
              currentHook2 = currentHook2.next;
              id2--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id2, path5, value) {
            var hook = findHook(fiber, id2);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path5, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id2, path5) {
            var hook = findHook(fiber, id2);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path5);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
            var hook = findHook(fiber, id2);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path5, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path5, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path5) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path5);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children2) {
          var root4 = this._internalRoot;
          if (root4 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root4.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root4.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children2, root4, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root4 = this._internalRoot;
          if (root4 !== null) {
            this._internalRoot = null;
            var container = root4.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root4, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot4(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root4 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root4.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root4);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root4 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root4.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root4, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root4);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root4);
                originalCallback.call(instance);
              };
            }
            var root4 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root4;
            markContainerAsRoot(root4.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root4;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children2, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root4;
          if (!maybeRoot) {
            root4 = legacyCreateRootFromDOMContainer(container, children2, parentComponent, callback, forceHydrate);
          } else {
            root4 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root4);
                originalCallback.call(instance);
              };
            }
            updateContainer(children2, root4, parentComponent, callback);
          }
          return getPublicRootInstance(root4);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children2, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children2, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot4(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn2) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn2);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m2 = require_react_dom();
    if (false) {
      exports.createRoot = m2.createRoot;
      exports.hydrateRoot = m2.hydrateRoot;
    } else {
      i = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c2, o) {
        i.usingClientEntryPoint = true;
        try {
          return m2.createRoot(c2, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c2, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m2.hydrateRoot(c2, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// node_modules/.pnpm/doi-regex@0.1.13/node_modules/doi-regex/index.js
var require_doi_regex = __commonJS({
  "node_modules/.pnpm/doi-regex@0.1.13/node_modules/doi-regex/index.js"(exports, module2) {
    "use strict";
    var doiRegex2 = '(10[.][0-9]{2,}(?:[.][0-9]+)*/(?:(?![%"#? ])\\S)+)';
    var doiTextPrefix = "doi\\:";
    var doi = module2.exports = function(opts) {
      opts = opts || {};
      return opts.exact ? new RegExp("(?:^" + doiRegex2 + "$)") : new RegExp("(?:" + doiRegex2 + ")", "g");
    };
    doi.groups = function(str) {
      if (!str) {
        return;
      }
      var suffixes = [];
      var newStr = str.replace(/\.[a-zA-Z]{1}[0-9]{3}$/g, function(s) {
        suffixes.push(s);
        return "";
      });
      var match = doi().exec(newStr);
      if (match) {
        match[0] = str;
        match.push(suffixes.length ? suffixes[0] : "");
      }
      return match;
    };
    doi.declared = function(opts) {
      opts = opts || {};
      return opts.exact ? new RegExp("^" + doiTextPrefix + doiRegex2 + "$") : new RegExp(doiTextPrefix + doiRegex2, "g");
    };
    doi.resolvePath = function(opts) {
      opts = opts || {};
      return opts.protocol ? new RegExp("^http(s)?\\://(dx\\.)?doi\\.org/" + doiRegex2 + "$") : new RegExp("^(http(s)?\\://)?(dx\\.)?doi\\.org/" + doiRegex2 + "$");
    };
  }
});

// node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js"(exports, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT3 = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN2 = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag2 = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag2 = "[object Symbol]", undefinedTag2 = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart2 = /^\s+/;
      var reWhitespace2 = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex2 = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary2 = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal2 = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt2 = parseInt;
      var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
      var root3 = freeGlobal2 || freeSelf2 || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array2, setter, iteratee, accumulator) {
        var index6 = -1, length = array2 == null ? 0 : array2.length;
        while (++index6 < length) {
          var value = array2[index6];
          setter(accumulator, value, iteratee(value), array2);
        }
        return accumulator;
      }
      function arrayEach(array2, iteratee) {
        var index6 = -1, length = array2 == null ? 0 : array2.length;
        while (++index6 < length) {
          if (iteratee(array2[index6], index6, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEachRight(array2, iteratee) {
        var length = array2 == null ? 0 : array2.length;
        while (length--) {
          if (iteratee(array2[length], length, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEvery(array2, predicate) {
        var index6 = -1, length = array2 == null ? 0 : array2.length;
        while (++index6 < length) {
          if (!predicate(array2[index6], index6, array2)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array2, predicate) {
        var index6 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index6 < length) {
          var value = array2[index6];
          if (predicate(value, index6, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array2, value) {
        var length = array2 == null ? 0 : array2.length;
        return !!length && baseIndexOf(array2, value, 0) > -1;
      }
      function arrayIncludesWith(array2, value, comparator) {
        var index6 = -1, length = array2 == null ? 0 : array2.length;
        while (++index6 < length) {
          if (comparator(value, array2[index6])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array2, iteratee) {
        var index6 = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
        while (++index6 < length) {
          result[index6] = iteratee(array2[index6], index6, array2);
        }
        return result;
      }
      function arrayPush(array2, values) {
        var index6 = -1, length = values.length, offset2 = array2.length;
        while (++index6 < length) {
          array2[offset2 + index6] = values[index6];
        }
        return array2;
      }
      function arrayReduce(array2, iteratee, accumulator, initAccum) {
        var index6 = -1, length = array2 == null ? 0 : array2.length;
        if (initAccum && length) {
          accumulator = array2[++index6];
        }
        while (++index6 < length) {
          accumulator = iteratee(accumulator, array2[index6], index6, array2);
        }
        return accumulator;
      }
      function arrayReduceRight(array2, iteratee, accumulator, initAccum) {
        var length = array2 == null ? 0 : array2.length;
        if (initAccum && length) {
          accumulator = array2[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array2[length], length, array2);
        }
        return accumulator;
      }
      function arraySome(array2, predicate) {
        var index6 = -1, length = array2 == null ? 0 : array2.length;
        while (++index6 < length) {
          if (predicate(array2[index6], index6, array2)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length = array2.length, index6 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index6-- : ++index6 < length) {
          if (predicate(array2[index6], index6, array2)) {
            return index6;
          }
        }
        return -1;
      }
      function baseIndexOf(array2, value, fromIndex) {
        return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array2, value, fromIndex, comparator) {
        var index6 = fromIndex - 1, length = array2.length;
        while (++index6 < length) {
          if (comparator(array2[index6], value)) {
            return index6;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array2, iteratee) {
        var length = array2 == null ? 0 : array2.length;
        return length ? baseSum(array2, iteratee) / length : NAN2;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index6, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index6, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array2, comparer) {
        var length = array2.length;
        array2.sort(comparer);
        while (length--) {
          array2[length] = array2[length].value;
        }
        return array2;
      }
      function baseSum(array2, iteratee) {
        var result, index6 = -1, length = array2.length;
        while (++index6 < length) {
          var current = iteratee(array2[index6]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index6 = -1, result = Array(n);
        while (++index6 < n) {
          result[index6] = iteratee(index6);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim2(string) {
        return string ? string.slice(0, trimmedEndIndex2(string) + 1).replace(reTrimStart2, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index6 = -1, length = strSymbols.length;
        while (++index6 < length && baseIndexOf(chrSymbols, strSymbols[index6], 0) > -1) {
        }
        return index6;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index6 = strSymbols.length;
        while (index6-- && baseIndexOf(chrSymbols, strSymbols[index6], 0) > -1) {
        }
        return index6;
      }
      function countHolders(array2, placeholder) {
        var length = array2.length, result = 0;
        while (length--) {
          if (array2[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index6 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index6] = [key, value];
        });
        return result;
      }
      function overArg(func, transform2) {
        return function(arg) {
          return func(transform2(arg));
        };
      }
      function replaceHolders(array2, placeholder) {
        var index6 = -1, length = array2.length, resIndex = 0, result = [];
        while (++index6 < length) {
          var value = array2[index6];
          if (value === placeholder || value === PLACEHOLDER) {
            array2[index6] = PLACEHOLDER;
            result[resIndex++] = index6;
          }
        }
        return result;
      }
      function setToArray(set3) {
        var index6 = -1, result = Array(set3.size);
        set3.forEach(function(value) {
          result[++index6] = value;
        });
        return result;
      }
      function setToPairs(set3) {
        var index6 = -1, result = Array(set3.size);
        set3.forEach(function(value) {
          result[++index6] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array2, value, fromIndex) {
        var index6 = fromIndex - 1, length = array2.length;
        while (++index6 < length) {
          if (array2[index6] === value) {
            return index6;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array2, value, fromIndex) {
        var index6 = fromIndex + 1;
        while (index6--) {
          if (array2[index6] === value) {
            return index6;
          }
        }
        return index6;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex2(string) {
        var index6 = string.length;
        while (index6-- && reWhitespace2.test(string.charAt(index6))) {
        }
        return index6;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root3 : _5.defaults(root3.Object(), context, _5.pick(root3, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto3 = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto3.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString3 = objectProto3.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root3._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol3 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto3.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol3 ? Symbol3.isConcatSpreadable : undefined2, symIterator = Symbol3 ? Symbol3.iterator : undefined2, symToStringTag3 = Symbol3 ? Symbol3.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root3.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root3.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root3.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax2 = Math2.max, nativeMin2 = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol3 ? Symbol3.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike2(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array2 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array2), isRight = dir < 0, arrLength = isArr ? array2.length : 0, view = getView(0, arrLength, this.__views__), start3 = view.start, end2 = view.end, length = end2 - start3, index6 = isRight ? end2 : start3 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin2(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array2, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index6 += dir;
              var iterIndex = -1, value = array2[index6];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type2 = data.type, computed = iteratee2(value);
                if (type2 == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type2 == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index6 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index6 < length) {
            var entry = entries[index6];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty2.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index6 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index6 < length) {
            var entry = entries[index6];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index6 = assocIndexOf(data, key);
          if (index6 < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index6 == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index6, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index6 = assocIndexOf(data, key);
          return index6 < 0 ? undefined2 : data[index6][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index6 = assocIndexOf(data, key);
          if (index6 < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index6][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index6 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index6 < length) {
            var entry = entries[index6];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index6 = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index6 < length) {
            this.add(values2[index6]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack2(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack2.prototype.clear = stackClear;
        Stack2.prototype["delete"] = stackDelete;
        Stack2.prototype.get = stackGet;
        Stack2.prototype.has = stackHas;
        Stack2.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array2) {
          var length = array2.length;
          return length ? array2[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array2, n) {
          return shuffleSelf(copyArray(array2), baseClamp(n, 0, array2.length));
        }
        function arrayShuffle(array2) {
          return shuffleSelf(copyArray(array2));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array2, key) {
          var length = array2.length;
          while (length--) {
            if (eq(array2[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index6 = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index6 < length) {
            result2[index6] = skip ? undefined2 : get3(object, paths[index6]);
          }
          return result2;
        }
        function baseClamp(number, lower2, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower2 !== undefined2) {
              number = number >= lower2 ? number : lower2;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack2());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array2, values2, iteratee2, comparator) {
          var index6 = -1, includes2 = arrayIncludes, isCommon = true, length = array2.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index6 < length) {
              var value = array2[index6], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index6, collection2) {
            result2 = !!predicate(value, index6, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array2, iteratee2, comparator) {
          var index6 = -1, length = array2.length;
          while (++index6 < length) {
            var value = array2[index6], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array2, value, start3, end2) {
          var length = array2.length;
          start3 = toInteger(start3);
          if (start3 < 0) {
            start3 = -start3 > length ? 0 : length + start3;
          }
          end2 = end2 === undefined2 || end2 > length ? length : toInteger(end2);
          if (end2 < 0) {
            end2 += length;
          }
          end2 = start3 > end2 ? 0 : toLength(end2);
          while (start3 < end2) {
            array2[start3++] = value;
          }
          return array2;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index6, collection2) {
            if (predicate(value, index6, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array2, depth, predicate, isStrict, result2) {
          var index6 = -1, length = array2.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index6 < length) {
            var value = array2[index6];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path5) {
          path5 = castPath(path5, object);
          var index6 = 0, length = path5.length;
          while (object != null && index6 < length) {
            object = object[toKey(path5[index6++])];
          }
          return index6 && index6 == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag2(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag2 : nullTag2;
          }
          return symToStringTag3 && symToStringTag3 in Object2(value) ? getRawTag2(value) : objectToString2(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty2.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start3, end2) {
          return number >= nativeMin2(start3, end2) && number < nativeMax2(start3, end2);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array2 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array2 = arrayMap(array2, baseUnary(iteratee2));
            }
            maxLength = nativeMin2(array2.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array2.length >= 120) ? new SetCache(othIndex && array2) : undefined2;
          }
          array2 = arrays[0];
          var index6 = -1, seen = caches[0];
          outer:
            while (++index6 < length && result2.length < maxLength) {
              var value = array2[index6], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path5, args) {
          path5 = castPath(path5, object);
          object = parent(object, path5);
          var func = object == null ? object : object[toKey(last(path5))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike2(value) && baseGetTag2(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike2(value) && baseGetTag2(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike2(value) && baseGetTag2(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack2());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack2());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack2());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike2(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index6 = matchData.length, length = index6, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index6--) {
            var data = matchData[index6];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index6 < length) {
            data = matchData[index6];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack2();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike2(value) && baseGetTag2(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike2(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike2(value) && isLength(value.length) && !!typedArrayTags[baseGetTag2(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity3;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty2.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index6 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index6] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path5, srcValue) {
          if (isKey(path5) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path5), srcValue);
          }
          return function(object) {
            var objValue = get3(object, path5);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path5) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack2());
            if (isObject2(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array2, n) {
          var length = array2.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array2[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity3];
          }
          var index6 = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index6, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path5) {
            return hasIn(object, path5);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index6 = -1, length = paths.length, result2 = {};
          while (++index6 < length) {
            var path5 = paths[index6], value = baseGet(object, path5);
            if (predicate(value, path5)) {
              baseSet(result2, castPath(path5, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path5) {
          return function(object) {
            return baseGet(object, path5);
          };
        }
        function basePullAll(array2, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index6 = -1, length = values2.length, seen = array2;
          if (array2 === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array2, baseUnary(iteratee2));
          }
          while (++index6 < length) {
            var fromIndex = 0, value = values2[index6], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array2) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array2, fromIndex, 1);
            }
          }
          return array2;
        }
        function basePullAt(array2, indexes) {
          var length = array2 ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index6 = indexes[length];
            if (length == lastIndex || index6 !== previous) {
              var previous = index6;
              if (isIndex(index6)) {
                splice.call(array2, index6, 1);
              } else {
                baseUnset(array2, index6);
              }
            }
          }
          return array2;
        }
        function baseRandom(lower2, upper) {
          return lower2 + nativeFloor(nativeRandom() * (upper - lower2 + 1));
        }
        function baseRange(start3, end2, step, fromRight) {
          var index6 = -1, length = nativeMax2(nativeCeil((end2 - start3) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index6] = start3;
            start3 += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start3) {
          return setToString(overRest(func, start3, identity3), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array2 = values(collection);
          return shuffleSelf(array2, baseClamp(n, 0, array2.length));
        }
        function baseSet(object, path5, value, customizer) {
          if (!isObject2(object)) {
            return object;
          }
          path5 = castPath(path5, object);
          var index6 = -1, length = path5.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index6 < length) {
            var key = toKey(path5[index6]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index6 != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject2(objValue) ? objValue : isIndex(path5[index6 + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity3 : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity3 : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array2, start3, end2) {
          var index6 = -1, length = array2.length;
          if (start3 < 0) {
            start3 = -start3 > length ? 0 : length + start3;
          }
          end2 = end2 > length ? length : end2;
          if (end2 < 0) {
            end2 += length;
          }
          length = start3 > end2 ? 0 : end2 - start3 >>> 0;
          start3 >>>= 0;
          var result2 = Array2(length);
          while (++index6 < length) {
            result2[index6] = array2[index6 + start3];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index6, collection2) {
            result2 = predicate(value, index6, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array2, value, retHighest) {
          var low = 0, high = array2 == null ? low : array2.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array2[mid];
              if (computed !== null && !isSymbol2(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array2, value, identity3, retHighest);
        }
        function baseSortedIndexBy(array2, value, iteratee2, retHighest) {
          var low = 0, high = array2 == null ? 0 : array2.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol2(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array2[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol2(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin2(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array2, iteratee2) {
          var index6 = -1, length = array2.length, resIndex = 0, result2 = [];
          while (++index6 < length) {
            var value = array2[index6], computed = iteratee2 ? iteratee2(value) : value;
            if (!index6 || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN2;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol2(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array2, iteratee2, comparator) {
          var index6 = -1, includes2 = arrayIncludes, length = array2.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set4 = iteratee2 ? null : createSet(array2);
            if (set4) {
              return setToArray(set4);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index6 < length) {
              var value = array2[index6], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path5) {
          path5 = castPath(path5, object);
          object = parent(object, path5);
          return object == null || delete object[toKey(last(path5))];
        }
        function baseUpdate(object, path5, updater, customizer) {
          return baseSet(object, path5, updater(baseGet(object, path5)), customizer);
        }
        function baseWhile(array2, predicate, isDrop, fromRight) {
          var length = array2.length, index6 = fromRight ? length : -1;
          while ((fromRight ? index6-- : ++index6 < length) && predicate(array2[index6], index6, array2)) {
          }
          return isDrop ? baseSlice(array2, fromRight ? 0 : index6, fromRight ? index6 + 1 : length) : baseSlice(array2, fromRight ? index6 + 1 : 0, fromRight ? length : index6);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index6 = -1, result2 = Array2(length);
          while (++index6 < length) {
            var array2 = arrays[index6], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index6) {
                result2[index6] = baseDifference(result2[index6] || array2, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index6 = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index6 < length) {
            var value = index6 < valsLength ? values2[index6] : undefined2;
            assignFunc(result2, props[index6], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity3;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString2(value));
        }
        var castRest = baseRest;
        function castSlice(array2, start3, end2) {
          var length = array2.length;
          end2 = end2 === undefined2 ? length : end2;
          return !start3 && end2 >= length ? array2 : baseSlice(array2, start3, end2);
        }
        var clearTimeout2 = ctxClearTimeout || function(id2) {
          return root3.clearTimeout(id2);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index6 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index6 < length) {
            var result2 = compareAscending(objCriteria[index6], othCriteria[index6]);
            if (result2) {
              if (index6 >= ordersLength) {
                return result2;
              }
              var order2 = orders[index6];
              return result2 * (order2 == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset2 = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset2 + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset2 + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array2) {
          var index6 = -1, length = source.length;
          array2 || (array2 = Array2(length));
          while (++index6 < length) {
            array2[index6] = source[index6];
          }
          return array2;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index6 = -1, length = props.length;
          while (++index6 < length) {
            var key = props[index6];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index6 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index6 < length) {
              var source = sources[index6];
              if (source) {
                assigner(object, source, index6, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index6 = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index6-- : ++index6 < length) {
              if (iteratee2(iterable[index6], index6, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index6 = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index6];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn2 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
            return fn2.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString2(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index6 = length, placeholder = getHolder(wrapper);
            while (index6--) {
              args[index6] = arguments[index6];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn2 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
            return apply(fn2, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index6 = findIndexFunc(collection, predicate, fromIndex);
            return index6 > -1 ? iterable[iteratee2 ? collection[index6] : index6] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index6 = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index6--) {
              var func = funcs[index6];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT3);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index6 = wrapper ? index6 : length;
            while (++index6 < length) {
              func = funcs[index6];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index7 = 0, result2 = length ? funcs[index7].apply(this, args) : value;
              while (++index7 < length) {
                result2 = funcs[index7].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index6 = length;
            while (index6--) {
              args[index6] = arguments[index6];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root3 && this instanceof wrapper) {
              fn2 = Ctor || createCtor(fn2);
            }
            return fn2.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn2, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start3, end2, step) {
            if (step && typeof step != "number" && isIterateeCall(start3, end2, step)) {
              end2 = step = undefined2;
            }
            start3 = toFinite(start3);
            if (end2 === undefined2) {
              end2 = start3;
              start3 = 0;
            } else {
              end2 = toFinite(end2);
            }
            step = step === undefined2 ? start3 < end2 ? 1 : -1 : toFinite(step);
            return baseRange(start3, end2, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber2(value);
              other = toNumber2(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber2(number);
            precision = precision == null ? 0 : nativeMin2(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString2(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString2(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax2(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax2(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto3[key]) && !hasOwnProperty2.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array2);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array2;
          }
          var index6 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array2, other);
          stack.set(other, array2);
          while (++index6 < arrLength) {
            var arrValue = array2[index6], othValue = other[index6];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index6, other, array2, stack) : customizer(arrValue, othValue, index6, array2, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array2);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag2:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index6 = objLength;
          while (index6--) {
            var key = objProps[index6];
            if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index6 < objLength) {
            key = objProps[index6];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array2 = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array2.length : 0;
          while (length--) {
            var data = array2[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty2.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag2(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag3), tag = value[symToStringTag3];
          try {
            value[symToStringTag3] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString3.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag3] = tag;
            } else {
              delete value[symToStringTag3];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag2;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag2(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start3, end2, transforms) {
          var index6 = -1, length = transforms.length;
          while (++index6 < length) {
            var data = transforms[index6], size2 = data.size;
            switch (data.type) {
              case "drop":
                start3 += size2;
                break;
              case "dropRight":
                end2 -= size2;
                break;
              case "take":
                end2 = nativeMin2(end2, start3 + size2);
                break;
              case "takeRight":
                start3 = nativeMax2(start3, end2 - size2);
                break;
            }
          }
          return { "start": start3, "end": end2 };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path5, hasFunc) {
          path5 = castPath(path5, object);
          var index6 = -1, length = path5.length, result2 = false;
          while (++index6 < length) {
            var key = toKey(path5[index6]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index6 != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array2) {
          var length = array2.length, result2 = new array2.constructor(length);
          if (length && typeof array2[0] == "string" && hasOwnProperty2.call(array2, "index")) {
            result2.index = array2.index;
            result2.input = array2.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag2:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type2 = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index6, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type2 = typeof index6;
          if (type2 == "number" ? isArrayLike(object) && isIndex(index6, object.length) : type2 == "string" && index6 in object) {
            return eq(object[index6], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type2 = typeof value;
          if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol2(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type2 = typeof value;
          return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto3;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin2(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString2(value) {
          return nativeObjectToString3.call(value);
        }
        function overRest(func, start3, transform3) {
          start3 = nativeMax2(start3 === undefined2 ? func.length - 1 : start3, 0);
          return function() {
            var args = arguments, index6 = -1, length = nativeMax2(args.length - start3, 0), array2 = Array2(length);
            while (++index6 < length) {
              array2[index6] = args[start3 + index6];
            }
            index6 = -1;
            var otherArgs = Array2(start3 + 1);
            while (++index6 < start3) {
              otherArgs[index6] = args[index6];
            }
            otherArgs[start3] = transform3(array2);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path5) {
          return path5.length < 2 ? object : baseGet(object, baseSlice(path5, 0, -1));
        }
        function reorder(array2, indexes) {
          var arrLength = array2.length, length = nativeMin2(indexes.length, arrLength), oldArray = copyArray(array2);
          while (length--) {
            var index6 = indexes[length];
            array2[length] = isIndex(index6, arrLength) ? oldArray[index6] : undefined2;
          }
          return array2;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root3.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference2, bitmask) {
          var source = reference2 + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array2, size2) {
          var index6 = -1, length = array2.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index6 < size2) {
            var rand = baseRandom(index6, lastIndex), value = array2[rand];
            array2[rand] = array2[index6];
            array2[index6] = value;
          }
          array2.length = size2;
          return array2;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol2(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array2, size2, guard) {
          if (guard ? isIterateeCall(array2, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax2(toInteger(size2), 0);
          }
          var length = array2 == null ? 0 : array2.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index6 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index6 < length) {
            result2[resIndex++] = baseSlice(array2, index6, index6 += size2);
          }
          return result2;
        }
        function compact(array2) {
          var index6 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
          while (++index6 < length) {
            var value = array2[index6];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array2 = arguments[0], index6 = length;
          while (index6--) {
            args[index6 - 1] = arguments[index6];
          }
          return arrayPush(isArray(array2) ? copyArray(array2) : [array2], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array2, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array2, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array2, n, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array2, n < 0 ? 0 : n, length);
        }
        function dropRight(array2, n, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array2, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true) : [];
        }
        function fill(array2, value, start3, end2) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          if (start3 && typeof start3 != "number" && isIterateeCall(array2, value, start3)) {
            start3 = 0;
            end2 = length;
          }
          return baseFill(array2, value, start3, end2);
        }
        function findIndex(array2, predicate, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index6 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index6 < 0) {
            index6 = nativeMax2(length + index6, 0);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index6);
        }
        function findLastIndex(array2, predicate, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index6 = length - 1;
          if (fromIndex !== undefined2) {
            index6 = toInteger(fromIndex);
            index6 = fromIndex < 0 ? nativeMax2(length + index6, 0) : nativeMin2(index6, length - 1);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index6, true);
        }
        function flatten(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseFlatten(array2, 1) : [];
        }
        function flattenDeep(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseFlatten(array2, INFINITY) : [];
        }
        function flattenDepth(array2, depth) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array2, depth);
        }
        function fromPairs(pairs) {
          var index6 = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index6 < length) {
            var pair = pairs[index6];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array2) {
          return array2 && array2.length ? array2[0] : undefined2;
        }
        function indexOf(array2, value, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index6 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index6 < 0) {
            index6 = nativeMax2(length + index6, 0);
          }
          return baseIndexOf(array2, value, index6);
        }
        function initial(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseSlice(array2, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array2, separator) {
          return array2 == null ? "" : nativeJoin.call(array2, separator);
        }
        function last(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? array2[length - 1] : undefined2;
        }
        function lastIndexOf(array2, value, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index6 = length;
          if (fromIndex !== undefined2) {
            index6 = toInteger(fromIndex);
            index6 = index6 < 0 ? nativeMax2(length + index6, 0) : nativeMin2(index6, length - 1);
          }
          return value === value ? strictLastIndexOf(array2, value, index6) : baseFindIndex(array2, baseIsNaN, index6, true);
        }
        function nth(array2, n) {
          return array2 && array2.length ? baseNth(array2, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array2, values2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2) : array2;
        }
        function pullAllBy(array2, values2, iteratee2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, getIteratee(iteratee2, 2)) : array2;
        }
        function pullAllWith(array2, values2, comparator) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, undefined2, comparator) : array2;
        }
        var pullAt = flatRest(function(array2, indexes) {
          var length = array2 == null ? 0 : array2.length, result2 = baseAt(array2, indexes);
          basePullAt(array2, arrayMap(indexes, function(index6) {
            return isIndex(index6, length) ? +index6 : index6;
          }).sort(compareAscending));
          return result2;
        });
        function remove3(array2, predicate) {
          var result2 = [];
          if (!(array2 && array2.length)) {
            return result2;
          }
          var index6 = -1, indexes = [], length = array2.length;
          predicate = getIteratee(predicate, 3);
          while (++index6 < length) {
            var value = array2[index6];
            if (predicate(value, index6, array2)) {
              result2.push(value);
              indexes.push(index6);
            }
          }
          basePullAt(array2, indexes);
          return result2;
        }
        function reverse(array2) {
          return array2 == null ? array2 : nativeReverse.call(array2);
        }
        function slice(array2, start3, end2) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          if (end2 && typeof end2 != "number" && isIterateeCall(array2, start3, end2)) {
            start3 = 0;
            end2 = length;
          } else {
            start3 = start3 == null ? 0 : toInteger(start3);
            end2 = end2 === undefined2 ? length : toInteger(end2);
          }
          return baseSlice(array2, start3, end2);
        }
        function sortedIndex(array2, value) {
          return baseSortedIndex(array2, value);
        }
        function sortedIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array2, value) {
          var length = array2 == null ? 0 : array2.length;
          if (length) {
            var index6 = baseSortedIndex(array2, value);
            if (index6 < length && eq(array2[index6], value)) {
              return index6;
            }
          }
          return -1;
        }
        function sortedLastIndex(array2, value) {
          return baseSortedIndex(array2, value, true);
        }
        function sortedLastIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array2, value) {
          var length = array2 == null ? 0 : array2.length;
          if (length) {
            var index6 = baseSortedIndex(array2, value, true) - 1;
            if (eq(array2[index6], value)) {
              return index6;
            }
          }
          return -1;
        }
        function sortedUniq(array2) {
          return array2 && array2.length ? baseSortedUniq(array2) : [];
        }
        function sortedUniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseSortedUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseSlice(array2, 1, length) : [];
        }
        function take(array2, n, guard) {
          if (!(array2 && array2.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array2, 0, n < 0 ? 0 : n);
        }
        function takeRight(array2, n, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array2, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array2) {
          return array2 && array2.length ? baseUniq(array2) : [];
        }
        function uniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array2, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array2 && array2.length ? baseUniq(array2, undefined2, comparator) : [];
        }
        function unzip(array2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var length = 0;
          array2 = arrayFilter(array2, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax2(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index6) {
            return arrayMap(array2, baseProperty(index6));
          });
        }
        function unzipWith(array2, iteratee2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var result2 = unzip(array2);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start3 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start3)) {
            return this.thru(interceptor);
          }
          value = value.slice(start3, +start3 + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array2) {
            if (length && !array2.length) {
              array2.push(undefined2);
            }
            return array2;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone3 = wrapperClone(parent2);
            clone3.__index__ = 0;
            clone3.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone3;
            } else {
              result2 = clone3;
            }
            var previous = clone3;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter2(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find3 = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax2(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path5, args) {
          var index6 = -1, isFunc = typeof path5 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index6] = isFunc ? apply(path5, value, args) : baseInvoke(value, path5, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now4 = ctxNow || function() {
          return root3.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey2 = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey2));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce6(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          wait = toNumber2(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax2(toNumber2(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin2(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now4();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now4());
          }
          function debounced() {
            var time = now4(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber2(wait) || 0, args);
        });
        function flip3(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index6 = -1, length = nativeMin2(args.length, funcsLength);
            while (++index6 < length) {
              args[index6] = transforms[index6].call(this, args[index6]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start3) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          start3 = start3 === undefined2 ? start3 : toInteger(start3);
          return baseRest(func, start3);
        }
        function spread(func, start3) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          start3 = start3 == null ? 0 : nativeMax2(toInteger(start3), 0);
          return baseRest(function(args) {
            var array2 = args[start3], otherArgs = castSlice(args, 0, start3);
            if (array2) {
              arrayPush(otherArgs, array2);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle2(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT3);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce6(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone2(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike2(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike2(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike2(value) && baseGetTag2(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement2(value) {
          return isObjectLike2(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike2(value)) {
            return false;
          }
          var tag = baseGetTag2(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag2(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type2 = typeof value;
          return value != null && (type2 == "object" || type2 == "function");
        }
        function isObjectLike2(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike2(value) && baseGetTag2(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike2(value) || baseGetTag2(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag;
        }
        function isSymbol2(value) {
          return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag2;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike2(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike2(value) && baseGetTag2(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber2(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber2(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN2;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim2(value);
          var isBinary = reIsBinary2.test(value);
          return isBinary || reIsOctal2.test(value) ? freeParseInt2(value.slice(2), isBinary ? 2 : 8) : reIsBadHex2.test(value) ? NAN2 : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString2(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create2(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index6 = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index6 < length) {
            var source = sources[index6];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto3[key]) && !hasOwnProperty2.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get3(object, path5, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path5);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path5) {
          return object != null && hasPath(object, path5, baseHas);
        }
        function hasIn(object, path5) {
          return object != null && hasPath(object, path5, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString3.call(value);
          }
          result2[value] = key;
        }, constant(identity3));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString3.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit3 = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path5) {
            path5 = castPath(path5, object);
            isDeep || (isDeep = path5.length > 1);
            return path5;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path5) {
            return predicate(value, path5[0]);
          });
        }
        function result(object, path5, defaultValue) {
          path5 = castPath(path5, object);
          var index6 = -1, length = path5.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index6 < length) {
            var value = object == null ? undefined2 : object[toKey(path5[index6])];
            if (value === undefined2) {
              index6 = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set3(object, path5, value) {
          return object == null ? object : baseSet(object, path5, value);
        }
        function setWith(object, path5, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path5, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform2(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index6, object2) {
            return iteratee2(accumulator, value, index6, object2);
          });
          return accumulator;
        }
        function unset(object, path5) {
          return object == null ? true : baseUnset(object, path5);
        }
        function update3(object, path5, updater) {
          return object == null ? object : baseUpdate(object, path5, castFunction(updater));
        }
        function updateWith(object, path5, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path5, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower2, upper) {
          if (upper === undefined2) {
            upper = lower2;
            lower2 = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber2(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower2 !== undefined2) {
            lower2 = toNumber2(lower2);
            lower2 = lower2 === lower2 ? lower2 : 0;
          }
          return baseClamp(toNumber2(number), lower2, upper);
        }
        function inRange(number, start3, end2) {
          start3 = toFinite(start3);
          if (end2 === undefined2) {
            end2 = start3;
            start3 = 0;
          } else {
            end2 = toFinite(end2);
          }
          number = toNumber2(number);
          return baseInRange(number, start3, end2);
        }
        function random(lower2, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower2, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower2 == "boolean") {
              floating = lower2;
              lower2 = undefined2;
            }
          }
          if (lower2 === undefined2 && upper === undefined2) {
            lower2 = 0;
            upper = 1;
          } else {
            lower2 = toFinite(lower2);
            if (upper === undefined2) {
              upper = lower2;
              lower2 = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower2 > upper) {
            var temp = lower2;
            lower2 = upper;
            upper = temp;
          }
          if (floating || lower2 % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin2(lower2 + rand * (upper - lower2 + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower2, upper);
        }
        var camelCase = createCompounder(function(result2, word, index6) {
          word = word.toLowerCase();
          return result2 + (index6 ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString2(string).toLowerCase());
        }
        function deburr(string) {
          string = toString2(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString2(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end2 = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end2) == target;
        }
        function escape(string) {
          string = toString2(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString2(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index6) {
          return result2 + (index6 ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index6) {
          return result2 + (index6 ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString2(string).replace(reTrimStart2, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString2(string), n);
        }
        function replace() {
          var args = arguments, string = toString2(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index6) {
          return result2 + (index6 ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString2(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index6) {
          return result2 + (index6 ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString2(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString2(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index6 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index6, offset2).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index6 = offset2 + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty2.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString2(value).toLowerCase();
        }
        function toUpper(value) {
          return toString2(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim2(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start3 = charsStartIndex(strSymbols, chrSymbols), end2 = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start3, end2).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex2(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end2 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end2).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart2, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start3 = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start3).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString2(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end2 = length - stringSize(omission);
          if (end2 < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end2).join("") : string.slice(0, end2);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end2 += result2.length - end2;
          }
          if (isRegExp(separator)) {
            if (string.slice(end2).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString2(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end2 : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end2) != end2) {
            var index6 = result2.lastIndexOf(separator);
            if (index6 > -1) {
              result2 = result2.slice(0, index6);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString2(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index6) {
          return result2 + (index6 ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString2(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT3);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index6 = -1;
            while (++index6 < length) {
              var pair = pairs[index6];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity3(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path5, srcValue) {
          return baseMatchesProperty(path5, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path5, args) {
          return function(object) {
            return baseInvoke(object, path5, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path5) {
            return baseInvoke(object, path5, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root3._ === this) {
            root3._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path5) {
          return isKey(path5) ? baseProperty(toKey(path5)) : basePropertyDeep(path5);
        }
        function propertyOf(object) {
          return function(path5) {
            return object == null ? undefined2 : baseGet(object, path5);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index6 = MAX_ARRAY_LENGTH, length = nativeMin2(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index6 < n) {
            iteratee2(index6);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol2(value) ? [value] : copyArray(stringToPath(toString2(value)));
        }
        function uniqueId(prefix) {
          var id2 = ++idCounter;
          return toString2(prefix) + id2;
        }
        var add5 = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max5(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity3, baseGt) : undefined2;
        }
        function maxBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array2) {
          return baseMean(array2, identity3);
        }
        function meanBy(array2, iteratee2) {
          return baseMean(array2, getIteratee(iteratee2, 2));
        }
        function min5(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity3, baseLt) : undefined2;
        }
        function minBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round2 = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array2) {
          return array2 && array2.length ? baseSum(array2, identity3) : 0;
        }
        function sumBy(array2, iteratee2) {
          return array2 && array2.length ? baseSum(array2, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey2;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create2;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce6;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter2;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip3;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit3;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove3;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set3;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle2;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform2;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update3;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add5;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone2;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find3;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get3;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity3;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement2;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject2;
        lodash.isObjectLike = isObjectLike2;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol2;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max5;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min5;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop2;
        lodash.now = now4;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round2;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber2;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString2;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index6) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax2(toInteger(n), 0);
            var result2 = this.__filtered__ && !index6 ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin2(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin2(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index6) {
          var type2 = index6 + 1, isFilter = type2 == LAZY_FILTER_FLAG || type2 == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type2
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index6) {
          var takeName = "take" + (index6 ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index6) {
          var dropName = "drop" + (index6 ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity3);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path5, args) {
          if (typeof path5 == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path5, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start3, end2) {
          start3 = toInteger(start3);
          var result2 = this;
          if (result2.__filtered__ && (start3 > 0 || end2 < 0)) {
            return new LazyWrapper(result2);
          }
          if (start3 < 0) {
            result2 = result2.takeRight(-start3);
          } else if (start3) {
            result2 = result2.drop(start3);
          }
          if (end2 !== undefined2) {
            end2 = toInteger(end2);
            result2 = end2 < 0 ? result2.dropRight(-end2) : result2.take(end2 - start3);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty2.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _5 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root3._ = _5;
        define(function() {
          return _5;
        });
      } else if (freeModule) {
        (freeModule.exports = _5)._ = _5;
        freeExports._ = _5;
      } else {
        root3._ = _5;
      }
    }).call(exports);
  }
});

// node_modules/.pnpm/fromentries@1.3.2/node_modules/fromentries/index.js
var require_fromentries = __commonJS({
  "node_modules/.pnpm/fromentries@1.3.2/node_modules/fromentries/index.js"(exports, module2) {
    module2.exports = function fromEntries2(iterable) {
      return [...iterable].reduce((obj, [key, val]) => {
        obj[key] = val;
        return obj;
      }, {});
    };
  }
});

// node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type2) {
          return typeof type2 === "string" || typeof type2 === "function" || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_CONCURRENT_MODE_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || typeof type2 === "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_RESPONDER_TYPE || type2.$$typeof === REACT_SCOPE_TYPE || type2.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type2 = object.type;
                switch (type2) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type2;
                  default:
                    var $$typeofType = type2 && type2.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js"(exports, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty2.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/has.js"(exports, module2) {
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/checkPropTypes.js"(exports, module2) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module2) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x3, y3) {
        if (x3 === y3) {
          return x3 !== 0 || 1 / x3 === 1 / y3;
        } else {
          return x3 !== x3 && y3 !== y3;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type2 = getPreciseType(value);
            if (type2 === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type2) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type2 + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol2(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol2(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type2 = getPreciseType(value);
        switch (type2) {
          case "array":
          case "object":
            return "an " + type2;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type2;
          default:
            return type2;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js"(exports, module2) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/grammar.js
var require_grammar = __commonJS({
  "node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/grammar.js"(exports, module2) {
    "use strict";
    function peg$subclass(child, parent) {
      function C() {
        this.constructor = child;
      }
      C.prototype = parent.prototype;
      child.prototype = new C();
    }
    function peg$SyntaxError(message, expected, found, location) {
      var self2 = Error.call(this, message);
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
      }
      self2.expected = expected;
      self2.found = found;
      self2.location = location;
      self2.name = "SyntaxError";
      return self2;
    }
    peg$subclass(peg$SyntaxError, Error);
    function peg$padEnd(str, targetLength, padString) {
      padString = padString || " ";
      if (str.length > targetLength) {
        return str;
      }
      targetLength -= str.length;
      padString += padString.repeat(targetLength);
      return str + padString.slice(0, targetLength);
    }
    peg$SyntaxError.prototype.format = function(sources) {
      var str = "Error: " + this.message;
      if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
          if (sources[k].source === this.location.source) {
            src = sources[k].text.split(/\r\n|\n|\r/g);
            break;
          }
        }
        var s = this.location.start;
        var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
        var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
        if (src) {
          var e = this.location.end;
          var filler = peg$padEnd("", offset_s.line.toString().length, " ");
          var line = src[s.line - 1];
          var last = s.line === e.line ? e.column : line.length + 1;
          var hatLen = last - s.column || 1;
          str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
        } else {
          str += "\n at " + loc;
        }
      }
      return str;
    };
    peg$SyntaxError.buildMessage = function(expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return '"' + literalEscape(expectation.text) + '"';
        },
        class: function(expectation) {
          var escapedParts = expectation.parts.map(function(part) {
            return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
          });
          return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
        },
        any: function() {
          return "any character";
        },
        end: function() {
          return "end of input";
        },
        other: function(expectation) {
          return expectation.description;
        }
      };
      function hex2(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }
      function literalEscape(s) {
        return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex2(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex2(ch);
        });
      }
      function classEscape(s) {
        return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex2(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex2(ch);
        });
      }
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }
      function describeExpected(expected2) {
        var descriptions = expected2.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }
        switch (descriptions.length) {
          case 1:
            return descriptions[0];
          case 2:
            return descriptions[0] + " or " + descriptions[1];
          default:
            return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
        }
      }
      function describeFound(found2) {
        return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
      }
      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    function peg$parse(input, options) {
      options = options !== void 0 ? options : {};
      var peg$FAILED = {};
      var peg$source = options.grammarSource;
      var peg$startRuleFunctions = { Bibliography: peg$parseBibliography };
      var peg$startRuleFunction = peg$parseBibliography;
      var peg$c0 = "@";
      var peg$c1 = "comment";
      var peg$c2 = "{";
      var peg$c3 = "}";
      var peg$c4 = "preamble";
      var peg$c5 = "string";
      var peg$c6 = ",";
      var peg$c7 = '"';
      var peg$c8 = "{\\verb";
      var peg$c9 = "\\begin{";
      var peg$c10 = "\\end{";
      var peg$c11 = "{\\";
      var peg$c12 = "\\";
      var peg$c13 = "$";
      var peg$c14 = "$$";
      var peg$c15 = "\\[";
      var peg$c16 = "\\]";
      var peg$c17 = "%";
      var peg$c18 = "\\\\";
      var peg$c19 = "\r";
      var peg$c20 = "\n";
      var peg$c21 = "newcommand";
      var peg$c22 = "url";
      var peg$c23 = "href";
      var peg$c24 = "begin";
      var peg$c25 = "end";
      var peg$c26 = "[";
      var peg$c27 = "]";
      var peg$c28 = "=";
      var peg$c29 = "#";
      var peg$r0 = /^[^\n\r]/;
      var peg$r1 = /^[\n\r]/;
      var peg$r2 = /^[^@]/;
      var peg$r3 = /^[^{}]/;
      var peg$r4 = /^[_A-Za-z]/;
      var peg$r5 = /^[({]/;
      var peg$r6 = /^[})]/;
      var peg$r7 = /^[^ \t\r\n,]/;
      var peg$r8 = /^[0-9A-Za-z!$&*+\-.\/:;<>?@[\\\]\^_`|~]/;
      var peg$r9 = /^[^{}"]/;
      var peg$r10 = /^[a-zA-Z]/;
      var peg$r11 = /^[^\^_${}\\]/;
      var peg$r12 = /^[^\^_${}"\\]/;
      var peg$r13 = /^[0-9]/;
      var peg$r14 = /^[a-zA-Z0-9]/;
      var peg$r15 = /^[ij]/;
      var peg$r16 = /^[^\r\n]/;
      var peg$r17 = /^[_\^]/;
      var peg$r18 = /^[^A-Za-z0-9[\]\t\r\n]/;
      var peg$r19 = /^[A-Za-z]/;
      var peg$r20 = /^[^\]]/;
      var peg$r21 = /^[^ \t\^_${}\\]/;
      var peg$r22 = /^[a-zA-Z\-_]/;
      var peg$r23 = /^[a-zA-Z0-9\-&_:]/;
      var peg$r24 = /^['`"=~\^.]/;
      var peg$r25 = /^['`"=~\^.cbuvdrHk]/;
      var peg$r26 = /^[\r\n]/;
      var peg$r27 = /^[ \t]/;
      var peg$r28 = /^[ \t\n\r]/;
      var peg$e0 = peg$literalExpectation("@", false);
      var peg$e1 = peg$literalExpectation("comment", true);
      var peg$e2 = peg$classExpectation(["\n", "\r"], true, false);
      var peg$e3 = peg$classExpectation(["\n", "\r"], false, false);
      var peg$e4 = peg$classExpectation(["@"], true, false);
      var peg$e5 = peg$literalExpectation("{", false);
      var peg$e6 = peg$classExpectation(["{", "}"], true, false);
      var peg$e7 = peg$literalExpectation("}", false);
      var peg$e8 = peg$classExpectation(["_", ["A", "Z"], ["a", "z"]], false, false);
      var peg$e9 = peg$classExpectation(["(", "{"], false, false);
      var peg$e10 = peg$classExpectation(["}", ")"], false, false);
      var peg$e11 = peg$literalExpectation("preamble", true);
      var peg$e12 = peg$literalExpectation("string", true);
      var peg$e13 = peg$classExpectation([" ", "	", "\r", "\n", ","], true, false);
      var peg$e14 = peg$literalExpectation(",", false);
      var peg$e15 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "!", "$", "&", "*", "+", "-", ".", "/", ":", ";", "<", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "|", "~"], false, false);
      var peg$e16 = peg$literalExpectation('"', false);
      var peg$e17 = peg$classExpectation(["{", "}", '"'], true, false);
      var peg$e18 = peg$literalExpectation("{\\verb", false);
      var peg$e19 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
      var peg$e20 = peg$classExpectation(["^", "_", "$", "{", "}", "\\"], true, false);
      var peg$e21 = peg$classExpectation(["^", "_", "$", "{", "}", '"', "\\"], true, false);
      var peg$e22 = peg$classExpectation([["0", "9"]], false, false);
      var peg$e23 = peg$literalExpectation("\\begin{", false);
      var peg$e24 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
      var peg$e25 = peg$literalExpectation("\\end{", false);
      var peg$e26 = peg$literalExpectation("{\\", false);
      var peg$e27 = peg$literalExpectation("\\", false);
      var peg$e28 = peg$classExpectation(["i", "j"], false, false);
      var peg$e29 = peg$literalExpectation("$", false);
      var peg$e30 = peg$literalExpectation("$$", false);
      var peg$e31 = peg$literalExpectation("\\[", false);
      var peg$e32 = peg$literalExpectation("\\]", false);
      var peg$e33 = peg$literalExpectation("%", false);
      var peg$e34 = peg$classExpectation(["\r", "\n"], true, false);
      var peg$e35 = peg$literalExpectation("\\\\", false);
      var peg$e36 = peg$literalExpectation("\r", false);
      var peg$e37 = peg$literalExpectation("\n", false);
      var peg$e38 = peg$classExpectation(["_", "^"], false, false);
      var peg$e39 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "[", "]", "	", "\r", "\n"], true, false);
      var peg$e40 = peg$literalExpectation("newcommand", false);
      var peg$e41 = peg$literalExpectation("url", false);
      var peg$e42 = peg$literalExpectation("href", false);
      var peg$e43 = peg$literalExpectation("begin", false);
      var peg$e44 = peg$literalExpectation("end", false);
      var peg$e45 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
      var peg$e46 = peg$literalExpectation("[", false);
      var peg$e47 = peg$classExpectation(["]"], true, false);
      var peg$e48 = peg$literalExpectation("]", false);
      var peg$e49 = peg$classExpectation([" ", "	", "^", "_", "$", "{", "}", "\\"], true, false);
      var peg$e50 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false);
      var peg$e51 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "&", "_", ":"], false, false);
      var peg$e52 = peg$classExpectation(["'", "`", '"', "=", "~", "^", "."], false, false);
      var peg$e53 = peg$classExpectation(["'", "`", '"', "=", "~", "^", ".", "c", "b", "u", "v", "d", "r", "H", "k"], false, false);
      var peg$e54 = peg$literalExpectation("=", false);
      var peg$e55 = peg$literalExpectation("#", false);
      var peg$e56 = peg$classExpectation(["\r", "\n"], false, false);
      var peg$e57 = peg$otherExpectation("Mandatory Horizontal Whitespace");
      var peg$e58 = peg$classExpectation([" ", "	"], false, false);
      var peg$e59 = peg$otherExpectation("Optional Horizontal Whitespace");
      var peg$e60 = peg$otherExpectation("Mandatory Vertical Whitespace");
      var peg$e61 = peg$otherExpectation("Optional Vertical Whitespace");
      var peg$e62 = peg$otherExpectation("Mandatory Whitespace");
      var peg$e63 = peg$classExpectation([" ", "	", "\n", "\r"], false, false);
      var peg$e64 = peg$otherExpectation("Optional Whitespace");
      var peg$f0 = function(r) {
        return {
          kind: "Bibliography",
          loc: location(),
          source: text(),
          children: r
        };
      };
      var peg$f1 = function(v) {
        return {
          kind: "BracedComment",
          loc: location(),
          source: text(),
          value: v.slice(1, -1)
        };
      };
      var peg$f2 = function(v) {
        return {
          kind: "LineComment",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v)
        };
      };
      var peg$f3 = function(v) {
        return {
          kind: "NonEntryText",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v)
        };
      };
      var peg$f4 = function(n) {
        return n;
      };
      var peg$f5 = function(comment) {
        return "{" + comment.join("") + "}";
      };
      var peg$f6 = function(type2, id2, fields) {
        return {
          kind: "Entry",
          id: id2 || "",
          type: type2.toLowerCase(),
          loc: location(),
          source: text(),
          fields
        };
      };
      var peg$f7 = function(opener, v, closer) {
        switch (opener + closer) {
          case "{}":
          case "()":
            break;
          default:
            throw new Error(`Unbalanced opener-closer for preamble: ${opener}...${closer}`);
            break;
        }
        return {
          kind: "PreambleExpression",
          loc: location(),
          source: text(),
          value: v.reduce((a2, b) => a2.concat(b), [])
        };
      };
      var peg$f8 = function(k, v) {
        return {
          kind: "StringDeclaration",
          loc: location(),
          source: text(),
          name: k,
          value: v.reduce((a2, b) => a2.concat(b), [])
        };
      };
      var peg$f9 = function(id2) {
        return id2;
      };
      var peg$f10 = function(name) {
        return isVerbatimField(name) && unnestFields.includes(name);
      };
      var peg$f11 = function(name, value) {
        return {
          kind: "Field",
          loc: location(),
          source: text(),
          name,
          loc: location(),
          value: [protect(value)]
        };
      };
      var peg$f12 = function(name) {
        return isVerbatimField(name);
      };
      var peg$f13 = function(name, value) {
        return {
          kind: "Field",
          loc: location(),
          source: text(),
          name,
          loc: location(),
          value: [protect(value)]
        };
      };
      var peg$f14 = function(name, value) {
        if (unnestFields.includes(name) && Array.isArray(value) && value.length === 1 && value[0].kind === "Block") {
          if (options.unnestMode === "preserve") {
            value[0].case = "preserve";
          } else {
            value = value[0].value;
          }
        }
        return handle_markup_switches({
          kind: "Field",
          loc: location(),
          source: text(),
          name,
          value
        });
      };
      var peg$f15 = function(name) {
        return name.toLowerCase();
      };
      var peg$f16 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v || "",
          mode: "verbatim"
        });
      };
      var peg$f17 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v.join(""),
          mode: "verbatim"
        });
      };
      var peg$f18 = function(v) {
        return v;
      };
      var peg$f19 = function(v) {
        return "{" + v + "}";
      };
      var peg$f20 = function(v) {
        return v;
      };
      var peg$f21 = function(v) {
        return "{" + v + "}";
      };
      var peg$f22 = function() {
        return math.set(false);
      };
      var peg$f23 = function(v) {
        return v.reduce((a2, b) => a2.concat(b), []);
      };
      var peg$f24 = function(v) {
        return v;
      };
      var peg$f25 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v.join("").trim(),
          mode: "verbatim"
        });
      };
      var peg$f26 = function(v) {
        return v;
      };
      var peg$f27 = function(v) {
        return v;
      };
      var peg$f28 = function(v) {
        return v;
      };
      var peg$f29 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v),
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f30 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: normalizeWhitespace(v),
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f31 = function(v) {
        return {
          kind: "Number",
          loc: location(),
          source: text(),
          value: parseInt(v, 10)
        };
      };
      var peg$f32 = function(v) {
        return {
          kind: "StringReference",
          loc: location(),
          source: text(),
          name: v
        };
      };
      var peg$f33 = function(env, v, cenv) {
        return env === cenv;
      };
      var peg$f34 = function(env, v, cenv) {
        if (markup[env]) {
          return {
            kind: "Block",
            loc: location(),
            source: text(),
            value: v,
            markup: { [markup[env]]: true }
          };
        } else {
          return {
            kind: "Environment",
            loc: location(),
            source: text(),
            value: v,
            env
          };
        }
      };
      var peg$f35 = function(mark, chr) {
        return {
          kind: "DiacriticCommand",
          loc: location(),
          source: text(),
          mark,
          dotless: !!chr[1],
          character: chr[1] || chr[0]
        };
      };
      var peg$f36 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v.join("").trim(),
          mode: "verbatim"
        });
      };
      var peg$f37 = function(v) {
        const block = {
          kind: "Block",
          loc: location(),
          source: text(),
          value: v,
          markup: {},
          case: "protect"
        };
        let leadingcmd = block.value.length && (block.value[0].kind.endsWith("Command") || block.value[0].kind === "Environment") ? block.value[0] : null;
        let leadingcmdblockarg = leadingcmd && leadingcmd.kind === "RegularCommand" && leadingcmd.arguments.required.length && leadingcmd.arguments.required[0].kind === "Block" && leadingcmd.arguments.required[0];
        if (leadingcmd) {
          delete block.case;
          if (leadingcmdblockarg && leadingcmdblockarg.case === "protect")
            delete leadingcmdblockarg.case;
          if (markup[leadingcmd.command] && leadingcmd.arguments.required.length === 0) {
            block.markup[markup[leadingcmd.command]] = true;
            block.value.shift();
          }
        }
        return handle_markup_switches(block);
      };
      var peg$f38 = function() {
        return !math.on;
      };
      var peg$f39 = function(mode) {
        return math.set(true);
      };
      var peg$f40 = function(mode, v) {
        return math.set(false);
      };
      var peg$f41 = function(mode, v) {
        return {
          kind: mode == "$$" ? "DisplayMath" : "InlineMath",
          loc: location(),
          source: text(),
          value: v,
          case: "protect",
          markup: {}
        };
      };
      var peg$f42 = function(v) {
        return {
          kind: "LineComment",
          loc: location(),
          source: text(),
          value: v
        };
      };
      var peg$f43 = function() {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: "\\",
          arguments: {
            optional: [],
            required: []
          }
        };
      };
      var peg$f44 = function() {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: "par",
          arguments: {
            optional: [],
            required: []
          }
        };
      };
      var peg$f45 = function(mode, v) {
        if (v.kind === "Block")
          v = v.value;
        return {
          kind: mode === "_" ? "SubscriptCommand" : "SuperscriptCommand",
          loc: location(),
          source: text(),
          value: v
        };
      };
      var peg$f46 = function(mark, chr) {
        return {
          kind: "DiacriticCommand",
          loc: location(),
          source: text(),
          mark,
          dotless: !!chr[1],
          character: chr[1] || chr[0]
        };
      };
      var peg$f47 = function(mark, chr) {
        return {
          kind: "DiacriticCommand",
          loc: location(),
          source: text(),
          mark,
          dotless: !!chr[1],
          character: chr[1] || chr[0]
        };
      };
      var peg$f48 = function(mark, v) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: mark,
          arguments: {
            optional: [],
            required: [protect(v)]
          }
        };
      };
      var peg$f49 = function(v) {
        return {
          kind: "SymbolCommand",
          loc: location(),
          source: text(),
          command: v
        };
      };
      var peg$f50 = function(cmd, name) {
        return name.value.length == 1 && name.value[0].kind === "RegularCommand";
      };
      var peg$f51 = function(cmd, name, optional, def) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional: [],
            required: [name, def]
          }
        };
      };
      var peg$f52 = function(cmd, url) {
        url.value = url.value.replace(/\\([\#%])/g, "$1");
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional: [],
            required: [url]
          }
        };
      };
      var peg$f53 = function(cmd, url, label) {
        url.value = url.value.replace(/\\([\#%])/g, "$1");
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional: [],
            required: [url, label]
          }
        };
      };
      var peg$f54 = function(cmd) {
        return verbatimCommands.includes(cmd) && has_arguments[cmd] === 2;
      };
      var peg$f55 = function(cmd, optional, req1, req2) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [protect(req1), protect(req2)]
          }
        };
      };
      var peg$f56 = function(cmd) {
        return verbatimCommands.includes(cmd) && has_arguments[cmd] === 1;
      };
      var peg$f57 = function(cmd, optional, req) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [protect(req)]
          }
        };
      };
      var peg$f58 = function(cmd) {
        return has_arguments[cmd] === 2;
      };
      var peg$f59 = function(cmd, optional, req1, req2) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [req1, req2]
          }
        };
      };
      var peg$f60 = function(cmd) {
        return has_arguments[cmd] === 1;
      };
      var peg$f61 = function(cmd, optional, req) {
        let m2;
        if (req.kind === "Block") {
          switch (cmd) {
            case "textsuperscript":
            case "sp":
              req.markup.sup = true;
              break;
            case "textsubscript":
            case "sb":
              req.markup.sub = true;
              break;
            case "textsc":
              req.markup.smallCaps = true;
              break;
            case "enquote":
            case "mkbibquote":
              req.markup.enquote = true;
              break;
            case "textbf":
            case "mkbibbold":
              req.markup.bold = true;
              break;
            case "emph":
            case "textit":
            case "mkbibitalic":
            case "mkbibemph":
              req.markup.italics = true;
              break;
            default:
              if (m2 = cmd.match(/^((sub)*)section$/)) {
                req.markup[`h${m2[1].length / 3 + 1}`] = true;
              }
          }
        }
        if (cmd === "bibcyr")
          delete req.case;
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: [req]
          }
        };
      };
      var peg$f62 = function(cmd, optional) {
        return {
          kind: "RegularCommand",
          loc: location(),
          source: text(),
          command: cmd,
          arguments: {
            optional,
            required: []
          }
        };
      };
      var peg$f63 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: v,
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f64 = function(v) {
        return basicTextConversions({
          kind: "Text",
          loc: location(),
          source: text(),
          value: normalizeWhitespace([v]),
          mode: math.on ? "math" : "text"
        });
      };
      var peg$f65 = function(v) {
        return v;
      };
      var peg$currPos = 0;
      var peg$savedPos = 0;
      var peg$posDetailsCache = [{ line: 1, column: 1 }];
      var peg$maxFailPos = 0;
      var peg$maxFailExpected = [];
      var peg$silentFails = 0;
      var peg$result;
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
      function text() {
        return input.substring(peg$savedPos, peg$currPos);
      }
      function offset2() {
        return peg$savedPos;
      }
      function range() {
        return {
          source: peg$source,
          start: peg$savedPos,
          end: peg$currPos
        };
      }
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }
      function expected(description, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
      }
      function error(message, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location2);
      }
      function peg$literalExpectation(text2, ignoreCase) {
        return { type: "literal", text: text2, ignoreCase };
      }
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts, inverted, ignoreCase };
      }
      function peg$anyExpectation() {
        return { type: "any" };
      }
      function peg$endExpectation() {
        return { type: "end" };
      }
      function peg$otherExpectation(description) {
        return { type: "other", description };
      }
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
          return details;
        } else {
          p = pos - 1;
          while (!peg$posDetailsCache[p]) {
            p--;
          }
          details = peg$posDetailsCache[p];
          details = {
            line: details.line,
            column: details.column
          };
          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }
            p++;
          }
          peg$posDetailsCache[pos] = details;
          return details;
        }
      }
      function peg$computeLocation(startPos, endPos, offset3) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        var res = {
          source: peg$source,
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column
          }
        };
        if (offset3 && peg$source && typeof peg$source.offset === "function") {
          res.start = peg$source.offset(res.start);
          res.end = peg$source.offset(res.end);
        }
        return res;
      }
      function peg$fail(expected2) {
        if (peg$currPos < peg$maxFailPos) {
          return;
        }
        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected2);
      }
      function peg$buildSimpleError(message, location2) {
        return new peg$SyntaxError(message, null, null, location2);
      }
      function peg$buildStructuredError(expected2, found, location2) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
      }
      function peg$parseBibliography() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = [];
        s3 = peg$parseNode();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNode();
        }
        s3 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f0(s2);
        return s0;
      }
      function peg$parseComment() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1) {
            s3 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e1);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__h();
            s5 = peg$parseBracedComment();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f1(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1) {
              s3 = input.substr(peg$currPos, 7);
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__h();
              s5 = [];
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
              }
              s6 = [];
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e3);
                }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
              }
              peg$savedPos = s0;
              s0 = peg$f2(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e4);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$r0.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
              }
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e3);
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
              }
              peg$savedPos = s0;
              s0 = peg$f3(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseNode() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseComment();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePreambleExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parseStringDeclaration();
            if (s1 === peg$FAILED) {
              s1 = peg$parseEntry();
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f4(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseBracedComment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c2;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e5);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e6);
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseBracedComment();
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseBracedComment();
            }
          }
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e7);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f5(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseEntry() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          s3 = peg$currPos;
          s4 = [];
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e8);
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$r4.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e8);
                }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (peg$r5.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = peg$parseEntryId();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s8 = peg$parse__();
              s9 = [];
              s10 = peg$parseField();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parseField();
              }
              s10 = peg$parse__();
              if (peg$r6.test(input.charAt(peg$currPos))) {
                s11 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e10);
                }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse__();
                peg$savedPos = s0;
                s0 = peg$f6(s3, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parsePreambleExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c4) {
            s3 = input.substr(peg$currPos, 8);
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e11);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (peg$r5.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = [];
              s8 = peg$parseEnvironment();
              if (s8 === peg$FAILED) {
                s8 = peg$parseBlock();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseMath();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseCommand();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseText();
                    }
                  }
                }
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseEnvironment();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseBlock();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseMath();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseCommand();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseText();
                      }
                    }
                  }
                }
              }
              s8 = peg$parse__();
              if (peg$r6.test(input.charAt(peg$currPos))) {
                s9 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e10);
                }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parse__();
                peg$savedPos = s0;
                s0 = peg$f7(s5, s7, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseStringDeclaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c5) {
            s3 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e12);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (peg$r5.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              s7 = peg$parseVariableName();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseFieldSeparator();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseRegularValue();
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseRegularValue();
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse__();
                    if (peg$r6.test(input.charAt(peg$currPos))) {
                      s11 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e10);
                      }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse__();
                      peg$savedPos = s0;
                      s0 = peg$f8(s7, s9);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseEntryId() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$currPos;
        s3 = [];
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e13);
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r7.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e13);
            }
          }
        }
        s2 = input.substring(s2, peg$currPos);
        s3 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c6;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e14);
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f9(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseField() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        s1 = peg$parseFieldName();
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$f10(s1);
          if (s2) {
            s2 = void 0;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFieldSeparator();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s4 = peg$c2;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                peg$silentFails--;
                if (s6 !== peg$FAILED) {
                  peg$currPos = s5;
                  s5 = void 0;
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseVerbatimFieldValue();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s7 = peg$c3;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e7);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parseFieldTerminator();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseFieldTerminator();
                      }
                      peg$savedPos = s0;
                      s0 = peg$f11(s1, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFieldName();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$f12(s1);
            if (s2) {
              s2 = void 0;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseFieldSeparator();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseVerbatimFieldValue();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseFieldTerminator();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseFieldTerminator();
                  }
                  peg$savedPos = s0;
                  s0 = peg$f13(s1, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFieldName();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseFieldSeparator();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseFieldValue();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseFieldTerminator();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseFieldTerminator();
                  }
                  peg$savedPos = s0;
                  s0 = peg$f14(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseFieldName() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$currPos;
        s3 = [];
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r8.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e15);
              }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f15(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseVerbatimFieldValue() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c7;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e16);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseVerbatimString();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e16);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseVerbatimText();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseVerbatimText();
            }
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseVerbatimText() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e6);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f18(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parseVerbatimText();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseVerbatimText();
            }
            s2 = input.substring(s2, peg$currPos);
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f19(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseVerbatimString() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e17);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r9.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e17);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f20(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c2;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e5);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parseVerbatimString();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseVerbatimString();
            }
            s2 = input.substring(s2, peg$currPos);
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f21(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseFieldValue() {
        var s0, s1, s2, s3;
        s0 = peg$parseNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          peg$savedPos = peg$currPos;
          s1 = peg$f22();
          if (s1) {
            s1 = void 0;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseRegularValue();
            if (s3 === peg$FAILED) {
              s3 = peg$parseStringValue();
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseRegularValue();
              if (s3 === peg$FAILED) {
                s3 = peg$parseStringValue();
              }
            }
            peg$savedPos = s0;
            s0 = peg$f23(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseRegularValue() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c7;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e16);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseEnvironment();
          if (s3 === peg$FAILED) {
            s3 = peg$parseBlock();
            if (s3 === peg$FAILED) {
              s3 = peg$parseMath();
              if (s3 === peg$FAILED) {
                s3 = peg$parseCommand();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseTextNoQuotes();
                }
              }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseEnvironment();
            if (s3 === peg$FAILED) {
              s3 = peg$parseBlock();
              if (s3 === peg$FAILED) {
                s3 = peg$parseMath();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseCommand();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseTextNoQuotes();
                  }
                }
              }
            }
          }
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e16);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseConcat();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f24(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c8) {
            s1 = peg$c8;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e18);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseVerbatimText();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseVerbatimText();
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c3;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseConcat();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f25(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseEnvironment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseBlock();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseMath();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseText();
                    }
                  }
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseMath();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseCommand();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseConcat();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f26(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseStringReference();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseConcat();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f27(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
        return s0;
      }
      function peg$parseStringValue() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parseStringReference();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseConcat();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f28(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseText() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r11.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e20);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r11.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e20);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f29(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseTextNoQuotes() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r12.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e21);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r12.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e21);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f30(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseNumber() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$r13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e22);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r13.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e22);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f31(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseStringReference() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseVariableName();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f32(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseEnvironment() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e23);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          if (peg$r14.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e24);
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$r14.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e24);
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c3;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseEnvironment();
              if (s5 === peg$FAILED) {
                s5 = peg$parseBlock();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseCommand();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseMath();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseText();
                    }
                  }
                }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseEnvironment();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseBlock();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseCommand();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseMath();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseText();
                      }
                    }
                  }
                }
              }
              if (input.substr(peg$currPos, 5) === peg$c10) {
                s5 = peg$c10;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e25);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = [];
                if (peg$r14.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                  }
                }
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    if (peg$r14.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e24);
                      }
                    }
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s6 = input.substring(s6, peg$currPos);
                } else {
                  s6 = s7;
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c3;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e7);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$f33(s2, s4, s6);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f34(s2, s4, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseBlock() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c11) {
          s1 = peg$c11;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e26);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseExtendedDiacritic();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            if (peg$r14.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e24);
              }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s5 = peg$c12;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s5 !== peg$FAILED) {
                if (peg$r15.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c3;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f35(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c8) {
            s1 = peg$c8;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e18);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseVerbatimText();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseVerbatimText();
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c3;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseEnvironment();
              if (s3 === peg$FAILED) {
                s3 = peg$parseBlock();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseCommand();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseMath();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseText();
                    }
                  }
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseEnvironment();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBlock();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseCommand();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseMath();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseText();
                      }
                    }
                  }
                }
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c3;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f37(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseMath() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        peg$savedPos = peg$currPos;
        s1 = peg$f38();
        if (s1) {
          s1 = void 0;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 36) {
            s2 = peg$c13;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e29);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c14) {
              s2 = peg$c14;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e30);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c15) {
                s2 = peg$c15;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e31);
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$f39(s2);
            if (s3) {
              s3 = void 0;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseBlock();
              if (s5 === peg$FAILED) {
                s5 = peg$parseCommand();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseText();
                }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseBlock();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseCommand();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseText();
                  }
                }
              }
              if (input.charCodeAt(peg$currPos) === 36) {
                s5 = peg$c13;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e29);
                }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c14) {
                  s5 = peg$c14;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e30);
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c16) {
                    s5 = peg$c16;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e32);
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$f40(s2, s4);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f41(s2, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseLineComment() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e33);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__h();
          s3 = peg$currPos;
          s4 = [];
          if (peg$r16.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e34);
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$r16.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e34);
                }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEOL();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseEOL();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f42(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseCommand() {
        var s0;
        s0 = peg$parseScriptCommand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLineBreak();
          if (s0 === peg$FAILED) {
            s0 = peg$parseParBreak();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDiacriticCommand();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRegularCommand();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseSymbolCommand();
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parseLineBreak() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (input.substr(peg$currPos, 2) === peg$c18) {
          s2 = peg$c18;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e35);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f43();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseParBreak() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parse__h();
        if (input.charCodeAt(peg$currPos) === 13) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e36);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e37);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__h();
          if (input.charCodeAt(peg$currPos) === 13) {
            s5 = peg$c19;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e36);
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (input.charCodeAt(peg$currPos) === 10) {
            s6 = peg$c20;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e37);
            }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s0;
            s0 = peg$f44();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseScriptCommand() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (peg$r17.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e38);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__h();
          s3 = peg$parseArgument();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f45(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseDiacriticCommand() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e27);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSimpleDiacritic();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            if (peg$r14.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e24);
              }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s5 = peg$c12;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s5 !== peg$FAILED) {
                if (peg$r15.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f46(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e27);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExtendedDiacritic();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c2;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s3 !== peg$FAILED) {
                if (peg$r14.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                  }
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s5 = peg$c12;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e27);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    if (peg$r15.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e28);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c3;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e7);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f47(s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e27);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseExtendedDiacritic();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s4 = peg$c2;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                peg$silentFails--;
                if (s4 !== peg$FAILED) {
                  peg$currPos = s3;
                  s3 = void 0;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseRegularValue();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f48(s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
        return s0;
      }
      function peg$parseSymbolCommand() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e27);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          if (peg$r18.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e39);
            }
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f49(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseRegularCommand() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e27);
          }
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c21) {
            s2 = peg$c21;
            peg$currPos += 10;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e40);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseBlock();
            if (s3 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s4 = peg$f50(s2, s3);
              if (s4) {
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseOptionalArgument();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseOptionalArgument();
                }
                s6 = peg$parseArgument();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f51(s2, s3, s5, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c12;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e27);
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c22) {
              s2 = peg$c22;
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e41);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__h();
              s4 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c2;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              peg$silentFails--;
              if (s5 !== peg$FAILED) {
                peg$currPos = s4;
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseVerbatimFieldValue();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f52(s2, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e27);
              }
            }
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c23) {
                s2 = peg$c23;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e42);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse__h();
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 123) {
                  s5 = peg$c2;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                peg$silentFails--;
                if (s5 !== peg$FAILED) {
                  peg$currPos = s4;
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseVerbatimFieldValue();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseArgument();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f53(s2, s5, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c12;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 5) === peg$c24) {
                  s3 = peg$c24;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e43);
                  }
                }
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = void 0;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 3) === peg$c25) {
                    s4 = peg$c25;
                    peg$currPos += 3;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e44);
                    }
                  }
                  peg$silentFails--;
                  if (s4 === peg$FAILED) {
                    s3 = void 0;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = [];
                    if (peg$r19.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e45);
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$r19.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e45);
                          }
                        }
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = input.substring(s4, peg$currPos);
                    } else {
                      s4 = s5;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s5 = peg$f54(s4);
                      if (s5) {
                        s5 = void 0;
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parseOptionalArgument();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parseOptionalArgument();
                        }
                        s7 = peg$parse__h();
                        s8 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 123) {
                          s9 = peg$c2;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e5);
                          }
                        }
                        peg$silentFails--;
                        if (s9 !== peg$FAILED) {
                          peg$currPos = s8;
                          s8 = void 0;
                        } else {
                          s8 = peg$FAILED;
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseVerbatimFieldValue();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseVerbatimFieldValue();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f55(s4, s6, s9, s10);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s1 = peg$c12;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 5) === peg$c24) {
                    s3 = peg$c24;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e43);
                    }
                  }
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = void 0;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 3) === peg$c25) {
                      s4 = peg$c25;
                      peg$currPos += 3;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e44);
                      }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = void 0;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$currPos;
                      s5 = [];
                      if (peg$r19.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e45);
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          if (peg$r19.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e45);
                            }
                          }
                        }
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        s4 = input.substring(s4, peg$currPos);
                      } else {
                        s4 = s5;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s5 = peg$f56(s4);
                        if (s5) {
                          s5 = void 0;
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parseOptionalArgument();
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parseOptionalArgument();
                          }
                          s7 = peg$parse__h();
                          s8 = peg$currPos;
                          peg$silentFails++;
                          if (input.charCodeAt(peg$currPos) === 123) {
                            s9 = peg$c2;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e5);
                            }
                          }
                          peg$silentFails--;
                          if (s9 !== peg$FAILED) {
                            peg$currPos = s8;
                            s8 = void 0;
                          } else {
                            s8 = peg$FAILED;
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseVerbatimFieldValue();
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f57(s4, s6, s9);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 92) {
                    s1 = peg$c12;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e27);
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 5) === peg$c24) {
                      s3 = peg$c24;
                      peg$currPos += 5;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e43);
                      }
                    }
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                      s2 = void 0;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 3) === peg$c25) {
                        s4 = peg$c25;
                        peg$currPos += 3;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e44);
                        }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = void 0;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        s5 = [];
                        if (peg$r19.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e45);
                          }
                        }
                        if (s6 !== peg$FAILED) {
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            if (peg$r19.test(input.charAt(peg$currPos))) {
                              s6 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e45);
                              }
                            }
                          }
                        } else {
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s4 = input.substring(s4, peg$currPos);
                        } else {
                          s4 = s5;
                        }
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = peg$currPos;
                          s5 = peg$f58(s4);
                          if (s5) {
                            s5 = void 0;
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parseOptionalArgument();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parseOptionalArgument();
                            }
                            s7 = peg$parse__h();
                            s8 = peg$parseArgument();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseArgument();
                              if (s9 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f59(s4, s6, s8, s9);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s1 = peg$c12;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e27);
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 5) === peg$c24) {
                        s3 = peg$c24;
                        peg$currPos += 5;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e43);
                        }
                      }
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = void 0;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 3) === peg$c25) {
                          s4 = peg$c25;
                          peg$currPos += 3;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e44);
                          }
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                          s3 = void 0;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = [];
                          if (peg$r19.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e45);
                            }
                          }
                          if (s6 !== peg$FAILED) {
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              if (peg$r19.test(input.charAt(peg$currPos))) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e45);
                                }
                              }
                            }
                          } else {
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = peg$currPos;
                            s5 = peg$f60(s4);
                            if (s5) {
                              s5 = void 0;
                            } else {
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s6 = [];
                              s7 = peg$parseOptionalArgument();
                              while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                s7 = peg$parseOptionalArgument();
                              }
                              s7 = peg$parse__h();
                              s8 = peg$parseArgument();
                              if (s8 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f61(s4, s6, s8);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 92) {
                        s1 = peg$c12;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e27);
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 5) === peg$c24) {
                          s3 = peg$c24;
                          peg$currPos += 5;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e43);
                          }
                        }
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                          s2 = void 0;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$currPos;
                          peg$silentFails++;
                          if (input.substr(peg$currPos, 3) === peg$c25) {
                            s4 = peg$c25;
                            peg$currPos += 3;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e44);
                            }
                          }
                          peg$silentFails--;
                          if (s4 === peg$FAILED) {
                            s3 = void 0;
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = [];
                            if (peg$r19.test(input.charAt(peg$currPos))) {
                              s6 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e45);
                              }
                            }
                            if (s6 !== peg$FAILED) {
                              while (s6 !== peg$FAILED) {
                                s5.push(s6);
                                if (peg$r19.test(input.charAt(peg$currPos))) {
                                  s6 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e45);
                                  }
                                }
                              }
                            } else {
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos);
                            } else {
                              s4 = s5;
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = [];
                              s6 = peg$parseOptionalArgument();
                              while (s6 !== peg$FAILED) {
                                s5.push(s6);
                                s6 = peg$parseOptionalArgument();
                              }
                              s6 = peg$parse__();
                              peg$savedPos = s0;
                              s0 = peg$f62(s4, s5);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parseOptionalArgument() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c26;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e46);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__h();
          s3 = peg$currPos;
          s4 = [];
          if (peg$r20.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e47);
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$r20.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e47);
                }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__h();
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c27;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e48);
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f63(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseArgument() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = peg$parse__h();
        if (peg$r21.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e49);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse__h();
          s2 = peg$parseBlock();
          if (s2 === peg$FAILED) {
            s2 = peg$parseCommand();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f65(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseVariableName() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (peg$r22.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e50);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$r23.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e51);
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r23.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e51);
              }
            }
          }
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        return s0;
      }
      function peg$parseSimpleDiacritic() {
        var s0;
        if (peg$r24.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e52);
          }
        }
        return s0;
      }
      function peg$parseExtendedDiacritic() {
        var s0;
        if (peg$r25.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e53);
          }
        }
        return s0;
      }
      function peg$parseFieldSeparator() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c28;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e54);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFieldTerminator() {
        var s0;
        s0 = peg$parse_();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s0 = peg$c6;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e14);
            }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseLineComment();
          }
        }
        return s0;
      }
      function peg$parseConcat() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c29;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseEOL() {
        var s0;
        if (peg$r26.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e56);
          }
        }
        return s0;
      }
      function peg$parse_h() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r27.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e58);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r27.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e58);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e57);
          }
        }
        return s0;
      }
      function peg$parse__h() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r27.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e58);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$r27.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e58);
            }
          }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e59);
        }
        return s0;
      }
      function peg$parse_v() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r26.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e56);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r26.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e56);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e60);
          }
        }
        return s0;
      }
      function peg$parse__v() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r26.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e56);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$r26.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e56);
            }
          }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e61);
        }
        return s0;
      }
      function peg$parse_() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r28.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e63);
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r28.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e63);
              }
            }
          }
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e62);
          }
        }
        return s0;
      }
      function peg$parse__() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r28.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e63);
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$r28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e63);
            }
          }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e64);
        }
        return s0;
      }
      const markup = {
        sl: "italics",
        em: "italics",
        it: "italics",
        itshape: "italics",
        bf: "bold",
        bfseries: "bold",
        sc: "smallCaps",
        scshape: "smallCaps",
        tt: "fixedWidth",
        texttt: "fixedWidth",
        rm: "roman",
        sf: "sansSerif",
        verb: "verbatim"
      };
      const unnestFields = (options.unnestFields || []).map((field) => field.toLowerCase());
      const verbatimFields = (options.verbatimFields || ["urlraw", "url", "doi", "file", "files", "eprint", "verba", "verbb", "verbc"]).map((field) => typeof field === "string" ? field.toLowerCase() : field);
      const verbatimCommands = options.verbatimCommands || ["texttt", "url"];
      function isVerbatimField(name) {
        return verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
      }
      function normalizeWhitespace(textArr) {
        if (typeof textArr === "string")
          textArr = Array.from(textArr);
        return textArr.reduce((prev, curr) => {
          if (/\s/.test(curr)) {
            if (/\s/.test(prev[prev.length - 1])) {
              return prev;
            } else {
              return prev + " ";
            }
          }
          return prev + curr;
        }, "");
      }
      const has_arguments = {
        ElsevierGlyph: 1,
        end: 1,
        begin: 1,
        bibcyr: 1,
        bibstring: 1,
        chsf: 1,
        cite: 1,
        citeauthor: 1,
        cyrchar: 1,
        ding: 1,
        emph: 1,
        enquote: 1,
        frac: 2,
        href: 2,
        hspace: 1,
        mathrm: 1,
        mbox: 1,
        mkbibbold: 1,
        mkbibemph: 1,
        mkbibitalic: 1,
        mkbibquote: 1,
        newcommand: 2,
        noopsort: 1,
        ocirc: 1,
        section: 1,
        sb: 1,
        sp: 1,
        subsection: 1,
        subsubsection: 1,
        subsubsubsection: 1,
        t: 1,
        textbf: 1,
        textcite: 1,
        textit: 1,
        textrm: 1,
        textsc: 1,
        textsubscript: 1,
        textsuperscript: 1,
        textup: 1,
        texttt: 1,
        url: 1,
        vphantom: 1,
        vspace: 1
      };
      if (options.combiningDiacritics) {
        for (const cmd of options.combiningDiacritics) {
          has_arguments[cmd] = 1;
        }
      }
      function say() {
        console.log(JSON.stringify(Array.from(arguments), null, 2));
        return true;
      }
      function peek(n) {
        return input.substr(peg$savedPos, n);
      }
      const math = {
        on: false,
        set: function(state) {
          this.on = state;
          return true;
        }
      };
      function basicTextConversions(node) {
        if (node.kind !== "Text")
          throw new Error(node.kind + " is not a Text node");
        switch (node.mode) {
          case "verbatim":
            break;
          case "math":
            node.value = node.value.replace(/~/g, "\xA0");
            break;
          case "text":
            node.value = node.value.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/</g, "\xA1").replace(/>/g, "\xBF").replace(/~/g, "\xA0").replace(/``/g, options.markup.enquote.open).replace(/''/g, options.markup.enquote.close);
            break;
          default:
            throw new Error(`Unexpected text mode ${node.mode}`);
        }
        return node;
      }
      function protect(v) {
        let source;
        if (Array.isArray(v)) {
          source = v.map((e) => e.source).join("");
        } else {
          v = [v];
          source = v.source;
        }
        return {
          kind: "Block",
          value: v,
          markup: {},
          case: "protect",
          source
        };
      }
      function handle_markup_switches(block) {
        const value = block.value;
        if (!Array.isArray(value))
          return block;
        block.value = [];
        const pseudo = {
          block: null,
          markup: {}
        };
        function pseudo_block() {
          pseudo.block = {
            kind: "Block",
            loc: location(),
            source: "",
            value: [],
            markup: JSON.parse(JSON.stringify(pseudo.markup)),
            pseudo: true
          };
          block.value.push(pseudo.block);
        }
        for (const node of value) {
          if (node.kind === "Environment" || node.kind === "Block") {
            block.value.push(node);
            if (Object.keys(pseudo.markup).length) {
              pseudo_block();
            } else {
              pseudo.block = null;
            }
            continue;
          }
          if (node.kind === "RegularCommand" && markup[node.command]) {
            if (pseudo.markup.italics) {
              delete pseudo.markup.italics;
              if (markup[node.command] !== "italics")
                pseudo.markup[markup[node.command]] = true;
            } else {
              pseudo.markup[markup[node.command]] = true;
            }
            if (Object.keys(pseudo.markup).length) {
              pseudo_block();
            } else {
              pseudo.block = null;
            }
          }
          if (pseudo.block) {
            pseudo.block.source += node.source;
            pseudo.block.value.push(node);
          } else {
            block.value.push(node);
          }
        }
        block.value = block.value.filter((node) => !(node.pseudo && node.value.length === 0));
        return block;
      }
      peg$result = peg$startRuleFunction();
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
      }
    }
    module2.exports = {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    };
  }
});

// node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/chunker.js
var require_chunker = __commonJS({
  "node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/chunker.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.promises = exports.parse = void 0;
    var ParseError = class extends Error {
      constructor(message, parser) {
        message += ` @ ${parser.pos}`;
        if (parser.parsing)
          message += ` in ${JSON.stringify(parser.parsing)}`;
        super(message);
        this.name = "ParseError";
      }
    };
    var letter = new RegExp("[" + [
      /\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A/.source,
      /\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC/.source,
      /\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A/.source,
      /\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F/.source,
      /\u00AA\u00BA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source
    ].join("") + "]");
    var BibtexParser = class {
      constructor() {
        this.pos = 0;
        this.entries = 0;
        this.parsing = null;
        this.chunks = [];
      }
      parse(input, options = {}) {
        this.max_entries = options.max_entries || 0;
        this.input = input;
        this.bibtex();
        return this.chunks;
      }
      async parseAsync(input, options = {}) {
        this.max_entries = options.max_entries || 0;
        this.input = input;
        await this.bibtexAsync();
        return this.chunks;
      }
      isWhitespace(s, horizontalOnly = false) {
        return s === " " || s === "	" || !horizontalOnly && (s === "\r" || s === "\n");
      }
      match(s) {
        this.skipWhitespace();
        if (this.input.substr(this.pos, s.length) !== s) {
          throw new ParseError(`Token mismatch, expected ${JSON.stringify(s)}, found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
        }
        this.pos += s.length;
        this.skipWhitespace();
      }
      tryMatch(s) {
        this.skipWhitespace();
        return this.input.substr(this.pos, s.length) === s;
      }
      skipWhitespace() {
        while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
          this.pos++;
        if (this.input[this.pos] === "%") {
          while (this.pos < this.input.length && this.input[this.pos] !== "\n")
            this.pos++;
          while (this.pos < this.input.length && this.isWhitespace(this.input[this.pos]))
            this.pos++;
        }
      }
      value_braces() {
        let bracecount = 0;
        this.match("{");
        const start3 = this.pos;
        let math = false;
        while (true) {
          switch (this.input[this.pos]) {
            case "\\":
              this.pos += 1;
              break;
            case "{":
              bracecount++;
              break;
            case "}":
              if (bracecount === 0) {
                if (math)
                  throw new ParseError("Unclosed math section", this);
                this.pos++;
                return this.input.substring(start3, this.pos - 1);
              }
              bracecount--;
              break;
            case "$":
              math = !math;
              break;
          }
          this.pos++;
          if (this.pos >= this.input.length) {
            throw new ParseError(`Unterminated brace-value ${JSON.stringify(this.input.substr(start3, 20))}`, this);
          }
        }
      }
      value_quotes() {
        this.match('"');
        const start3 = this.pos;
        let bracecount = 0;
        while (true) {
          switch (this.input[this.pos]) {
            case "\\":
              this.pos += 1;
              break;
            case "{":
              bracecount++;
              break;
            case "}":
              bracecount--;
              break;
            case '"':
              if (bracecount <= 0) {
                this.pos++;
                return this.input.substring(start3, this.pos - 1);
              }
          }
          this.pos++;
          if (this.pos >= this.input.length) {
            throw new ParseError(`Unterminated quote-value ${JSON.stringify(this.input.substr(start3, 20))}`, this);
          }
        }
      }
      single_value() {
        if (this.tryMatch("{")) {
          return this.value_braces();
        } else if (this.tryMatch('"')) {
          return this.value_quotes();
        } else {
          return this.key();
        }
      }
      value() {
        const values = [];
        values.push(this.single_value());
        while (this.tryMatch("#")) {
          this.match("#");
          values.push(this.single_value());
        }
        return values.join("");
      }
      key(allowUnicode = false) {
        const start3 = this.pos;
        while (true) {
          if (this.pos === this.input.length) {
            throw new ParseError("Runaway key", this);
          }
          if (this.input[this.pos].match(/['a-zA-Z0-9&;_:\\./-]/)) {
            this.pos++;
          } else if (allowUnicode && this.input[this.pos].match(letter)) {
            this.pos++;
          } else {
            return this.input.substring(start3, this.pos);
          }
        }
      }
      key_equals_value() {
        const key = this.key();
        if (!this.tryMatch("=")) {
          throw new ParseError(`... = value expected, equals sign missing: ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
        }
        this.match("=");
        const val = this.value();
        return [key, val];
      }
      key_value_list() {
        this.key_equals_value();
        while (this.tryMatch(",")) {
          this.match(",");
          if (this.tryMatch("}")) {
            break;
          }
          this.key_equals_value();
        }
      }
      entry(_d) {
        this.parsing = this.key(true);
        this.match(",");
        this.key_value_list();
      }
      directive() {
        this.match("@");
        return `@${this.key()}`.toLowerCase();
      }
      string() {
        this.key_equals_value();
      }
      preamble() {
        this.value();
      }
      comment() {
        while (this.isWhitespace(this.input[this.pos], true))
          this.pos++;
        if (this.input[this.pos] === "{") {
          this.value_braces();
          return;
        }
        while (this.input[this.pos] !== "\n" && this.pos < this.input.length)
          this.pos++;
      }
      hasMore() {
        if (this.max_entries && this.entries >= this.max_entries)
          return false;
        return this.pos < this.input.length;
      }
      bibtex() {
        while (this.hasMore()) {
          this.parseNext();
        }
      }
      bibtexAsync() {
        return this.hasMore() ? new Promise((resolve) => resolve(this.parseNext())).then(() => this.bibtexAsync()) : Promise.resolve(null);
      }
      parseNext() {
        const chunk = {
          offset: {
            pos: this.pos,
            line: this.input.substring(0, this.pos).split("\n").length - 1
          },
          error: null,
          text: null
        };
        this.skipWhitespace();
        if (this.pos >= this.input.length)
          return;
        let guard = "";
        try {
          const d = this.directive();
          switch (d) {
            case "@string":
              this.match("{");
              this.string();
              this.match("}");
              chunk.stringDeclaration = true;
              break;
            case "@preamble":
              this.match("{");
              this.preamble();
              this.match("}");
              chunk.preamble = true;
              break;
            case "@comment":
              this.comment();
              chunk.comment = true;
              break;
            default:
              if (this.tryMatch("{")) {
                guard = "{}";
              } else if (this.tryMatch("(")) {
                guard = "()";
              } else {
                throw new ParseError(`Token mismatch, expected '{' or '(', found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
              }
              this.match(guard[0]);
              this.entry(d);
              this.match(guard[1]);
              chunk.entry = true;
              this.entries++;
              break;
          }
        } catch (err) {
          if (err.name !== "ParseError")
            throw err;
          chunk.error = err.message;
          this.pos = chunk.offset.pos + 1;
          while (this.pos < this.input.length && this.input[this.pos] !== "@")
            this.pos++;
        }
        const text = this.input.substring(chunk.offset.pos, this.pos);
        const last = this.chunks.length - 1;
        if (chunk.error && this.chunks.length && this.chunks[last].error) {
          this.chunks[last].text += text;
        } else {
          chunk.text = text;
          this.chunks.push(chunk);
        }
      }
    };
    function parse2(input, options = {}) {
      return new BibtexParser().parse(input, options);
    }
    exports.parse = parse2;
    exports.promises = {
      async parse(input, options = {}) {
        return await new BibtexParser().parseAsync(input, options);
      }
    };
  }
});

// node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/jabref.js
var require_jabref = __commonJS({
  "node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/jabref.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = void 0;
    function decode(s, sep = ";") {
      s = s.replace(/\r?\n/g, "");
      let pos = 0;
      const records = [""];
      while (pos < s.length) {
        switch (s[pos]) {
          case "\\":
            pos++;
            records[0] += s[pos];
            break;
          case sep:
            records.unshift("");
            break;
          default:
            records[0] += s[pos];
        }
        pos++;
      }
      return records.reverse().filter((record) => record);
    }
    function parse2(comments) {
      const result = {
        root: [],
        groups: {}
      };
      const levels = [];
      const decoded = {
        fileDirectory: null,
        groupsversion: null,
        groupstree: null,
        grouping: null,
        databaseType: null
      };
      comments = comments.filter((comment) => {
        const m2 = comment.match(/^jabref-meta:\s*([^:]+):([\s\S]*)/);
        if (m2) {
          decoded[m2[1]] = decode(m2[2]);
          return false;
        }
        return true;
      });
      if (decoded.groupsversion)
        result.groupsversion = parseInt(decoded.groupsversion[0].trim()) || decoded.groupsversion[0];
      if (decoded.fileDirectory)
        result.fileDirectory = decoded.fileDirectory[0];
      if (decoded.databaseType)
        result.databaseType = decoded.databaseType[0];
      for (const tree of ["groupstree", "grouping"]) {
        if (!decoded[tree])
          continue;
        for (const encoded of decoded[tree]) {
          const fields = decode(encoded);
          const level_type_name = decode(fields.shift(), ":");
          const m2 = /^([0-9]+) (.+)/.exec(level_type_name[0]);
          if (!m2)
            break;
          const level = parseInt(m2[1]);
          const type2 = m2[2];
          if (type2 === "AllEntriesGroup")
            continue;
          const name = level_type_name[1];
          const intersection = decode(fields.shift())[0];
          const keys = tree === "grouping" ? [] : fields.map((field) => decode(field)[0]);
          const group = {
            name,
            entries: keys,
            groups: []
          };
          result.groups[name] = result.groups[name] || group;
          if (levels.length < level) {
            levels.push(group);
          } else {
            levels[level - 1] = group;
          }
          if (level === 1) {
            result.root.push(group);
          } else {
            const parent = levels[level - 2];
            switch (intersection) {
              case "0":
                break;
              case "1":
                group.entries = group.entries.filter((key) => parent.entries.includes(key));
                break;
              case "2":
                group.entries = group.entries.concat(parent.entries.filter((key) => !group.entries.includes(key)));
                break;
            }
            levels[level - 2].groups.push(group);
          }
        }
      }
      return { comments, jabref: result };
    }
    exports.parse = parse2;
  }
});

// node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/ascii.json
var require_ascii = __commonJS({
  "node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/ascii.json"(exports, module2) {
    module2.exports = {
      "#": { math: "\\#", text: "\\#" },
      $: { math: "\\$", text: "\\$" },
      "%": { math: "\\%", text: "\\%" },
      "&": { math: "\\&", text: "\\&" },
      "/\u200B": { text: "\\slash", commandspacer: true },
      "<": { math: "<" },
      ">": { math: ">" },
      "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
      "^": { math: "\\sphat", text: "\\^" },
      _: { math: "\\_", text: "\\_" },
      i\uFE20a\uFE21: { text: "\\t{ia}" },
      "{": { math: "\\lbrace", text: "\\{" },
      "}": { math: "\\rbrace", text: "\\}" },
      "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
      "\xA0": { math: "~", space: true, text: "~" },
      "\xA1": { text: "\\textexclamdown", commandspacer: true },
      "\xA2": { math: "\\cent", text: "\\textcent", commandspacer: true, textpackages: ["textcomp"] },
      "\xA3": { math: "\\pounds", text: "\\textsterling", commandspacer: true, textpackages: ["textcomp"] },
      "\xA4": { text: "\\textcurrency", commandspacer: true, textpackages: ["textcomp"] },
      "\xA5": { math: "\\yen", text: "\\textyen", commandspacer: true, textpackages: ["textcomp"] },
      "\xA6": { text: "\\textbrokenbar", commandspacer: true, textpackages: ["textcomp"] },
      "\xA7": { text: "\\textsection", commandspacer: true, textpackages: ["textcomp"] },
      "\xA8": { math: "\\spddot", text: "\\textasciidieresis", commandspacer: true },
      "\xA9": { text: "\\textcopyright", commandspacer: true, textpackages: ["textcomp"] },
      \u00AA: { text: "\\textordfeminine", commandspacer: true, textpackages: ["textcomp"] },
      "\xAB": { text: "\\guillemotleft", commandspacer: true },
      "\xAC": { math: "\\lnot" },
      "\xAD": { math: "\\-", text: "\\-" },
      "\xAE": { math: "\\circledR", text: "\\textregistered", commandspacer: true, textpackages: ["textcomp"] },
      "\xAF": { text: "\\textasciimacron", commandspacer: true },
      "\xB0": { math: "^\\circ", text: "\\textdegree", commandspacer: true, textpackages: ["textcomp"] },
      "\xB1": { math: "\\pm" },
      "\xB2": { math: "^{2}" },
      "\xB3": { math: "^{3}" },
      "\xB4": { text: "\\textasciiacute", commandspacer: true },
      \u00B5: { text: "\\textmu", commandspacer: true },
      "\xB6": { text: "\\textparagraph", commandspacer: true, textpackages: ["textcomp"] },
      "\xB7": { math: "\\cdot" },
      "\xB8": { text: "\\c", commandspacer: true },
      "\xB9": { math: "^{1}" },
      \u00BA: { text: "\\textordmasculine", commandspacer: true, textpackages: ["textcomp"] },
      "\xBB": { text: "\\guillemotright", commandspacer: true },
      "\xBC": { math: "\\frac{1}{4}" },
      "\xBD": { math: "\\frac{1}{2}" },
      "\xBE": { math: "\\frac{3}{4}" },
      "\xBF": { text: "\\textquestiondown", commandspacer: true },
      \u00C0: { text: "\\`A" },
      \u00C1: { text: "\\'A" },
      \u00C2: { text: "\\^A" },
      \u00C3: { text: "\\~A" },
      \u00C4: { text: '\\"A' },
      \u00C5: { text: "\\AA", commandspacer: true },
      \u00C6: { text: "\\AE", commandspacer: true },
      \u00C7: { text: "\\c{C}" },
      \u00C8: { text: "\\`E" },
      \u00C9: { text: "\\'E" },
      \u00CA: { text: "\\^E" },
      \u00CB: { text: '\\"E' },
      \u00CC: { text: "\\`I" },
      \u00CD: { text: "\\'I" },
      \u00CE: { text: "\\^I" },
      \u00CF: { text: '\\"I' },
      \u00D0: { text: "\\DH", commandspacer: true },
      \u00D1: { text: "\\~N" },
      \u00D2: { text: "\\`O" },
      \u00D3: { text: "\\'O" },
      \u00D4: { text: "\\^O" },
      \u00D5: { text: "\\~O" },
      \u00D6: { text: '\\"O' },
      "\xD7": { math: "\\times", text: "\\texttimes", commandspacer: true },
      \u00D8: { text: "\\O", commandspacer: true },
      \u00D9: { text: "\\`U" },
      \u00DA: { text: "\\'U" },
      \u00DB: { text: "\\^U" },
      \u00DC: { text: '\\"U' },
      \u00DD: { text: "\\'Y" },
      \u00DE: { text: "\\TH", commandspacer: true },
      \u00DF: { text: "\\ss", commandspacer: true },
      \u00E0: { text: "\\`a" },
      \u00E1: { text: "\\'a" },
      \u00E2: { text: "\\^a" },
      \u00E3: { text: "\\~a" },
      \u00E4: { text: '\\"a' },
      \u00E5: { text: "\\aa", commandspacer: true },
      \u00E6: { text: "\\ae", commandspacer: true },
      \u00E7: { text: "\\c{c}" },
      \u00E8: { text: "\\`e" },
      \u00E9: { text: "\\'e" },
      \u00EA: { text: "\\^e" },
      \u00EB: { text: '\\"e' },
      \u00EC: { text: "\\`i" },
      \u00ED: { text: "\\'i" },
      \u00EE: { text: "\\^i" },
      \u00EF: { text: '\\"i' },
      \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "\\dh", commandspacer: true },
      \u00F1: { text: "\\~n" },
      \u00F2: { text: "\\`o" },
      \u00F3: { text: "\\'o" },
      \u00F4: { text: "\\^o" },
      \u00F5: { text: "\\~o" },
      \u00F6: { text: '\\"o' },
      "\xF7": { math: "\\div" },
      \u00F8: { text: "\\o", commandspacer: true },
      \u00F9: { text: "\\`u" },
      \u00FA: { text: "\\'u" },
      \u00FB: { text: "\\^u" },
      \u00FC: { text: '\\"u' },
      \u00FD: { text: "\\'y" },
      \u00FE: { text: "\\th", commandspacer: true },
      \u00FF: { text: '\\"y' },
      \u0100: { text: "\\=A" },
      \u0101: { text: "\\=a" },
      \u0102: { text: "\\u{A}" },
      \u0103: { text: "\\u{a}" },
      \u0104: { text: "\\k{A}" },
      \u0105: { text: "\\k{a}" },
      \u0106: { text: "\\'C" },
      \u0107: { text: "\\'c" },
      \u0108: { text: "\\^C" },
      \u0109: { text: "\\^c" },
      \u010A: { text: "\\.C" },
      \u010B: { text: "\\.c" },
      \u010C: { text: "\\v{C}" },
      \u010D: { text: "\\v{c}" },
      \u010E: { text: "\\v{D}" },
      \u010F: { text: "\\v{d}" },
      \u0110: { text: "\\DJ", commandspacer: true },
      \u0111: { text: "\\dj", commandspacer: true },
      \u0112: { text: "\\=E" },
      \u0113: { text: "\\=e" },
      \u0114: { text: "\\u{E}" },
      \u0115: { text: "\\u{e}" },
      \u0116: { text: "\\.E" },
      \u0117: { text: "\\.e" },
      \u0118: { text: "\\k{E}" },
      \u0119: { text: "\\k{e}" },
      \u011A: { text: "\\v{E}" },
      \u011B: { text: "\\v{e}" },
      \u011C: { text: "\\^G" },
      \u011D: { text: "\\^g" },
      \u011E: { text: "\\u{G}" },
      \u011F: { text: "\\u{g}" },
      \u0120: { text: "\\.G" },
      \u0121: { text: "\\.g" },
      \u0122: { text: "\\c{G}" },
      \u0123: { text: "\\c{g}" },
      \u0124: { text: "\\^H" },
      \u0125: { text: "\\^h" },
      \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
      \u0127: { math: "\\Elzxh" },
      \u0128: { text: "\\~I" },
      \u0129: { text: "\\~i" },
      \u012A: { text: "\\=I" },
      \u012B: { text: "\\=i" },
      \u012C: { text: "\\u{I}" },
      \u012D: { text: "{\\u \\i}" },
      \u012E: { text: "\\k{I}" },
      \u012F: { text: "\\k{i}" },
      \u0130: { text: "\\.I" },
      \u0131: { math: "\\imath", text: "\\i", commandspacer: true },
      \u0132: { text: "IJ" },
      \u0133: { text: "ij" },
      \u0134: { text: "\\^J" },
      \u0135: { text: "\\^\\j", commandspacer: true },
      \u0136: { text: "\\c{K}" },
      \u0137: { text: "\\c{k}" },
      \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
      \u0139: { text: "\\'L" },
      \u013A: { text: "\\'l" },
      \u013B: { text: "\\c{L}" },
      \u013C: { text: "\\c{l}" },
      \u013D: { text: "\\v{L}" },
      \u013E: { text: "\\v{l}" },
      \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
      \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
      \u0141: { text: "\\L", commandspacer: true },
      \u0142: { text: "\\l", commandspacer: true },
      \u0143: { text: "\\'N" },
      \u0144: { text: "\\'n" },
      \u0145: { text: "\\c{N}" },
      \u0146: { text: "\\c{n}" },
      \u0147: { text: "\\v{N}" },
      \u0148: { text: "\\v{n}" },
      \u0149: { text: "'n" },
      \u014A: { text: "\\NG", commandspacer: true },
      \u014B: { text: "\\ng", commandspacer: true },
      \u014C: { text: "\\=O" },
      \u014D: { text: "\\=o" },
      \u014E: { text: "\\u{O}" },
      \u014F: { text: "\\u{o}" },
      \u0150: { text: "\\H{O}" },
      \u0151: { text: "\\H{o}" },
      \u0152: { text: "\\OE", commandspacer: true },
      \u0153: { text: "\\oe", commandspacer: true },
      \u0154: { text: "\\'R" },
      \u0155: { text: "\\'r" },
      \u0156: { text: "\\c{R}" },
      \u0157: { text: "\\c{r}" },
      \u0158: { text: "\\v{R}" },
      \u0159: { text: "\\v{r}" },
      \u015A: { text: "\\'S" },
      \u015B: { text: "\\'s" },
      \u015C: { text: "\\^S" },
      \u015D: { text: "\\^s" },
      \u015E: { text: "\\c{S}" },
      \u015F: { text: "\\c{s}" },
      \u0160: { text: "\\v{S}" },
      \u0161: { text: "\\v{s}" },
      \u0162: { text: "\\c{T}" },
      \u0163: { text: "\\c{t}" },
      \u0164: { text: "\\v{T}" },
      \u0165: { text: "\\v{t}" },
      \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
      \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
      \u0168: { text: "\\~U" },
      \u0169: { text: "\\~u" },
      \u016A: { text: "\\=U" },
      \u016B: { text: "\\=u" },
      \u016C: { text: "\\u{U}" },
      \u016D: { text: "\\u{u}" },
      \u016E: { text: "\\r{U}" },
      \u016F: { text: "\\r{u}" },
      \u0170: { text: "\\H{U}" },
      \u0171: { text: "\\H{u}" },
      \u0172: { text: "\\k{U}" },
      \u0173: { text: "\\k{u}" },
      \u0174: { text: "\\^W" },
      \u0175: { text: "\\^w" },
      \u0176: { text: "\\^Y" },
      \u0177: { text: "\\^y" },
      \u0178: { text: '\\"Y' },
      \u0179: { text: "\\'Z" },
      \u017A: { text: "\\'z" },
      \u017B: { text: "\\.Z" },
      \u017C: { text: "\\.z" },
      \u017D: { text: "\\v{Z}" },
      \u017E: { text: "\\v{z}" },
      \u017F: { text: "s" },
      \u0192: { math: "f" },
      \u0195: { text: "\\texthvlig", commandspacer: true },
      \u019E: { text: "\\textnrleg", commandspacer: true },
      \u01AA: { text: "\\textesh", commandspacer: true },
      \u01B5: { math: "\\Zbar" },
      \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
      \u01C2: { text: "\\textdoublepipe", commandspacer: true },
      \u01CD: { text: "\\v{A}" },
      \u01CE: { text: "\\v{a}" },
      \u01CF: { text: "\\v{I}" },
      \u01D0: { text: "\\v{i}" },
      \u01D1: { text: "\\v{O}" },
      \u01D2: { text: "\\v{o}" },
      \u01D3: { text: "\\v{U}" },
      \u01D4: { text: "\\v{u}" },
      \u01E6: { text: "\\v{G}" },
      \u01E7: { text: "\\v{g}" },
      \u01E8: { text: "\\v{K}" },
      \u01E9: { text: "\\v{k}" },
      \u01EA: { text: "\\k{O}" },
      \u01EB: { text: "\\k{o}" },
      \u01F0: { text: "\\v{j}" },
      \u01F4: { text: "\\'G" },
      \u01F5: { text: "\\'g" },
      \u0228: { text: "\\c{E}" },
      \u0229: { text: "\\c{e}" },
      "\u0237": { math: "\\jmath" },
      \u0250: { math: "\\Elztrna" },
      \u0252: { math: "\\Elztrnsa" },
      \u0254: { math: "\\Elzopeno" },
      \u0256: { math: "\\Elzrtld" },
      \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
      \u0259: { math: "\\Elzschwa" },
      \u025B: { math: "\\varepsilon" },
      \u0261: { text: "g" },
      \u0263: { math: "\\Elzpgamma" },
      \u0264: { math: "\\Elzpbgam" },
      \u0265: { math: "\\Elztrnh" },
      \u026C: { math: "\\Elzbtdl" },
      \u026D: { math: "\\Elzrtll" },
      \u026F: { math: "\\Elztrnm" },
      \u0270: { math: "\\Elztrnmlr" },
      \u0271: { math: "\\Elzltlmr" },
      \u0272: { text: "\\Elzltln", commandspacer: true },
      \u0273: { math: "\\Elzrtln" },
      \u0277: { math: "\\Elzclomeg" },
      \u0278: { text: "\\textphi", commandspacer: true },
      \u0279: { math: "\\Elztrnr" },
      \u027A: { math: "\\Elztrnrl" },
      \u027B: { math: "\\Elzrttrnr" },
      \u027C: { math: "\\Elzrl" },
      \u027D: { math: "\\Elzrtlr" },
      \u027E: { math: "\\Elzfhr" },
      \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
      \u0282: { math: "\\Elzrtls" },
      \u0283: { math: "\\Elzesh" },
      \u0287: { math: "\\Elztrnt" },
      \u0288: { math: "\\Elzrtlt" },
      \u028A: { math: "\\Elzpupsil" },
      \u028B: { math: "\\Elzpscrv" },
      \u028C: { math: "\\Elzinvv" },
      \u028D: { math: "\\Elzinvw" },
      \u028E: { math: "\\Elztrny" },
      \u0290: { math: "\\Elzrtlz" },
      \u0292: { math: "\\Elzyogh" },
      \u0294: { math: "\\Elzglst" },
      \u0295: { math: "\\Elzreglst" },
      \u0296: { math: "\\Elzinglst" },
      \u029E: { text: "\\textturnk", commandspacer: true },
      \u02A4: { math: "\\Elzdyogh" },
      \u02A7: { math: "\\Elztesh" },
      \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
      \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
      \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
      \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
      \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
      "\u02B9": { text: "'" },
      \u02BB: { text: "'" },
      \u02BC: { text: "'" },
      \u02BD: { text: "'" },
      \u02BF: { text: "\\lasp", commandspacer: true, textpackages: ["mathscinet"] },
      "\u02C6": { text: "\\textasciicircum", commandspacer: true },
      "\u02C7": { text: "\\textasciicaron", commandspacer: true },
      "\u02C8": { math: "\\Elzverts" },
      "\u02C9": { text: "-" },
      "\u02CC": { math: "\\Elzverti" },
      \u02D0: { math: "\\Elzlmrk" },
      \u02D1: { math: "\\Elzhlmrk" },
      "\u02D2": { math: "\\Elzsbrhr" },
      "\u02D3": { math: "\\Elzsblhr" },
      "\u02D4": { math: "\\Elzrais" },
      "\u02D5": { math: "\\Elzlow" },
      "\u02D8": { text: "\\textasciibreve", commandspacer: true },
      "\u02D9": { text: "\\textperiodcentered", commandspacer: true, textpackages: ["textcomp"] },
      "\u02DA": { text: "\\r{}" },
      "\u02DB": { text: "\\k{}" },
      "\u02DC": { text: "\\texttildelow", commandspacer: true },
      "\u02DD": { text: "\\H{}" },
      \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
      \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
      \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
      "\u02E5": { text: "\\tone{55}" },
      "\u02E6": { text: "\\tone{44}" },
      "\u02E7": { text: "\\tone{33}" },
      "\u02E8": { text: "\\tone{22}" },
      "\u02E9": { text: "\\tone{11}" },
      "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
      "\u0300\u0304": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0300": { text: "\\textgravemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0300\u0307": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0300": { text: "\\textgravedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
      "\u0301\u0304": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0301": { text: "\\textacutemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u030C": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030C\u0301": { text: "\\textacutewedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
      "\u0302\u0307": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0302": { text: "\\textcircumdot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
      "\u0303\u0307": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0303": { text: "\\texttildedot", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
      "\u0305": { math: "\\overline", combiningdiacritic: true },
      "\u0306": { math: "\\breve", combiningdiacritic: true, text: "\\u", commandspacer: true },
      "\u0306\u0304": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0306": { text: "\\textbrevemacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
      "\u0307\u0301": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u0307": { text: "\\textdotacute", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0306": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0306\u0307": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
      "\u0309": { math: "\\ovhook" },
      "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "\\r", commandspacer: true },
      "\u030A\u0304": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u030A": { text: "\\textringmacron", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030B": { text: "\\H", commandspacer: true, combiningdiacritic: true },
      "\u030C": { math: "\\check", text: "\\v", commandspacer: true, combiningdiacritic: true },
      "\u030D": { text: "\\textvbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030E": { text: "\\textdoublevbaraccent", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030F": { text: "\\textdoublegrave", commandspacer: true, combiningdiacritic: true },
      "\u0310": { text: "\\textdotbreve", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
      "\u0312": { math: "\\oturnedcomma" },
      "\u0315": { math: "\\ocommatopright" },
      "\u0316": { text: "\\textsubgrave", commandspacer: true, combiningdiacritic: true },
      "\u0318": { text: "\\textadvancing", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0319": { text: "\\textretracting", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031A": { math: "\\droang", text: "\\textcorner", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031C": { text: "\\textsublhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031D": { text: "\\textraising", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031E": { text: "\\textlowering", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031F": { text: "\\textsubplus", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0321": { math: "\\Elzpalh" },
      "\u0322": { text: "\\Elzrh", commandspacer: true },
      "\u0323": { text: "\\d", commandspacer: true, combiningdiacritic: true },
      "\u0324": { text: "\\textsubumlaut", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0325": { text: "\\textsubring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0327": { text: "\\c", commandspacer: true, combiningdiacritic: true },
      "\u0328": { text: "\\k", commandspacer: true, combiningdiacritic: true },
      "\u0329": { text: "\\textsyllabic", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032A": { math: "\\Elzsbbrg", text: "\\textsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
      "\u032C": { text: "\\textsubwedge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032F": { text: "\\textsubarch", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0330": { math: "\\utilde", text: "\\textsubtilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "\\textsubbar", commandspacer: true, textpackages: ["tipa"] },
      "\u0332": { math: "\\underline" },
      "\u0334": { text: "\\textsuperimposetilde", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0335": { text: "\\Elzxl", commandspacer: true },
      "\u0336": { text: "\\Elzbar", commandspacer: true },
      "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
      "\u0338": { math: "\\not" },
      "\u0339": { text: "\\textsubrhalfring", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033A": { text: "\\textinvsubbridge", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033B": { text: "\\textsubsquare", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033C": { text: "\\textseagull", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033D": { text: "\\textovercross", commandspacer: true, combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
      "\u0374": { text: "'" },
      "\u0375": { text: "," },
      "\u037E": { text: ";" },
      \u0386: { text: "\\'A" },
      \u0388: { text: "\\'E" },
      \u0389: { text: "\\'H" },
      \u038A: { text: "{\\'{}I}" },
      \u038C: { text: "{\\'{}O}" },
      \u038E: { math: "\\mathrm{'Y}" },
      \u038F: { math: "\\mathrm{'\\Omega}" },
      \u0390: { math: "\\acute{\\ddot{\\iota}}" },
      \u0391: { math: "A" },
      \u0392: { math: "B" },
      \u0393: { math: "\\Gamma" },
      \u0394: { math: "\\Delta" },
      \u0395: { math: "E" },
      \u0396: { math: "Z" },
      \u0397: { math: "H" },
      \u0398: { math: "\\Theta" },
      \u0399: { math: "I" },
      \u039A: { math: "K" },
      \u039B: { math: "\\Lambda" },
      \u039C: { math: "M" },
      \u039D: { math: "N" },
      \u039E: { math: "\\Xi" },
      \u039F: { math: "O" },
      \u03A0: { math: "\\Pi" },
      \u03A1: { math: "P" },
      \u03A3: { math: "\\Sigma" },
      \u03A4: { math: "T" },
      \u03A5: { math: "\\Upsilon" },
      \u03A6: { math: "\\Phi" },
      \u03A7: { math: "X" },
      \u03A8: { math: "\\Psi" },
      \u03A9: { math: "\\Omega" },
      \u03AA: { math: "\\mathrm{\\ddot{I}}" },
      \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
      \u03AC: { text: "{\\'$\\alpha$}" },
      \u03AD: { math: "\\acute{\\epsilon}" },
      \u03AE: { math: "\\acute{\\eta}" },
      \u03AF: { math: "\\acute{\\iota}" },
      \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
      \u03B1: { math: "\\alpha" },
      \u03B2: { math: "\\beta" },
      \u03B3: { math: "\\gamma" },
      \u03B4: { math: "\\delta" },
      \u03B5: { math: "\\epsilon" },
      \u03B6: { math: "\\zeta" },
      \u03B7: { math: "\\eta" },
      \u03B8: { math: "\\theta", text: "\\texttheta", commandspacer: true },
      \u03B9: { math: "\\iota" },
      \u03BA: { math: "\\kappa" },
      \u03BB: { math: "\\lambda" },
      \u03BC: { math: "\\mu" },
      \u03BD: { math: "\\nu" },
      \u03BE: { math: "\\xi" },
      \u03BF: { math: "o" },
      \u03C0: { math: "\\pi" },
      \u03C1: { math: "\\rho" },
      \u03C2: { math: "\\varsigma" },
      \u03C3: { math: "\\sigma" },
      \u03C4: { math: "\\tau" },
      \u03C5: { math: "\\upsilon" },
      \u03C6: { math: "\\varphi" },
      \u03C7: { math: "\\chi" },
      \u03C8: { math: "\\psi" },
      \u03C9: { math: "\\omega" },
      \u03CA: { math: "\\ddot{\\iota}" },
      \u03CB: { math: "\\ddot{\\upsilon}" },
      \u03CC: { text: "\\'o" },
      \u03CD: { math: "\\acute{\\upsilon}" },
      \u03CE: { math: "\\acute{\\omega}" },
      \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
      \u03D1: { math: "\\vartheta", text: "\\textvartheta", commandspacer: true },
      \u03D2: { math: "\\Upsilon" },
      \u03D5: { math: "\\phi" },
      \u03D6: { math: "\\varpi" },
      "\u03D8": { math: "\\Qoppa" },
      "\u03D9": { math: "\\qoppa" },
      \u03DA: { math: "\\Stigma" },
      \u03DB: { math: "\\stigma" },
      \u03DC: { math: "\\Digamma" },
      \u03DD: { math: "\\digamma" },
      \u03DE: { math: "\\Koppa" },
      \u03DF: { math: "\\koppa" },
      \u03E0: { math: "\\Sampi" },
      \u03E1: { math: "\\sampi" },
      \u03F0: { math: "\\varkappa" },
      \u03F1: { math: "\\varrho" },
      "\u03F4": { math: "\\upvarTheta", text: "\\textTheta", commandspacer: true },
      "\u03F5": { math: "\\epsilon" },
      "\u03F6": { math: "\\backepsilon" },
      \u0401: { text: "\\cyrchar\\CYRYO", commandspacer: true },
      \u0402: { text: "\\cyrchar\\CYRDJE", commandspacer: true },
      \u0403: { text: "\\cyrchar{\\'\\CYRG}" },
      \u0404: { text: "\\cyrchar\\CYRIE", commandspacer: true },
      \u0405: { text: "\\cyrchar\\CYRDZE", commandspacer: true },
      \u0406: { text: "\\cyrchar\\CYRII", commandspacer: true },
      \u0407: { text: "\\cyrchar\\CYRYI", commandspacer: true },
      \u0408: { text: "\\cyrchar\\CYRJE", commandspacer: true },
      \u0409: { text: "\\cyrchar\\CYRLJE", commandspacer: true },
      \u040A: { text: "\\cyrchar\\CYRNJE", commandspacer: true },
      \u040B: { text: "\\cyrchar\\CYRTSHE", commandspacer: true },
      \u040C: { text: "\\cyrchar{\\'\\CYRK}" },
      \u040E: { text: "\\cyrchar\\CYRUSHRT", commandspacer: true },
      \u040F: { text: "\\cyrchar\\CYRDZHE", commandspacer: true },
      \u0410: { text: "\\cyrchar\\CYRA", commandspacer: true },
      \u0411: { text: "\\cyrchar\\CYRB", commandspacer: true },
      \u0412: { text: "\\cyrchar\\CYRV", commandspacer: true },
      \u0413: { text: "\\cyrchar\\CYRG", commandspacer: true },
      \u0414: { text: "\\cyrchar\\CYRD", commandspacer: true },
      \u0415: { text: "\\cyrchar\\CYRE", commandspacer: true },
      \u0416: { text: "\\cyrchar\\CYRZH", commandspacer: true },
      \u0417: { text: "\\cyrchar\\CYRZ", commandspacer: true },
      \u0418: { text: "\\cyrchar\\CYRI", commandspacer: true },
      \u0419: { text: "\\cyrchar\\CYRISHRT", commandspacer: true },
      \u041A: { text: "\\cyrchar\\CYRK", commandspacer: true },
      \u041B: { text: "\\cyrchar\\CYRL", commandspacer: true },
      \u041C: { text: "\\cyrchar\\CYRM", commandspacer: true },
      \u041D: { text: "\\cyrchar\\CYRN", commandspacer: true },
      \u041E: { text: "\\cyrchar\\CYRO", commandspacer: true },
      \u041F: { text: "\\cyrchar\\CYRP", commandspacer: true },
      \u0420: { text: "\\cyrchar\\CYRR", commandspacer: true },
      \u0421: { text: "\\cyrchar\\CYRS", commandspacer: true },
      \u0422: { text: "\\cyrchar\\CYRT", commandspacer: true },
      \u0423: { text: "\\cyrchar\\CYRU", commandspacer: true },
      \u0424: { text: "\\cyrchar\\CYRF", commandspacer: true },
      \u0425: { text: "\\cyrchar\\CYRH", commandspacer: true },
      \u0426: { text: "\\cyrchar\\CYRC", commandspacer: true },
      \u0427: { text: "\\cyrchar\\CYRCH", commandspacer: true },
      \u0428: { text: "\\cyrchar\\CYRSH", commandspacer: true },
      \u0429: { text: "\\cyrchar\\CYRSHCH", commandspacer: true },
      \u042A: { text: "\\cyrchar\\CYRHRDSN", commandspacer: true },
      \u042B: { text: "\\cyrchar\\CYRERY", commandspacer: true },
      \u042C: { text: "\\cyrchar\\CYRSFTSN", commandspacer: true },
      \u042D: { text: "\\cyrchar\\CYREREV", commandspacer: true },
      \u042E: { text: "\\cyrchar\\CYRYU", commandspacer: true },
      \u042F: { text: "\\cyrchar\\CYRYA", commandspacer: true },
      \u0430: { text: "\\cyrchar\\cyra", commandspacer: true },
      \u0431: { text: "\\cyrchar\\cyrb", commandspacer: true },
      \u0432: { text: "\\cyrchar\\cyrv", commandspacer: true },
      \u0433: { text: "\\cyrchar\\cyrg", commandspacer: true },
      \u0434: { text: "\\cyrchar\\cyrd", commandspacer: true },
      \u0435: { text: "\\cyrchar\\cyre", commandspacer: true },
      \u0436: { text: "\\cyrchar\\cyrzh", commandspacer: true },
      \u0437: { text: "\\cyrchar\\cyrz", commandspacer: true },
      \u0438: { text: "\\cyrchar\\cyri", commandspacer: true },
      \u0439: { text: "\\cyrchar\\cyrishrt", commandspacer: true },
      \u043A: { text: "\\cyrchar\\cyrk", commandspacer: true },
      \u043B: { text: "\\cyrchar\\cyrl", commandspacer: true },
      \u043C: { text: "\\cyrchar\\cyrm", commandspacer: true },
      \u043D: { text: "\\cyrchar\\cyrn", commandspacer: true },
      \u043E: { text: "\\cyrchar\\cyro", commandspacer: true },
      \u043F: { text: "\\cyrchar\\cyrp", commandspacer: true },
      \u0440: { text: "\\cyrchar\\cyrr", commandspacer: true },
      \u0441: { text: "\\cyrchar\\cyrs", commandspacer: true },
      \u0442: { text: "\\cyrchar\\cyrt", commandspacer: true },
      \u0443: { text: "\\cyrchar\\cyru", commandspacer: true },
      \u0444: { text: "\\cyrchar\\cyrf", commandspacer: true },
      \u0445: { text: "\\cyrchar\\cyrh", commandspacer: true },
      \u0446: { text: "\\cyrchar\\cyrc", commandspacer: true },
      \u0447: { text: "\\cyrchar\\cyrch", commandspacer: true },
      \u0448: { text: "\\cyrchar\\cyrsh", commandspacer: true },
      \u0449: { text: "\\cyrchar\\cyrshch", commandspacer: true },
      \u044A: { text: "\\cyrchar\\cyrhrdsn", commandspacer: true },
      \u044B: { text: "\\cyrchar\\cyrery", commandspacer: true },
      \u044C: { text: "\\cyrchar\\cyrsftsn", commandspacer: true },
      \u044D: { text: "\\cyrchar\\cyrerev", commandspacer: true },
      \u044E: { text: "\\cyrchar\\cyryu", commandspacer: true },
      \u044F: { text: "\\cyrchar\\cyrya", commandspacer: true },
      \u0451: { text: "\\cyrchar\\cyryo", commandspacer: true },
      \u0452: { text: "\\cyrchar\\cyrdje", commandspacer: true },
      \u0453: { text: "\\cyrchar{\\'\\cyrg}" },
      \u0454: { text: "\\cyrchar\\cyrie", commandspacer: true },
      \u0455: { text: "\\cyrchar\\cyrdze", commandspacer: true },
      \u0456: { text: "\\cyrchar\\cyrii", commandspacer: true },
      \u0457: { text: "\\cyrchar\\cyryi", commandspacer: true },
      \u0458: { text: "\\cyrchar\\cyrje", commandspacer: true },
      \u0459: { text: "\\cyrchar\\cyrlje", commandspacer: true },
      \u045A: { text: "\\cyrchar\\cyrnje", commandspacer: true },
      \u045B: { text: "\\cyrchar\\cyrtshe", commandspacer: true },
      \u045C: { text: "\\cyrchar{\\'\\cyrk}" },
      \u045E: { text: "\\cyrchar\\cyrushrt", commandspacer: true },
      \u045F: { text: "\\cyrchar\\cyrdzhe", commandspacer: true },
      \u0460: { text: "\\cyrchar\\CYROMEGA", commandspacer: true },
      \u0461: { text: "\\cyrchar\\cyromega", commandspacer: true },
      \u0462: { text: "\\cyrchar\\CYRYAT", commandspacer: true },
      \u0464: { text: "\\cyrchar\\CYRIOTE", commandspacer: true },
      \u0465: { text: "\\cyrchar\\cyriote", commandspacer: true },
      \u0466: { text: "\\cyrchar\\CYRLYUS", commandspacer: true },
      \u0467: { text: "\\cyrchar\\cyrlyus", commandspacer: true },
      \u0468: { text: "\\cyrchar\\CYRIOTLYUS", commandspacer: true },
      \u0469: { text: "\\cyrchar\\cyriotlyus", commandspacer: true },
      \u046A: { text: "\\cyrchar\\CYRBYUS", commandspacer: true },
      \u046C: { text: "\\cyrchar\\CYRIOTBYUS", commandspacer: true },
      \u046D: { text: "\\cyrchar\\cyriotbyus", commandspacer: true },
      \u046E: { text: "\\cyrchar\\CYRKSI", commandspacer: true },
      \u046F: { text: "\\cyrchar\\cyrksi", commandspacer: true },
      \u0470: { text: "\\cyrchar\\CYRPSI", commandspacer: true },
      \u0471: { text: "\\cyrchar\\cyrpsi", commandspacer: true },
      \u0472: { text: "\\cyrchar\\CYRFITA", commandspacer: true },
      \u0474: { text: "\\cyrchar\\CYRIZH", commandspacer: true },
      \u0478: { text: "\\cyrchar\\CYRUK", commandspacer: true },
      \u0479: { text: "\\cyrchar\\cyruk", commandspacer: true },
      \u047A: { text: "\\cyrchar\\CYROMEGARND", commandspacer: true },
      \u047B: { text: "\\cyrchar\\cyromegarnd", commandspacer: true },
      \u047C: { text: "\\cyrchar\\CYROMEGATITLO", commandspacer: true },
      \u047D: { text: "\\cyrchar\\cyromegatitlo", commandspacer: true },
      \u047E: { text: "\\cyrchar\\CYROT", commandspacer: true },
      \u047F: { text: "\\cyrchar\\cyrot", commandspacer: true },
      \u0480: { text: "\\cyrchar\\CYRKOPPA", commandspacer: true },
      \u0481: { text: "\\cyrchar\\cyrkoppa", commandspacer: true },
      "\u0482": { text: "\\cyrchar\\cyrthousands", commandspacer: true },
      "\u0488": { text: "\\cyrchar\\cyrhundredthousands", commandspacer: true },
      "\u0489": { text: "\\cyrchar\\cyrmillions", commandspacer: true },
      \u048C: { text: "\\cyrchar\\CYRSEMISFTSN", commandspacer: true },
      \u048D: { text: "\\cyrchar\\cyrsemisftsn", commandspacer: true },
      \u048E: { text: "\\cyrchar\\CYRRTICK", commandspacer: true },
      \u048F: { text: "\\cyrchar\\cyrrtick", commandspacer: true },
      \u0490: { text: "\\cyrchar\\CYRGUP", commandspacer: true },
      \u0491: { text: "\\cyrchar\\cyrgup", commandspacer: true },
      \u0492: { text: "\\cyrchar\\CYRGHCRS", commandspacer: true },
      \u0493: { text: "\\cyrchar\\cyrghcrs", commandspacer: true },
      \u0494: { text: "\\cyrchar\\CYRGHK", commandspacer: true },
      \u0495: { text: "\\cyrchar\\cyrghk", commandspacer: true },
      \u0496: { text: "\\cyrchar\\CYRZHDSC", commandspacer: true },
      \u0497: { text: "\\cyrchar\\cyrzhdsc", commandspacer: true },
      \u0498: { text: "\\cyrchar\\CYRZDSC", commandspacer: true },
      \u0499: { text: "\\cyrchar\\cyrzdsc", commandspacer: true },
      \u049A: { text: "\\cyrchar\\CYRKDSC", commandspacer: true },
      \u049B: { text: "\\cyrchar\\cyrkdsc", commandspacer: true },
      \u049C: { text: "\\cyrchar\\CYRKVCRS", commandspacer: true },
      \u049D: { text: "\\cyrchar\\cyrkvcrs", commandspacer: true },
      \u049E: { text: "\\cyrchar\\CYRKHCRS", commandspacer: true },
      \u049F: { text: "\\cyrchar\\cyrkhcrs", commandspacer: true },
      \u04A0: { text: "\\cyrchar\\CYRKBEAK", commandspacer: true },
      \u04A1: { text: "\\cyrchar\\cyrkbeak", commandspacer: true },
      \u04A2: { text: "\\cyrchar\\CYRNDSC", commandspacer: true },
      \u04A3: { text: "\\cyrchar\\cyrndsc", commandspacer: true },
      \u04A4: { text: "\\cyrchar\\CYRNG", commandspacer: true },
      \u04A5: { text: "\\cyrchar\\cyrng", commandspacer: true },
      \u04A6: { text: "\\cyrchar\\CYRPHK", commandspacer: true },
      \u04A7: { text: "\\cyrchar\\cyrphk", commandspacer: true },
      \u04A8: { text: "\\cyrchar\\CYRABHHA", commandspacer: true },
      \u04A9: { text: "\\cyrchar\\cyrabhha", commandspacer: true },
      \u04AA: { text: "\\cyrchar\\CYRSDSC", commandspacer: true },
      \u04AB: { text: "\\cyrchar\\cyrsdsc", commandspacer: true },
      \u04AC: { text: "\\cyrchar\\CYRTDSC", commandspacer: true },
      \u04AD: { text: "\\cyrchar\\cyrtdsc", commandspacer: true },
      \u04AE: { text: "\\cyrchar\\CYRY", commandspacer: true },
      \u04AF: { text: "\\cyrchar\\cyry", commandspacer: true },
      \u04B0: { text: "\\cyrchar\\CYRYHCRS", commandspacer: true },
      \u04B1: { text: "\\cyrchar\\cyryhcrs", commandspacer: true },
      \u04B2: { text: "\\cyrchar\\CYRHDSC", commandspacer: true },
      \u04B3: { text: "\\cyrchar\\cyrhdsc", commandspacer: true },
      \u04B4: { text: "\\cyrchar\\CYRTETSE", commandspacer: true },
      \u04B5: { text: "\\cyrchar\\cyrtetse", commandspacer: true },
      \u04B6: { text: "\\cyrchar\\CYRCHRDSC", commandspacer: true },
      \u04B7: { text: "\\cyrchar\\cyrchrdsc", commandspacer: true },
      \u04B8: { text: "\\cyrchar\\CYRCHVCRS", commandspacer: true },
      \u04B9: { text: "\\cyrchar\\cyrchvcrs", commandspacer: true },
      \u04BA: { text: "\\cyrchar\\CYRSHHA", commandspacer: true },
      \u04BB: { text: "\\cyrchar\\cyrshha", commandspacer: true },
      \u04BC: { text: "\\cyrchar\\CYRABHCH", commandspacer: true },
      \u04BD: { text: "\\cyrchar\\cyrabhch", commandspacer: true },
      \u04BE: { text: "\\cyrchar\\CYRABHCHDSC", commandspacer: true },
      \u04BF: { text: "\\cyrchar\\cyrabhchdsc", commandspacer: true },
      \u04C0: { text: "\\cyrchar\\CYRpalochka", commandspacer: true },
      \u04C3: { text: "\\cyrchar\\CYRKHK", commandspacer: true },
      \u04C4: { text: "\\cyrchar\\cyrkhk", commandspacer: true },
      \u04C7: { text: "\\cyrchar\\CYRNHK", commandspacer: true },
      \u04C8: { text: "\\cyrchar\\cyrnhk", commandspacer: true },
      \u04CB: { text: "\\cyrchar\\CYRCHLDSC", commandspacer: true },
      \u04CC: { text: "\\cyrchar\\cyrchldsc", commandspacer: true },
      \u04D4: { text: "\\cyrchar\\CYRAE", commandspacer: true },
      \u04D5: { text: "\\cyrchar\\cyrae", commandspacer: true },
      \u04D8: { text: "\\cyrchar\\CYRSCHWA", commandspacer: true },
      \u04D9: { text: "\\cyrchar\\cyrschwa", commandspacer: true },
      \u04E0: { text: "\\cyrchar\\CYRABHDZE", commandspacer: true },
      \u04E1: { text: "\\cyrchar\\cyrabhdze", commandspacer: true },
      \u04E8: { text: "\\cyrchar\\CYROTLD", commandspacer: true },
      \u04E9: { text: "\\cyrchar\\cyrotld", commandspacer: true },
      "\u0871": { math: "\\\\backslash" },
      "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
      "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
      "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
      "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
      "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
      "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
      "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
      "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
      "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
      "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
      "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
      "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
      "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
      "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
      "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
      \u1E02: { text: "\\.B" },
      \u1E03: { text: "\\.b" },
      \u1E04: { text: "\\d{B}" },
      \u1E05: { text: "\\d{b}" },
      \u1E06: { text: "\\b{B}" },
      \u1E07: { text: "\\b{b}" },
      \u1E0A: { text: "\\.D" },
      \u1E0B: { text: "\\.d" },
      \u1E0C: { text: "\\d{D}" },
      \u1E0D: { text: "\\d{d}" },
      \u1E0E: { text: "\\b{D}" },
      \u1E0F: { text: "\\b{d}" },
      \u1E10: { text: "\\c{D}" },
      \u1E11: { text: "\\c{d}" },
      \u1E1C: { text: "\\c{\\u{E}}" },
      \u1E1D: { text: "\\c{\\u{e}}" },
      \u1E1E: { text: "\\.F" },
      \u1E1F: { text: "\\.f" },
      \u1E20: { text: "\\=G" },
      \u1E21: { text: "\\=g" },
      \u1E22: { text: "\\.H" },
      \u1E23: { text: "\\.h" },
      \u1E24: { text: "\\d{H}" },
      \u1E25: { text: "\\d{h}" },
      \u1E26: { text: '\\"H' },
      \u1E27: { text: '\\"h' },
      \u1E28: { text: "\\c{H}" },
      \u1E29: { text: "\\c{h}" },
      \u1E30: { text: "\\'K" },
      \u1E31: { text: "\\'k" },
      \u1E32: { text: "\\d{K}" },
      \u1E33: { text: "\\d{k}" },
      \u1E34: { text: "\\b{K}" },
      \u1E35: { text: "\\b{k}" },
      \u1E36: { text: "\\d{L}" },
      \u1E37: { text: "\\d{l}" },
      \u1E3A: { text: "\\b{L}" },
      \u1E3B: { text: "\\b{l}" },
      \u1E3E: { text: "\\'M" },
      \u1E3F: { text: "\\'m" },
      \u1E40: { text: "\\.M" },
      \u1E41: { text: "\\.m" },
      \u1E42: { text: "\\d{M}" },
      \u1E43: { text: "\\d{m}" },
      \u1E44: { text: "\\.N" },
      \u1E45: { text: "\\.n" },
      \u1E46: { text: "\\d{N}" },
      \u1E47: { text: "\\d{n}" },
      \u1E48: { text: "\\b{N}" },
      \u1E49: { text: "\\b{n}" },
      \u1E54: { text: "\\'P" },
      \u1E55: { text: "\\'p" },
      \u1E56: { text: "\\.P" },
      \u1E57: { text: "\\.p" },
      \u1E58: { text: "\\.R" },
      \u1E59: { text: "\\.r" },
      \u1E5A: { text: "\\d{R}" },
      \u1E5B: { text: "\\d{r}" },
      \u1E5E: { text: "\\b{R}" },
      \u1E5F: { text: "\\b{r}" },
      \u1E60: { text: "\\.S" },
      \u1E61: { text: "\\.s" },
      \u1E62: { text: "\\d{S}" },
      \u1E63: { text: "\\d{s}" },
      \u1E6A: { text: "\\.T" },
      \u1E6B: { text: "\\.t" },
      \u1E6C: { text: "\\d{T}" },
      \u1E6D: { text: "\\d{t}" },
      \u1E6E: { text: "\\b{T}" },
      \u1E6F: { text: "\\b{t}" },
      \u1E7C: { text: "\\~V" },
      \u1E7D: { text: "\\~v" },
      \u1E7E: { text: "\\d{V}" },
      \u1E7F: { text: "\\d{v}" },
      \u1E80: { text: "\\`W" },
      \u1E81: { text: "\\`w" },
      \u1E82: { text: "\\'W" },
      \u1E83: { text: "\\'w" },
      \u1E84: { text: '\\"W' },
      \u1E85: { text: '\\"w' },
      \u1E86: { text: "\\.W" },
      \u1E87: { text: "\\.w" },
      \u1E88: { text: "\\d{W}" },
      \u1E89: { text: "\\d{w}" },
      \u1E8A: { text: "\\.X" },
      \u1E8B: { text: "\\.x" },
      \u1E8C: { text: '\\"X' },
      \u1E8D: { text: '\\"x' },
      \u1E8E: { text: "\\.Y" },
      \u1E8F: { text: "\\.y" },
      \u1E90: { text: "\\^Z" },
      \u1E91: { text: "\\^z" },
      \u1E92: { text: "\\d{Z}" },
      \u1E93: { text: "\\d{z}" },
      \u1E94: { text: "\\b{Z}" },
      \u1E95: { text: "\\b{z}" },
      \u1E96: { text: "\\b{h}" },
      \u1E97: { text: '\\"t' },
      \u1E98: { text: "\\r{w}" },
      \u1E99: { text: "\\r{y}" },
      \u1EA0: { text: "\\d{A}" },
      \u1EA1: { text: "\\d{a}" },
      \u1EB8: { text: "\\d{E}" },
      \u1EB9: { text: "\\d{e}" },
      \u1EBC: { text: "\\~E" },
      \u1EBD: { text: "\\~e" },
      \u1ECA: { text: "\\d{I}" },
      \u1ECB: { text: "\\d{i}" },
      \u1ECC: { text: "\\d{O}" },
      \u1ECD: { text: "\\d{o}" },
      \u1EE4: { text: "\\d{U}" },
      \u1EE5: { text: "\\d{u}" },
      \u1EF2: { text: "\\`Y" },
      \u1EF3: { text: "\\`y" },
      \u1EF4: { text: "\\d{Y}" },
      \u1EF5: { text: "\\d{y}" },
      \u1EF8: { text: "\\~Y" },
      \u1EF9: { text: "\\~y" },
      "\u2000": { text: "\\hspace{0.6em}", space: true },
      "\u2001": { math: "\\quad", space: true },
      "\u2002": { text: "\\hspace{0.6em}", space: true },
      "\u2003": { math: "\\quad", space: true },
      "\u2004": { text: "\\;", space: true },
      "\u2005": { text: "\\hspace{0.25em}", space: true },
      "\u2006": { text: "\\hspace{0.166em}", space: true },
      "\u2007": { text: "\\hphantom{0}", space: true },
      "\u2008": { text: "\\hphantom{,}", space: true },
      "\u2009": { text: "\\,", space: true },
      "\u200A": { math: "\\mkern1mu", space: true },
      "\u200B": { text: "\\hspace{0pt}", space: true },
      "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
      "\u2010": { text: "-" },
      "\u2011": { text: "-" },
      "\u2012": { text: "-" },
      "\u2013": { text: "\\textendash", commandspacer: true },
      "\u2014": { text: "\\textemdash", commandspacer: true },
      "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
      "\u2016": { math: "\\Vert" },
      "\u2017": { math: "\\twolowline" },
      "\u2018": { text: "`" },
      "\u2019": { text: "'" },
      "\u201A": { text: "," },
      "\u201B": { math: "\\Elzreapos" },
      "\u201C": { text: "``" },
      "\u201D": { text: "''" },
      "\u201E": { text: ",," },
      "\u201F": { text: "\\quotedblbase", commandspacer: true },
      "\u2020": { math: "\\dagger", text: "\\textdagger", commandspacer: true, textpackages: ["textcomp"] },
      "\u2021": { math: "\\ddagger", text: "\\textdaggerdbl", commandspacer: true, textpackages: ["textcomp"] },
      "\u2022": { math: "\\bullet", text: "\\textbullet", commandspacer: true, textpackages: ["textcomp"] },
      "\u2023": { text: ">" },
      "\u2024": { text: "." },
      "\u2025": { math: "\\enleadertwodots", text: ".." },
      "\u2026": { math: "\\ldots", text: "\\ldots", commandspacer: true },
      "\u2027": { text: "-" },
      "\u202F": { text: "\\,", space: true },
      "\u2030": { text: "\\textperthousand", commandspacer: true, textpackages: ["textcomp"] },
      "\u2031": { text: "\\textpertenthousand", commandspacer: true, textpackages: ["textcomp"] },
      "\u2032": { math: "{'}" },
      "\u2033": { math: "{''}" },
      "\u2034": { math: "{'''}" },
      "\u2035": { math: "\\backprime" },
      "\u2036": { math: "\\backdprime" },
      "\u2037": { math: "\\backtrprime" },
      "\u2038": { math: "\\caretinsert" },
      "\u2039": { text: "\\guilsinglleft", commandspacer: true },
      "\u203A": { text: "\\guilsinglright", commandspacer: true },
      "\u203C": { math: "\\Exclam" },
      "\u203E": { text: "-" },
      "\u2043": { math: "\\hyphenbullet" },
      "\u2044": { math: "\\fracslash" },
      "\u2047": { math: "\\Question" },
      "\u2048": { text: "?!" },
      "\u2049": { text: "!?" },
      "\u204A": { text: "7" },
      "\u2050": { math: "\\closure" },
      "\u2057": { math: "''''" },
      "\u205F": { math: "\\:", space: true, text: "\\:" },
      "\u2060": { text: "\\nolinebreak", commandspacer: true },
      "\u2070": { math: "^{0}" },
      "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
      "\u2074": { math: "^{4}" },
      "\u2075": { math: "^{5}" },
      "\u2076": { math: "^{6}" },
      "\u2077": { math: "^{7}" },
      "\u2078": { math: "^{8}" },
      "\u2079": { math: "^{9}" },
      "\u207A": { math: "^{+}" },
      "\u207B": { math: "^{-}" },
      "\u207C": { math: "^{=}" },
      "\u207D": { math: "^{(}" },
      "\u207E": { math: "^{)}" },
      \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
      "\u2080": { math: "_{0}" },
      "\u2081": { math: "_{1}" },
      "\u2082": { math: "_{2}" },
      "\u2083": { math: "_{3}" },
      "\u2084": { math: "_{4}" },
      "\u2085": { math: "_{5}" },
      "\u2086": { math: "_{6}" },
      "\u2087": { math: "_{7}" },
      "\u2088": { math: "_{8}" },
      "\u2089": { math: "_{9}" },
      "\u208A": { math: "_{+}" },
      "\u208B": { math: "_{-}" },
      "\u208C": { math: "_{=}" },
      "\u208D": { math: "_{(}" },
      "\u208E": { math: "_{)}" },
      "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
      "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
      "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
      "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
      "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
      "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
      "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
      "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
      "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
      "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
      "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
      "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
      "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
      "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
      "\u20AC": { math: "\\euro", text: "\\texteuro", commandspacer: true },
      "\u20D0": { math: "\\lvec" },
      "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u20D2": { math: "\\vertoverlay" },
      "\u20D6": { math: "\\LVec" },
      "\u20D7": { math: "\\vec" },
      "\u20DB": { math: "\\dddot" },
      "\u20DC": { math: "\\ddddot" },
      "\u20DD": { math: "\\enclosecircle" },
      "\u20DE": { math: "\\enclosesquare" },
      "\u20DF": { math: "\\enclosediamond" },
      "\u20E1": { math: "\\overleftrightarrow" },
      "\u20E4": { math: "\\enclosetriangle" },
      "\u20E7": { math: "\\annuity" },
      "\u20E8": { math: "\\threeunderdot" },
      "\u20E9": { math: "\\widebridgeabove" },
      "\u20EC": { math: "\\underrightharpoondown" },
      "\u20ED": { math: "\\underleftharpoondown" },
      "\u20EE": { math: "\\underleftarrow" },
      "\u20EF": { math: "\\underrightarrow" },
      "\u20F0": { math: "\\asteraccent" },
      "\u2100": { text: "a/c" },
      "\u2101": { text: "a/s" },
      \u2102: { math: "\\mathbb{C}" },
      "\u2103": { text: "\\textcelsius", commandspacer: true },
      "\u2105": { text: "c/o" },
      "\u2106": { text: "c/u" },
      \u2107: { math: "\\Euler" },
      "\u2109": { text: "F" },
      \u210A: { math: "\\mathscr{g}" },
      \u210B: { math: "\\mathscr{H}" },
      \u210C: { math: "\\mathfrak{H}" },
      \u210D: { math: "\\mathbb{H}" },
      \u210E: { math: "\\Planckconst" },
      \u210F: { math: "\\hslash" },
      \u2110: { math: "\\mathscr{I}" },
      \u2111: { math: "\\mathfrak{I}" },
      \u2112: { math: "\\mathscr{L}" },
      \u2113: { math: "\\mathscr{l}" },
      \u2115: { math: "\\mathbb{N}" },
      "\u2116": { text: "\\cyrchar\\textnumero", commandspacer: true },
      "\u2117": { text: "\\textcircledP", commandspacer: true },
      "\u2118": { math: "\\wp" },
      \u2119: { math: "\\mathbb{P}" },
      \u211A: { math: "\\mathbb{Q}" },
      \u211B: { math: "\\mathscr{R}" },
      \u211C: { math: "\\mathfrak{R}" },
      \u211D: { math: "\\mathbb{R}" },
      "\u211E": { math: "\\Elzxrat" },
      "\u2120": { text: "\\textservicemark", commandspacer: true },
      "\u2121": { text: "TEL" },
      "\u2122": { text: "\\texttrademark", commandspacer: true, textpackages: ["textcomp"] },
      \u2124: { math: "\\mathbb{Z}" },
      \u2126: { math: "\\Omega" },
      "\u2127": { math: "\\mho" },
      \u2128: { math: "\\mathfrak{Z}" },
      "\u2129": { text: "\\textriota", commandspacer: true },
      \u212A: { text: "K" },
      \u212B: { math: "\\Angstroem", text: "\\AA", commandspacer: true },
      \u212C: { math: "\\mathscr{B}" },
      \u212D: { math: "\\mathfrak{C}" },
      "\u212E": { text: "\\textestimated", commandspacer: true },
      \u212F: { math: "\\mathscr{e}" },
      \u2130: { math: "\\mathscr{E}" },
      \u2131: { math: "\\mathscr{F}" },
      "\u2132": { math: "\\Finv" },
      \u2133: { math: "\\mathscr{M}" },
      \u2134: { math: "\\mathscr{o}" },
      \u2135: { math: "\\aleph" },
      \u2136: { math: "\\beth" },
      \u2137: { math: "\\gimel" },
      \u2138: { math: "\\daleth" },
      "\u213C": { math: "\\mathbb{\\pi}" },
      "\u213D": { math: "\\mathbb{\\gamma}" },
      "\u213E": { math: "\\mathbb{\\Gamma}" },
      "\u213F": { math: "\\mathbb{\\Pi}" },
      "\u2140": { math: "\\mathbb{\\Sigma}" },
      "\u2141": { math: "\\Game" },
      "\u2142": { math: "\\sansLturned" },
      "\u2143": { math: "\\sansLmirrored" },
      "\u2144": { math: "\\Yup" },
      "\u2145": { math: "\\CapitalDifferentialD" },
      "\u2146": { math: "\\DifferentialD" },
      "\u2147": { math: "\\ExponetialE" },
      "\u2148": { math: "\\ComplexI" },
      "\u2149": { math: "\\ComplexJ" },
      "\u214A": { math: "\\PropertyLine" },
      "\u214B": { math: "\\invamp" },
      "\u2150": { math: "\\frac{1}{7}" },
      "\u2151": { math: "\\frac{1}{9}" },
      "\u2152": { math: "\\frac{1}{10}" },
      "\u2153": { math: "\\frac{1}{3}" },
      "\u2154": { math: "\\frac{2}{3}" },
      "\u2155": { math: "\\frac{1}{5}" },
      "\u2156": { math: "\\frac{2}{5}" },
      "\u2157": { math: "\\frac{3}{5}" },
      "\u2158": { math: "\\frac{4}{5}" },
      "\u2159": { math: "\\frac{1}{6}" },
      "\u215A": { math: "\\frac{5}{6}" },
      "\u215B": { math: "\\frac{1}{8}" },
      "\u215C": { math: "\\frac{3}{8}" },
      "\u215D": { math: "\\frac{5}{8}" },
      "\u215E": { math: "\\frac{7}{8}" },
      "\u215F": { math: "\\frac{1}" },
      "\u2160": { text: "I" },
      "\u2161": { text: "II" },
      "\u2162": { text: "III" },
      "\u2163": { text: "IV" },
      "\u2164": { text: "V" },
      "\u2165": { text: "VI" },
      "\u2166": { text: "VII" },
      "\u2167": { text: "VIII" },
      "\u2168": { text: "IX" },
      "\u2169": { text: "X" },
      "\u216A": { text: "XI" },
      "\u216B": { text: "XII" },
      "\u216C": { text: "L" },
      "\u216D": { text: "C" },
      "\u216E": { text: "D" },
      "\u216F": { text: "M" },
      "\u2170": { text: "i" },
      "\u2171": { text: "ii" },
      "\u2172": { text: "iii" },
      "\u2173": { text: "iv" },
      "\u2174": { text: "v" },
      "\u2175": { text: "vi" },
      "\u2176": { text: "vii" },
      "\u2177": { text: "viii" },
      "\u2178": { text: "ix" },
      "\u2179": { text: "x" },
      "\u217A": { text: "xi" },
      "\u217B": { text: "xii" },
      "\u217C": { text: "l" },
      "\u217D": { text: "c" },
      "\u217E": { text: "d" },
      "\u217F": { text: "m" },
      "\u2189": { math: "\\frac{0}{3}" },
      "\u2190": { math: "\\leftarrow" },
      "\u2191": { math: "\\uparrow" },
      "\u2192": { math: "\\rightarrow", text: "\\textrightarrow", commandspacer: true, textpackages: ["textcomp"] },
      "\u2193": { math: "\\downarrow" },
      "\u2194": { math: "\\leftrightarrow" },
      "\u2195": { math: "\\updownarrow" },
      "\u2196": { math: "\\nwarrow" },
      "\u2197": { math: "\\nearrow" },
      "\u2198": { math: "\\searrow" },
      "\u2199": { math: "\\swarrow" },
      "\u219A": { math: "\\nleftarrow" },
      "\u219B": { math: "\\nrightarrow" },
      "\u219C": { math: "\\arrowwaveleft" },
      "\u219D": { math: "\\arrowwaveright" },
      "\u219E": { math: "\\twoheadleftarrow" },
      "\u219F": { math: "\\twoheaduparrow" },
      "\u21A0": { math: "\\twoheadrightarrow" },
      "\u21A1": { math: "\\twoheaddownarrow" },
      "\u21A2": { math: "\\leftarrowtail" },
      "\u21A3": { math: "\\rightarrowtail" },
      "\u21A4": { math: "\\mapsfrom" },
      "\u21A5": { math: "\\MapsUp" },
      "\u21A6": { math: "\\mapsto" },
      "\u21A7": { math: "\\MapsDown" },
      "\u21A8": { math: "\\updownarrowbar" },
      "\u21A9": { math: "\\hookleftarrow" },
      "\u21AA": { math: "\\hookrightarrow" },
      "\u21AB": { math: "\\looparrowleft" },
      "\u21AC": { math: "\\looparrowright" },
      "\u21AD": { math: "\\leftrightsquigarrow" },
      "\u21AE": { math: "\\nleftrightarrow" },
      "\u21AF": { math: "\\lightning" },
      "\u21B0": { math: "\\Lsh" },
      "\u21B1": { math: "\\Rsh" },
      "\u21B2": { math: "\\dlsh" },
      "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
      "\u21B4": { math: "\\linefeed" },
      "\u21B5": { math: "\\carriagereturn" },
      "\u21B6": { math: "\\curvearrowleft" },
      "\u21B7": { math: "\\curvearrowright" },
      "\u21B8": { math: "\\barovernorthwestarrow" },
      "\u21B9": { math: "\\barleftarrowrightarrowba" },
      "\u21BA": { math: "\\circlearrowleft" },
      "\u21BB": { math: "\\circlearrowright" },
      "\u21BC": { math: "\\leftharpoonup" },
      "\u21BD": { math: "\\leftharpoondown" },
      "\u21BE": { math: "\\upharpoonright" },
      "\u21BF": { math: "\\upharpoonleft" },
      "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u21C1": { math: "\\rightharpoondown" },
      "\u21C2": { math: "\\downharpoonright" },
      "\u21C3": { math: "\\downharpoonleft" },
      "\u21C4": { math: "\\rightleftarrows" },
      "\u21C5": { math: "\\dblarrowupdown" },
      "\u21C6": { math: "\\leftrightarrows" },
      "\u21C7": { math: "\\leftleftarrows" },
      "\u21C8": { math: "\\upuparrows" },
      "\u21C9": { math: "\\rightrightarrows" },
      "\u21CA": { math: "\\downdownarrows" },
      "\u21CB": { math: "\\leftrightharpoons" },
      "\u21CC": { math: "\\rightleftharpoons" },
      "\u21CD": { math: "\\nLeftarrow" },
      "\u21CE": { math: "\\nLeftrightarrow" },
      "\u21CF": { math: "\\nRightarrow" },
      "\u21D0": { math: "\\Leftarrow" },
      "\u21D1": { math: "\\Uparrow" },
      "\u21D2": { math: "\\Rightarrow" },
      "\u21D3": { math: "\\Downarrow" },
      "\u21D4": { math: "\\Leftrightarrow" },
      "\u21D5": { math: "\\Updownarrow" },
      "\u21D6": { math: "\\Nwarrow" },
      "\u21D7": { math: "\\Nearrow" },
      "\u21D8": { math: "\\Searrow" },
      "\u21D9": { math: "\\Swarrow" },
      "\u21DA": { math: "\\Lleftarrow" },
      "\u21DB": { math: "\\Rrightarrow" },
      "\u21DC": { math: "\\leftsquigarrow" },
      "\u21DD": { math: "\\rightsquigarrow" },
      "\u21DE": { math: "\\nHuparrow" },
      "\u21DF": { math: "\\nHdownarrow" },
      "\u21E0": { math: "\\dashleftarrow" },
      "\u21E1": { math: "\\updasharrow" },
      "\u21E2": { math: "\\dashrightarrow" },
      "\u21E3": { math: "\\downdasharrow" },
      "\u21E4": { math: "\\LeftArrowBar" },
      "\u21E5": { math: "\\RightArrowBar" },
      "\u21E6": { math: "\\leftwhitearrow" },
      "\u21E7": { math: "\\upwhitearrow" },
      "\u21E8": { math: "\\rightwhitearrow" },
      "\u21E9": { math: "\\downwhitearrow" },
      "\u21EA": { math: "\\whitearrowupfrombar" },
      "\u21F4": { math: "\\circleonrightarrow" },
      "\u21F5": { math: "\\DownArrowUpArrow" },
      "\u21F6": { math: "\\rightthreearrows" },
      "\u21F7": { math: "\\nvleftarrow" },
      "\u21F8": { math: "\\pfun" },
      "\u21F9": { math: "\\nvleftrightarrow" },
      "\u21FA": { math: "\\nVleftarrow" },
      "\u21FB": { math: "\\ffun" },
      "\u21FC": { math: "\\nVleftrightarrow" },
      "\u21FD": { math: "\\leftarrowtriangle" },
      "\u21FE": { math: "\\rightarrowtriangle" },
      "\u21FF": { math: "\\leftrightarrowtriangle" },
      "\u2200": { math: "\\forall" },
      "\u2201": { math: "\\complement" },
      "\u2202": { math: "\\partial" },
      "\u2203": { math: "\\exists" },
      "\u2204": { math: "\\nexists" },
      "\u2205": { math: "\\varnothing" },
      "\u2206": { math: "\\increment" },
      "\u2207": { math: "\\nabla" },
      "\u2208": { math: "\\in" },
      "\u2209": { math: "\\not\\in" },
      "\u220A": { math: "\\smallin" },
      "\u220B": { math: "\\ni" },
      "\u220C": { math: "\\not\\ni" },
      "\u220D": { math: "\\smallni" },
      "\u220E": { math: "\\QED" },
      "\u220F": { math: "\\prod" },
      "\u2210": { math: "\\coprod" },
      "\u2211": { math: "\\sum" },
      "\u2212": { math: "-", text: "-" },
      "\u2213": { math: "\\mp" },
      "\u2214": { math: "\\dotplus" },
      "\u2215": { text: "/" },
      "\u2216": { math: "\\setminus" },
      "\u2217": { math: "{_\\ast}" },
      "\u2218": { math: "\\circ" },
      "\u2219": { math: "\\bullet" },
      "\u221A": { math: "\\surd" },
      "\u221B": { math: "\\sqrt[3]" },
      "\u221C": { math: "\\sqrt[4]" },
      "\u221D": { math: "\\propto" },
      "\u221E": { math: "\\infty" },
      "\u221F": { math: "\\rightangle" },
      "\u2220": { math: "\\angle" },
      "\u2221": { math: "\\measuredangle" },
      "\u2222": { math: "\\sphericalangle" },
      "\u2223": { math: "\\mid" },
      "\u2224": { math: "\\nmid" },
      "\u2225": { math: "\\parallel" },
      "\u2226": { math: "\\nparallel" },
      "\u2227": { math: "\\wedge" },
      "\u2228": { math: "\\vee" },
      "\u2229": { math: "\\cap" },
      "\u222A": { math: "\\cup" },
      "\u222B": { math: "\\int" },
      "\u222C": { math: "{\\int\\!\\int}" },
      "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
      "\u222E": { math: "\\oint" },
      "\u222F": { math: "\\surfintegral" },
      "\u2230": { math: "\\volintegral" },
      "\u2231": { math: "\\clwintegral" },
      "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2234": { math: "\\therefore" },
      "\u2235": { math: "\\because" },
      "\u2236": { math: ":" },
      "\u2237": { math: "\\Colon" },
      "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
      "\u2239": { math: "\\eqcolon" },
      "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
      "\u223B": { math: "\\homothetic" },
      "\u223C": { math: "\\sim" },
      "\u223D": { math: "\\backsim" },
      "\u223E": { math: "\\lazysinv" },
      "\u223F": { math: "\\AC" },
      "\u2240": { math: "\\wr" },
      "\u2241": { math: "\\not\\sim" },
      "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
      "\u2242\u0338": { math: "\\NotEqualTilde" },
      "\u2243": { math: "\\simeq" },
      "\u2244": { math: "\\not\\simeq" },
      "\u2245": { math: "\\cong" },
      "\u2246": { math: "\\approxnotequal" },
      "\u2247": { math: "\\not\\cong" },
      "\u2248": { math: "\\approx" },
      "\u2249": { math: "\\not\\approx" },
      "\u224A": { math: "\\approxeq" },
      "\u224B": { math: "\\tildetrpl" },
      "\u224B\u0338": { math: "\\not\\apid" },
      "\u224C": { math: "\\allequal" },
      "\u224D": { math: "\\asymp" },
      "\u224E": { math: "\\Bumpeq" },
      "\u224E\u0338": { math: "\\NotHumpDownHump" },
      "\u224F": { math: "\\bumpeq" },
      "\u224F\u0338": { math: "\\NotHumpEqual" },
      "\u2250": { math: "\\doteq" },
      "\u2250\u0338": { math: "\\not\\doteq" },
      "\u2251": { math: "\\doteqdot" },
      "\u2252": { math: "\\fallingdotseq" },
      "\u2253": { math: "\\risingdotseq" },
      "\u2254": { math: "\\coloneq", text: ":=" },
      "\u2255": { math: "=:" },
      "\u2256": { math: "\\eqcirc" },
      "\u2257": { math: "\\circeq" },
      "\u2258": { math: "\\arceq" },
      "\u2259": { math: "\\estimates" },
      "\u225B": { math: "\\starequal" },
      "\u225C": { math: "\\triangleq" },
      "\u225D": { math: "\\eqdef" },
      "\u225E": { math: "\\measeq" },
      "\u2260": { math: "\\neq" },
      "\u2261": { math: "\\equiv" },
      "\u2262": { math: "\\not\\equiv" },
      "\u2263": { math: "\\Equiv" },
      "\u2264": { math: "\\leq" },
      "\u2265": { math: "\\geq" },
      "\u2266": { math: "\\leqq" },
      "\u2267": { math: "\\geqq" },
      "\u2268": { math: "\\lneqq" },
      "\u2268\uFE00": { math: "\\lvertneqq" },
      "\u2269": { math: "\\gneqq" },
      "\u2269\uFE00": { math: "\\gvertneqq" },
      "\u226A": { math: "\\ll" },
      "\u226A\u0338": { math: "\\NotLessLess" },
      "\u226B": { math: "\\gg" },
      "\u226B\u0338": { math: "\\NotGreaterGreater" },
      "\u226C": { math: "\\between" },
      "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
      "\u226E": { math: "\\not<" },
      "\u226F": { math: "\\not>" },
      "\u2270": { math: "\\not\\leq" },
      "\u2271": { math: "\\not\\geq" },
      "\u2272": { math: "\\lessequivlnt" },
      "\u2273": { math: "\\greaterequivlnt" },
      "\u2276": { math: "\\lessgtr" },
      "\u2277": { math: "\\gtrless" },
      "\u2278": { math: "\\notlessgreater" },
      "\u2279": { math: "\\notgreaterless" },
      "\u227A": { math: "\\prec" },
      "\u227B": { math: "\\succ" },
      "\u227C": { math: "\\preccurlyeq" },
      "\u227D": { math: "\\succcurlyeq" },
      "\u227E": { math: "\\precapprox" },
      "\u227E\u0338": { math: "\\NotPrecedesTilde" },
      "\u227F": { math: "\\succapprox" },
      "\u227F\u0338": { math: "\\NotSucceedsTilde" },
      "\u2280": { math: "\\not\\prec" },
      "\u2281": { math: "\\not\\succ" },
      "\u2282": { math: "\\subset" },
      "\u2283": { math: "\\supset" },
      "\u2284": { math: "\\not\\subset" },
      "\u2285": { math: "\\not\\supset" },
      "\u2286": { math: "\\subseteq" },
      "\u2287": { math: "\\supseteq" },
      "\u2288": { math: "\\not\\subseteq" },
      "\u2289": { math: "\\not\\supseteq" },
      "\u228A": { math: "\\subsetneq" },
      "\u228A\uFE00": { math: "\\varsubsetneqq" },
      "\u228B": { math: "\\supsetneq" },
      "\u228B\uFE00": { math: "\\varsupsetneq" },
      "\u228C": { math: "\\cupleftarrow" },
      "\u228D": { math: "\\cupdot" },
      "\u228E": { math: "\\uplus" },
      "\u228F": { math: "\\sqsubset" },
      "\u228F\u0338": { math: "\\NotSquareSubset" },
      "\u2290": { math: "\\sqsupset" },
      "\u2290\u0338": { math: "\\NotSquareSuperset" },
      "\u2291": { math: "\\sqsubseteq" },
      "\u2292": { math: "\\sqsupseteq" },
      "\u2293": { math: "\\sqcap" },
      "\u2294": { math: "\\sqcup" },
      "\u2295": { math: "\\oplus" },
      "\u2296": { math: "\\ominus" },
      "\u2297": { math: "\\otimes" },
      "\u2298": { math: "\\oslash" },
      "\u2299": { math: "\\odot" },
      "\u229A": { math: "\\circledcirc" },
      "\u229B": { math: "\\circledast" },
      "\u229C": { math: "\\circledequal" },
      "\u229D": { math: "\\circleddash" },
      "\u229E": { math: "\\boxplus" },
      "\u229F": { math: "\\boxminus" },
      "\u22A0": { math: "\\boxtimes" },
      "\u22A1": { math: "\\boxdot" },
      "\u22A2": { math: "\\vdash" },
      "\u22A3": { math: "\\dashv" },
      "\u22A4": { math: "\\top" },
      "\u22A5": { math: "\\perp" },
      "\u22A6": { math: "\\assert" },
      "\u22A7": { math: "\\truestate" },
      "\u22A8": { math: "\\forcesextra" },
      "\u22A9": { math: "\\Vdash" },
      "\u22AA": { math: "\\Vvdash" },
      "\u22AB": { math: "\\VDash" },
      "\u22AC": { math: "\\nvdash" },
      "\u22AD": { math: "\\nvDash" },
      "\u22AE": { math: "\\nVdash" },
      "\u22AF": { math: "\\nVDash" },
      "\u22B0": { math: "\\prurel" },
      "\u22B1": { math: "\\scurel" },
      "\u22B2": { math: "\\vartriangleleft" },
      "\u22B3": { math: "\\vartriangleright" },
      "\u22B4": { math: "\\trianglelefteq" },
      "\u22B5": { math: "\\trianglerighteq" },
      "\u22B6": { math: "\\original" },
      "\u22B7": { math: "\\image" },
      "\u22B8": { math: "\\multimap" },
      "\u22B9": { math: "\\hermitconjmatrix" },
      "\u22BA": { math: "\\intercal" },
      "\u22BB": { math: "\\veebar" },
      "\u22BC": { math: "\\barwedge" },
      "\u22BD": { math: "\\barvee" },
      "\u22BE": { math: "\\rightanglearc" },
      "\u22BF": { math: "\\varlrtriangle" },
      "\u22C2": { math: "\\bigcap" },
      "\u22C3": { math: "\\bigcup" },
      "\u22C4": { math: "\\diamond" },
      "\u22C5": { math: "\\cdot" },
      "\u22C6": { math: "\\star" },
      "\u22C7": { math: "\\divideontimes" },
      "\u22C8": { math: "\\bowtie" },
      "\u22C9": { math: "\\ltimes" },
      "\u22CA": { math: "\\rtimes" },
      "\u22CB": { math: "\\leftthreetimes" },
      "\u22CC": { math: "\\rightthreetimes" },
      "\u22CD": { math: "\\backsimeq" },
      "\u22CE": { math: "\\curlyvee" },
      "\u22CF": { math: "\\curlywedge" },
      "\u22D0": { math: "\\Subset" },
      "\u22D1": { math: "\\Supset" },
      "\u22D2": { math: "\\Cap" },
      "\u22D3": { math: "\\Cup" },
      "\u22D4": { math: "\\pitchfork" },
      "\u22D5": { math: "\\hash" },
      "\u22D6": { math: "\\lessdot" },
      "\u22D7": { math: "\\gtrdot" },
      "\u22D8": { math: "\\verymuchless" },
      "\u22D9": { math: "\\verymuchgreater" },
      "\u22DA": { math: "\\lesseqgtr" },
      "\u22DB": { math: "\\gtreqless" },
      "\u22DC": { math: "\\eqless" },
      "\u22DD": { math: "\\eqgtr" },
      "\u22DE": { math: "\\curlyeqprec" },
      "\u22DF": { math: "\\curlyeqsucc" },
      "\u22E0": { math: "\\npreceq" },
      "\u22E1": { math: "\\nsucceq" },
      "\u22E2": { math: "\\not\\sqsubseteq" },
      "\u22E3": { math: "\\not\\sqsupseteq" },
      "\u22E4": { math: "\\sqsubsetneq" },
      "\u22E5": { math: "\\Elzsqspne" },
      "\u22E6": { math: "\\lnsim" },
      "\u22E7": { math: "\\gnsim" },
      "\u22E8": { math: "\\precedesnotsimilar" },
      "\u22E9": { math: "\\succnsim" },
      "\u22EA": { math: "\\ntriangleleft" },
      "\u22EB": { math: "\\ntriangleright" },
      "\u22EC": { math: "\\ntrianglelefteq" },
      "\u22ED": { math: "\\ntrianglerighteq" },
      "\u22EE": { math: "\\vdots" },
      "\u22EF": { math: "\\cdots" },
      "\u22F0": { math: "\\upslopeellipsis" },
      "\u22F1": { math: "\\downslopeellipsis" },
      "\u22F2": { math: "\\disin" },
      "\u22F3": { math: "\\varisins" },
      "\u22F4": { math: "\\isins" },
      "\u22F5": { math: "\\isindot" },
      "\u22F6": { math: "\\barin" },
      "\u22F7": { math: "\\isinobar" },
      "\u22F8": { math: "\\isinvb" },
      "\u22F9": { math: "\\isinE" },
      "\u22FA": { math: "\\nisd" },
      "\u22FB": { math: "\\varnis" },
      "\u22FC": { math: "\\nis" },
      "\u22FD": { math: "\\varniobar" },
      "\u22FE": { math: "\\niobar" },
      "\u22FF": { math: "\\bagmember" },
      "\u2300": { math: "\\diameter" },
      "\u2302": { math: "\\house" },
      "\u2305": { math: "\\varbarwedge", text: "\\barwedge", commandspacer: true },
      "\u2306": { math: "\\perspcorrespond" },
      "\u2308": { math: "\\lceil" },
      "\u2309": { math: "\\rceil" },
      "\u230A": { math: "\\lfloor" },
      "\u230B": { math: "\\rfloor" },
      "\u2310": { math: "\\invneg" },
      "\u2311": { math: "\\wasylozenge" },
      "\u2312": { math: "\\profline" },
      "\u2313": { math: "\\profsurf" },
      "\u2315": { math: "\\recorder" },
      "\u2316": { math: '{\\mathchar"2208}' },
      "\u2317": { math: "\\viewdata" },
      "\u2319": { math: "\\turnednot" },
      "\u231C": { math: "\\ulcorner" },
      "\u231D": { math: "\\urcorner" },
      "\u231E": { math: "\\llcorner" },
      "\u231F": { math: "\\lrcorner" },
      "\u2320": { math: "\\inttop" },
      "\u2321": { math: "\\intbottom" },
      "\u2322": { math: "\\frown" },
      "\u2323": { math: "\\smile" },
      "\u2329": { math: "\\langle" },
      "\u232A": { math: "\\rangle" },
      "\u232C": { math: "\\varhexagonlrbonds" },
      "\u2332": { math: "\\conictaper" },
      "\u2336": { math: "\\topbot" },
      "\u2339": { math: "\\APLinv" },
      "\u233F": { math: "\\notslash" },
      "\u2340": { math: "\\notbackslash" },
      "\u2347": { math: "\\APLleftarrowbox" },
      "\u2348": { math: "\\APLrightarrowbox" },
      "\u2349": { math: "\\invdiameter" },
      "\u2350": { math: "\\APLuparrowbox" },
      "\u2353": { math: "\\APLboxupcaret" },
      "\u2357": { math: "\\APLdownarrowbox" },
      "\u235D": { math: "\\APLcomment" },
      "\u235E": { math: "\\APLinput" },
      "\u235F": { math: "\\APLlog" },
      "\u2370": { math: "\\APLboxquestion" },
      "\u237C": { math: "\\rangledownzigzagarrow" },
      "\u2394": { math: "\\hexagon" },
      "\u239B": { math: "\\lparenuend" },
      "\u239C": { math: "\\lparenextender" },
      "\u239D": { math: "\\lparenlend" },
      "\u239E": { math: "\\rparenuend" },
      "\u239F": { math: "\\rparenextender" },
      "\u23A0": { math: "\\rparenlend" },
      "\u23A1": { math: "\\lbrackuend" },
      "\u23A2": { math: "\\lbrackextender" },
      "\u23A3": { math: "\\Elzdlcorn" },
      "\u23A4": { math: "\\rbrackuend" },
      "\u23A5": { math: "\\rbrackextender" },
      "\u23A6": { math: "\\rbracklend" },
      "\u23A7": { math: "\\lbraceuend" },
      "\u23A8": { math: "\\lbracemid" },
      "\u23A9": { math: "\\lbracelend" },
      "\u23AA": { math: "\\vbraceextender" },
      "\u23AB": { math: "\\rbraceuend" },
      "\u23AC": { math: "\\rbracemid" },
      "\u23AD": { math: "\\rbracelend" },
      "\u23AE": { math: "\\intextender" },
      "\u23AF": { math: "\\harrowextender" },
      "\u23B0": { math: "\\lmoustache" },
      "\u23B1": { math: "\\rmoustache" },
      "\u23B2": { math: "\\sumtop" },
      "\u23B3": { math: "\\sumbottom" },
      "\u23B4": { math: "\\overbracket" },
      "\u23B5": { math: "\\underbracket" },
      "\u23B6": { math: "\\bbrktbrk" },
      "\u23B7": { math: "\\sqrtbottom" },
      "\u23B8": { math: "\\lvboxline" },
      "\u23B9": { math: "\\rvboxline" },
      "\u23CE": { math: "\\varcarriagereturn" },
      "\u23DC": { math: "\\overparen" },
      "\u23DD": { math: "\\underparen" },
      "\u23DE": { math: "\\overbrace" },
      "\u23DF": { math: "\\underbrace" },
      "\u23E0": { math: "\\obrbrak" },
      "\u23E1": { math: "\\ubrbrak" },
      "\u23E2": { math: "\\trapezium" },
      "\u23E3": { math: "\\benzenr" },
      "\u23E4": { math: "\\strns" },
      "\u23E5": { math: "\\fltns" },
      "\u23E6": { math: "\\accurrent" },
      "\u23E7": { math: "\\elinters" },
      "\u2460": { text: "\\ding{172}" },
      "\u2461": { text: "\\ding{173}" },
      "\u2462": { text: "\\ding{174}" },
      "\u2463": { text: "\\ding{175}" },
      "\u2464": { text: "\\ding{176}" },
      "\u2465": { text: "\\ding{177}" },
      "\u2466": { text: "\\ding{178}" },
      "\u2467": { text: "\\ding{179}" },
      "\u2468": { text: "\\ding{180}" },
      "\u2469": { text: "\\ding{181}" },
      "\u246A": { text: "(11)" },
      "\u246B": { text: "(12)" },
      "\u246C": { text: "(13)" },
      "\u246D": { text: "(14)" },
      "\u246E": { text: "(15)" },
      "\u246F": { text: "(16)" },
      "\u2470": { text: "(17)" },
      "\u2471": { text: "(18)" },
      "\u2472": { text: "(19)" },
      "\u2473": { text: "(20)" },
      "\u2474": { text: "(1)" },
      "\u2475": { text: "(2)" },
      "\u2476": { text: "(3)" },
      "\u2477": { text: "(4)" },
      "\u2478": { text: "(5)" },
      "\u2479": { text: "(6)" },
      "\u247A": { text: "(7)" },
      "\u247B": { text: "(8)" },
      "\u247C": { text: "(9)" },
      "\u247D": { text: "(10)" },
      "\u247E": { text: "(11)" },
      "\u247F": { text: "(12)" },
      "\u2480": { text: "(13)" },
      "\u2481": { text: "(14)" },
      "\u2482": { text: "(15)" },
      "\u2483": { text: "(16)" },
      "\u2484": { text: "(17)" },
      "\u2485": { text: "(18)" },
      "\u2486": { text: "(19)" },
      "\u2487": { text: "(20)" },
      "\u2488": { text: "1." },
      "\u2489": { text: "2." },
      "\u248A": { text: "3." },
      "\u248B": { text: "4." },
      "\u248C": { text: "5." },
      "\u248D": { text: "6." },
      "\u248E": { text: "7." },
      "\u248F": { text: "8." },
      "\u2490": { text: "9." },
      "\u2491": { text: "10." },
      "\u2492": { text: "11." },
      "\u2493": { text: "12." },
      "\u2494": { text: "13." },
      "\u2495": { text: "14." },
      "\u2496": { text: "15." },
      "\u2497": { text: "16." },
      "\u2498": { text: "17." },
      "\u2499": { text: "18." },
      "\u249A": { text: "19." },
      "\u249B": { text: "20." },
      "\u249C": { text: "(a)" },
      "\u249D": { text: "(b)" },
      "\u249E": { text: "(c)" },
      "\u249F": { text: "(d)" },
      "\u24A0": { text: "(e)" },
      "\u24A1": { text: "(f)" },
      "\u24A2": { text: "(g)" },
      "\u24A3": { text: "(h)" },
      "\u24A4": { text: "(i)" },
      "\u24A5": { text: "(j)" },
      "\u24A6": { text: "(k)" },
      "\u24A7": { text: "(l)" },
      "\u24A8": { text: "(m)" },
      "\u24A9": { text: "(n)" },
      "\u24AA": { text: "(o)" },
      "\u24AB": { text: "(p)" },
      "\u24AC": { text: "(q)" },
      "\u24AD": { text: "(r)" },
      "\u24AE": { text: "(s)" },
      "\u24AF": { text: "(t)" },
      "\u24B0": { text: "(u)" },
      "\u24B1": { text: "(v)" },
      "\u24B2": { text: "(w)" },
      "\u24B3": { text: "(x)" },
      "\u24B4": { text: "(y)" },
      "\u24B5": { text: "(z)" },
      "\u24B6": { text: "(A)" },
      "\u24B7": { text: "(B)" },
      "\u24B8": { text: "(C)" },
      "\u24B9": { text: "(D)" },
      "\u24BA": { text: "(E)" },
      "\u24BB": { text: "(F)" },
      "\u24BC": { text: "(G)" },
      "\u24BD": { text: "(H)" },
      "\u24BE": { text: "(I)" },
      "\u24BF": { text: "(J)" },
      "\u24C0": { text: "(K)" },
      "\u24C1": { text: "(L)" },
      "\u24C2": { text: "(M)" },
      "\u24C3": { text: "(N)" },
      "\u24C4": { text: "(O)" },
      "\u24C5": { text: "(P)" },
      "\u24C6": { text: "(Q)" },
      "\u24C7": { text: "(R)" },
      "\u24C8": { math: "\\circledS" },
      "\u24C9": { text: "(T)" },
      "\u24CA": { text: "(U)" },
      "\u24CB": { text: "(V)" },
      "\u24CC": { text: "(W)" },
      "\u24CD": { text: "(X)" },
      "\u24CE": { text: "(Y)" },
      "\u24CF": { text: "(Z)" },
      "\u24D0": { text: "(a)" },
      "\u24D1": { text: "(b)" },
      "\u24D2": { text: "(c)" },
      "\u24D3": { text: "(d)" },
      "\u24D4": { text: "(e)" },
      "\u24D5": { text: "(f)" },
      "\u24D6": { text: "(g)" },
      "\u24D7": { text: "(h)" },
      "\u24D8": { text: "(i)" },
      "\u24D9": { text: "(j)" },
      "\u24DA": { text: "(k)" },
      "\u24DB": { text: "(l)" },
      "\u24DC": { text: "(m)" },
      "\u24DD": { text: "(n)" },
      "\u24DE": { text: "(o)" },
      "\u24DF": { text: "(p)" },
      "\u24E0": { text: "(q)" },
      "\u24E1": { text: "(r)" },
      "\u24E2": { text: "(s)" },
      "\u24E3": { text: "(t)" },
      "\u24E4": { text: "(u)" },
      "\u24E5": { text: "(v)" },
      "\u24E6": { text: "(w)" },
      "\u24E7": { text: "(x)" },
      "\u24E8": { text: "(y)" },
      "\u24E9": { text: "(z)" },
      "\u24EA": { text: "(0)" },
      "\u2500": { text: "-" },
      "\u2501": { text: "=" },
      "\u2502": { text: "|" },
      "\u2503": { text: "|" },
      "\u2504": { text: "-" },
      "\u2505": { text: "=" },
      "\u2506": { math: "\\Elzdshfnc" },
      "\u2507": { text: "|" },
      "\u2508": { text: "-" },
      "\u2509": { text: "=" },
      "\u250A": { text: "|" },
      "\u250B": { text: "|" },
      "\u250C": { text: "+" },
      "\u250D": { text: "+" },
      "\u250E": { text: "+" },
      "\u250F": { text: "+" },
      "\u2510": { text: "+" },
      "\u2511": { text: "+" },
      "\u2512": { text: "+" },
      "\u2513": { text: "+" },
      "\u2514": { text: "+" },
      "\u2515": { text: "+" },
      "\u2516": { text: "+" },
      "\u2517": { text: "+" },
      "\u2518": { text: "+" },
      "\u2519": { math: "\\Elzsqfnw" },
      "\u251A": { text: "+" },
      "\u251B": { text: "+" },
      "\u251C": { text: "+" },
      "\u251D": { text: "+" },
      "\u251E": { text: "+" },
      "\u251F": { text: "+" },
      "\u2520": { text: "+" },
      "\u2521": { text: "+" },
      "\u2522": { text: "+" },
      "\u2523": { text: "+" },
      "\u2524": { text: "+" },
      "\u2525": { text: "+" },
      "\u2526": { text: "+" },
      "\u2527": { text: "+" },
      "\u2528": { text: "+" },
      "\u2529": { text: "+" },
      "\u252A": { text: "+" },
      "\u252B": { text: "+" },
      "\u252C": { text: "+" },
      "\u252D": { text: "+" },
      "\u252E": { text: "+" },
      "\u252F": { text: "+" },
      "\u2530": { text: "+" },
      "\u2531": { text: "+" },
      "\u2532": { text: "+" },
      "\u2533": { text: "+" },
      "\u2534": { text: "+" },
      "\u2535": { text: "+" },
      "\u2536": { text: "+" },
      "\u2537": { text: "+" },
      "\u2538": { text: "+" },
      "\u2539": { text: "+" },
      "\u253A": { text: "+" },
      "\u253B": { text: "+" },
      "\u253C": { text: "+" },
      "\u253D": { text: "+" },
      "\u253E": { text: "+" },
      "\u253F": { text: "+" },
      "\u2540": { text: "+" },
      "\u2541": { text: "+" },
      "\u2542": { text: "+" },
      "\u2543": { text: "+" },
      "\u2544": { text: "+" },
      "\u2545": { text: "+" },
      "\u2546": { text: "+" },
      "\u2547": { text: "+" },
      "\u2548": { text: "+" },
      "\u2549": { text: "+" },
      "\u254A": { text: "+" },
      "\u254B": { text: "+" },
      "\u254C": { text: "-" },
      "\u254D": { text: "=" },
      "\u254E": { text: "|" },
      "\u254F": { text: "|" },
      "\u2550": { text: "=" },
      "\u2551": { text: "|" },
      "\u2552": { text: "+" },
      "\u2553": { text: "+" },
      "\u2554": { text: "+" },
      "\u2555": { text: "+" },
      "\u2556": { text: "+" },
      "\u2557": { text: "+" },
      "\u2558": { text: "+" },
      "\u2559": { text: "+" },
      "\u255A": { text: "+" },
      "\u255B": { text: "+" },
      "\u255C": { text: "+" },
      "\u255D": { text: "+" },
      "\u255E": { text: "+" },
      "\u255F": { text: "+" },
      "\u2560": { text: "+" },
      "\u2561": { text: "+" },
      "\u2562": { text: "+" },
      "\u2563": { text: "+" },
      "\u2564": { text: "+" },
      "\u2565": { text: "+" },
      "\u2566": { text: "+" },
      "\u2567": { text: "+" },
      "\u2568": { text: "+" },
      "\u2569": { text: "+" },
      "\u256A": { text: "+" },
      "\u256B": { text: "+" },
      "\u256C": { text: "+" },
      "\u256D": { text: "+" },
      "\u256E": { text: "+" },
      "\u256F": { text: "+" },
      "\u2570": { text: "+" },
      "\u2571": { math: "\\diagup" },
      "\u2572": { text: "\\" },
      "\u2573": { text: "X" },
      "\u257C": { text: "-" },
      "\u257D": { text: "|" },
      "\u257E": { text: "-" },
      "\u257F": { text: "|" },
      "\u2580": { math: "\\blockuphalf" },
      "\u2584": { math: "\\blocklowhalf" },
      "\u2588": { math: "\\blockfull" },
      "\u258C": { math: "\\blocklefthalf" },
      "\u2590": { math: "\\blockrighthalf" },
      "\u2591": { math: "\\blockqtrshaded" },
      "\u2592": { math: "\\blockhalfshaded" },
      "\u2593": { math: "\\blockthreeqtrshaded" },
      "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
      "\u25A1": { math: "\\square" },
      "\u25A2": { math: "\\squoval" },
      "\u25A3": { math: "\\blackinwhitesquare" },
      "\u25A4": { math: "\\squarehfill" },
      "\u25A5": { math: "\\squarevfill" },
      "\u25A6": { math: "\\squarehvfill" },
      "\u25A7": { math: "\\squarenwsefill" },
      "\u25A8": { math: "\\squareneswfill" },
      "\u25A9": { math: "\\squarecrossfill" },
      "\u25AA": { math: "\\blacksquare" },
      "\u25AB": { math: "\\smwhtsquare" },
      "\u25AC": { math: "\\hrectangleblack" },
      "\u25AD": { math: "\\fbox{~~}" },
      "\u25AE": { math: "\\vrectangleblack" },
      "\u25AF": { math: "\\Elzvrecto" },
      "\u25B0": { math: "\\parallelogramblack" },
      "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
      "\u25B3": { math: "\\bigtriangleup" },
      "\u25B4": { math: "\\blacktriangle" },
      "\u25B5": { math: "\\vartriangle" },
      "\u25B6": { math: "\\RHD" },
      "\u25B7": { math: "\\rhd" },
      "\u25B8": { math: "\\blacktriangleright" },
      "\u25B9": { math: "\\triangleright" },
      "\u25BA": { math: "\\blackpointerright" },
      "\u25BB": { math: "\\whitepointerright" },
      "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
      "\u25BD": { math: "\\bigtriangledown" },
      "\u25BE": { math: "\\blacktriangledown" },
      "\u25BF": { math: "\\triangledown" },
      "\u25C0": { math: "\\LHD" },
      "\u25C1": { math: "\\lhd" },
      "\u25C2": { math: "\\blacktriangleleft" },
      "\u25C3": { math: "\\triangleleft" },
      "\u25C4": { math: "\\blackpointerleft" },
      "\u25C5": { math: "\\whitepointerleft" },
      "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
      "\u25C7": { math: "\\Diamond" },
      "\u25C8": { math: "\\blackinwhitediamond" },
      "\u25C9": { math: "\\fisheye" },
      "\u25CA": { math: "\\lozenge" },
      "\u25CB": { math: "\\bigcirc" },
      "\u25CC": { math: "\\dottedcircle" },
      "\u25CD": { math: "\\circlevertfill" },
      "\u25CE": { math: "\\bullseye" },
      "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
      "\u25D0": { math: "\\Elzcirfl" },
      "\u25D1": { math: "\\Elzcirfr" },
      "\u25D2": { math: "\\Elzcirfb" },
      "\u25D3": { math: "\\circletophalfblack" },
      "\u25D4": { math: "\\circleurquadblack" },
      "\u25D5": { math: "\\blackcircleulquadwhite" },
      "\u25D6": { math: "\\LEFTCIRCLE" },
      "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
      "\u25D8": { math: "\\Elzrvbull" },
      "\u25D9": { math: "\\inversewhitecircle" },
      "\u25DA": { math: "\\invwhiteupperhalfcircle" },
      "\u25DB": { math: "\\invwhitelowerhalfcircle" },
      "\u25DC": { math: "\\ularc" },
      "\u25DD": { math: "\\urarc" },
      "\u25DE": { math: "\\lrarc" },
      "\u25DF": { math: "\\llarc" },
      "\u25E0": { math: "\\topsemicircle" },
      "\u25E1": { math: "\\botsemicircle" },
      "\u25E2": { math: "\\lrblacktriangle" },
      "\u25E3": { math: "\\llblacktriangle" },
      "\u25E4": { math: "\\ulblacktriangle" },
      "\u25E5": { math: "\\urblacktriangle" },
      "\u25E6": { math: "\\smwhtcircle" },
      "\u25E7": { math: "\\Elzsqfl" },
      "\u25E8": { math: "\\Elzsqfr" },
      "\u25E9": { math: "\\squareulblack" },
      "\u25EA": { math: "\\Elzsqfse" },
      "\u25EB": { math: "\\boxbar" },
      "\u25EC": { math: "\\trianglecdot" },
      "\u25ED": { math: "\\triangleleftblack" },
      "\u25EE": { math: "\\trianglerightblack" },
      "\u25EF": { math: "\\bigcirc" },
      "\u25F0": { math: "\\squareulquad" },
      "\u25F1": { math: "\\squarellquad" },
      "\u25F2": { math: "\\squarelrquad" },
      "\u25F3": { math: "\\squareurquad" },
      "\u25F4": { math: "\\circleulquad" },
      "\u25F5": { math: "\\circlellquad" },
      "\u25F6": { math: "\\circlelrquad" },
      "\u25F7": { math: "\\circleurquad" },
      "\u25F8": { math: "\\ultriangle" },
      "\u25F9": { math: "\\urtriangle" },
      "\u25FA": { math: "\\lltriangle" },
      "\u25FB": { math: "\\square" },
      "\u25FC": { math: "\\blacksquare" },
      "\u25FD": { math: "\\mdsmwhtsquare" },
      "\u25FE": { math: "\\mdsmblksquare" },
      "\u25FF": { math: "\\lrtriangle" },
      "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
      "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
      "\u2609": { math: "\\Sun" },
      "\u260E": { text: "\\ding{37}" },
      "\u2610": { math: "\\Square" },
      "\u2611": { math: "\\CheckedBox" },
      "\u2612": { math: "\\XBox" },
      "\u2613": { text: "X" },
      "\u2615": { math: "\\steaming" },
      "\u261B": { text: "\\ding{42}" },
      "\u261E": { math: "\\pointright", text: "\\ding{43}" },
      "\u2620": { math: "\\skull" },
      "\u2621": { math: "\\danger" },
      "\u2622": { math: "\\radiation" },
      "\u2623": { math: "\\biohazard" },
      "\u262F": { math: "\\yinyang" },
      "\u2639": { math: "\\frownie" },
      "\u263A": { math: "\\smiley" },
      "\u263B": { math: "\\blacksmiley" },
      "\u263C": { math: "\\sun" },
      "\u263D": { text: "\\rightmoon", commandspacer: true, textpackages: ["wasysym"] },
      "\u263E": { text: "\\leftmoon", commandspacer: true, textpackages: ["wasysym"] },
      "\u263F": { math: "\\mercury", text: "\\mercury", commandspacer: true },
      "\u2640": { math: "\\female", text: "\\venus", commandspacer: true },
      "\u2641": { math: "\\earth" },
      "\u2642": { math: "\\male", text: "\\male", commandspacer: true },
      "\u2643": { math: "\\jupiter", text: "\\jupiter", commandspacer: true },
      "\u2644": { math: "\\saturn", text: "\\saturn", commandspacer: true },
      "\u2645": { math: "\\uranus", text: "\\uranus", commandspacer: true },
      "\u2646": { math: "\\neptune", text: "\\neptune", commandspacer: true },
      "\u2647": { math: "\\pluto", text: "\\pluto", commandspacer: true },
      "\u2648": { math: "\\aries", text: "\\aries", commandspacer: true },
      "\u2649": { math: "\\taurus", text: "\\taurus", commandspacer: true },
      "\u264A": { math: "\\gemini", text: "\\gemini", commandspacer: true },
      "\u264B": { math: "\\cancer", text: "\\cancer", commandspacer: true },
      "\u264C": { math: "\\leo", text: "\\leo", commandspacer: true },
      "\u264D": { math: "\\virgo", text: "\\virgo", commandspacer: true },
      "\u264E": { math: "\\libra", text: "\\libra", commandspacer: true },
      "\u264F": { math: "\\scorpio", text: "\\scorpio", commandspacer: true },
      "\u2650": { math: "\\sagittarius", text: "\\sagittarius", commandspacer: true },
      "\u2651": { math: "\\capricornus", text: "\\capricornus", commandspacer: true },
      "\u2652": { math: "\\aquarius", text: "\\aquarius", commandspacer: true },
      "\u2653": { math: "\\pisces", text: "\\pisces", commandspacer: true },
      "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
      "\u2661": { math: "\\heartsuit" },
      "\u2662": { math: "\\diamond" },
      "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
      "\u2664": { math: "\\varspadesuit" },
      "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
      "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
      "\u2667": { math: "\\varclubsuit" },
      "\u2669": { math: "\\quarternote", text: "\\quarternote", commandspacer: true },
      "\u266A": { math: "\\eighthnote", text: "\\eighthnote", commandspacer: true },
      "\u266B": { math: "\\twonotes" },
      "\u266C": { math: "\\sixteenthnote" },
      "\u266D": { math: "\\flat" },
      "\u266E": { math: "\\natural" },
      "\u266F": { math: "\\sharp" },
      "\u267B": { math: "\\recycle" },
      "\u267E": { math: "\\acidfree" },
      "\u2680": { math: "\\dicei" },
      "\u2681": { math: "\\diceii" },
      "\u2682": { math: "\\diceiii" },
      "\u2683": { math: "\\diceiv" },
      "\u2684": { math: "\\dicev" },
      "\u2685": { math: "\\dicevi" },
      "\u2686": { math: "\\circledrightdot" },
      "\u2687": { math: "\\circledtwodots" },
      "\u2688": { math: "\\blackcircledrightdot" },
      "\u2689": { math: "\\blackcircledtwodots" },
      "\u2693": { math: "\\anchor" },
      "\u2694": { math: "\\swords" },
      "\u26A0": { math: "\\warning" },
      "\u26A5": { math: "\\Hermaphrodite" },
      "\u26AA": { math: "\\medcirc" },
      "\u26AB": { math: "\\medbullet" },
      "\u26AC": { math: "\\mdsmwhtcircle" },
      "\u26B2": { math: "\\neuter" },
      "\u2701": { text: "\\ding{33}" },
      "\u2702": { text: "\\ding{34}" },
      "\u2703": { text: "\\ding{35}" },
      "\u2704": { text: "\\ding{36}" },
      "\u2706": { text: "\\ding{38}" },
      "\u2707": { text: "\\ding{39}" },
      "\u2708": { text: "\\ding{40}" },
      "\u2709": { text: "\\ding{41}" },
      "\u270C": { text: "\\ding{44}" },
      "\u270D": { text: "\\ding{45}" },
      "\u270E": { math: "\\pencil", text: "\\ding{46}" },
      "\u270F": { text: "\\ding{47}" },
      "\u2710": { text: "\\ding{48}" },
      "\u2711": { text: "\\ding{49}" },
      "\u2712": { text: "\\ding{50}" },
      "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
      "\u2714": { text: "\\ding{52}" },
      "\u2715": { text: "\\ding{53}" },
      "\u2716": { text: "\\ding{54}" },
      "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
      "\u2718": { text: "\\ding{56}" },
      "\u2719": { text: "\\ding{57}" },
      "\u271A": { text: "\\ding{58}" },
      "\u271B": { text: "\\ding{59}" },
      "\u271C": { text: "\\ding{60}" },
      "\u271D": { text: "\\ding{61}" },
      "\u271E": { text: "\\ding{62}" },
      "\u271F": { text: "\\ding{63}" },
      "\u2720": { math: "\\maltese", text: "\\ding{64}" },
      "\u2721": { text: "\\ding{65}" },
      "\u2722": { text: "\\ding{66}" },
      "\u2723": { text: "\\ding{67}" },
      "\u2724": { text: "\\ding{68}" },
      "\u2725": { text: "\\ding{69}" },
      "\u2726": { text: "\\ding{70}" },
      "\u2727": { text: "\\ding{71}" },
      "\u2729": { text: "\\ding{73}" },
      "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
      "\u272B": { text: "\\ding{75}" },
      "\u272C": { text: "\\ding{76}" },
      "\u272D": { text: "\\ding{77}" },
      "\u272E": { text: "\\ding{78}" },
      "\u272F": { text: "\\ding{79}" },
      "\u2730": { text: "\\ding{80}" },
      "\u2731": { text: "\\ding{81}" },
      "\u2732": { text: "\\ding{82}" },
      "\u2733": { text: "\\ding{83}" },
      "\u2734": { text: "\\ding{84}" },
      "\u2735": { text: "\\ding{85}" },
      "\u2736": { math: "\\varstar", text: "\\ding{86}" },
      "\u2737": { text: "\\ding{87}" },
      "\u2738": { text: "\\ding{88}" },
      "\u2739": { text: "\\ding{89}" },
      "\u273A": { text: "\\ding{90}" },
      "\u273B": { text: "\\ding{91}" },
      "\u273C": { text: "\\ding{92}" },
      "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
      "\u273E": { text: "\\ding{94}" },
      "\u273F": { text: "\\ding{95}" },
      "\u2740": { text: "\\ding{96}" },
      "\u2741": { text: "\\ding{97}" },
      "\u2742": { text: "\\ding{98}" },
      "\u2743": { text: "\\ding{99}" },
      "\u2744": { text: "\\ding{100}" },
      "\u2745": { text: "\\ding{101}" },
      "\u2746": { text: "\\ding{102}" },
      "\u2747": { text: "\\ding{103}" },
      "\u2748": { text: "\\ding{104}" },
      "\u2749": { text: "\\ding{105}" },
      "\u274A": { text: "\\ding{106}" },
      "\u274B": { text: "\\ding{107}" },
      "\u274D": { text: "\\ding{109}" },
      "\u274F": { text: "\\ding{111}" },
      "\u2750": { text: "\\ding{112}" },
      "\u2751": { text: "\\ding{113}" },
      "\u2752": { text: "\\ding{114}" },
      "\u2756": { text: "\\ding{118}" },
      "\u2758": { text: "\\ding{120}" },
      "\u2759": { text: "\\ding{121}" },
      "\u275A": { text: "\\ding{122}" },
      "\u275B": { text: "\\ding{123}" },
      "\u275C": { text: "\\ding{124}" },
      "\u275D": { text: "\\ding{125}" },
      "\u275E": { text: "\\ding{126}" },
      "\u2761": { text: "\\ding{161}" },
      "\u2762": { text: "\\ding{162}" },
      "\u2763": { text: "\\ding{163}" },
      "\u2764": { text: "\\ding{164}" },
      "\u2765": { text: "\\ding{165}" },
      "\u2766": { text: "\\ding{166}" },
      "\u2767": { text: "\\ding{167}" },
      "\u2772": { math: "\\lbrbrak" },
      "\u2773": { math: "\\rbrbrak" },
      "\u2776": { text: "\\ding{182}" },
      "\u2777": { text: "\\ding{183}" },
      "\u2778": { text: "\\ding{184}" },
      "\u2779": { text: "\\ding{185}" },
      "\u277A": { text: "\\ding{186}" },
      "\u277B": { text: "\\ding{187}" },
      "\u277C": { text: "\\ding{188}" },
      "\u277D": { text: "\\ding{189}" },
      "\u277E": { text: "\\ding{190}" },
      "\u277F": { text: "\\ding{191}" },
      "\u2780": { text: "\\ding{192}" },
      "\u2781": { text: "\\ding{193}" },
      "\u2782": { text: "\\ding{194}" },
      "\u2783": { text: "\\ding{195}" },
      "\u2784": { text: "\\ding{196}" },
      "\u2785": { text: "\\ding{197}" },
      "\u2786": { text: "\\ding{198}" },
      "\u2787": { text: "\\ding{199}" },
      "\u2788": { text: "\\ding{200}" },
      "\u2789": { text: "\\ding{201}" },
      "\u278A": { text: "\\ding{202}" },
      "\u278B": { text: "\\ding{203}" },
      "\u278C": { text: "\\ding{204}" },
      "\u278D": { text: "\\ding{205}" },
      "\u278E": { text: "\\ding{206}" },
      "\u278F": { text: "\\ding{207}" },
      "\u2790": { text: "\\ding{208}" },
      "\u2791": { text: "\\ding{209}" },
      "\u2792": { text: "\\ding{210}" },
      "\u2793": { text: "\\ding{211}" },
      "\u2794": { text: "\\ding{212}" },
      "\u2798": { text: "\\ding{216}" },
      "\u2799": { text: "\\ding{217}" },
      "\u279A": { text: "\\ding{218}" },
      "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
      "\u279C": { text: "\\ding{220}" },
      "\u279D": { text: "\\ding{221}" },
      "\u279E": { text: "\\ding{222}" },
      "\u279F": { text: "\\ding{223}" },
      "\u27A0": { text: "\\ding{224}" },
      "\u27A1": { text: "\\ding{225}" },
      "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
      "\u27A3": { text: "\\ding{227}" },
      "\u27A4": { text: "\\ding{228}" },
      "\u27A5": { text: "\\ding{229}" },
      "\u27A6": { text: "\\ding{230}" },
      "\u27A7": { text: "\\ding{231}" },
      "\u27A8": { text: "\\ding{232}" },
      "\u27A9": { text: "\\ding{233}" },
      "\u27AA": { text: "\\ding{234}" },
      "\u27AB": { text: "\\ding{235}" },
      "\u27AC": { text: "\\ding{236}" },
      "\u27AD": { text: "\\ding{237}" },
      "\u27AE": { text: "\\ding{238}" },
      "\u27AF": { text: "\\ding{239}" },
      "\u27B1": { text: "\\ding{241}" },
      "\u27B2": { text: "\\ding{242}" },
      "\u27B3": { text: "\\ding{243}" },
      "\u27B4": { text: "\\ding{244}" },
      "\u27B5": { text: "\\ding{245}" },
      "\u27B6": { text: "\\ding{246}" },
      "\u27B7": { text: "\\ding{247}" },
      "\u27B8": { text: "\\ding{248}" },
      "\u27B9": { text: "\\ding{249}" },
      "\u27BA": { text: "\\ding{250}" },
      "\u27BB": { text: "\\ding{251}" },
      "\u27BC": { text: "\\ding{252}" },
      "\u27BD": { text: "\\ding{253}" },
      "\u27BE": { text: "\\ding{254}" },
      "\u27C0": { math: "\\threedangle" },
      "\u27C1": { math: "\\whiteinwhitetriangle" },
      "\u27C2": { math: "\\perp" },
      "\u27C3": { math: "\\subsetcirc" },
      "\u27C4": { math: "\\supsetcirc" },
      "\u27C5": { math: "\\Lbag" },
      "\u27C6": { math: "\\Rbag" },
      "\u27C7": { math: "\\veedot" },
      "\u27C8": { math: "\\bsolhsub" },
      "\u27C9": { math: "\\suphsol" },
      "\u27CC": { math: "\\longdivision" },
      "\u27D0": { math: "\\Diamonddot" },
      "\u27D1": { math: "\\wedgedot" },
      "\u27D2": { math: "\\upin" },
      "\u27D3": { math: "\\pullback" },
      "\u27D4": { math: "\\pushout" },
      "\u27D5": { math: "\\leftouterjoin" },
      "\u27D6": { math: "\\rightouterjoin" },
      "\u27D7": { math: "\\fullouterjoin" },
      "\u27D8": { math: "\\bigbot" },
      "\u27D9": { math: "\\bigtop" },
      "\u27DA": { math: "\\DashVDash" },
      "\u27DB": { math: "\\dashVdash" },
      "\u27DC": { math: "\\multimapinv" },
      "\u27DD": { math: "\\vlongdash" },
      "\u27DE": { math: "\\longdashv" },
      "\u27DF": { math: "\\cirbot" },
      "\u27E0": { math: "\\lozengeminus" },
      "\u27E1": { math: "\\concavediamond" },
      "\u27E2": { math: "\\concavediamondtickleft" },
      "\u27E3": { math: "\\concavediamondtickright" },
      "\u27E4": { math: "\\whitesquaretickleft" },
      "\u27E5": { math: "\\whitesquaretickright" },
      "\u27E6": { math: "\\llbracket" },
      "\u27E7": { math: "\\rrbracket" },
      "\u27E8": { math: "\\langle" },
      "\u27E9": { math: "\\rangle" },
      "\u27EA": { math: "\\lang" },
      "\u27EB": { math: "\\rang" },
      "\u27EC": { math: "\\Lbrbrak" },
      "\u27ED": { math: "\\Rbrbrak" },
      "\u27EE": { math: "\\lgroup" },
      "\u27EF": { math: "\\rgroup" },
      "\u27F0": { math: "\\UUparrow" },
      "\u27F1": { math: "\\DDownarrow" },
      "\u27F2": { math: "\\acwgapcirclearrow" },
      "\u27F3": { math: "\\cwgapcirclearrow" },
      "\u27F4": { math: "\\rightarrowonoplus" },
      "\u27F5": { math: "\\longleftarrow" },
      "\u27F6": { math: "\\longrightarrow" },
      "\u27F7": { math: "\\longleftrightarrow" },
      "\u27F8": { math: "\\Longleftarrow" },
      "\u27F9": { math: "\\Longrightarrow" },
      "\u27FA": { math: "\\Longleftrightarrow" },
      "\u27FB": { math: "\\longmapsfrom" },
      "\u27FC": { math: "\\longmapsto" },
      "\u27FD": { math: "\\Longmapsfrom" },
      "\u27FE": { math: "\\Longmapsto" },
      "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
      "\u2900": { math: "\\psur" },
      "\u2901": { math: "\\nVtwoheadrightarrow" },
      "\u2902": { math: "\\nvLeftarrow" },
      "\u2903": { math: "\\nvRightarrow" },
      "\u2904": { math: "\\nvLeftrightarrow" },
      "\u2906": { math: "\\Mapsfrom" },
      "\u2907": { math: "\\Mapsto" },
      "\u2908": { math: "\\downarrowbarred" },
      "\u2909": { math: "\\uparrowbarred" },
      "\u290A": { math: "\\Uuparrow" },
      "\u290B": { math: "\\Ddownarrow" },
      "\u290C": { math: "\\leftbkarrow" },
      "\u290D": { math: "\\rightbkarrow" },
      "\u290E": { math: "\\leftdbkarrow" },
      "\u290F": { math: "\\dbkarow" },
      "\u2910": { math: "\\drbkarow" },
      "\u2911": { math: "\\rightdotarrow" },
      "\u2912": { math: "\\UpArrowBar" },
      "\u2913": { math: "\\DownArrowBar" },
      "\u2914": { math: "\\pinj" },
      "\u2915": { math: "\\finj" },
      "\u2916": { math: "\\bij" },
      "\u2917": { math: "\\nvtwoheadrightarrowtail" },
      "\u2918": { math: "\\nVtwoheadrightarrowtail" },
      "\u2919": { math: "\\lefttail" },
      "\u291A": { math: "\\righttail" },
      "\u291B": { math: "\\leftdbltail" },
      "\u291C": { math: "\\rightdbltail" },
      "\u291D": { math: "\\diamondleftarrow" },
      "\u291E": { math: "\\rightarrowdiamond" },
      "\u291F": { math: "\\diamondleftarrowbar" },
      "\u2920": { math: "\\barrightarrowdiamond" },
      "\u2921": { math: "\\nwsearrow" },
      "\u2922": { math: "\\neswarrow" },
      "\u292B": { math: "\\rdiagovfdiag" },
      "\u292C": { math: "\\fdiagovrdiag" },
      "\u292D": { math: "\\seovnearrow" },
      "\u292E": { math: "\\neovsearrow" },
      "\u292F": { math: "\\fdiagovnearrow" },
      "\u2930": { math: "\\rdiagovsearrow" },
      "\u2931": { math: "\\neovnwarrow" },
      "\u2932": { math: "\\nwovnearrow" },
      "\u2934": { math: "\\uprightcurvearrow" },
      "\u2935": { math: "\\downrightcurvedarrow" },
      "\u2938": { math: "\\cwrightarcarrow" },
      "\u2939": { math: "\\acwleftarcarrow" },
      "\u293A": { math: "\\acwoverarcarrow" },
      "\u293B": { math: "\\acwunderarcarrow" },
      "\u293C": { math: "\\curvearrowrightminus" },
      "\u293D": { math: "\\curvearrowleftplus" },
      "\u293E": { math: "\\cwundercurvearrow" },
      "\u293F": { math: "\\ccwundercurvearrow" },
      "\u2940": { math: "\\Elolarr" },
      "\u2941": { math: "\\Elorarr" },
      "\u2942": { math: "\\ElzRlarr" },
      "\u2943": { math: "\\leftarrowshortrightarrow" },
      "\u2944": { math: "\\ElzrLarr" },
      "\u2945": { math: "\\rightarrowplus" },
      "\u2946": { math: "\\leftarrowplus" },
      "\u2947": { math: "\\Elzrarrx" },
      "\u2948": { math: "\\leftrightarrowcircle" },
      "\u2949": { math: "\\twoheaduparrowcircle" },
      "\u294A": { math: "\\leftrightharpoon" },
      "\u294B": { math: "\\rightleftharpoon" },
      "\u294C": { math: "\\updownharpoonrightleft" },
      "\u294D": { math: "\\updownharpoonleftright" },
      "\u294E": { math: "\\LeftRightVector" },
      "\u294F": { math: "\\RightUpDownVector" },
      "\u2950": { math: "\\DownLeftRightVector" },
      "\u2951": { math: "\\LeftUpDownVector" },
      "\u2952": { math: "\\LeftVectorBar" },
      "\u2953": { math: "\\RightVectorBar" },
      "\u2954": { math: "\\RightUpVectorBar" },
      "\u2955": { math: "\\RightDownVectorBar" },
      "\u2956": { math: "\\DownLeftVectorBar" },
      "\u2957": { math: "\\DownRightVectorBar" },
      "\u2958": { math: "\\LeftUpVectorBar" },
      "\u2959": { math: "\\LeftDownVectorBar" },
      "\u295A": { math: "\\LeftTeeVector" },
      "\u295B": { math: "\\RightTeeVector" },
      "\u295C": { math: "\\RightUpTeeVector" },
      "\u295D": { math: "\\RightDownTeeVector" },
      "\u295E": { math: "\\DownLeftTeeVector" },
      "\u295F": { math: "\\DownRightTeeVector" },
      "\u2960": { math: "\\LeftUpTeeVector" },
      "\u2961": { math: "\\LeftDownTeeVector" },
      "\u2962": { math: "\\leftleftharpoons" },
      "\u2963": { math: "\\upupharpoons" },
      "\u2964": { math: "\\rightrightharpoons" },
      "\u2965": { math: "\\downdownharpoons" },
      "\u2966": { math: "\\leftrightharpoonsup" },
      "\u2967": { math: "\\leftrightharpoonsdown" },
      "\u2968": { math: "\\rightleftharpoonsup" },
      "\u2969": { math: "\\rightleftharpoonsdown" },
      "\u296A": { math: "\\leftbarharpoon" },
      "\u296B": { math: "\\barleftharpoon" },
      "\u296C": { math: "\\rightbarharpoon" },
      "\u296D": { math: "\\barrightharpoon" },
      "\u296E": { math: "\\UpEquilibrium" },
      "\u296F": { math: "\\ReverseUpEquilibrium" },
      "\u2970": { math: "\\RoundImplies" },
      "\u2971": { math: "\\equalrightarrow" },
      "\u2972": { math: "\\similarrightarrow" },
      "\u2973": { math: "\\leftarrowsimilar" },
      "\u2974": { math: "\\rightarrowsimilar" },
      "\u2975": { math: "\\rightarrowapprox" },
      "\u2976": { math: "\\ltlarr" },
      "\u2977": { math: "\\leftarrowless" },
      "\u2978": { math: "\\gtrarr" },
      "\u2979": { math: "\\subrarr" },
      "\u297A": { math: "\\leftarrowsubset" },
      "\u297B": { math: "\\suplarr" },
      "\u297E": { math: "\\upfishtail" },
      "\u297F": { math: "\\downfishtail" },
      "\u2980": { math: "\\Elztfnc" },
      "\u2981": { math: "\\spot" },
      "\u2982": { math: "\\typecolon" },
      "\u2983": { math: "\\lBrace" },
      "\u2984": { math: "\\rBrace" },
      "\u2986": { math: "\\Elroang" },
      "\u2987": { math: "\\limg" },
      "\u2988": { math: "\\rimg" },
      "\u2989": { math: "\\lblot" },
      "\u298A": { math: "\\rblot" },
      "\u298B": { math: "\\lbrackubar" },
      "\u298C": { math: "\\rbrackubar" },
      "\u298D": { math: "\\lbrackultick" },
      "\u298E": { math: "\\rbracklrtick" },
      "\u298F": { math: "\\lbracklltick" },
      "\u2990": { math: "\\rbrackurtick" },
      "\u2991": { math: "\\langledot" },
      "\u2992": { math: "\\rangledot" },
      "\u2993": { math: "<\\kern-0.58em(" },
      "\u2995": { math: "\\Lparengtr" },
      "\u2996": { math: "\\Rparenless" },
      "\u2997": { math: "\\lblkbrbrak" },
      "\u2998": { math: "\\rblkbrbrak" },
      "\u2999": { math: "\\Elzddfnc" },
      "\u299A": { math: "\\vzigzag" },
      "\u299B": { math: "\\measuredangleleft" },
      "\u299C": { math: "\\Angle" },
      "\u299D": { math: "\\rightanglemdot" },
      "\u299E": { math: "\\angles" },
      "\u299F": { math: "\\angdnr" },
      "\u29A0": { math: "\\Elzlpargt" },
      "\u29A1": { math: "\\sphericalangleup" },
      "\u29A2": { math: "\\turnangle" },
      "\u29A3": { math: "\\revangle" },
      "\u29A4": { math: "\\angleubar" },
      "\u29A5": { math: "\\revangleubar" },
      "\u29A6": { math: "\\wideangledown" },
      "\u29A7": { math: "\\wideangleup" },
      "\u29A8": { math: "\\measanglerutone" },
      "\u29A9": { math: "\\measanglelutonw" },
      "\u29AA": { math: "\\measanglerdtose" },
      "\u29AB": { math: "\\measangleldtosw" },
      "\u29AC": { math: "\\measangleurtone" },
      "\u29AD": { math: "\\measangleultonw" },
      "\u29AE": { math: "\\measangledrtose" },
      "\u29AF": { math: "\\measangledltosw" },
      "\u29B0": { math: "\\revemptyset" },
      "\u29B1": { math: "\\emptysetobar" },
      "\u29B2": { math: "\\emptysetocirc" },
      "\u29B3": { math: "\\emptysetoarr" },
      "\u29B4": { math: "\\emptysetoarrl" },
      "\u29B7": { math: "\\circledparallel" },
      "\u29B8": { math: "\\circledbslash" },
      "\u29B9": { math: "\\operp" },
      "\u29BA": { math: "\\obot" },
      "\u29BB": { math: "\\olcross" },
      "\u29BC": { math: "\\odotslashdot" },
      "\u29BD": { math: "\\uparrowoncircle" },
      "\u29BE": { math: "\\circledwhitebullet" },
      "\u29BF": { math: "\\circledbullet" },
      "\u29C0": { math: "\\circledless" },
      "\u29C1": { math: "\\circledgtr" },
      "\u29C2": { math: "\\cirscir" },
      "\u29C3": { math: "\\cirE" },
      "\u29C4": { math: "\\boxslash" },
      "\u29C5": { math: "\\boxbslash" },
      "\u29C6": { math: "\\boxast" },
      "\u29C7": { math: "\\boxcircle" },
      "\u29C8": { math: "\\boxbox" },
      "\u29C9": { math: "\\boxonbox" },
      "\u29CA": { math: "\\ElzLap" },
      "\u29CB": { math: "\\Elzdefas" },
      "\u29CC": { math: "\\triangles" },
      "\u29CD": { math: "\\triangleserifs" },
      "\u29CE": { math: "\\rtriltri" },
      "\u29CF": { math: "\\LeftTriangleBar" },
      "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
      "\u29D0": { math: "\\RightTriangleBar" },
      "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
      "\u29D1": { math: "\\lfbowtie" },
      "\u29D2": { math: "\\rfbowtie" },
      "\u29D3": { math: "\\fbowtie" },
      "\u29D4": { math: "\\lftimes" },
      "\u29D5": { math: "\\rftimes" },
      "\u29D6": { math: "\\hourglass" },
      "\u29D7": { math: "\\blackhourglass" },
      "\u29D8": { math: "\\lvzigzag" },
      "\u29D9": { math: "\\rvzigzag" },
      "\u29DA": { math: "\\Lvzigzag" },
      "\u29DB": { math: "\\Rvzigzag" },
      "\u29DD": { math: "\\tieinfty" },
      "\u29DE": { math: "\\nvinfty" },
      "\u29DF": { math: "\\multimapboth" },
      "\u29E0": { math: "\\laplac" },
      "\u29E1": { math: "\\lrtriangleeq" },
      "\u29E2": { math: "\\shuffle" },
      "\u29E3": { math: "\\eparsl" },
      "\u29E4": { math: "\\smeparsl" },
      "\u29E5": { math: "\\eqvparsl" },
      "\u29E6": { math: "\\gleichstark" },
      "\u29E7": { math: "\\thermod" },
      "\u29E8": { math: "\\downtriangleleftblack" },
      "\u29E9": { math: "\\downtrianglerightblack" },
      "\u29EA": { math: "\\blackdiamonddownarrow" },
      "\u29EB": { math: "\\blacklozenge" },
      "\u29EC": { math: "\\circledownarrow" },
      "\u29ED": { math: "\\blackcircledownarrow" },
      "\u29EE": { math: "\\errbarsquare" },
      "\u29EF": { math: "\\errbarblacksquare" },
      "\u29F0": { math: "\\errbardiamond" },
      "\u29F1": { math: "\\errbarblackdiamond" },
      "\u29F2": { math: "\\errbarcircle" },
      "\u29F3": { math: "\\errbarblackcircle" },
      "\u29F4": { math: "\\RuleDelayed" },
      "\u29F5": { math: "\\setminus" },
      "\u29F6": { math: "\\dsol" },
      "\u29F7": { math: "\\rsolbar" },
      "\u29F8": { math: "\\xsol" },
      "\u29F9": { math: "\\zhide" },
      "\u29FA": { math: "\\doubleplus" },
      "\u29FB": { math: "\\tripleplus" },
      "\u29FC": { math: "\\lcurvyangle" },
      "\u29FD": { math: "\\rcurvyangle" },
      "\u29FE": { math: "\\tplus" },
      "\u29FF": { math: "\\tminus" },
      "\u2A00": { math: "\\bigodot" },
      "\u2A01": { math: "\\bigoplus" },
      "\u2A02": { math: "\\bigotimes" },
      "\u2A03": { math: "\\bigcupdot" },
      "\u2A04": { math: "\\Elxuplus" },
      "\u2A05": { math: "\\ElzThr" },
      "\u2A06": { math: "\\Elxsqcup" },
      "\u2A07": { math: "\\ElzInf" },
      "\u2A08": { math: "\\ElzSup" },
      "\u2A09": { math: "\\varprod" },
      "\u2A0A": { math: "\\modtwosum" },
      "\u2A0B": { math: "\\sumint" },
      "\u2A0C": { math: "\\iiiint" },
      "\u2A0D": { math: "\\ElzCint" },
      "\u2A0E": { math: "\\intBar" },
      "\u2A0F": { math: "\\clockoint" },
      "\u2A11": { math: "\\awint" },
      "\u2A12": { math: "\\rppolint" },
      "\u2A13": { math: "\\scpolint" },
      "\u2A14": { math: "\\npolint" },
      "\u2A15": { math: "\\pointint" },
      "\u2A16": { math: "\\sqrint" },
      "\u2A17": { math: "\\intlarhk" },
      "\u2A18": { math: "\\intx" },
      "\u2A19": { math: "\\intcap" },
      "\u2A1A": { math: "\\intcup" },
      "\u2A1B": { math: "\\upint" },
      "\u2A1C": { math: "\\lowint" },
      "\u2A1D": { math: "\\Join" },
      "\u2A1E": { math: "\\bigtriangleleft" },
      "\u2A1F": { math: "\\zcmp" },
      "\u2A20": { math: "\\zpipe" },
      "\u2A21": { math: "\\zproject" },
      "\u2A22": { math: "\\ringplus" },
      "\u2A23": { math: "\\plushat" },
      "\u2A24": { math: "\\simplus" },
      "\u2A26": { math: "\\plussim" },
      "\u2A27": { math: "\\plussubtwo" },
      "\u2A28": { math: "\\plustrif" },
      "\u2A29": { math: "\\commaminus" },
      "\u2A2B": { math: "\\minusfdots" },
      "\u2A2C": { math: "\\minusrdots" },
      "\u2A2F": { math: "\\ElzTimes" },
      "\u2A30": { math: "\\dottimes" },
      "\u2A31": { math: "\\timesbar" },
      "\u2A32": { math: "\\btimes" },
      "\u2A33": { math: "\\smashtimes" },
      "\u2A36": { math: "\\otimeshat" },
      "\u2A37": { math: "\\Otimes" },
      "\u2A38": { math: "\\odiv" },
      "\u2A39": { math: "\\triangleplus" },
      "\u2A3A": { math: "\\triangleminus" },
      "\u2A3B": { math: "\\triangletimes" },
      "\u2A3D": { math: "\\intprodr" },
      "\u2A3E": { math: "\\fcmp" },
      "\u2A3F": { math: "\\amalg" },
      "\u2A40": { math: "\\capdot" },
      "\u2A41": { math: "\\uminus" },
      "\u2A42": { math: "\\barcup" },
      "\u2A43": { math: "\\barcap" },
      "\u2A44": { math: "\\capwedge" },
      "\u2A45": { math: "\\cupvee" },
      "\u2A46": { math: "\\cupovercap" },
      "\u2A47": { math: "\\capovercup" },
      "\u2A48": { math: "\\cupbarcap" },
      "\u2A49": { math: "\\capbarcup" },
      "\u2A4A": { math: "\\twocups" },
      "\u2A4B": { math: "\\twocaps" },
      "\u2A4C": { math: "\\closedvarcup" },
      "\u2A4D": { math: "\\closedvarcap" },
      "\u2A4E": { math: "\\Sqcap" },
      "\u2A4F": { math: "\\Sqcup" },
      "\u2A50": { math: "\\closedvarcupsmashprod" },
      "\u2A51": { math: "\\wedgeodot" },
      "\u2A52": { math: "\\veeodot" },
      "\u2A53": { math: "\\ElzAnd" },
      "\u2A54": { math: "\\ElzOr" },
      "\u2A56": { math: "\\ElOr" },
      "\u2A57": { math: "\\bigslopedvee" },
      "\u2A58": { math: "\\bigslopedwedge" },
      "\u2A59": { math: "\\veeonwedge" },
      "\u2A5A": { math: "\\wedgemidvert" },
      "\u2A5B": { math: "\\veemidvert" },
      "\u2A5C": { math: "\\midbarwedge" },
      "\u2A5D": { math: "\\midbarvee" },
      "\u2A5E": { math: "\\perspcorrespond" },
      "\u2A5F": { math: "\\Elzminhat" },
      "\u2A60": { math: "\\wedgedoublebar" },
      "\u2A61": { math: "\\varveebar" },
      "\u2A62": { math: "\\doublebarvee" },
      "\u2A64": { math: "\\dsub" },
      "\u2A65": { math: "\\rsub" },
      "\u2A66": { math: "\\eqdot" },
      "\u2A67": { math: "\\dotequiv" },
      "\u2A68": { math: "\\equivVert" },
      "\u2A69": { math: "\\equivVvert" },
      "\u2A6A": { math: "\\dotsim" },
      "\u2A6B": { math: "\\simrdots" },
      "\u2A6C": { math: "\\simminussim" },
      "\u2A6D": { math: "\\congdot" },
      "\u2A6E": { math: "\\stackrel{*}{=}" },
      "\u2A6F": { math: "\\hatapprox" },
      "\u2A70": { math: "\\approxeqq" },
      "\u2A71": { math: "\\eqqplus" },
      "\u2A72": { math: "\\pluseqq" },
      "\u2A73": { math: "\\eqqsim" },
      "\u2A74": { math: "\\Coloneqq" },
      "\u2A75": { math: "\\Equal" },
      "\u2A76": { math: "\\Same" },
      "\u2A77": { math: "\\ddotseq" },
      "\u2A78": { math: "\\equivDD" },
      "\u2A79": { math: "\\ltcir" },
      "\u2A7A": { math: "\\gtcir" },
      "\u2A7B": { math: "\\ltquest" },
      "\u2A7C": { math: "\\gtquest" },
      "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
      "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
      "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
      "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
      "\u2A7F": { math: "\\lesdot" },
      "\u2A80": { math: "\\gesdot" },
      "\u2A81": { math: "\\lesdoto" },
      "\u2A82": { math: "\\gesdoto" },
      "\u2A83": { math: "\\lesdotor" },
      "\u2A84": { math: "\\gesdotol" },
      "\u2A85": { math: "\\lessapprox" },
      "\u2A86": { math: "\\gtrapprox" },
      "\u2A87": { math: "\\lneq" },
      "\u2A88": { math: "\\gneq" },
      "\u2A89": { math: "\\lnapprox" },
      "\u2A8A": { math: "\\gnapprox" },
      "\u2A8B": { math: "\\lesseqqgtr" },
      "\u2A8C": { math: "\\gtreqqless" },
      "\u2A8D": { math: "\\lsime" },
      "\u2A8E": { math: "\\gsime" },
      "\u2A8F": { math: "\\lsimg" },
      "\u2A90": { math: "\\gsiml" },
      "\u2A91": { math: "\\lgE" },
      "\u2A92": { math: "\\glE" },
      "\u2A93": { math: "\\lesges" },
      "\u2A94": { math: "\\gesles" },
      "\u2A95": { math: "\\eqslantless" },
      "\u2A96": { math: "\\eqslantgtr" },
      "\u2A97": { math: "\\elsdot" },
      "\u2A98": { math: "\\egsdot" },
      "\u2A99": { math: "\\eqqless" },
      "\u2A9A": { math: "\\eqqgtr" },
      "\u2A9B": { math: "\\eqqslantless" },
      "\u2A9C": { math: "\\eqqslantgtr" },
      "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
      "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
      "\u2A9F": { math: "\\simlE" },
      "\u2AA0": { math: "\\simgE" },
      "\u2AA1": { math: "\\NestedLessLess" },
      "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
      "\u2AA2": { math: "\\NestedGreaterGreater" },
      "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
      "\u2AA3": { math: "\\partialmeetcontraction" },
      "\u2AA4": { math: "\\glj" },
      "\u2AA5": { math: "\\gla" },
      "\u2AA6": { math: "\\leftslice" },
      "\u2AA7": { math: "\\rightslice" },
      "\u2AA8": { math: "\\lescc" },
      "\u2AA9": { math: "\\gescc" },
      "\u2AAA": { math: "\\smt" },
      "\u2AAB": { math: "\\lat" },
      "\u2AAC": { math: "\\smte" },
      "\u2AAD": { math: "\\late" },
      "\u2AAE": { math: "\\bumpeqq" },
      "\u2AAF": { math: "\\preceq" },
      "\u2AAF\u0338": { math: "\\not\\preceq" },
      "\u2AB0": { math: "\\succeq" },
      "\u2AB0\u0338": { math: "\\not\\succeq" },
      "\u2AB1": { math: "\\precneq" },
      "\u2AB2": { math: "\\succneq" },
      "\u2AB3": { math: "\\preceqq" },
      "\u2AB4": { math: "\\succeqq" },
      "\u2AB5": { math: "\\precneqq" },
      "\u2AB6": { math: "\\succneqq" },
      "\u2AB7": { math: "\\precapprox" },
      "\u2AB8": { math: "\\succapprox" },
      "\u2AB9": { math: "\\precnapprox" },
      "\u2ABA": { math: "\\succnapprox" },
      "\u2ABB": { math: "\\llcurly" },
      "\u2ABC": { math: "\\ggcurly" },
      "\u2ABD": { math: "\\subsetdot" },
      "\u2ABE": { math: "\\supsetdot" },
      "\u2ABF": { math: "\\subsetplus" },
      "\u2AC0": { math: "\\supsetplus" },
      "\u2AC1": { math: "\\submult" },
      "\u2AC2": { math: "\\supmult" },
      "\u2AC3": { math: "\\subedot" },
      "\u2AC4": { math: "\\supedot" },
      "\u2AC5": { math: "\\subseteqq" },
      "\u2AC5\u0338": { math: "\\nsubseteqq" },
      "\u2AC6": { math: "\\supseteqq" },
      "\u2AC6\u0338": { math: "\\nsupseteqq" },
      "\u2AC7": { math: "\\subsim" },
      "\u2AC8": { math: "\\supsim" },
      "\u2AC9": { math: "\\subsetapprox" },
      "\u2ACA": { math: "\\supsetapprox" },
      "\u2ACB": { math: "\\subsetneqq" },
      "\u2ACC": { math: "\\supsetneqq" },
      "\u2ACD": { math: "\\lsqhook" },
      "\u2ACE": { math: "\\rsqhook" },
      "\u2ACF": { math: "\\csub" },
      "\u2AD0": { math: "\\csup" },
      "\u2AD1": { math: "\\csube" },
      "\u2AD2": { math: "\\csupe" },
      "\u2AD3": { math: "\\subsup" },
      "\u2AD4": { math: "\\supsub" },
      "\u2AD5": { math: "\\subsub" },
      "\u2AD6": { math: "\\supsup" },
      "\u2AD7": { math: "\\suphsub" },
      "\u2AD8": { math: "\\supdsub" },
      "\u2AD9": { math: "\\forkv" },
      "\u2ADA": { math: "\\topfork" },
      "\u2ADB": { math: "\\mlcp" },
      "\u2ADC": { math: "\\forks" },
      "\u2ADD": { math: "\\forksnot" },
      "\u2ADD\u0338": { math: "\\forks" },
      "\u2ADE": { math: "\\shortlefttack" },
      "\u2ADF": { math: "\\shortdowntack" },
      "\u2AE0": { math: "\\shortuptack" },
      "\u2AE1": { math: "\\perps" },
      "\u2AE2": { math: "\\vDdash" },
      "\u2AE3": { math: "\\dashV" },
      "\u2AE4": { math: "\\Dashv" },
      "\u2AE5": { math: "\\DashV" },
      "\u2AE6": { math: "\\varVdash" },
      "\u2AE7": { math: "\\Barv" },
      "\u2AE8": { math: "\\vBar" },
      "\u2AE9": { math: "\\vBarv" },
      "\u2AEA": { math: "\\Top" },
      "\u2AEC": { math: "\\Not" },
      "\u2AED": { math: "\\bNot" },
      "\u2AEE": { math: "\\revnmid" },
      "\u2AEF": { math: "\\cirmid" },
      "\u2AF0": { math: "\\midcir" },
      "\u2AF1": { math: "\\topcir" },
      "\u2AF2": { math: "\\nhpar" },
      "\u2AF3": { math: "\\parsim" },
      "\u2AF4": { math: "\\interleave" },
      "\u2AF5": { math: "\\nhVvert" },
      "\u2AF6": { math: "\\Elztdcol" },
      "\u2AF7": { math: "\\lllnest" },
      "\u2AF8": { math: "\\gggnest" },
      "\u2AF9": { math: "\\leqqslant" },
      "\u2AFA": { math: "\\geqqslant" },
      "\u2AFB": { math: "\\trslash" },
      "\u2AFC": { math: "\\biginterleave" },
      "\u2AFD": { math: "{{/}\\!\\!{/}}" },
      "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
      "\u2AFE": { math: "\\talloblong" },
      "\u2AFF": { math: "\\bigtalloblong" },
      "\u2B12": { math: "\\squaretopblack" },
      "\u2B13": { math: "\\squarebotblack" },
      "\u2B14": { math: "\\squareurblack" },
      "\u2B15": { math: "\\squarellblack" },
      "\u2B16": { math: "\\diamondleftblack" },
      "\u2B17": { math: "\\diamondrightblack" },
      "\u2B18": { math: "\\diamondtopblack" },
      "\u2B19": { math: "\\diamondbotblack" },
      "\u2B1A": { math: "\\dottedsquare" },
      "\u2B1B": { math: "\\blacksquare" },
      "\u2B1C": { math: "\\square" },
      "\u2B1D": { math: "\\vysmblksquare" },
      "\u2B1E": { math: "\\vysmwhtsquare" },
      "\u2B1F": { math: "\\pentagonblack" },
      "\u2B20": { math: "\\pentagon" },
      "\u2B21": { math: "\\varhexagon" },
      "\u2B22": { math: "\\varhexagonblack" },
      "\u2B23": { math: "\\hexagonblack" },
      "\u2B24": { math: "\\lgblkcircle" },
      "\u2B25": { math: "\\mdblkdiamond" },
      "\u2B26": { math: "\\mdwhtdiamond" },
      "\u2B27": { math: "\\mdblklozenge" },
      "\u2B28": { math: "\\mdwhtlozenge" },
      "\u2B29": { math: "\\smblkdiamond" },
      "\u2B2A": { math: "\\smblklozenge" },
      "\u2B2B": { math: "\\smwhtlozenge" },
      "\u2B2C": { math: "\\blkhorzoval" },
      "\u2B2D": { math: "\\whthorzoval" },
      "\u2B2E": { math: "\\blkvertoval" },
      "\u2B2F": { math: "\\whtvertoval" },
      "\u2B30": { math: "\\circleonleftarrow" },
      "\u2B31": { math: "\\leftthreearrows" },
      "\u2B32": { math: "\\leftarrowonoplus" },
      "\u2B33": { math: "\\longleftsquigarrow" },
      "\u2B34": { math: "\\nvtwoheadleftarrow" },
      "\u2B35": { math: "\\nVtwoheadleftarrow" },
      "\u2B36": { math: "\\twoheadmapsfrom" },
      "\u2B37": { math: "\\twoheadleftdbkarrow" },
      "\u2B38": { math: "\\leftdotarrow" },
      "\u2B39": { math: "\\nvleftarrowtail" },
      "\u2B3A": { math: "\\nVleftarrowtail" },
      "\u2B3B": { math: "\\twoheadleftarrowtail" },
      "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
      "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
      "\u2B3E": { math: "\\leftarrowx" },
      "\u2B3F": { math: "\\leftcurvedarrow" },
      "\u2B40": { math: "\\equalleftarrow" },
      "\u2B41": { math: "\\bsimilarleftarrow" },
      "\u2B42": { math: "\\leftarrowbackapprox" },
      "\u2B43": { math: "\\rightarrowgtr" },
      "\u2B44": { math: "\\rightarrowsupset" },
      "\u2B45": { math: "\\LLeftarrow" },
      "\u2B46": { math: "\\RRightarrow" },
      "\u2B47": { math: "\\bsimilarrightarrow" },
      "\u2B48": { math: "\\rightarrowbackapprox" },
      "\u2B49": { math: "\\similarleftarrow" },
      "\u2B4A": { math: "\\leftarrowapprox" },
      "\u2B4B": { math: "\\leftarrowbsimilar" },
      "\u2B4C": { math: "\\rightarrowbsimilar" },
      "\u2B50": { math: "\\medwhitestar" },
      "\u2B51": { math: "\\medblackstar" },
      "\u2B52": { math: "\\smwhitestar" },
      "\u2B53": { math: "\\rightpentagonblack" },
      "\u2B54": { math: "\\rightpentagon" },
      "\u3008": { math: "\\langle" },
      "\u3009": { math: "\\rangle" },
      "\u3012": { math: "\\postalmark" },
      "\u3014": { math: "\\lbrbrak" },
      "\u3015": { math: "\\rbrbrak" },
      "\u301A": { math: "\\openbracketleft" },
      "\u301B": { math: "\\openbracketright" },
      "\u3030": { math: "\\hzigzag" },
      \uFB00: { text: "ff" },
      \uFB01: { text: "fi" },
      \uFB02: { text: "fl" },
      \uFB03: { text: "ffi" },
      \uFB04: { text: "ffl" },
      \uFB05: { text: "st" },
      \uFB06: { text: "st" },
      "\uFFFD": { text: "\\dbend", commandspacer: true },
      "\u{1D400}": { math: "\\mathbf{A}" },
      "\u{1D401}": { math: "\\mathbf{B}" },
      "\u{1D402}": { math: "\\mathbf{C}" },
      "\u{1D403}": { math: "\\mathbf{D}" },
      "\u{1D404}": { math: "\\mathbf{E}" },
      "\u{1D405}": { math: "\\mathbf{F}" },
      "\u{1D406}": { math: "\\mathbf{G}" },
      "\u{1D407}": { math: "\\mathbf{H}" },
      "\u{1D408}": { math: "\\mathbf{I}" },
      "\u{1D409}": { math: "\\mathbf{J}" },
      "\u{1D40A}": { math: "\\mathbf{K}" },
      "\u{1D40B}": { math: "\\mathbf{L}" },
      "\u{1D40C}": { math: "\\mathbf{M}" },
      "\u{1D40D}": { math: "\\mathbf{N}" },
      "\u{1D40E}": { math: "\\mathbf{O}" },
      "\u{1D40F}": { math: "\\mathbf{P}" },
      "\u{1D410}": { math: "\\mathbf{Q}" },
      "\u{1D411}": { math: "\\mathbf{R}" },
      "\u{1D412}": { math: "\\mathbf{S}" },
      "\u{1D413}": { math: "\\mathbf{T}" },
      "\u{1D414}": { math: "\\mathbf{U}" },
      "\u{1D415}": { math: "\\mathbf{V}" },
      "\u{1D416}": { math: "\\mathbf{W}" },
      "\u{1D417}": { math: "\\mathbf{X}" },
      "\u{1D418}": { math: "\\mathbf{Y}" },
      "\u{1D419}": { math: "\\mathbf{Z}" },
      "\u{1D41A}": { math: "\\mathbf{a}" },
      "\u{1D41B}": { math: "\\mathbf{b}" },
      "\u{1D41C}": { math: "\\mathbf{c}" },
      "\u{1D41D}": { math: "\\mathbf{d}" },
      "\u{1D41E}": { math: "\\mathbf{e}" },
      "\u{1D41F}": { math: "\\mathbf{f}" },
      "\u{1D420}": { math: "\\mathbf{g}" },
      "\u{1D421}": { math: "\\mathbf{h}" },
      "\u{1D422}": { math: "\\mathbf{i}" },
      "\u{1D423}": { math: "\\mathbf{j}" },
      "\u{1D424}": { math: "\\mathbf{k}" },
      "\u{1D425}": { math: "\\mathbf{l}" },
      "\u{1D426}": { math: "\\mathbf{m}" },
      "\u{1D427}": { math: "\\mathbf{n}" },
      "\u{1D428}": { math: "\\mathbf{o}" },
      "\u{1D429}": { math: "\\mathbf{p}" },
      "\u{1D42A}": { math: "\\mathbf{q}" },
      "\u{1D42B}": { math: "\\mathbf{r}" },
      "\u{1D42C}": { math: "\\mathbf{s}" },
      "\u{1D42D}": { math: "\\mathbf{t}" },
      "\u{1D42E}": { math: "\\mathbf{u}" },
      "\u{1D42F}": { math: "\\mathbf{v}" },
      "\u{1D430}": { math: "\\mathbf{w}" },
      "\u{1D431}": { math: "\\mathbf{x}" },
      "\u{1D432}": { math: "\\mathbf{y}" },
      "\u{1D433}": { math: "\\mathbf{z}" },
      "\u{1D434}": { math: "\\mathsl{A}" },
      "\u{1D435}": { math: "\\mathsl{B}" },
      "\u{1D436}": { math: "\\mathsl{C}" },
      "\u{1D437}": { math: "\\mathsl{D}" },
      "\u{1D438}": { math: "\\mathsl{E}" },
      "\u{1D439}": { math: "\\mathsl{F}" },
      "\u{1D43A}": { math: "\\mathsl{G}" },
      "\u{1D43B}": { math: "\\mathsl{H}" },
      "\u{1D43C}": { math: "\\mathsl{I}" },
      "\u{1D43D}": { math: "\\mathsl{J}" },
      "\u{1D43E}": { math: "\\mathsl{K}" },
      "\u{1D43F}": { math: "\\mathsl{L}" },
      "\u{1D440}": { math: "\\mathsl{M}" },
      "\u{1D441}": { math: "\\mathsl{N}" },
      "\u{1D442}": { math: "\\mathsl{O}" },
      "\u{1D443}": { math: "\\mathsl{P}" },
      "\u{1D444}": { math: "\\mathsl{Q}" },
      "\u{1D445}": { math: "\\mathsl{R}" },
      "\u{1D446}": { math: "\\mathsl{S}" },
      "\u{1D447}": { math: "\\mathsl{T}" },
      "\u{1D448}": { math: "\\mathsl{U}" },
      "\u{1D449}": { math: "\\mathsl{V}" },
      "\u{1D44A}": { math: "\\mathsl{W}" },
      "\u{1D44B}": { math: "\\mathsl{X}" },
      "\u{1D44C}": { math: "\\mathsl{Y}" },
      "\u{1D44D}": { math: "\\mathsl{Z}" },
      "\u{1D44E}": { math: "\\mathsl{a}" },
      "\u{1D44F}": { math: "\\mathsl{b}" },
      "\u{1D450}": { math: "\\mathsl{c}" },
      "\u{1D451}": { math: "\\mathsl{d}" },
      "\u{1D452}": { math: "\\mathsl{e}" },
      "\u{1D453}": { math: "\\mathsl{f}" },
      "\u{1D454}": { math: "\\mathsl{g}" },
      "\u{1D456}": { math: "\\mathsl{i}" },
      "\u{1D457}": { math: "\\mathsl{j}" },
      "\u{1D458}": { math: "\\mathsl{k}" },
      "\u{1D459}": { math: "\\mathsl{l}" },
      "\u{1D45A}": { math: "\\mathsl{m}" },
      "\u{1D45B}": { math: "\\mathsl{n}" },
      "\u{1D45C}": { math: "\\mathsl{o}" },
      "\u{1D45D}": { math: "\\mathsl{p}" },
      "\u{1D45E}": { math: "\\mathsl{q}" },
      "\u{1D45F}": { math: "\\mathsl{r}" },
      "\u{1D460}": { math: "\\mathsl{s}" },
      "\u{1D461}": { math: "\\mathsl{t}" },
      "\u{1D462}": { math: "\\mathsl{u}" },
      "\u{1D463}": { math: "\\mathsl{v}" },
      "\u{1D464}": { math: "\\mathsl{w}" },
      "\u{1D465}": { math: "\\mathsl{x}" },
      "\u{1D466}": { math: "\\mathsl{y}" },
      "\u{1D467}": { math: "\\mathsl{z}" },
      "\u{1D468}": { math: "\\mathbit{A}" },
      "\u{1D469}": { math: "\\mathbit{B}" },
      "\u{1D46A}": { math: "\\mathbit{C}" },
      "\u{1D46B}": { math: "\\mathbit{D}" },
      "\u{1D46C}": { math: "\\mathbit{E}" },
      "\u{1D46D}": { math: "\\mathbit{F}" },
      "\u{1D46E}": { math: "\\mathbit{G}" },
      "\u{1D46F}": { math: "\\mathbit{H}" },
      "\u{1D470}": { math: "\\mathbit{I}" },
      "\u{1D471}": { math: "\\mathbit{J}" },
      "\u{1D472}": { math: "\\mathbit{K}" },
      "\u{1D473}": { math: "\\mathbit{L}" },
      "\u{1D474}": { math: "\\mathbit{M}" },
      "\u{1D475}": { math: "\\mathbit{N}" },
      "\u{1D476}": { math: "\\mathbit{O}" },
      "\u{1D477}": { math: "\\mathbit{P}" },
      "\u{1D478}": { math: "\\mathbit{Q}" },
      "\u{1D479}": { math: "\\mathbit{R}" },
      "\u{1D47A}": { math: "\\mathbit{S}" },
      "\u{1D47B}": { math: "\\mathbit{T}" },
      "\u{1D47C}": { math: "\\mathbit{U}" },
      "\u{1D47D}": { math: "\\mathbit{V}" },
      "\u{1D47E}": { math: "\\mathbit{W}" },
      "\u{1D47F}": { math: "\\mathbit{X}" },
      "\u{1D480}": { math: "\\mathbit{Y}" },
      "\u{1D481}": { math: "\\mathbit{Z}" },
      "\u{1D482}": { math: "\\mathbit{a}" },
      "\u{1D483}": { math: "\\mathbit{b}" },
      "\u{1D484}": { math: "\\mathbit{c}" },
      "\u{1D485}": { math: "\\mathbit{d}" },
      "\u{1D486}": { math: "\\mathbit{e}" },
      "\u{1D487}": { math: "\\mathbit{f}" },
      "\u{1D488}": { math: "\\mathbit{g}" },
      "\u{1D489}": { math: "\\mathbit{h}" },
      "\u{1D48A}": { math: "\\mathbit{i}" },
      "\u{1D48B}": { math: "\\mathbit{j}" },
      "\u{1D48C}": { math: "\\mathbit{k}" },
      "\u{1D48D}": { math: "\\mathbit{l}" },
      "\u{1D48E}": { math: "\\mathbit{m}" },
      "\u{1D48F}": { math: "\\mathbit{n}" },
      "\u{1D490}": { math: "\\mathbit{o}" },
      "\u{1D491}": { math: "\\mathbit{p}" },
      "\u{1D492}": { math: "\\mathbit{q}" },
      "\u{1D493}": { math: "\\mathbit{r}" },
      "\u{1D494}": { math: "\\mathbit{s}" },
      "\u{1D495}": { math: "\\mathbit{t}" },
      "\u{1D496}": { math: "\\mathbit{u}" },
      "\u{1D497}": { math: "\\mathbit{v}" },
      "\u{1D498}": { math: "\\mathbit{w}" },
      "\u{1D499}": { math: "\\mathbit{x}" },
      "\u{1D49A}": { math: "\\mathbit{y}" },
      "\u{1D49B}": { math: "\\mathbit{z}" },
      "\u{1D49C}": { math: "\\mathscr{A}" },
      "\u{1D49E}": { math: "\\mathscr{C}" },
      "\u{1D49F}": { math: "\\mathscr{D}" },
      "\u{1D4A2}": { math: "\\mathscr{G}" },
      "\u{1D4A5}": { math: "\\mathscr{J}" },
      "\u{1D4A6}": { math: "\\mathscr{K}" },
      "\u{1D4A9}": { math: "\\mathscr{N}" },
      "\u{1D4AA}": { math: "\\mathscr{O}" },
      "\u{1D4AB}": { math: "\\mathscr{P}" },
      "\u{1D4AC}": { math: "\\mathscr{Q}" },
      "\u{1D4AE}": { math: "\\mathscr{S}" },
      "\u{1D4AF}": { math: "\\mathscr{T}" },
      "\u{1D4B0}": { math: "\\mathscr{U}" },
      "\u{1D4B1}": { math: "\\mathscr{V}" },
      "\u{1D4B2}": { math: "\\mathscr{W}" },
      "\u{1D4B3}": { math: "\\mathscr{X}" },
      "\u{1D4B4}": { math: "\\mathscr{Y}" },
      "\u{1D4B5}": { math: "\\mathscr{Z}" },
      "\u{1D4B6}": { math: "\\mathscr{a}" },
      "\u{1D4B7}": { math: "\\mathscr{b}" },
      "\u{1D4B8}": { math: "\\mathscr{c}" },
      "\u{1D4B9}": { math: "\\mathscr{d}" },
      "\u{1D4BB}": { math: "\\mathscr{f}" },
      "\u{1D4BD}": { math: "\\mathscr{h}" },
      "\u{1D4BE}": { math: "\\mathscr{i}" },
      "\u{1D4BF}": { math: "\\mathscr{j}" },
      "\u{1D4C0}": { math: "\\mathscr{k}" },
      "\u{1D4C1}": { math: "\\mathscr{l}" },
      "\u{1D4C2}": { math: "\\mathscr{m}" },
      "\u{1D4C3}": { math: "\\mathscr{n}" },
      "\u{1D4C5}": { math: "\\mathscr{p}" },
      "\u{1D4C6}": { math: "\\mathscr{q}" },
      "\u{1D4C7}": { math: "\\mathscr{r}" },
      "\u{1D4C8}": { math: "\\mathscr{s}" },
      "\u{1D4C9}": { math: "\\mathscr{t}" },
      "\u{1D4CA}": { math: "\\mathscr{u}" },
      "\u{1D4CB}": { math: "\\mathscr{v}" },
      "\u{1D4CC}": { math: "\\mathscr{w}" },
      "\u{1D4CD}": { math: "\\mathscr{x}" },
      "\u{1D4CE}": { math: "\\mathscr{y}" },
      "\u{1D4CF}": { math: "\\mathscr{z}" },
      "\u{1D4D0}": { math: "\\mathmit{A}" },
      "\u{1D4D1}": { math: "\\mathmit{B}" },
      "\u{1D4D2}": { math: "\\mathmit{C}" },
      "\u{1D4D3}": { math: "\\mathmit{D}" },
      "\u{1D4D4}": { math: "\\mathmit{E}" },
      "\u{1D4D5}": { math: "\\mathmit{F}" },
      "\u{1D4D6}": { math: "\\mathmit{G}" },
      "\u{1D4D7}": { math: "\\mathmit{H}" },
      "\u{1D4D8}": { math: "\\mathmit{I}" },
      "\u{1D4D9}": { math: "\\mathmit{J}" },
      "\u{1D4DA}": { math: "\\mathmit{K}" },
      "\u{1D4DB}": { math: "\\mathmit{L}" },
      "\u{1D4DC}": { math: "\\mathmit{M}" },
      "\u{1D4DD}": { math: "\\mathmit{N}" },
      "\u{1D4DE}": { math: "\\mathmit{O}" },
      "\u{1D4DF}": { math: "\\mathmit{P}" },
      "\u{1D4E0}": { math: "\\mathmit{Q}" },
      "\u{1D4E1}": { math: "\\mathmit{R}" },
      "\u{1D4E2}": { math: "\\mathmit{S}" },
      "\u{1D4E3}": { math: "\\mathmit{T}" },
      "\u{1D4E4}": { math: "\\mathmit{U}" },
      "\u{1D4E5}": { math: "\\mathmit{V}" },
      "\u{1D4E6}": { math: "\\mathmit{W}" },
      "\u{1D4E7}": { math: "\\mathmit{X}" },
      "\u{1D4E8}": { math: "\\mathmit{Y}" },
      "\u{1D4E9}": { math: "\\mathmit{Z}" },
      "\u{1D4EA}": { math: "\\mathmit{a}" },
      "\u{1D4EB}": { math: "\\mathmit{b}" },
      "\u{1D4EC}": { math: "\\mathmit{c}" },
      "\u{1D4ED}": { math: "\\mathmit{d}" },
      "\u{1D4EE}": { math: "\\mathmit{e}" },
      "\u{1D4EF}": { math: "\\mathmit{f}" },
      "\u{1D4F0}": { math: "\\mathmit{g}" },
      "\u{1D4F1}": { math: "\\mathmit{h}" },
      "\u{1D4F2}": { math: "\\mathmit{i}" },
      "\u{1D4F3}": { math: "\\mathmit{j}" },
      "\u{1D4F4}": { math: "\\mathmit{k}" },
      "\u{1D4F5}": { math: "\\mathmit{l}" },
      "\u{1D4F6}": { math: "\\mathmit{m}" },
      "\u{1D4F7}": { math: "\\mathmit{n}" },
      "\u{1D4F8}": { math: "\\mathmit{o}" },
      "\u{1D4F9}": { math: "\\mathmit{p}" },
      "\u{1D4FA}": { math: "\\mathmit{q}" },
      "\u{1D4FB}": { math: "\\mathmit{r}" },
      "\u{1D4FC}": { math: "\\mathmit{s}" },
      "\u{1D4FD}": { math: "\\mathmit{t}" },
      "\u{1D4FE}": { math: "\\mathmit{u}" },
      "\u{1D4FF}": { math: "\\mathmit{v}" },
      "\u{1D500}": { math: "\\mathmit{w}" },
      "\u{1D501}": { math: "\\mathmit{x}" },
      "\u{1D502}": { math: "\\mathmit{y}" },
      "\u{1D503}": { math: "\\mathmit{z}" },
      "\u{1D504}": { math: "\\mathfrak{A}" },
      "\u{1D505}": { math: "\\mathfrak{B}" },
      "\u{1D507}": { math: "\\mathfrak{D}" },
      "\u{1D508}": { math: "\\mathfrak{E}" },
      "\u{1D509}": { math: "\\mathfrak{F}" },
      "\u{1D50A}": { math: "\\mathfrak{G}" },
      "\u{1D50D}": { math: "\\mathfrak{J}" },
      "\u{1D50E}": { math: "\\mathfrak{K}" },
      "\u{1D50F}": { math: "\\mathfrak{L}" },
      "\u{1D510}": { math: "\\mathfrak{M}" },
      "\u{1D511}": { math: "\\mathfrak{N}" },
      "\u{1D512}": { math: "\\mathfrak{O}" },
      "\u{1D513}": { math: "\\mathfrak{P}" },
      "\u{1D514}": { math: "\\mathfrak{Q}" },
      "\u{1D516}": { math: "\\mathfrak{S}" },
      "\u{1D517}": { math: "\\mathfrak{T}" },
      "\u{1D518}": { math: "\\mathfrak{U}" },
      "\u{1D519}": { math: "\\mathfrak{V}" },
      "\u{1D51A}": { math: "\\mathfrak{W}" },
      "\u{1D51B}": { math: "\\mathfrak{X}" },
      "\u{1D51C}": { math: "\\mathfrak{Y}" },
      "\u{1D51E}": { math: "\\mathfrak{a}" },
      "\u{1D51F}": { math: "\\mathfrak{b}" },
      "\u{1D520}": { math: "\\mathfrak{c}" },
      "\u{1D521}": { math: "\\mathfrak{d}" },
      "\u{1D522}": { math: "\\mathfrak{e}" },
      "\u{1D523}": { math: "\\mathfrak{f}" },
      "\u{1D524}": { math: "\\mathfrak{g}" },
      "\u{1D525}": { math: "\\mathfrak{h}" },
      "\u{1D526}": { math: "\\mathfrak{i}" },
      "\u{1D527}": { math: "\\mathfrak{j}" },
      "\u{1D528}": { math: "\\mathfrak{k}" },
      "\u{1D529}": { math: "\\mathfrak{l}" },
      "\u{1D52A}": { math: "\\mathfrak{m}" },
      "\u{1D52B}": { math: "\\mathfrak{n}" },
      "\u{1D52C}": { math: "\\mathfrak{o}" },
      "\u{1D52D}": { math: "\\mathfrak{p}" },
      "\u{1D52E}": { math: "\\mathfrak{q}" },
      "\u{1D52F}": { math: "\\mathfrak{r}" },
      "\u{1D530}": { math: "\\mathfrak{s}" },
      "\u{1D531}": { math: "\\mathfrak{t}" },
      "\u{1D532}": { math: "\\mathfrak{u}" },
      "\u{1D533}": { math: "\\mathfrak{v}" },
      "\u{1D534}": { math: "\\mathfrak{w}" },
      "\u{1D535}": { math: "\\mathfrak{x}" },
      "\u{1D536}": { math: "\\mathfrak{y}" },
      "\u{1D537}": { math: "\\mathfrak{z}" },
      "\u{1D538}": { math: "\\mathbb{A}" },
      "\u{1D539}": { math: "\\mathbb{B}" },
      "\u{1D53B}": { math: "\\mathbb{D}" },
      "\u{1D53C}": { math: "\\mathbb{E}" },
      "\u{1D53D}": { math: "\\mathbb{F}" },
      "\u{1D53E}": { math: "\\mathbb{G}" },
      "\u{1D540}": { math: "\\mathbb{I}" },
      "\u{1D541}": { math: "\\mathbb{J}" },
      "\u{1D542}": { math: "\\mathbb{K}" },
      "\u{1D543}": { math: "\\mathbb{L}" },
      "\u{1D544}": { math: "\\mathbb{M}" },
      "\u{1D546}": { math: "\\mathbb{O}" },
      "\u{1D54A}": { math: "\\mathbb{S}" },
      "\u{1D54B}": { math: "\\mathbb{T}" },
      "\u{1D54C}": { math: "\\mathbb{U}" },
      "\u{1D54D}": { math: "\\mathbb{V}" },
      "\u{1D54E}": { math: "\\mathbb{W}" },
      "\u{1D54F}": { math: "\\mathbb{X}" },
      "\u{1D550}": { math: "\\mathbb{Y}" },
      "\u{1D552}": { math: "\\mathbb{a}" },
      "\u{1D553}": { math: "\\mathbb{b}" },
      "\u{1D554}": { math: "\\mathbb{c}" },
      "\u{1D555}": { math: "\\mathbb{d}" },
      "\u{1D556}": { math: "\\mathbb{e}" },
      "\u{1D557}": { math: "\\mathbb{f}" },
      "\u{1D558}": { math: "\\mathbb{g}" },
      "\u{1D559}": { math: "\\mathbb{h}" },
      "\u{1D55A}": { math: "\\mathbb{i}" },
      "\u{1D55B}": { math: "\\mathbb{j}" },
      "\u{1D55C}": { math: "\\mathbb{k}" },
      "\u{1D55D}": { math: "\\mathbb{l}" },
      "\u{1D55E}": { math: "\\mathbb{m}" },
      "\u{1D55F}": { math: "\\mathbb{n}" },
      "\u{1D560}": { math: "\\mathbb{o}" },
      "\u{1D561}": { math: "\\mathbb{p}" },
      "\u{1D562}": { math: "\\mathbb{q}" },
      "\u{1D563}": { math: "\\mathbb{r}" },
      "\u{1D564}": { math: "\\mathbb{s}" },
      "\u{1D565}": { math: "\\mathbb{t}" },
      "\u{1D566}": { math: "\\mathbb{u}" },
      "\u{1D567}": { math: "\\mathbb{v}" },
      "\u{1D568}": { math: "\\mathbb{w}" },
      "\u{1D569}": { math: "\\mathbb{x}" },
      "\u{1D56A}": { math: "\\mathbb{y}" },
      "\u{1D56B}": { math: "\\mathbb{z}" },
      "\u{1D56C}": { math: "\\mathslbb{A}" },
      "\u{1D56D}": { math: "\\mathslbb{B}" },
      "\u{1D56E}": { math: "\\mathslbb{C}" },
      "\u{1D56F}": { math: "\\mathslbb{D}" },
      "\u{1D570}": { math: "\\mathslbb{E}" },
      "\u{1D571}": { math: "\\mathslbb{F}" },
      "\u{1D572}": { math: "\\mathslbb{G}" },
      "\u{1D573}": { math: "\\mathslbb{H}" },
      "\u{1D574}": { math: "\\mathslbb{I}" },
      "\u{1D575}": { math: "\\mathslbb{J}" },
      "\u{1D576}": { math: "\\mathslbb{K}" },
      "\u{1D577}": { math: "\\mathslbb{L}" },
      "\u{1D578}": { math: "\\mathslbb{M}" },
      "\u{1D579}": { math: "\\mathslbb{N}" },
      "\u{1D57A}": { math: "\\mathslbb{O}" },
      "\u{1D57B}": { math: "\\mathslbb{P}" },
      "\u{1D57C}": { math: "\\mathslbb{Q}" },
      "\u{1D57D}": { math: "\\mathslbb{R}" },
      "\u{1D57E}": { math: "\\mathslbb{S}" },
      "\u{1D57F}": { math: "\\mathslbb{T}" },
      "\u{1D580}": { math: "\\mathslbb{U}" },
      "\u{1D581}": { math: "\\mathslbb{V}" },
      "\u{1D582}": { math: "\\mathslbb{W}" },
      "\u{1D583}": { math: "\\mathslbb{X}" },
      "\u{1D584}": { math: "\\mathslbb{Y}" },
      "\u{1D585}": { math: "\\mathslbb{Z}" },
      "\u{1D586}": { math: "\\mathslbb{a}" },
      "\u{1D587}": { math: "\\mathslbb{b}" },
      "\u{1D588}": { math: "\\mathslbb{c}" },
      "\u{1D589}": { math: "\\mathslbb{d}" },
      "\u{1D58A}": { math: "\\mathslbb{e}" },
      "\u{1D58B}": { math: "\\mathslbb{f}" },
      "\u{1D58C}": { math: "\\mathslbb{g}" },
      "\u{1D58D}": { math: "\\mathslbb{h}" },
      "\u{1D58E}": { math: "\\mathslbb{i}" },
      "\u{1D58F}": { math: "\\mathslbb{j}" },
      "\u{1D590}": { math: "\\mathslbb{k}" },
      "\u{1D591}": { math: "\\mathslbb{l}" },
      "\u{1D592}": { math: "\\mathslbb{m}" },
      "\u{1D593}": { math: "\\mathslbb{n}" },
      "\u{1D594}": { math: "\\mathslbb{o}" },
      "\u{1D595}": { math: "\\mathslbb{p}" },
      "\u{1D596}": { math: "\\mathslbb{q}" },
      "\u{1D597}": { math: "\\mathslbb{r}" },
      "\u{1D598}": { math: "\\mathslbb{s}" },
      "\u{1D599}": { math: "\\mathslbb{t}" },
      "\u{1D59A}": { math: "\\mathslbb{u}" },
      "\u{1D59B}": { math: "\\mathslbb{v}" },
      "\u{1D59C}": { math: "\\mathslbb{w}" },
      "\u{1D59D}": { math: "\\mathslbb{x}" },
      "\u{1D59E}": { math: "\\mathslbb{y}" },
      "\u{1D59F}": { math: "\\mathslbb{z}" },
      "\u{1D5A0}": { math: "\\mathsf{A}" },
      "\u{1D5A1}": { math: "\\mathsf{B}" },
      "\u{1D5A2}": { math: "\\mathsf{C}" },
      "\u{1D5A3}": { math: "\\mathsf{D}" },
      "\u{1D5A4}": { math: "\\mathsf{E}" },
      "\u{1D5A5}": { math: "\\mathsf{F}" },
      "\u{1D5A6}": { math: "\\mathsf{G}" },
      "\u{1D5A7}": { math: "\\mathsf{H}" },
      "\u{1D5A8}": { math: "\\mathsf{I}" },
      "\u{1D5A9}": { math: "\\mathsf{J}" },
      "\u{1D5AA}": { math: "\\mathsf{K}" },
      "\u{1D5AB}": { math: "\\mathsf{L}" },
      "\u{1D5AC}": { math: "\\mathsf{M}" },
      "\u{1D5AD}": { math: "\\mathsf{N}" },
      "\u{1D5AE}": { math: "\\mathsf{O}" },
      "\u{1D5AF}": { math: "\\mathsf{P}" },
      "\u{1D5B0}": { math: "\\mathsf{Q}" },
      "\u{1D5B1}": { math: "\\mathsf{R}" },
      "\u{1D5B2}": { math: "\\mathsf{S}" },
      "\u{1D5B3}": { math: "\\mathsf{T}" },
      "\u{1D5B4}": { math: "\\mathsf{U}" },
      "\u{1D5B5}": { math: "\\mathsf{V}" },
      "\u{1D5B6}": { math: "\\mathsf{W}" },
      "\u{1D5B7}": { math: "\\mathsf{X}" },
      "\u{1D5B8}": { math: "\\mathsf{Y}" },
      "\u{1D5B9}": { math: "\\mathsf{Z}" },
      "\u{1D5BA}": { math: "\\mathsf{a}" },
      "\u{1D5BB}": { math: "\\mathsf{b}" },
      "\u{1D5BC}": { math: "\\mathsf{c}" },
      "\u{1D5BD}": { math: "\\mathsf{d}" },
      "\u{1D5BE}": { math: "\\mathsf{e}" },
      "\u{1D5BF}": { math: "\\mathsf{f}" },
      "\u{1D5C0}": { math: "\\mathsf{g}" },
      "\u{1D5C1}": { math: "\\mathsf{h}" },
      "\u{1D5C2}": { math: "\\mathsf{i}" },
      "\u{1D5C3}": { math: "\\mathsf{j}" },
      "\u{1D5C4}": { math: "\\mathsf{k}" },
      "\u{1D5C5}": { math: "\\mathsf{l}" },
      "\u{1D5C6}": { math: "\\mathsf{m}" },
      "\u{1D5C7}": { math: "\\mathsf{n}" },
      "\u{1D5C8}": { math: "\\mathsf{o}" },
      "\u{1D5C9}": { math: "\\mathsf{p}" },
      "\u{1D5CA}": { math: "\\mathsf{q}" },
      "\u{1D5CB}": { math: "\\mathsf{r}" },
      "\u{1D5CC}": { math: "\\mathsf{s}" },
      "\u{1D5CD}": { math: "\\mathsf{t}" },
      "\u{1D5CE}": { math: "\\mathsf{u}" },
      "\u{1D5CF}": { math: "\\mathsf{v}" },
      "\u{1D5D0}": { math: "\\mathsf{w}" },
      "\u{1D5D1}": { math: "\\mathsf{x}" },
      "\u{1D5D2}": { math: "\\mathsf{y}" },
      "\u{1D5D3}": { math: "\\mathsf{z}" },
      "\u{1D5D4}": { math: "\\mathsfbf{A}" },
      "\u{1D5D5}": { math: "\\mathsfbf{B}" },
      "\u{1D5D6}": { math: "\\mathsfbf{C}" },
      "\u{1D5D7}": { math: "\\mathsfbf{D}" },
      "\u{1D5D8}": { math: "\\mathsfbf{E}" },
      "\u{1D5D9}": { math: "\\mathsfbf{F}" },
      "\u{1D5DA}": { math: "\\mathsfbf{G}" },
      "\u{1D5DB}": { math: "\\mathsfbf{H}" },
      "\u{1D5DC}": { math: "\\mathsfbf{I}" },
      "\u{1D5DD}": { math: "\\mathsfbf{J}" },
      "\u{1D5DE}": { math: "\\mathsfbf{K}" },
      "\u{1D5DF}": { math: "\\mathsfbf{L}" },
      "\u{1D5E0}": { math: "\\mathsfbf{M}" },
      "\u{1D5E1}": { math: "\\mathsfbf{N}" },
      "\u{1D5E2}": { math: "\\mathsfbf{O}" },
      "\u{1D5E3}": { math: "\\mathsfbf{P}" },
      "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
      "\u{1D5E5}": { math: "\\mathsfbf{R}" },
      "\u{1D5E6}": { math: "\\mathsfbf{S}" },
      "\u{1D5E7}": { math: "\\mathsfbf{T}" },
      "\u{1D5E8}": { math: "\\mathsfbf{U}" },
      "\u{1D5E9}": { math: "\\mathsfbf{V}" },
      "\u{1D5EA}": { math: "\\mathsfbf{W}" },
      "\u{1D5EB}": { math: "\\mathsfbf{X}" },
      "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
      "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
      "\u{1D5EE}": { math: "\\mathsfbf{a}" },
      "\u{1D5EF}": { math: "\\mathsfbf{b}" },
      "\u{1D5F0}": { math: "\\mathsfbf{c}" },
      "\u{1D5F1}": { math: "\\mathsfbf{d}" },
      "\u{1D5F2}": { math: "\\mathsfbf{e}" },
      "\u{1D5F3}": { math: "\\mathsfbf{f}" },
      "\u{1D5F4}": { math: "\\mathsfbf{g}" },
      "\u{1D5F5}": { math: "\\mathsfbf{h}" },
      "\u{1D5F6}": { math: "\\mathsfbf{i}" },
      "\u{1D5F7}": { math: "\\mathsfbf{j}" },
      "\u{1D5F8}": { math: "\\mathsfbf{k}" },
      "\u{1D5F9}": { math: "\\mathsfbf{l}" },
      "\u{1D5FA}": { math: "\\mathsfbf{m}" },
      "\u{1D5FB}": { math: "\\mathsfbf{n}" },
      "\u{1D5FC}": { math: "\\mathsfbf{o}" },
      "\u{1D5FD}": { math: "\\mathsfbf{p}" },
      "\u{1D5FE}": { math: "\\mathsfbf{q}" },
      "\u{1D5FF}": { math: "\\mathsfbf{r}" },
      "\u{1D600}": { math: "\\mathsfbf{s}" },
      "\u{1D601}": { math: "\\mathsfbf{t}" },
      "\u{1D602}": { math: "\\mathsfbf{u}" },
      "\u{1D603}": { math: "\\mathsfbf{v}" },
      "\u{1D604}": { math: "\\mathsfbf{w}" },
      "\u{1D605}": { math: "\\mathsfbf{x}" },
      "\u{1D606}": { math: "\\mathsfbf{y}" },
      "\u{1D607}": { math: "\\mathsfbf{z}" },
      "\u{1D608}": { math: "\\mathsfsl{A}" },
      "\u{1D609}": { math: "\\mathsfsl{B}" },
      "\u{1D60A}": { math: "\\mathsfsl{C}" },
      "\u{1D60B}": { math: "\\mathsfsl{D}" },
      "\u{1D60C}": { math: "\\mathsfsl{E}" },
      "\u{1D60D}": { math: "\\mathsfsl{F}" },
      "\u{1D60E}": { math: "\\mathsfsl{G}" },
      "\u{1D60F}": { math: "\\mathsfsl{H}" },
      "\u{1D610}": { math: "\\mathsfsl{I}" },
      "\u{1D611}": { math: "\\mathsfsl{J}" },
      "\u{1D612}": { math: "\\mathsfsl{K}" },
      "\u{1D613}": { math: "\\mathsfsl{L}" },
      "\u{1D614}": { math: "\\mathsfsl{M}" },
      "\u{1D615}": { math: "\\mathsfsl{N}" },
      "\u{1D616}": { math: "\\mathsfsl{O}" },
      "\u{1D617}": { math: "\\mathsfsl{P}" },
      "\u{1D618}": { math: "\\mathsfsl{Q}" },
      "\u{1D619}": { math: "\\mathsfsl{R}" },
      "\u{1D61A}": { math: "\\mathsfsl{S}" },
      "\u{1D61B}": { math: "\\mathsfsl{T}" },
      "\u{1D61C}": { math: "\\mathsfsl{U}" },
      "\u{1D61D}": { math: "\\mathsfsl{V}" },
      "\u{1D61E}": { math: "\\mathsfsl{W}" },
      "\u{1D61F}": { math: "\\mathsfsl{X}" },
      "\u{1D620}": { math: "\\mathsfsl{Y}" },
      "\u{1D621}": { math: "\\mathsfsl{Z}" },
      "\u{1D622}": { math: "\\mathsfsl{a}" },
      "\u{1D623}": { math: "\\mathsfsl{b}" },
      "\u{1D624}": { math: "\\mathsfsl{c}" },
      "\u{1D625}": { math: "\\mathsfsl{d}" },
      "\u{1D626}": { math: "\\mathsfsl{e}" },
      "\u{1D627}": { math: "\\mathsfsl{f}" },
      "\u{1D628}": { math: "\\mathsfsl{g}" },
      "\u{1D629}": { math: "\\mathsfsl{h}" },
      "\u{1D62A}": { math: "\\mathsfsl{i}" },
      "\u{1D62B}": { math: "\\mathsfsl{j}" },
      "\u{1D62C}": { math: "\\mathsfsl{k}" },
      "\u{1D62D}": { math: "\\mathsfsl{l}" },
      "\u{1D62E}": { math: "\\mathsfsl{m}" },
      "\u{1D62F}": { math: "\\mathsfsl{n}" },
      "\u{1D630}": { math: "\\mathsfsl{o}" },
      "\u{1D631}": { math: "\\mathsfsl{p}" },
      "\u{1D632}": { math: "\\mathsfsl{q}" },
      "\u{1D633}": { math: "\\mathsfsl{r}" },
      "\u{1D634}": { math: "\\mathsfsl{s}" },
      "\u{1D635}": { math: "\\mathsfsl{t}" },
      "\u{1D636}": { math: "\\mathsfsl{u}" },
      "\u{1D637}": { math: "\\mathsfsl{v}" },
      "\u{1D638}": { math: "\\mathsfsl{w}" },
      "\u{1D639}": { math: "\\mathsfsl{x}" },
      "\u{1D63A}": { math: "\\mathsfsl{y}" },
      "\u{1D63B}": { math: "\\mathsfsl{z}" },
      "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
      "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
      "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
      "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
      "\u{1D640}": { math: "\\mathsfbfsl{E}" },
      "\u{1D641}": { math: "\\mathsfbfsl{F}" },
      "\u{1D642}": { math: "\\mathsfbfsl{G}" },
      "\u{1D643}": { math: "\\mathsfbfsl{H}" },
      "\u{1D644}": { math: "\\mathsfbfsl{I}" },
      "\u{1D645}": { math: "\\mathsfbfsl{J}" },
      "\u{1D646}": { math: "\\mathsfbfsl{K}" },
      "\u{1D647}": { math: "\\mathsfbfsl{L}" },
      "\u{1D648}": { math: "\\mathsfbfsl{M}" },
      "\u{1D649}": { math: "\\mathsfbfsl{N}" },
      "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
      "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
      "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
      "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
      "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
      "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
      "\u{1D650}": { math: "\\mathsfbfsl{U}" },
      "\u{1D651}": { math: "\\mathsfbfsl{V}" },
      "\u{1D652}": { math: "\\mathsfbfsl{W}" },
      "\u{1D653}": { math: "\\mathsfbfsl{X}" },
      "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
      "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D656}": { math: "\\mathsfbfsl{a}" },
      "\u{1D657}": { math: "\\mathsfbfsl{b}" },
      "\u{1D658}": { math: "\\mathsfbfsl{c}" },
      "\u{1D659}": { math: "\\mathsfbfsl{d}" },
      "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
      "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
      "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
      "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
      "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
      "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
      "\u{1D660}": { math: "\\mathsfbfsl{k}" },
      "\u{1D661}": { math: "\\mathsfbfsl{l}" },
      "\u{1D662}": { math: "\\mathsfbfsl{m}" },
      "\u{1D663}": { math: "\\mathsfbfsl{n}" },
      "\u{1D664}": { math: "\\mathsfbfsl{o}" },
      "\u{1D665}": { math: "\\mathsfbfsl{p}" },
      "\u{1D666}": { math: "\\mathsfbfsl{q}" },
      "\u{1D667}": { math: "\\mathsfbfsl{r}" },
      "\u{1D668}": { math: "\\mathsfbfsl{s}" },
      "\u{1D669}": { math: "\\mathsfbfsl{t}" },
      "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
      "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
      "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
      "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
      "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
      "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
      "\u{1D670}": { math: "\\mathtt{A}" },
      "\u{1D671}": { math: "\\mathtt{B}" },
      "\u{1D672}": { math: "\\mathtt{C}" },
      "\u{1D673}": { math: "\\mathtt{D}" },
      "\u{1D674}": { math: "\\mathtt{E}" },
      "\u{1D675}": { math: "\\mathtt{F}" },
      "\u{1D676}": { math: "\\mathtt{G}" },
      "\u{1D677}": { math: "\\mathtt{H}" },
      "\u{1D678}": { math: "\\mathtt{I}" },
      "\u{1D679}": { math: "\\mathtt{J}" },
      "\u{1D67A}": { math: "\\mathtt{K}" },
      "\u{1D67B}": { math: "\\mathtt{L}" },
      "\u{1D67C}": { math: "\\mathtt{M}" },
      "\u{1D67D}": { math: "\\mathtt{N}" },
      "\u{1D67E}": { math: "\\mathtt{O}" },
      "\u{1D67F}": { math: "\\mathtt{P}" },
      "\u{1D680}": { math: "\\mathtt{Q}" },
      "\u{1D681}": { math: "\\mathtt{R}" },
      "\u{1D682}": { math: "\\mathtt{S}" },
      "\u{1D683}": { math: "\\mathtt{T}" },
      "\u{1D684}": { math: "\\mathtt{U}" },
      "\u{1D685}": { math: "\\mathtt{V}" },
      "\u{1D686}": { math: "\\mathtt{W}" },
      "\u{1D687}": { math: "\\mathtt{X}" },
      "\u{1D688}": { math: "\\mathtt{Y}" },
      "\u{1D689}": { math: "\\mathtt{Z}" },
      "\u{1D68A}": { math: "\\mathtt{a}" },
      "\u{1D68B}": { math: "\\mathtt{b}" },
      "\u{1D68C}": { math: "\\mathtt{c}" },
      "\u{1D68D}": { math: "\\mathtt{d}" },
      "\u{1D68E}": { math: "\\mathtt{e}" },
      "\u{1D68F}": { math: "\\mathtt{f}" },
      "\u{1D690}": { math: "\\mathtt{g}" },
      "\u{1D691}": { math: "\\mathtt{h}" },
      "\u{1D692}": { math: "\\mathtt{i}" },
      "\u{1D693}": { math: "\\mathtt{j}" },
      "\u{1D694}": { math: "\\mathtt{k}" },
      "\u{1D695}": { math: "\\mathtt{l}" },
      "\u{1D696}": { math: "\\mathtt{m}" },
      "\u{1D697}": { math: "\\mathtt{n}" },
      "\u{1D698}": { math: "\\mathtt{o}" },
      "\u{1D699}": { math: "\\mathtt{p}" },
      "\u{1D69A}": { math: "\\mathtt{q}" },
      "\u{1D69B}": { math: "\\mathtt{r}" },
      "\u{1D69C}": { math: "\\mathtt{s}" },
      "\u{1D69D}": { math: "\\mathtt{t}" },
      "\u{1D69E}": { math: "\\mathtt{u}" },
      "\u{1D69F}": { math: "\\mathtt{v}" },
      "\u{1D6A0}": { math: "\\mathtt{w}" },
      "\u{1D6A1}": { math: "\\mathtt{x}" },
      "\u{1D6A2}": { math: "\\mathtt{y}" },
      "\u{1D6A3}": { math: "\\mathtt{z}" },
      "\u{1D6A4}": { math: "\\imath" },
      "\u{1D6A5}": { math: "\\jmath" },
      "\u{1D6A8}": { math: "\\mathbf{A}" },
      "\u{1D6A9}": { math: "\\mathbf{B}" },
      "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
      "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
      "\u{1D6AC}": { math: "\\mathbf{E}" },
      "\u{1D6AD}": { math: "\\mathbf{Z}" },
      "\u{1D6AE}": { math: "\\mathbf{H}" },
      "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
      "\u{1D6B0}": { math: "\\mathbf{I}" },
      "\u{1D6B1}": { math: "\\mathbf{K}" },
      "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
      "\u{1D6B3}": { math: "M" },
      "\u{1D6B4}": { math: "N" },
      "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
      "\u{1D6B6}": { math: "O" },
      "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
      "\u{1D6B8}": { math: "\\mathbf{P}" },
      "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
      "\u{1D6BB}": { math: "\\mathbf{T}" },
      "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
      "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
      "\u{1D6BE}": { math: "\\mathbf{X}" },
      "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
      "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
      "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
      "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
      "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
      "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
      "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
      "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
      "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
      "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
      "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
      "\u{1D6CA}": { math: "\\mathbf{I}" },
      "\u{1D6CB}": { math: "\\mathbf{K}" },
      "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
      "\u{1D6CD}": { math: "M" },
      "\u{1D6CE}": { math: "N" },
      "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
      "\u{1D6D0}": { math: "O" },
      "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
      "\u{1D6D2}": { math: "\\mathbf{P}" },
      "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
      "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
      "\u{1D6D5}": { math: "\\mathbf{T}" },
      "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
      "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
      "\u{1D6D8}": { math: "\\mathbf{X}" },
      "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
      "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
      "\u{1D6DB}": { math: "\\partial" },
      "\u{1D6DC}": { math: "\\in" },
      "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
      "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
      "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
      "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
      "\u{1D6E2}": { math: "\\mathsl{A}" },
      "\u{1D6E3}": { math: "\\mathsl{B}" },
      "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
      "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
      "\u{1D6E6}": { math: "\\mathsl{E}" },
      "\u{1D6E7}": { math: "\\mathsl{Z}" },
      "\u{1D6E8}": { math: "\\mathsl{H}" },
      "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6EA}": { math: "\\mathsl{I}" },
      "\u{1D6EB}": { math: "\\mathsl{K}" },
      "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
      "\u{1D6ED}": { math: "M" },
      "\u{1D6EE}": { math: "N" },
      "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
      "\u{1D6F0}": { math: "O" },
      "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
      "\u{1D6F2}": { math: "\\mathsl{P}" },
      "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
      "\u{1D6F5}": { math: "\\mathsl{T}" },
      "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
      "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
      "\u{1D6F8}": { math: "\\mathsl{X}" },
      "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
      "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
      "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
      "\u{1D6FC}": { math: "\\mathsl{A}" },
      "\u{1D6FD}": { math: "\\mathsl{B}" },
      "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
      "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
      "\u{1D700}": { math: "\\mathsl{E}" },
      "\u{1D701}": { math: "\\mathsl{Z}" },
      "\u{1D702}": { math: "\\mathsl{H}" },
      "\u{1D703}": { math: "\\mathsl{\\theta}" },
      "\u{1D704}": { math: "\\mathsl{I}" },
      "\u{1D705}": { math: "\\mathsl{K}" },
      "\u{1D706}": { math: "\\mathsl{\\lambda}" },
      "\u{1D707}": { math: "\\mu" },
      "\u{1D708}": { math: "\\nu" },
      "\u{1D709}": { math: "\\mathsl{\\xi}" },
      "\u{1D70A}": { math: "o" },
      "\u{1D70B}": { math: "\\mathsl{\\pi}" },
      "\u{1D70C}": { math: "\\mathsl{P}" },
      "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
      "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
      "\u{1D70F}": { math: "\\mathsl{T}" },
      "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
      "\u{1D711}": { math: "\\mathsl{\\varphi}" },
      "\u{1D712}": { math: "\\mathsl{X}" },
      "\u{1D713}": { math: "\\mathsl{\\psi}" },
      "\u{1D714}": { math: "\\mathsl{\\omega}" },
      "\u{1D715}": { math: "\\partial" },
      "\u{1D716}": { math: "\\in" },
      "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
      "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
      "\u{1D719}": { math: "\\mathsl{\\phi}" },
      "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
      "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
      "\u{1D71C}": { math: "\\mathbit{A}" },
      "\u{1D71D}": { math: "\\mathbit{B}" },
      "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
      "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
      "\u{1D720}": { math: "\\mathbit{E}" },
      "\u{1D721}": { math: "\\mathbit{Z}" },
      "\u{1D722}": { math: "\\mathbit{H}" },
      "\u{1D723}": { math: "\\mathbit{\\Theta}" },
      "\u{1D724}": { math: "\\mathbit{I}" },
      "\u{1D725}": { math: "\\mathbit{K}" },
      "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
      "\u{1D727}": { math: "M" },
      "\u{1D728}": { math: "N" },
      "\u{1D729}": { math: "\\mathbit{\\Xi}" },
      "\u{1D72A}": { math: "O" },
      "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
      "\u{1D72C}": { math: "\\mathbit{P}" },
      "\u{1D72D}": { math: "\\mathbit{O}" },
      "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
      "\u{1D72F}": { math: "\\mathbit{T}" },
      "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
      "\u{1D731}": { math: "\\mathbit{\\Phi}" },
      "\u{1D732}": { math: "\\mathbit{X}" },
      "\u{1D733}": { math: "\\mathbit{\\Psi}" },
      "\u{1D734}": { math: "\\mathbit{\\Omega}" },
      "\u{1D735}": { math: "\\mathbit{\\nabla}" },
      "\u{1D736}": { math: "\\mathbit{\\alpha}" },
      "\u{1D737}": { math: "\\mathbit{\\beta}" },
      "\u{1D738}": { math: "\\mathbit{\\gamma}" },
      "\u{1D739}": { math: "\\mathbit{\\delta}" },
      "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
      "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
      "\u{1D73C}": { math: "\\mathbit{\\eta}" },
      "\u{1D73D}": { math: "\\mathbit{\\theta}" },
      "\u{1D73E}": { math: "\\mathbit{\\imath}" },
      "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
      "\u{1D740}": { math: "\\mathbit{\\lambda}" },
      "\u{1D741}": { math: "\\mu" },
      "\u{1D742}": { math: "N" },
      "\u{1D743}": { math: "\\mathbit{\\xi}" },
      "\u{1D744}": { math: "O" },
      "\u{1D745}": { math: "\\mathbit{\\pi}" },
      "\u{1D746}": { math: "\\mathbit{\\rho}" },
      "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
      "\u{1D748}": { math: "\\mathbit{\\sigma}" },
      "\u{1D749}": { math: "\\mathbit{\\tau}" },
      "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
      "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
      "\u{1D74C}": { math: "\\mathbit{\\chi}" },
      "\u{1D74D}": { math: "\\mathbit{\\psi}" },
      "\u{1D74E}": { math: "\\mathbit{\\omega}" },
      "\u{1D74F}": { math: "\\partial" },
      "\u{1D750}": { math: "\\in" },
      "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
      "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
      "\u{1D753}": { math: "\\mathbit{\\phi}" },
      "\u{1D754}": { math: "\\mathbit{\\varrho}" },
      "\u{1D755}": { math: "\\mathbit{\\varpi}" },
      "\u{1D756}": { math: "\\mathsfbf{A}" },
      "\u{1D757}": { math: "\\mathsfbf{B}" },
      "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
      "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
      "\u{1D75A}": { math: "\\mathsfbf{E}" },
      "\u{1D75B}": { math: "\\mathsfbf{Z}" },
      "\u{1D75C}": { math: "\\mathsfbf{H}" },
      "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D75E}": { math: "\\mathsfbf{I}" },
      "\u{1D75F}": { math: "\\mathsfbf{K}" },
      "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
      "\u{1D761}": { math: "M" },
      "\u{1D762}": { math: "N" },
      "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
      "\u{1D764}": { math: "O" },
      "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
      "\u{1D766}": { math: "\\mathsfbf{P}" },
      "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
      "\u{1D769}": { math: "\\mathsfbf{T}" },
      "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
      "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
      "\u{1D76C}": { math: "\\mathsfbf{X}" },
      "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
      "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
      "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
      "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
      "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
      "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
      "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
      "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
      "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
      "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
      "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
      "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
      "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
      "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
      "\u{1D77B}": { math: "\\mu" },
      "\u{1D77C}": { math: "\\nu" },
      "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
      "\u{1D77E}": { math: "o" },
      "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
      "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
      "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
      "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
      "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
      "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
      "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
      "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
      "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
      "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
      "\u{1D789}": { math: "\\partial" },
      "\u{1D78A}": { math: "\\in" },
      "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
      "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
      "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
      "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
      "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
      "\u{1D790}": { math: "\\mathsfbfsl{A}" },
      "\u{1D791}": { math: "\\mathsfbfsl{B}" },
      "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
      "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
      "\u{1D794}": { math: "\\mathsfbfsl{E}" },
      "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D796}": { math: "\\mathsfbfsl{H}" },
      "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D798}": { math: "\\mathsfbfsl{I}" },
      "\u{1D799}": { math: "\\mathsfbfsl{K}" },
      "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
      "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
      "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
      "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
      "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
      "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
      "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
      "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
      "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
      "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
      "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
      "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
      "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
      "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
      "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
      "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
      "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
      "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
      "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
      "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
      "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
      "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
      "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
      "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
      "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
      "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
      "\u{1D7B5}": { math: "\\mu" },
      "\u{1D7B6}": { math: "\\nu" },
      "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
      "\u{1D7B8}": { math: "o" },
      "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
      "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
      "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
      "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
      "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
      "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
      "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
      "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
      "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
      "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
      "\u{1D7C3}": { math: "\\partial" },
      "\u{1D7C4}": { math: "\\in" },
      "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
      "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
      "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
      "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
      "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
      "\u{1D7CA}": { math: "\\mbfDigamma" },
      "\u{1D7CB}": { math: "\\mbfdigamma" },
      "\u{1D7CE}": { math: "\\mathbf{0}" },
      "\u{1D7CF}": { math: "\\mathbf{1}" },
      "\u{1D7D0}": { math: "\\mathbf{2}" },
      "\u{1D7D1}": { math: "\\mathbf{3}" },
      "\u{1D7D2}": { math: "\\mathbf{4}" },
      "\u{1D7D3}": { math: "\\mathbf{5}" },
      "\u{1D7D4}": { math: "\\mathbf{6}" },
      "\u{1D7D5}": { math: "\\mathbf{7}" },
      "\u{1D7D6}": { math: "\\mathbf{8}" },
      "\u{1D7D7}": { math: "\\mathbf{9}" },
      "\u{1D7D8}": { math: "\\mathbb{0}" },
      "\u{1D7D9}": { math: "\\mathbb{1}" },
      "\u{1D7DA}": { math: "\\mathbb{2}" },
      "\u{1D7DB}": { math: "\\mathbb{3}" },
      "\u{1D7DC}": { math: "\\mathbb{4}" },
      "\u{1D7DD}": { math: "\\mathbb{5}" },
      "\u{1D7DE}": { math: "\\mathbb{6}" },
      "\u{1D7DF}": { math: "\\mathbb{7}" },
      "\u{1D7E0}": { math: "\\mathbb{8}" },
      "\u{1D7E1}": { math: "\\mathbb{9}" },
      "\u{1D7E2}": { math: "\\mathsf{0}" },
      "\u{1D7E3}": { math: "\\mathsf{1}" },
      "\u{1D7E4}": { math: "\\mathsf{2}" },
      "\u{1D7E5}": { math: "\\mathsf{3}" },
      "\u{1D7E6}": { math: "\\mathsf{4}" },
      "\u{1D7E7}": { math: "\\mathsf{5}" },
      "\u{1D7E8}": { math: "\\mathsf{6}" },
      "\u{1D7E9}": { math: "\\mathsf{7}" },
      "\u{1D7EA}": { math: "\\mathsf{8}" },
      "\u{1D7EB}": { math: "\\mathsf{9}" },
      "\u{1D7EC}": { math: "\\mathsfbf{0}" },
      "\u{1D7ED}": { math: "\\mathsfbf{1}" },
      "\u{1D7EE}": { math: "\\mathsfbf{2}" },
      "\u{1D7EF}": { math: "\\mathsfbf{3}" },
      "\u{1D7F0}": { math: "\\mathsfbf{4}" },
      "\u{1D7F1}": { math: "\\mathsfbf{5}" },
      "\u{1D7F2}": { math: "\\mathsfbf{6}" },
      "\u{1D7F3}": { math: "\\mathsfbf{7}" },
      "\u{1D7F4}": { math: "\\mathsfbf{8}" },
      "\u{1D7F5}": { math: "\\mathsfbf{9}" },
      "\u{1D7F6}": { math: "\\mathtt{0}" },
      "\u{1D7F7}": { math: "\\mathtt{1}" },
      "\u{1D7F8}": { math: "\\mathtt{2}" },
      "\u{1D7F9}": { math: "\\mathtt{3}" },
      "\u{1D7FA}": { math: "\\mathtt{4}" },
      "\u{1D7FB}": { math: "\\mathtt{5}" },
      "\u{1D7FC}": { math: "\\mathtt{6}" },
      "\u{1D7FD}": { math: "\\mathtt{7}" },
      "\u{1D7FE}": { math: "\\mathtt{8}" },
      "\u{1D7FF}": { math: "\\mathtt{9}" }
    };
  }
});

// node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/ascii-bibtex-creator.json
var require_ascii_bibtex_creator = __commonJS({
  "node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/ascii-bibtex-creator.json"(exports, module2) {
    module2.exports = {
      "#": { math: "\\#", text: "\\#" },
      $: { math: "\\$", text: "\\$" },
      "%": { math: "\\%", text: "\\%" },
      "&": { math: "\\&", text: "\\&" },
      "/\u200B": { text: "{\\slash}" },
      "<": { math: "<" },
      ">": { math: ">" },
      "\\": { math: "\\backslash", text: "{\\textbackslash}" },
      "^": { math: "\\sphat", text: "\\^" },
      _: { math: "\\_", text: "\\_" },
      i\uFE20a\uFE21: { text: "\\t{ia}" },
      "{": { math: "\\lbrace", text: "\\{" },
      "}": { math: "\\rbrace", text: "\\}" },
      "~": { math: "\\sptilde", text: "{\\textasciitilde}" },
      "\xA0": { math: "~", space: true, text: "~" },
      "\xA1": { text: "{\\textexclamdown}" },
      "\xA2": { math: "\\cent", text: "{\\textcent}", textpackages: ["textcomp"] },
      "\xA3": { math: "\\pounds", text: "{\\textsterling}", textpackages: ["textcomp"] },
      "\xA4": { text: "{\\textcurrency}", textpackages: ["textcomp"] },
      "\xA5": { math: "\\yen", text: "{\\textyen}", textpackages: ["textcomp"] },
      "\xA6": { text: "{\\textbrokenbar}", textpackages: ["textcomp"] },
      "\xA7": { text: "{\\textsection}", textpackages: ["textcomp"] },
      "\xA8": { math: "\\spddot", text: "{\\textasciidieresis}" },
      "\xA9": { text: "{\\textcopyright}", textpackages: ["textcomp"] },
      \u00AA: { text: "{\\textordfeminine}", textpackages: ["textcomp"] },
      "\xAB": { text: "{\\guillemotleft}" },
      "\xAC": { math: "\\lnot" },
      "\xAD": { math: "\\-", text: "\\-" },
      "\xAE": { math: "\\circledR", text: "{\\textregistered}", textpackages: ["textcomp"] },
      "\xAF": { text: "{\\textasciimacron}" },
      "\xB0": { math: "^\\circ", text: "{\\textdegree}", textpackages: ["textcomp"] },
      "\xB1": { math: "\\pm" },
      "\xB2": { math: "^{2}" },
      "\xB3": { math: "^{3}" },
      "\xB4": { text: "{\\textasciiacute}" },
      \u00B5: { text: "{\\textmu}" },
      "\xB6": { text: "{\\textparagraph}", textpackages: ["textcomp"] },
      "\xB7": { math: "\\cdot" },
      "\xB8": { text: "{\\c}" },
      "\xB9": { math: "^{1}" },
      \u00BA: { text: "{\\textordmasculine}", textpackages: ["textcomp"] },
      "\xBB": { text: "{\\guillemotright}" },
      "\xBC": { math: "\\frac{1}{4}" },
      "\xBD": { math: "\\frac{1}{2}" },
      "\xBE": { math: "\\frac{3}{4}" },
      "\xBF": { text: "{\\textquestiondown}" },
      \u00C0: { text: "{\\`A}" },
      \u00C1: { text: "{\\'A}" },
      \u00C2: { text: "{\\^A}" },
      \u00C3: { text: "{\\~A}" },
      \u00C4: { text: '{\\"A}' },
      \u00C5: { text: "{\\AA}" },
      \u00C6: { text: "{\\AE}" },
      \u00C7: { text: "{\\c C}" },
      \u00C8: { text: "{\\`E}" },
      \u00C9: { text: "{\\'E}" },
      \u00CA: { text: "{\\^E}" },
      \u00CB: { text: '{\\"E}' },
      \u00CC: { text: "{\\`I}" },
      \u00CD: { text: "{\\'I}" },
      \u00CE: { text: "{\\^I}" },
      \u00CF: { text: '{\\"I}' },
      \u00D0: { text: "{\\DH}" },
      \u00D1: { text: "{\\~N}" },
      \u00D2: { text: "{\\`O}" },
      \u00D3: { text: "{\\'O}" },
      \u00D4: { text: "{\\^O}" },
      \u00D5: { text: "{\\~O}" },
      \u00D6: { text: '{\\"O}' },
      "\xD7": { math: "\\times", text: "{\\texttimes}" },
      \u00D8: { text: "{\\O}" },
      \u00D9: { text: "{\\`U}" },
      \u00DA: { text: "{\\'U}" },
      \u00DB: { text: "{\\^U}" },
      \u00DC: { text: '{\\"U}' },
      \u00DD: { text: "{\\'Y}" },
      \u00DE: { text: "{\\TH}" },
      \u00DF: { text: "{\\ss}" },
      \u00E0: { text: "{\\`a}" },
      \u00E1: { text: "{\\'a}" },
      \u00E2: { text: "{\\^a}" },
      \u00E3: { text: "{\\~a}" },
      \u00E4: { text: '{\\"a}' },
      \u00E5: { text: "{\\aa}" },
      \u00E6: { text: "{\\ae}" },
      \u00E7: { text: "{\\c c}" },
      \u00E8: { text: "{\\`e}" },
      \u00E9: { text: "{\\'e}" },
      \u00EA: { text: "{\\^e}" },
      \u00EB: { text: '{\\"e}' },
      \u00EC: { text: "{\\`i}" },
      \u00ED: { text: "{\\'i}" },
      \u00EE: { text: "{\\^i}" },
      \u00EF: { text: '{\\"i}' },
      \u00F0: { math: "\\eth", mathpackages: ["amssymb", "arevmath"], text: "{\\dh}" },
      \u00F1: { text: "{\\~n}" },
      \u00F2: { text: "{\\`o}" },
      \u00F3: { text: "{\\'o}" },
      \u00F4: { text: "{\\^o}" },
      \u00F5: { text: "{\\~o}" },
      \u00F6: { text: '{\\"o}' },
      "\xF7": { math: "\\div" },
      \u00F8: { text: "{\\o}" },
      \u00F9: { text: "{\\`u}" },
      \u00FA: { text: "{\\'u}" },
      \u00FB: { text: "{\\^u}" },
      \u00FC: { text: '{\\"u}' },
      \u00FD: { text: "{\\'y}" },
      \u00FE: { text: "{\\th}" },
      \u00FF: { text: '{\\"y}' },
      \u0100: { text: "{\\=A}" },
      \u0101: { text: "{\\=a}" },
      \u0102: { text: "{\\u A}" },
      \u0103: { text: "{\\u a}" },
      \u0104: { text: "{\\k{A}}" },
      \u0105: { text: "{\\k{a}}" },
      \u0106: { text: "{\\'C}" },
      \u0107: { text: "{\\'c}" },
      \u0108: { text: "{\\^C}" },
      \u0109: { text: "{\\^c}" },
      \u010A: { text: "{\\.C}" },
      \u010B: { text: "{\\.c}" },
      \u010C: { text: "{\\v C}" },
      \u010D: { text: "{\\v c}" },
      \u010E: { text: "{\\v D}" },
      \u010F: { text: "{\\v d}" },
      \u0110: { text: "{\\DJ}" },
      \u0111: { text: "{\\dj}" },
      \u0112: { text: "{\\=E}" },
      \u0113: { text: "{\\=e}" },
      \u0114: { text: "{\\u E}" },
      \u0115: { text: "{\\u e}" },
      \u0116: { text: "{\\.E}" },
      \u0117: { text: "{\\.e}" },
      \u0118: { text: "{\\k{E}}" },
      \u0119: { text: "{\\k{e}}" },
      \u011A: { text: "{\\v E}" },
      \u011B: { text: "{\\v e}" },
      \u011C: { text: "{\\^G}" },
      \u011D: { text: "{\\^g}" },
      \u011E: { text: "{\\u G}" },
      \u011F: { text: "{\\u g}" },
      \u0120: { text: "{\\.G}" },
      \u0121: { text: "{\\.g}" },
      \u0122: { text: "{\\c G}" },
      \u0123: { text: "{\\c g}" },
      \u0124: { text: "{\\^H}" },
      \u0125: { text: "{\\^h}" },
      \u0126: { text: "{\\fontencoding{LELA}\\selectfont\\char40}" },
      \u0127: { math: "\\Elzxh" },
      \u0128: { text: "{\\~I}" },
      \u0129: { text: "{\\~i}" },
      \u012A: { text: "{\\=I}" },
      \u012B: { text: "{\\=i}" },
      \u012C: { text: "{\\u I}" },
      \u012D: { text: "{\\u \\i}" },
      \u012E: { text: "{\\k{I}}" },
      \u012F: { text: "{\\k{i}}" },
      \u0130: { text: "{\\.I}" },
      \u0131: { math: "\\imath", text: "{\\i}" },
      \u0132: { text: "IJ" },
      \u0133: { text: "ij" },
      \u0134: { text: "{\\^J}" },
      \u0135: { text: "{\\^\\j}" },
      \u0136: { text: "{\\c K}" },
      \u0137: { text: "{\\c k}" },
      \u0138: { text: "{\\fontencoding{LELA}\\selectfont\\char91}" },
      \u0139: { text: "{\\'L}" },
      \u013A: { text: "{\\'l}" },
      \u013B: { text: "{\\c L}" },
      \u013C: { text: "{\\c l}" },
      \u013D: { text: "{\\v L}" },
      \u013E: { text: "{\\v l}" },
      \u013F: { text: "{\\fontencoding{LELA}\\selectfont\\char201}" },
      \u0140: { text: "{\\fontencoding{LELA}\\selectfont\\char202}" },
      \u0141: { text: "{\\L}" },
      \u0142: { text: "{\\l}" },
      \u0143: { text: "{\\'N}" },
      \u0144: { text: "{\\'n}" },
      \u0145: { text: "{\\c N}" },
      \u0146: { text: "{\\c n}" },
      \u0147: { text: "{\\v N}" },
      \u0148: { text: "{\\v n}" },
      \u0149: { text: "'n" },
      \u014A: { text: "{\\NG}" },
      \u014B: { text: "{\\ng}" },
      \u014C: { text: "{\\=O}" },
      \u014D: { text: "{\\=o}" },
      \u014E: { text: "{\\u O}" },
      \u014F: { text: "{\\u o}" },
      \u0150: { text: "{\\H O}" },
      \u0151: { text: "{\\H o}" },
      \u0152: { text: "{\\OE}" },
      \u0153: { text: "{\\oe}" },
      \u0154: { text: "{\\'R}" },
      \u0155: { text: "{\\'r}" },
      \u0156: { text: "{\\c R}" },
      \u0157: { text: "{\\c r}" },
      \u0158: { text: "{\\v R}" },
      \u0159: { text: "{\\v r}" },
      \u015A: { text: "{\\'S}" },
      \u015B: { text: "{\\'s}" },
      \u015C: { text: "{\\^S}" },
      \u015D: { text: "{\\^s}" },
      \u015E: { text: "{\\c S}" },
      \u015F: { text: "{\\c s}" },
      \u0160: { text: "{\\v S}" },
      \u0161: { text: "{\\v s}" },
      \u0162: { text: "{\\c T}" },
      \u0163: { text: "{\\c t}" },
      \u0164: { text: "{\\v T}" },
      \u0165: { text: "{\\v t}" },
      \u0166: { text: "{\\fontencoding{LELA}\\selectfont\\char47}" },
      \u0167: { text: "{\\fontencoding{LELA}\\selectfont\\char63}" },
      \u0168: { text: "{\\~U}" },
      \u0169: { text: "{\\~u}" },
      \u016A: { text: "{\\=U}" },
      \u016B: { text: "{\\=u}" },
      \u016C: { text: "{\\u U}" },
      \u016D: { text: "{\\u u}" },
      \u016E: { text: "{\\r{U}}" },
      \u016F: { text: "{\\r{u}}" },
      \u0170: { text: "{\\H U}" },
      \u0171: { text: "{\\H u}" },
      \u0172: { text: "{\\k{U}}" },
      \u0173: { text: "{\\k{u}}" },
      \u0174: { text: "{\\^W}" },
      \u0175: { text: "{\\^w}" },
      \u0176: { text: "{\\^Y}" },
      \u0177: { text: "{\\^y}" },
      \u0178: { text: '{\\"Y}' },
      \u0179: { text: "{\\'Z}" },
      \u017A: { text: "{\\'z}" },
      \u017B: { text: "{\\.Z}" },
      \u017C: { text: "{\\.z}" },
      \u017D: { text: "{\\v Z}" },
      \u017E: { text: "{\\v z}" },
      \u017F: { text: "s" },
      \u0192: { math: "f" },
      \u0195: { text: "{\\texthvlig}" },
      \u019E: { text: "{\\textnrleg}" },
      \u01AA: { text: "{\\textesh}" },
      \u01B5: { math: "\\Zbar" },
      \u01BA: { text: "{\\fontencoding{LELA}\\selectfont\\char195}" },
      \u01C2: { text: "{\\textdoublepipe}" },
      \u01CD: { text: "{\\v A}" },
      \u01CE: { text: "{\\v a}" },
      \u01CF: { text: "{\\v I}" },
      \u01D0: { text: "{\\v i}" },
      \u01D1: { text: "{\\v O}" },
      \u01D2: { text: "{\\v o}" },
      \u01D3: { text: "{\\v U}" },
      \u01D4: { text: "{\\v u}" },
      \u01E6: { text: "{\\v G}" },
      \u01E7: { text: "{\\v g}" },
      \u01E8: { text: "{\\v K}" },
      \u01E9: { text: "{\\v k}" },
      \u01EA: { text: "{\\k{O}}" },
      \u01EB: { text: "{\\k{o}}" },
      \u01F0: { text: "{\\v j}" },
      \u01F4: { text: "{\\'G}" },
      \u01F5: { text: "{\\'g}" },
      \u0228: { text: "{\\c E}" },
      \u0229: { text: "{\\c e}" },
      "\u0237": { math: "\\jmath" },
      \u0250: { math: "\\Elztrna" },
      \u0252: { math: "\\Elztrnsa" },
      \u0254: { math: "\\Elzopeno" },
      \u0256: { math: "\\Elzrtld" },
      \u0258: { text: "{\\fontencoding{LEIP}\\selectfont\\char61}" },
      \u0259: { math: "\\Elzschwa" },
      \u025B: { math: "\\varepsilon" },
      \u0261: { text: "g" },
      \u0263: { math: "\\Elzpgamma" },
      \u0264: { math: "\\Elzpbgam" },
      \u0265: { math: "\\Elztrnh" },
      \u026C: { math: "\\Elzbtdl" },
      \u026D: { math: "\\Elzrtll" },
      \u026F: { math: "\\Elztrnm" },
      \u0270: { math: "\\Elztrnmlr" },
      \u0271: { math: "\\Elzltlmr" },
      \u0272: { text: "{\\Elzltln}" },
      \u0273: { math: "\\Elzrtln" },
      \u0277: { math: "\\Elzclomeg" },
      \u0278: { text: "{\\textphi}" },
      \u0279: { math: "\\Elztrnr" },
      \u027A: { math: "\\Elztrnrl" },
      \u027B: { math: "\\Elzrttrnr" },
      \u027C: { math: "\\Elzrl" },
      \u027D: { math: "\\Elzrtlr" },
      \u027E: { math: "\\Elzfhr" },
      \u027F: { text: "{\\fontencoding{LEIP}\\selectfont\\char202}" },
      \u0282: { math: "\\Elzrtls" },
      \u0283: { math: "\\Elzesh" },
      \u0287: { math: "\\Elztrnt" },
      \u0288: { math: "\\Elzrtlt" },
      \u028A: { math: "\\Elzpupsil" },
      \u028B: { math: "\\Elzpscrv" },
      \u028C: { math: "\\Elzinvv" },
      \u028D: { math: "\\Elzinvw" },
      \u028E: { math: "\\Elztrny" },
      \u0290: { math: "\\Elzrtlz" },
      \u0292: { math: "\\Elzyogh" },
      \u0294: { math: "\\Elzglst" },
      \u0295: { math: "\\Elzreglst" },
      \u0296: { math: "\\Elzinglst" },
      \u029E: { text: "{\\textturnk}" },
      \u02A4: { math: "\\Elzdyogh" },
      \u02A7: { math: "\\Elztesh" },
      \u02B0: { math: "^{h}", text: "\\textsuperscript{h}" },
      \u02B2: { math: "^{j}", text: "\\textsuperscript{j}" },
      \u02B3: { math: "^{r}", text: "\\textsuperscript{r}" },
      \u02B7: { math: "^{w}", text: "\\textsuperscript{w}" },
      \u02B8: { math: "^{y}", text: "\\textsuperscript{y}" },
      "\u02B9": { text: "'" },
      \u02BB: { text: "'" },
      \u02BC: { text: "'" },
      \u02BD: { text: "'" },
      \u02BF: { text: "{\\lasp}", textpackages: ["mathscinet"] },
      "\u02C6": { text: "{\\textasciicircum}" },
      "\u02C7": { text: "{\\textasciicaron}" },
      "\u02C8": { math: "\\Elzverts" },
      "\u02C9": { text: "-" },
      "\u02CC": { math: "\\Elzverti" },
      \u02D0: { math: "\\Elzlmrk" },
      \u02D1: { math: "\\Elzhlmrk" },
      "\u02D2": { math: "\\Elzsbrhr" },
      "\u02D3": { math: "\\Elzsblhr" },
      "\u02D4": { math: "\\Elzrais" },
      "\u02D5": { math: "\\Elzlow" },
      "\u02D8": { text: "{\\textasciibreve}" },
      "\u02D9": { text: "{\\textperiodcentered}", textpackages: ["textcomp"] },
      "\u02DA": { text: "{\\r{}}" },
      "\u02DB": { text: "{\\k{}}" },
      "\u02DC": { text: "{\\texttildelow}" },
      "\u02DD": { text: "{\\H{}}" },
      \u02E1: { math: "^{l}", text: "\\textsuperscript{l}" },
      \u02E2: { math: "^{s}", text: "\\textsuperscript{s}" },
      \u02E3: { math: "^{x}", text: "\\textsuperscript{x}" },
      "\u02E5": { text: "\\tone{55}" },
      "\u02E6": { text: "\\tone{44}" },
      "\u02E7": { text: "\\tone{33}" },
      "\u02E8": { text: "\\tone{22}" },
      "\u02E9": { text: "\\tone{11}" },
      "\u0300": { math: "\\grave", combiningdiacritic: true, text: "\\`" },
      "\u0300\u0304": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0300": { text: "{\\textgravemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0300\u0307": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0300": { text: "{\\textgravedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301": { math: "\\acute", combiningdiacritic: true, text: "\\'" },
      "\u0301\u0304": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0301": { text: "{\\textacutemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u030C": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030C\u0301": { text: "{\\textacutewedge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0302": { math: "\\hat", combiningdiacritic: true, text: "\\^" },
      "\u0302\u0307": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0302": { text: "{\\textcircumdot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0303": { math: "\\tilde", combiningdiacritic: true, text: "\\~" },
      "\u0303\u0307": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0303": { text: "{\\texttildedot}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304": { math: "\\bar", combiningdiacritic: true, text: "\\=" },
      "\u0305": { math: "\\overline", combiningdiacritic: true },
      "\u0306": { math: "\\breve", combiningdiacritic: true, text: "{\\u}" },
      "\u0306\u0304": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u0306": { text: "{\\textbrevemacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307": { math: "\\dot", combiningdiacritic: true, text: "\\." },
      "\u0307\u0301": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0301\u0307": { text: "{\\textdotacute}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0307\u0306": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0306\u0307": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0308": { math: "\\ddot", combiningdiacritic: true, text: '\\"' },
      "\u0309": { math: "\\ovhook" },
      "\u030A": { math: "\\mathring", combiningdiacritic: true, text: "{\\r}" },
      "\u030A\u0304": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0304\u030A": { text: "{\\textringmacron}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030B": { text: "{\\H}", combiningdiacritic: true },
      "\u030C": { math: "\\check", text: "{\\v}", combiningdiacritic: true },
      "\u030D": { text: "{\\textvbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030E": { text: "{\\textdoublevbaraccent}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u030F": { text: "{\\textdoublegrave}", combiningdiacritic: true },
      "\u0310": { text: "{\\textdotbreve}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0311": { text: "{\\fontencoding{LECO}\\selectfont\\char177}" },
      "\u0312": { math: "\\oturnedcomma" },
      "\u0315": { math: "\\ocommatopright" },
      "\u0316": { text: "{\\textsubgrave}", combiningdiacritic: true },
      "\u0318": { text: "{\\textadvancing}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0319": { text: "{\\textretracting}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031A": { math: "\\droang", text: "{\\textcorner}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031C": { text: "{\\textsublhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031D": { text: "{\\textraising}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031E": { text: "{\\textlowering}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u031F": { text: "{\\textsubplus}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0321": { math: "\\Elzpalh" },
      "\u0322": { text: "{\\Elzrh}" },
      "\u0323": { text: "{\\d}", combiningdiacritic: true },
      "\u0324": { text: "{\\textsubumlaut}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0325": { text: "{\\textsubring}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0327": { text: "{\\c}", combiningdiacritic: true },
      "\u0328": { text: "{\\k}", combiningdiacritic: true },
      "\u0329": { text: "{\\textsyllabic}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032A": { math: "\\Elzsbbrg", text: "{\\textsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032B": { text: "{\\fontencoding{LECO}\\selectfont\\char203}" },
      "\u032C": { text: "{\\textsubwedge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u032F": { text: "{\\textsubarch}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0330": { math: "\\utilde", text: "{\\textsubtilde}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0331": { math: "\\underbar", combiningdiacritic: true, text: "{\\textsubbar}", textpackages: ["tipa"] },
      "\u0332": { math: "\\underline" },
      "\u0334": { text: "{\\textsuperimposetilde}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0335": { text: "{\\Elzxl}" },
      "\u0336": { text: "{\\Elzbar}" },
      "\u0337": { text: "{\\fontencoding{LECO}\\selectfont\\char215}" },
      "\u0338": { math: "\\not" },
      "\u0339": { text: "{\\textsubrhalfring}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033A": { text: "{\\textinvsubbridge}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033B": { text: "{\\textsubsquare}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033C": { text: "{\\textseagull}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u033D": { text: "{\\textovercross}", combiningdiacritic: true, textpackages: ["tipa"] },
      "\u0361": { text: "{\\fontencoding{LECO}\\selectfont\\char225}" },
      "\u0374": { text: "'" },
      "\u0375": { text: "," },
      "\u037E": { text: ";" },
      \u0386: { text: "{\\'A}" },
      \u0388: { text: "{\\'E}" },
      \u0389: { text: "{\\'H}" },
      \u038A: { text: "{\\'{}I}" },
      \u038C: { text: "{\\'{}O}" },
      \u038E: { math: "\\mathrm{'Y}" },
      \u038F: { math: "\\mathrm{'\\Omega}" },
      \u0390: { math: "\\acute{\\ddot{\\iota}}" },
      \u0391: { math: "A" },
      \u0392: { math: "B" },
      \u0393: { math: "\\Gamma" },
      \u0394: { math: "\\Delta" },
      \u0395: { math: "E" },
      \u0396: { math: "Z" },
      \u0397: { math: "H" },
      \u0398: { math: "\\Theta" },
      \u0399: { math: "I" },
      \u039A: { math: "K" },
      \u039B: { math: "\\Lambda" },
      \u039C: { math: "M" },
      \u039D: { math: "N" },
      \u039E: { math: "\\Xi" },
      \u039F: { math: "O" },
      \u03A0: { math: "\\Pi" },
      \u03A1: { math: "P" },
      \u03A3: { math: "\\Sigma" },
      \u03A4: { math: "T" },
      \u03A5: { math: "\\Upsilon" },
      \u03A6: { math: "\\Phi" },
      \u03A7: { math: "X" },
      \u03A8: { math: "\\Psi" },
      \u03A9: { math: "\\Omega" },
      \u03AA: { math: "\\mathrm{\\ddot{I}}" },
      \u03AB: { math: "\\mathrm{\\ddot{Y}}" },
      \u03AC: { text: "{\\'$\\alpha$}" },
      \u03AD: { math: "\\acute{\\epsilon}" },
      \u03AE: { math: "\\acute{\\eta}" },
      \u03AF: { math: "\\acute{\\iota}" },
      \u03B0: { math: "\\acute{\\ddot{\\upsilon}}" },
      \u03B1: { math: "\\alpha" },
      \u03B2: { math: "\\beta" },
      \u03B3: { math: "\\gamma" },
      \u03B4: { math: "\\delta" },
      \u03B5: { math: "\\epsilon" },
      \u03B6: { math: "\\zeta" },
      \u03B7: { math: "\\eta" },
      \u03B8: { math: "\\theta", text: "{\\texttheta}" },
      \u03B9: { math: "\\iota" },
      \u03BA: { math: "\\kappa" },
      \u03BB: { math: "\\lambda" },
      \u03BC: { math: "\\mu" },
      \u03BD: { math: "\\nu" },
      \u03BE: { math: "\\xi" },
      \u03BF: { math: "o" },
      \u03C0: { math: "\\pi" },
      \u03C1: { math: "\\rho" },
      \u03C2: { math: "\\varsigma" },
      \u03C3: { math: "\\sigma" },
      \u03C4: { math: "\\tau" },
      \u03C5: { math: "\\upsilon" },
      \u03C6: { math: "\\varphi" },
      \u03C7: { math: "\\chi" },
      \u03C8: { math: "\\psi" },
      \u03C9: { math: "\\omega" },
      \u03CA: { math: "\\ddot{\\iota}" },
      \u03CB: { math: "\\ddot{\\upsilon}" },
      \u03CC: { text: "{\\'o}" },
      \u03CD: { math: "\\acute{\\upsilon}" },
      \u03CE: { math: "\\acute{\\omega}" },
      \u03D0: { math: "\\varbeta", text: "\\Pisymbol{ppi022}{87}" },
      \u03D1: { math: "\\vartheta", text: "{\\textvartheta}" },
      \u03D2: { math: "\\Upsilon" },
      \u03D5: { math: "\\phi" },
      \u03D6: { math: "\\varpi" },
      "\u03D8": { math: "\\Qoppa" },
      "\u03D9": { math: "\\qoppa" },
      \u03DA: { math: "\\Stigma" },
      \u03DB: { math: "\\stigma" },
      \u03DC: { math: "\\Digamma" },
      \u03DD: { math: "\\digamma" },
      \u03DE: { math: "\\Koppa" },
      \u03DF: { math: "\\koppa" },
      \u03E0: { math: "\\Sampi" },
      \u03E1: { math: "\\sampi" },
      \u03F0: { math: "\\varkappa" },
      \u03F1: { math: "\\varrho" },
      "\u03F4": { math: "\\upvarTheta", text: "{\\textTheta}" },
      "\u03F5": { math: "\\epsilon" },
      "\u03F6": { math: "\\backepsilon" },
      \u0401: { text: "{\\cyrchar\\CYRYO}" },
      \u0402: { text: "{\\cyrchar\\CYRDJE}" },
      \u0403: { text: "{\\cyrchar{\\'\\CYRG}}" },
      \u0404: { text: "{\\cyrchar\\CYRIE}" },
      \u0405: { text: "{\\cyrchar\\CYRDZE}" },
      \u0406: { text: "{\\cyrchar\\CYRII}" },
      \u0407: { text: "{\\cyrchar\\CYRYI}" },
      \u0408: { text: "{\\cyrchar\\CYRJE}" },
      \u0409: { text: "{\\cyrchar\\CYRLJE}" },
      \u040A: { text: "{\\cyrchar\\CYRNJE}" },
      \u040B: { text: "{\\cyrchar\\CYRTSHE}" },
      \u040C: { text: "{\\cyrchar{\\'\\CYRK}}" },
      \u040E: { text: "{\\cyrchar\\CYRUSHRT}" },
      \u040F: { text: "{\\cyrchar\\CYRDZHE}" },
      \u0410: { text: "{\\cyrchar\\CYRA}" },
      \u0411: { text: "{\\cyrchar\\CYRB}" },
      \u0412: { text: "{\\cyrchar\\CYRV}" },
      \u0413: { text: "{\\cyrchar\\CYRG}" },
      \u0414: { text: "{\\cyrchar\\CYRD}" },
      \u0415: { text: "{\\cyrchar\\CYRE}" },
      \u0416: { text: "{\\cyrchar\\CYRZH}" },
      \u0417: { text: "{\\cyrchar\\CYRZ}" },
      \u0418: { text: "{\\cyrchar\\CYRI}" },
      \u0419: { text: "{\\cyrchar\\CYRISHRT}" },
      \u041A: { text: "{\\cyrchar\\CYRK}" },
      \u041B: { text: "{\\cyrchar\\CYRL}" },
      \u041C: { text: "{\\cyrchar\\CYRM}" },
      \u041D: { text: "{\\cyrchar\\CYRN}" },
      \u041E: { text: "{\\cyrchar\\CYRO}" },
      \u041F: { text: "{\\cyrchar\\CYRP}" },
      \u0420: { text: "{\\cyrchar\\CYRR}" },
      \u0421: { text: "{\\cyrchar\\CYRS}" },
      \u0422: { text: "{\\cyrchar\\CYRT}" },
      \u0423: { text: "{\\cyrchar\\CYRU}" },
      \u0424: { text: "{\\cyrchar\\CYRF}" },
      \u0425: { text: "{\\cyrchar\\CYRH}" },
      \u0426: { text: "{\\cyrchar\\CYRC}" },
      \u0427: { text: "{\\cyrchar\\CYRCH}" },
      \u0428: { text: "{\\cyrchar\\CYRSH}" },
      \u0429: { text: "{\\cyrchar\\CYRSHCH}" },
      \u042A: { text: "{\\cyrchar\\CYRHRDSN}" },
      \u042B: { text: "{\\cyrchar\\CYRERY}" },
      \u042C: { text: "{\\cyrchar\\CYRSFTSN}" },
      \u042D: { text: "{\\cyrchar\\CYREREV}" },
      \u042E: { text: "{\\cyrchar\\CYRYU}" },
      \u042F: { text: "{\\cyrchar\\CYRYA}" },
      \u0430: { text: "{\\cyrchar\\cyra}" },
      \u0431: { text: "{\\cyrchar\\cyrb}" },
      \u0432: { text: "{\\cyrchar\\cyrv}" },
      \u0433: { text: "{\\cyrchar\\cyrg}" },
      \u0434: { text: "{\\cyrchar\\cyrd}" },
      \u0435: { text: "{\\cyrchar\\cyre}" },
      \u0436: { text: "{\\cyrchar\\cyrzh}" },
      \u0437: { text: "{\\cyrchar\\cyrz}" },
      \u0438: { text: "{\\cyrchar\\cyri}" },
      \u0439: { text: "{\\cyrchar\\cyrishrt}" },
      \u043A: { text: "{\\cyrchar\\cyrk}" },
      \u043B: { text: "{\\cyrchar\\cyrl}" },
      \u043C: { text: "{\\cyrchar\\cyrm}" },
      \u043D: { text: "{\\cyrchar\\cyrn}" },
      \u043E: { text: "{\\cyrchar\\cyro}" },
      \u043F: { text: "{\\cyrchar\\cyrp}" },
      \u0440: { text: "{\\cyrchar\\cyrr}" },
      \u0441: { text: "{\\cyrchar\\cyrs}" },
      \u0442: { text: "{\\cyrchar\\cyrt}" },
      \u0443: { text: "{\\cyrchar\\cyru}" },
      \u0444: { text: "{\\cyrchar\\cyrf}" },
      \u0445: { text: "{\\cyrchar\\cyrh}" },
      \u0446: { text: "{\\cyrchar\\cyrc}" },
      \u0447: { text: "{\\cyrchar\\cyrch}" },
      \u0448: { text: "{\\cyrchar\\cyrsh}" },
      \u0449: { text: "{\\cyrchar\\cyrshch}" },
      \u044A: { text: "{\\cyrchar\\cyrhrdsn}" },
      \u044B: { text: "{\\cyrchar\\cyrery}" },
      \u044C: { text: "{\\cyrchar\\cyrsftsn}" },
      \u044D: { text: "{\\cyrchar\\cyrerev}" },
      \u044E: { text: "{\\cyrchar\\cyryu}" },
      \u044F: { text: "{\\cyrchar\\cyrya}" },
      \u0451: { text: "{\\cyrchar\\cyryo}" },
      \u0452: { text: "{\\cyrchar\\cyrdje}" },
      \u0453: { text: "{\\cyrchar{\\'\\cyrg}}" },
      \u0454: { text: "{\\cyrchar\\cyrie}" },
      \u0455: { text: "{\\cyrchar\\cyrdze}" },
      \u0456: { text: "{\\cyrchar\\cyrii}" },
      \u0457: { text: "{\\cyrchar\\cyryi}" },
      \u0458: { text: "{\\cyrchar\\cyrje}" },
      \u0459: { text: "{\\cyrchar\\cyrlje}" },
      \u045A: { text: "{\\cyrchar\\cyrnje}" },
      \u045B: { text: "{\\cyrchar\\cyrtshe}" },
      \u045C: { text: "{\\cyrchar{\\'\\cyrk}}" },
      \u045E: { text: "{\\cyrchar\\cyrushrt}" },
      \u045F: { text: "{\\cyrchar\\cyrdzhe}" },
      \u0460: { text: "{\\cyrchar\\CYROMEGA}" },
      \u0461: { text: "{\\cyrchar\\cyromega}" },
      \u0462: { text: "{\\cyrchar\\CYRYAT}" },
      \u0464: { text: "{\\cyrchar\\CYRIOTE}" },
      \u0465: { text: "{\\cyrchar\\cyriote}" },
      \u0466: { text: "{\\cyrchar\\CYRLYUS}" },
      \u0467: { text: "{\\cyrchar\\cyrlyus}" },
      \u0468: { text: "{\\cyrchar\\CYRIOTLYUS}" },
      \u0469: { text: "{\\cyrchar\\cyriotlyus}" },
      \u046A: { text: "{\\cyrchar\\CYRBYUS}" },
      \u046C: { text: "{\\cyrchar\\CYRIOTBYUS}" },
      \u046D: { text: "{\\cyrchar\\cyriotbyus}" },
      \u046E: { text: "{\\cyrchar\\CYRKSI}" },
      \u046F: { text: "{\\cyrchar\\cyrksi}" },
      \u0470: { text: "{\\cyrchar\\CYRPSI}" },
      \u0471: { text: "{\\cyrchar\\cyrpsi}" },
      \u0472: { text: "{\\cyrchar\\CYRFITA}" },
      \u0474: { text: "{\\cyrchar\\CYRIZH}" },
      \u0478: { text: "{\\cyrchar\\CYRUK}" },
      \u0479: { text: "{\\cyrchar\\cyruk}" },
      \u047A: { text: "{\\cyrchar\\CYROMEGARND}" },
      \u047B: { text: "{\\cyrchar\\cyromegarnd}" },
      \u047C: { text: "{\\cyrchar\\CYROMEGATITLO}" },
      \u047D: { text: "{\\cyrchar\\cyromegatitlo}" },
      \u047E: { text: "{\\cyrchar\\CYROT}" },
      \u047F: { text: "{\\cyrchar\\cyrot}" },
      \u0480: { text: "{\\cyrchar\\CYRKOPPA}" },
      \u0481: { text: "{\\cyrchar\\cyrkoppa}" },
      "\u0482": { text: "{\\cyrchar\\cyrthousands}" },
      "\u0488": { text: "{\\cyrchar\\cyrhundredthousands}" },
      "\u0489": { text: "{\\cyrchar\\cyrmillions}" },
      \u048C: { text: "{\\cyrchar\\CYRSEMISFTSN}" },
      \u048D: { text: "{\\cyrchar\\cyrsemisftsn}" },
      \u048E: { text: "{\\cyrchar\\CYRRTICK}" },
      \u048F: { text: "{\\cyrchar\\cyrrtick}" },
      \u0490: { text: "{\\cyrchar\\CYRGUP}" },
      \u0491: { text: "{\\cyrchar\\cyrgup}" },
      \u0492: { text: "{\\cyrchar\\CYRGHCRS}" },
      \u0493: { text: "{\\cyrchar\\cyrghcrs}" },
      \u0494: { text: "{\\cyrchar\\CYRGHK}" },
      \u0495: { text: "{\\cyrchar\\cyrghk}" },
      \u0496: { text: "{\\cyrchar\\CYRZHDSC}" },
      \u0497: { text: "{\\cyrchar\\cyrzhdsc}" },
      \u0498: { text: "{\\cyrchar\\CYRZDSC}" },
      \u0499: { text: "{\\cyrchar\\cyrzdsc}" },
      \u049A: { text: "{\\cyrchar\\CYRKDSC}" },
      \u049B: { text: "{\\cyrchar\\cyrkdsc}" },
      \u049C: { text: "{\\cyrchar\\CYRKVCRS}" },
      \u049D: { text: "{\\cyrchar\\cyrkvcrs}" },
      \u049E: { text: "{\\cyrchar\\CYRKHCRS}" },
      \u049F: { text: "{\\cyrchar\\cyrkhcrs}" },
      \u04A0: { text: "{\\cyrchar\\CYRKBEAK}" },
      \u04A1: { text: "{\\cyrchar\\cyrkbeak}" },
      \u04A2: { text: "{\\cyrchar\\CYRNDSC}" },
      \u04A3: { text: "{\\cyrchar\\cyrndsc}" },
      \u04A4: { text: "{\\cyrchar\\CYRNG}" },
      \u04A5: { text: "{\\cyrchar\\cyrng}" },
      \u04A6: { text: "{\\cyrchar\\CYRPHK}" },
      \u04A7: { text: "{\\cyrchar\\cyrphk}" },
      \u04A8: { text: "{\\cyrchar\\CYRABHHA}" },
      \u04A9: { text: "{\\cyrchar\\cyrabhha}" },
      \u04AA: { text: "{\\cyrchar\\CYRSDSC}" },
      \u04AB: { text: "{\\cyrchar\\cyrsdsc}" },
      \u04AC: { text: "{\\cyrchar\\CYRTDSC}" },
      \u04AD: { text: "{\\cyrchar\\cyrtdsc}" },
      \u04AE: { text: "{\\cyrchar\\CYRY}" },
      \u04AF: { text: "{\\cyrchar\\cyry}" },
      \u04B0: { text: "{\\cyrchar\\CYRYHCRS}" },
      \u04B1: { text: "{\\cyrchar\\cyryhcrs}" },
      \u04B2: { text: "{\\cyrchar\\CYRHDSC}" },
      \u04B3: { text: "{\\cyrchar\\cyrhdsc}" },
      \u04B4: { text: "{\\cyrchar\\CYRTETSE}" },
      \u04B5: { text: "{\\cyrchar\\cyrtetse}" },
      \u04B6: { text: "{\\cyrchar\\CYRCHRDSC}" },
      \u04B7: { text: "{\\cyrchar\\cyrchrdsc}" },
      \u04B8: { text: "{\\cyrchar\\CYRCHVCRS}" },
      \u04B9: { text: "{\\cyrchar\\cyrchvcrs}" },
      \u04BA: { text: "{\\cyrchar\\CYRSHHA}" },
      \u04BB: { text: "{\\cyrchar\\cyrshha}" },
      \u04BC: { text: "{\\cyrchar\\CYRABHCH}" },
      \u04BD: { text: "{\\cyrchar\\cyrabhch}" },
      \u04BE: { text: "{\\cyrchar\\CYRABHCHDSC}" },
      \u04BF: { text: "{\\cyrchar\\cyrabhchdsc}" },
      \u04C0: { text: "{\\cyrchar\\CYRpalochka}" },
      \u04C3: { text: "{\\cyrchar\\CYRKHK}" },
      \u04C4: { text: "{\\cyrchar\\cyrkhk}" },
      \u04C7: { text: "{\\cyrchar\\CYRNHK}" },
      \u04C8: { text: "{\\cyrchar\\cyrnhk}" },
      \u04CB: { text: "{\\cyrchar\\CYRCHLDSC}" },
      \u04CC: { text: "{\\cyrchar\\cyrchldsc}" },
      \u04D4: { text: "{\\cyrchar\\CYRAE}" },
      \u04D5: { text: "{\\cyrchar\\cyrae}" },
      \u04D8: { text: "{\\cyrchar\\CYRSCHWA}" },
      \u04D9: { text: "{\\cyrchar\\cyrschwa}" },
      \u04E0: { text: "{\\cyrchar\\CYRABHDZE}" },
      \u04E1: { text: "{\\cyrchar\\cyrabhdze}" },
      \u04E8: { text: "{\\cyrchar\\CYROTLD}" },
      \u04E9: { text: "{\\cyrchar\\cyrotld}" },
      "\u0871": { math: "\\\\backslash" },
      "\u1D43": { math: "^{a}", text: "\\textsuperscript{a}" },
      "\u1D47": { math: "^{b}", text: "\\textsuperscript{b}" },
      "\u1D48": { math: "^{d}", text: "\\textsuperscript{d}" },
      "\u1D49": { math: "^{e}", text: "\\textsuperscript{e}" },
      "\u1D4D": { math: "^{g}", text: "\\textsuperscript{g}" },
      "\u1D4F": { math: "^{k}", text: "\\textsuperscript{k}" },
      "\u1D50": { math: "^{m}", text: "\\textsuperscript{m}" },
      "\u1D52": { math: "^{o}", text: "\\textsuperscript{o}" },
      "\u1D56": { math: "^{p}", text: "\\textsuperscript{p}" },
      "\u1D57": { math: "^{t}", text: "\\textsuperscript{t}" },
      "\u1D58": { math: "^{u}", text: "\\textsuperscript{u}" },
      "\u1D5B": { math: "^{v}", text: "\\textsuperscript{v}" },
      "\u1D9C": { math: "^{c}", text: "\\textsuperscript{c}" },
      "\u1DA0": { math: "^{f}", text: "\\textsuperscript{f}" },
      "\u1DBB": { math: "^{z}", text: "\\textsuperscript{z}" },
      \u1E02: { text: "{\\.B}" },
      \u1E03: { text: "{\\.b}" },
      \u1E04: { text: "{\\d B}" },
      \u1E05: { text: "{\\d b}" },
      \u1E06: { text: "{\\b B}" },
      \u1E07: { text: "{\\b b}" },
      \u1E0A: { text: "{\\.D}" },
      \u1E0B: { text: "{\\.d}" },
      \u1E0C: { text: "{\\d D}" },
      \u1E0D: { text: "{\\d d}" },
      \u1E0E: { text: "{\\b D}" },
      \u1E0F: { text: "{\\b d}" },
      \u1E10: { text: "{\\c D}" },
      \u1E11: { text: "{\\c d}" },
      \u1E1C: { text: "{\\c{\\u{E}}}" },
      \u1E1D: { text: "{\\c{\\u{e}}}" },
      \u1E1E: { text: "{\\.F}" },
      \u1E1F: { text: "{\\.f}" },
      \u1E20: { text: "{\\=G}" },
      \u1E21: { text: "{\\=g}" },
      \u1E22: { text: "{\\.H}" },
      \u1E23: { text: "{\\.h}" },
      \u1E24: { text: "{\\d H}" },
      \u1E25: { text: "{\\d h}" },
      \u1E26: { text: '{\\"H}' },
      \u1E27: { text: '{\\"h}' },
      \u1E28: { text: "{\\c H}" },
      \u1E29: { text: "{\\c h}" },
      \u1E30: { text: "{\\'K}" },
      \u1E31: { text: "{\\'k}" },
      \u1E32: { text: "{\\d K}" },
      \u1E33: { text: "{\\d k}" },
      \u1E34: { text: "{\\b K}" },
      \u1E35: { text: "{\\b k}" },
      \u1E36: { text: "{\\d L}" },
      \u1E37: { text: "{\\d l}" },
      \u1E3A: { text: "{\\b L}" },
      \u1E3B: { text: "{\\b l}" },
      \u1E3E: { text: "{\\'M}" },
      \u1E3F: { text: "{\\'m}" },
      \u1E40: { text: "{\\.M}" },
      \u1E41: { text: "{\\.m}" },
      \u1E42: { text: "{\\d M}" },
      \u1E43: { text: "{\\d m}" },
      \u1E44: { text: "{\\.N}" },
      \u1E45: { text: "{\\.n}" },
      \u1E46: { text: "{\\d N}" },
      \u1E47: { text: "{\\d n}" },
      \u1E48: { text: "{\\b N}" },
      \u1E49: { text: "{\\b n}" },
      \u1E54: { text: "{\\'P}" },
      \u1E55: { text: "{\\'p}" },
      \u1E56: { text: "{\\.P}" },
      \u1E57: { text: "{\\.p}" },
      \u1E58: { text: "{\\.R}" },
      \u1E59: { text: "{\\.r}" },
      \u1E5A: { text: "{\\d R}" },
      \u1E5B: { text: "{\\d r}" },
      \u1E5E: { text: "{\\b R}" },
      \u1E5F: { text: "{\\b r}" },
      \u1E60: { text: "{\\.S}" },
      \u1E61: { text: "{\\.s}" },
      \u1E62: { text: "{\\d S}" },
      \u1E63: { text: "{\\d s}" },
      \u1E6A: { text: "{\\.T}" },
      \u1E6B: { text: "{\\.t}" },
      \u1E6C: { text: "{\\d T}" },
      \u1E6D: { text: "{\\d t}" },
      \u1E6E: { text: "{\\b T}" },
      \u1E6F: { text: "{\\b t}" },
      \u1E7C: { text: "{\\~V}" },
      \u1E7D: { text: "{\\~v}" },
      \u1E7E: { text: "{\\d V}" },
      \u1E7F: { text: "{\\d v}" },
      \u1E80: { text: "{\\`W}" },
      \u1E81: { text: "{\\`w}" },
      \u1E82: { text: "{\\'W}" },
      \u1E83: { text: "{\\'w}" },
      \u1E84: { text: '{\\"W}' },
      \u1E85: { text: '{\\"w}' },
      \u1E86: { text: "{\\.W}" },
      \u1E87: { text: "{\\.w}" },
      \u1E88: { text: "{\\d W}" },
      \u1E89: { text: "{\\d w}" },
      \u1E8A: { text: "{\\.X}" },
      \u1E8B: { text: "{\\.x}" },
      \u1E8C: { text: '{\\"X}' },
      \u1E8D: { text: '{\\"x}' },
      \u1E8E: { text: "{\\.Y}" },
      \u1E8F: { text: "{\\.y}" },
      \u1E90: { text: "{\\^Z}" },
      \u1E91: { text: "{\\^z}" },
      \u1E92: { text: "{\\d Z}" },
      \u1E93: { text: "{\\d z}" },
      \u1E94: { text: "{\\b Z}" },
      \u1E95: { text: "{\\b z}" },
      \u1E96: { text: "{\\b h}" },
      \u1E97: { text: '{\\"t}' },
      \u1E98: { text: "{\\r{w}}" },
      \u1E99: { text: "{\\r{y}}" },
      \u1EA0: { text: "{\\d A}" },
      \u1EA1: { text: "{\\d a}" },
      \u1EB8: { text: "{\\d E}" },
      \u1EB9: { text: "{\\d e}" },
      \u1EBC: { text: "{\\~E}" },
      \u1EBD: { text: "{\\~e}" },
      \u1ECA: { text: "{\\d I}" },
      \u1ECB: { text: "{\\d i}" },
      \u1ECC: { text: "{\\d O}" },
      \u1ECD: { text: "{\\d o}" },
      \u1EE4: { text: "{\\d U}" },
      \u1EE5: { text: "{\\d u}" },
      \u1EF2: { text: "{\\`Y}" },
      \u1EF3: { text: "{\\`y}" },
      \u1EF4: { text: "{\\d Y}" },
      \u1EF5: { text: "{\\d y}" },
      \u1EF8: { text: "{\\~Y}" },
      \u1EF9: { text: "{\\~y}" },
      "\u2000": { text: "\\hspace{0.6em}", space: true },
      "\u2001": { math: "\\quad", space: true },
      "\u2002": { text: "\\hspace{0.6em}", space: true },
      "\u2003": { math: "\\quad", space: true },
      "\u2004": { text: "\\;", space: true },
      "\u2005": { text: "\\hspace{0.25em}", space: true },
      "\u2006": { text: "\\hspace{0.166em}", space: true },
      "\u2007": { text: "\\hphantom{0}", space: true },
      "\u2008": { text: "\\hphantom{,}", space: true },
      "\u2009": { text: "\\,", space: true },
      "\u200A": { math: "\\mkern1mu", space: true },
      "\u200B": { text: "\\hspace{0pt}", space: true },
      "\u200C": { text: "{\\aftergroup\\ignorespaces}" },
      "\u2010": { text: "-" },
      "\u2011": { text: "-" },
      "\u2012": { text: "-" },
      "\u2013": { text: "{\\textendash}" },
      "\u2014": { text: "{\\textemdash}" },
      "\u2015": { math: "\\horizbar", text: "\\rule{1em}{1pt}" },
      "\u2016": { math: "\\Vert" },
      "\u2017": { math: "\\twolowline" },
      "\u2018": { text: "`" },
      "\u2019": { text: "'" },
      "\u201A": { text: "," },
      "\u201B": { math: "\\Elzreapos" },
      "\u201C": { text: "``" },
      "\u201D": { text: "''" },
      "\u201E": { text: ",," },
      "\u201F": { text: "{\\quotedblbase}" },
      "\u2020": { math: "\\dagger", text: "{\\textdagger}", textpackages: ["textcomp"] },
      "\u2021": { math: "\\ddagger", text: "{\\textdaggerdbl}", textpackages: ["textcomp"] },
      "\u2022": { math: "\\bullet", text: "{\\textbullet}", textpackages: ["textcomp"] },
      "\u2023": { text: ">" },
      "\u2024": { text: "." },
      "\u2025": { math: "\\enleadertwodots", text: ".." },
      "\u2026": { math: "\\ldots", text: "{\\ldots}" },
      "\u2027": { text: "-" },
      "\u202F": { text: "\\,", space: true },
      "\u2030": { text: "{\\textperthousand}", textpackages: ["textcomp"] },
      "\u2031": { text: "{\\textpertenthousand}", textpackages: ["textcomp"] },
      "\u2032": { math: "{'}" },
      "\u2033": { math: "{''}" },
      "\u2034": { math: "{'''}" },
      "\u2035": { math: "\\backprime" },
      "\u2036": { math: "\\backdprime" },
      "\u2037": { math: "\\backtrprime" },
      "\u2038": { math: "\\caretinsert" },
      "\u2039": { text: "{\\guilsinglleft}" },
      "\u203A": { text: "{\\guilsinglright}" },
      "\u203C": { math: "\\Exclam" },
      "\u203E": { text: "-" },
      "\u2043": { math: "\\hyphenbullet" },
      "\u2044": { math: "\\fracslash" },
      "\u2047": { math: "\\Question" },
      "\u2048": { text: "?!" },
      "\u2049": { text: "!?" },
      "\u204A": { text: "7" },
      "\u2050": { math: "\\closure" },
      "\u2057": { math: "''''" },
      "\u205F": { math: "\\:", space: true, text: "\\:" },
      "\u2060": { text: "{\\nolinebreak}" },
      "\u2070": { math: "^{0}" },
      "\u2071": { math: "^{i}", text: "\\textsuperscript{i}" },
      "\u2074": { math: "^{4}" },
      "\u2075": { math: "^{5}" },
      "\u2076": { math: "^{6}" },
      "\u2077": { math: "^{7}" },
      "\u2078": { math: "^{8}" },
      "\u2079": { math: "^{9}" },
      "\u207A": { math: "^{+}" },
      "\u207B": { math: "^{-}" },
      "\u207C": { math: "^{=}" },
      "\u207D": { math: "^{(}" },
      "\u207E": { math: "^{)}" },
      \u207F: { math: "^{n}", text: "\\textsuperscript{n}" },
      "\u2080": { math: "_{0}" },
      "\u2081": { math: "_{1}" },
      "\u2082": { math: "_{2}" },
      "\u2083": { math: "_{3}" },
      "\u2084": { math: "_{4}" },
      "\u2085": { math: "_{5}" },
      "\u2086": { math: "_{6}" },
      "\u2087": { math: "_{7}" },
      "\u2088": { math: "_{8}" },
      "\u2089": { math: "_{9}" },
      "\u208A": { math: "_{+}" },
      "\u208B": { math: "_{-}" },
      "\u208C": { math: "_{=}" },
      "\u208D": { math: "_{(}" },
      "\u208E": { math: "_{)}" },
      "\u2090": { math: "_{a}", text: "\\textsubscript{a}" },
      "\u2091": { math: "_{e}", text: "\\textsubscript{e}" },
      "\u2092": { math: "_{o}", text: "\\textsubscript{o}" },
      "\u2093": { math: "_{x}", text: "\\textsubscript{x}" },
      "\u2094": { text: "\\textsubscript{\\textschwa}", textpackages: ["tipa"] },
      "\u2095": { math: "_{h}", text: "\\textsubscript{h}" },
      "\u2096": { math: "_{k}", text: "\\textsubscript{k}" },
      "\u2097": { math: "_{l}", text: "\\textsubscript{l}" },
      "\u2098": { math: "_{m}", text: "\\textsubscript{m}" },
      "\u2099": { math: "_{n}", text: "\\textsubscript{n}" },
      "\u209A": { math: "_{p}", text: "\\textsubscript{p}" },
      "\u209B": { math: "_{s}", text: "\\textsubscript{s}" },
      "\u209C": { math: "_{t}", text: "\\textsubscript{t}" },
      "\u20A7": { text: "\\ensuremath{\\Elzpes}" },
      "\u20AC": { math: "\\euro", text: "{\\texteuro}" },
      "\u20D0": { math: "\\lvec" },
      "\u20D1": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u20D2": { math: "\\vertoverlay" },
      "\u20D6": { math: "\\LVec" },
      "\u20D7": { math: "\\vec" },
      "\u20DB": { math: "\\dddot" },
      "\u20DC": { math: "\\ddddot" },
      "\u20DD": { math: "\\enclosecircle" },
      "\u20DE": { math: "\\enclosesquare" },
      "\u20DF": { math: "\\enclosediamond" },
      "\u20E1": { math: "\\overleftrightarrow" },
      "\u20E4": { math: "\\enclosetriangle" },
      "\u20E7": { math: "\\annuity" },
      "\u20E8": { math: "\\threeunderdot" },
      "\u20E9": { math: "\\widebridgeabove" },
      "\u20EC": { math: "\\underrightharpoondown" },
      "\u20ED": { math: "\\underleftharpoondown" },
      "\u20EE": { math: "\\underleftarrow" },
      "\u20EF": { math: "\\underrightarrow" },
      "\u20F0": { math: "\\asteraccent" },
      "\u2100": { text: "a/c" },
      "\u2101": { text: "a/s" },
      \u2102: { math: "\\mathbb{C}" },
      "\u2103": { text: "{\\textcelsius}" },
      "\u2105": { text: "c/o" },
      "\u2106": { text: "c/u" },
      \u2107: { math: "\\Euler" },
      "\u2109": { text: "F" },
      \u210A: { math: "\\mathscr{g}" },
      \u210B: { math: "\\mathscr{H}" },
      \u210C: { math: "\\mathfrak{H}" },
      \u210D: { math: "\\mathbb{H}" },
      \u210E: { math: "\\Planckconst" },
      \u210F: { math: "\\hslash" },
      \u2110: { math: "\\mathscr{I}" },
      \u2111: { math: "\\mathfrak{I}" },
      \u2112: { math: "\\mathscr{L}" },
      \u2113: { math: "\\mathscr{l}" },
      \u2115: { math: "\\mathbb{N}" },
      "\u2116": { text: "{\\cyrchar\\textnumero}" },
      "\u2117": { text: "{\\textcircledP}" },
      "\u2118": { math: "\\wp" },
      \u2119: { math: "\\mathbb{P}" },
      \u211A: { math: "\\mathbb{Q}" },
      \u211B: { math: "\\mathscr{R}" },
      \u211C: { math: "\\mathfrak{R}" },
      \u211D: { math: "\\mathbb{R}" },
      "\u211E": { math: "\\Elzxrat" },
      "\u2120": { text: "{\\textservicemark}" },
      "\u2121": { text: "TEL" },
      "\u2122": { text: "{\\texttrademark}", textpackages: ["textcomp"] },
      \u2124: { math: "\\mathbb{Z}" },
      \u2126: { math: "\\Omega" },
      "\u2127": { math: "\\mho" },
      \u2128: { math: "\\mathfrak{Z}" },
      "\u2129": { text: "{\\textriota}" },
      \u212A: { text: "K" },
      \u212B: { math: "\\Angstroem", text: "{\\AA}" },
      \u212C: { math: "\\mathscr{B}" },
      \u212D: { math: "\\mathfrak{C}" },
      "\u212E": { text: "{\\textestimated}" },
      \u212F: { math: "\\mathscr{e}" },
      \u2130: { math: "\\mathscr{E}" },
      \u2131: { math: "\\mathscr{F}" },
      "\u2132": { math: "\\Finv" },
      \u2133: { math: "\\mathscr{M}" },
      \u2134: { math: "\\mathscr{o}" },
      \u2135: { math: "\\aleph" },
      \u2136: { math: "\\beth" },
      \u2137: { math: "\\gimel" },
      \u2138: { math: "\\daleth" },
      "\u213C": { math: "\\mathbb{\\pi}" },
      "\u213D": { math: "\\mathbb{\\gamma}" },
      "\u213E": { math: "\\mathbb{\\Gamma}" },
      "\u213F": { math: "\\mathbb{\\Pi}" },
      "\u2140": { math: "\\mathbb{\\Sigma}" },
      "\u2141": { math: "\\Game" },
      "\u2142": { math: "\\sansLturned" },
      "\u2143": { math: "\\sansLmirrored" },
      "\u2144": { math: "\\Yup" },
      "\u2145": { math: "\\CapitalDifferentialD" },
      "\u2146": { math: "\\DifferentialD" },
      "\u2147": { math: "\\ExponetialE" },
      "\u2148": { math: "\\ComplexI" },
      "\u2149": { math: "\\ComplexJ" },
      "\u214A": { math: "\\PropertyLine" },
      "\u214B": { math: "\\invamp" },
      "\u2150": { math: "\\frac{1}{7}" },
      "\u2151": { math: "\\frac{1}{9}" },
      "\u2152": { math: "\\frac{1}{10}" },
      "\u2153": { math: "\\frac{1}{3}" },
      "\u2154": { math: "\\frac{2}{3}" },
      "\u2155": { math: "\\frac{1}{5}" },
      "\u2156": { math: "\\frac{2}{5}" },
      "\u2157": { math: "\\frac{3}{5}" },
      "\u2158": { math: "\\frac{4}{5}" },
      "\u2159": { math: "\\frac{1}{6}" },
      "\u215A": { math: "\\frac{5}{6}" },
      "\u215B": { math: "\\frac{1}{8}" },
      "\u215C": { math: "\\frac{3}{8}" },
      "\u215D": { math: "\\frac{5}{8}" },
      "\u215E": { math: "\\frac{7}{8}" },
      "\u215F": { math: "\\frac{1}" },
      "\u2160": { text: "I" },
      "\u2161": { text: "II" },
      "\u2162": { text: "III" },
      "\u2163": { text: "IV" },
      "\u2164": { text: "V" },
      "\u2165": { text: "VI" },
      "\u2166": { text: "VII" },
      "\u2167": { text: "VIII" },
      "\u2168": { text: "IX" },
      "\u2169": { text: "X" },
      "\u216A": { text: "XI" },
      "\u216B": { text: "XII" },
      "\u216C": { text: "L" },
      "\u216D": { text: "C" },
      "\u216E": { text: "D" },
      "\u216F": { text: "M" },
      "\u2170": { text: "i" },
      "\u2171": { text: "ii" },
      "\u2172": { text: "iii" },
      "\u2173": { text: "iv" },
      "\u2174": { text: "v" },
      "\u2175": { text: "vi" },
      "\u2176": { text: "vii" },
      "\u2177": { text: "viii" },
      "\u2178": { text: "ix" },
      "\u2179": { text: "x" },
      "\u217A": { text: "xi" },
      "\u217B": { text: "xii" },
      "\u217C": { text: "l" },
      "\u217D": { text: "c" },
      "\u217E": { text: "d" },
      "\u217F": { text: "m" },
      "\u2189": { math: "\\frac{0}{3}" },
      "\u2190": { math: "\\leftarrow" },
      "\u2191": { math: "\\uparrow" },
      "\u2192": { math: "\\rightarrow", text: "{\\textrightarrow}", textpackages: ["textcomp"] },
      "\u2193": { math: "\\downarrow" },
      "\u2194": { math: "\\leftrightarrow" },
      "\u2195": { math: "\\updownarrow" },
      "\u2196": { math: "\\nwarrow" },
      "\u2197": { math: "\\nearrow" },
      "\u2198": { math: "\\searrow" },
      "\u2199": { math: "\\swarrow" },
      "\u219A": { math: "\\nleftarrow" },
      "\u219B": { math: "\\nrightarrow" },
      "\u219C": { math: "\\arrowwaveleft" },
      "\u219D": { math: "\\arrowwaveright" },
      "\u219E": { math: "\\twoheadleftarrow" },
      "\u219F": { math: "\\twoheaduparrow" },
      "\u21A0": { math: "\\twoheadrightarrow" },
      "\u21A1": { math: "\\twoheaddownarrow" },
      "\u21A2": { math: "\\leftarrowtail" },
      "\u21A3": { math: "\\rightarrowtail" },
      "\u21A4": { math: "\\mapsfrom" },
      "\u21A5": { math: "\\MapsUp" },
      "\u21A6": { math: "\\mapsto" },
      "\u21A7": { math: "\\MapsDown" },
      "\u21A8": { math: "\\updownarrowbar" },
      "\u21A9": { math: "\\hookleftarrow" },
      "\u21AA": { math: "\\hookrightarrow" },
      "\u21AB": { math: "\\looparrowleft" },
      "\u21AC": { math: "\\looparrowright" },
      "\u21AD": { math: "\\leftrightsquigarrow" },
      "\u21AE": { math: "\\nleftrightarrow" },
      "\u21AF": { math: "\\lightning" },
      "\u21B0": { math: "\\Lsh" },
      "\u21B1": { math: "\\Rsh" },
      "\u21B2": { math: "\\dlsh" },
      "\u21B3": { text: "\\reflectbox{\\carriagereturn}", textpackages: ["graphics", "unicode-math"] },
      "\u21B4": { math: "\\linefeed" },
      "\u21B5": { math: "\\carriagereturn" },
      "\u21B6": { math: "\\curvearrowleft" },
      "\u21B7": { math: "\\curvearrowright" },
      "\u21B8": { math: "\\barovernorthwestarrow" },
      "\u21B9": { math: "\\barleftarrowrightarrowba" },
      "\u21BA": { math: "\\circlearrowleft" },
      "\u21BB": { math: "\\circlearrowright" },
      "\u21BC": { math: "\\leftharpoonup" },
      "\u21BD": { math: "\\leftharpoondown" },
      "\u21BE": { math: "\\upharpoonright" },
      "\u21BF": { math: "\\upharpoonleft" },
      "\u21C0": { math: "\\rightharpoonup", mathpackages: ["amsmath", "amssymb"] },
      "\u21C1": { math: "\\rightharpoondown" },
      "\u21C2": { math: "\\downharpoonright" },
      "\u21C3": { math: "\\downharpoonleft" },
      "\u21C4": { math: "\\rightleftarrows" },
      "\u21C5": { math: "\\dblarrowupdown" },
      "\u21C6": { math: "\\leftrightarrows" },
      "\u21C7": { math: "\\leftleftarrows" },
      "\u21C8": { math: "\\upuparrows" },
      "\u21C9": { math: "\\rightrightarrows" },
      "\u21CA": { math: "\\downdownarrows" },
      "\u21CB": { math: "\\leftrightharpoons" },
      "\u21CC": { math: "\\rightleftharpoons" },
      "\u21CD": { math: "\\nLeftarrow" },
      "\u21CE": { math: "\\nLeftrightarrow" },
      "\u21CF": { math: "\\nRightarrow" },
      "\u21D0": { math: "\\Leftarrow" },
      "\u21D1": { math: "\\Uparrow" },
      "\u21D2": { math: "\\Rightarrow" },
      "\u21D3": { math: "\\Downarrow" },
      "\u21D4": { math: "\\Leftrightarrow" },
      "\u21D5": { math: "\\Updownarrow" },
      "\u21D6": { math: "\\Nwarrow" },
      "\u21D7": { math: "\\Nearrow" },
      "\u21D8": { math: "\\Searrow" },
      "\u21D9": { math: "\\Swarrow" },
      "\u21DA": { math: "\\Lleftarrow" },
      "\u21DB": { math: "\\Rrightarrow" },
      "\u21DC": { math: "\\leftsquigarrow" },
      "\u21DD": { math: "\\rightsquigarrow" },
      "\u21DE": { math: "\\nHuparrow" },
      "\u21DF": { math: "\\nHdownarrow" },
      "\u21E0": { math: "\\dashleftarrow" },
      "\u21E1": { math: "\\updasharrow" },
      "\u21E2": { math: "\\dashrightarrow" },
      "\u21E3": { math: "\\downdasharrow" },
      "\u21E4": { math: "\\LeftArrowBar" },
      "\u21E5": { math: "\\RightArrowBar" },
      "\u21E6": { math: "\\leftwhitearrow" },
      "\u21E7": { math: "\\upwhitearrow" },
      "\u21E8": { math: "\\rightwhitearrow" },
      "\u21E9": { math: "\\downwhitearrow" },
      "\u21EA": { math: "\\whitearrowupfrombar" },
      "\u21F4": { math: "\\circleonrightarrow" },
      "\u21F5": { math: "\\DownArrowUpArrow" },
      "\u21F6": { math: "\\rightthreearrows" },
      "\u21F7": { math: "\\nvleftarrow" },
      "\u21F8": { math: "\\pfun" },
      "\u21F9": { math: "\\nvleftrightarrow" },
      "\u21FA": { math: "\\nVleftarrow" },
      "\u21FB": { math: "\\ffun" },
      "\u21FC": { math: "\\nVleftrightarrow" },
      "\u21FD": { math: "\\leftarrowtriangle" },
      "\u21FE": { math: "\\rightarrowtriangle" },
      "\u21FF": { math: "\\leftrightarrowtriangle" },
      "\u2200": { math: "\\forall" },
      "\u2201": { math: "\\complement" },
      "\u2202": { math: "\\partial" },
      "\u2203": { math: "\\exists" },
      "\u2204": { math: "\\nexists" },
      "\u2205": { math: "\\varnothing" },
      "\u2206": { math: "\\increment" },
      "\u2207": { math: "\\nabla" },
      "\u2208": { math: "\\in" },
      "\u2209": { math: "\\not\\in" },
      "\u220A": { math: "\\smallin" },
      "\u220B": { math: "\\ni" },
      "\u220C": { math: "\\not\\ni" },
      "\u220D": { math: "\\smallni" },
      "\u220E": { math: "\\QED" },
      "\u220F": { math: "\\prod" },
      "\u2210": { math: "\\coprod" },
      "\u2211": { math: "\\sum" },
      "\u2212": { math: "-", text: "-" },
      "\u2213": { math: "\\mp" },
      "\u2214": { math: "\\dotplus" },
      "\u2215": { text: "/" },
      "\u2216": { math: "\\setminus" },
      "\u2217": { math: "{_\\ast}" },
      "\u2218": { math: "\\circ" },
      "\u2219": { math: "\\bullet" },
      "\u221A": { math: "\\surd" },
      "\u221B": { math: "\\sqrt[3]" },
      "\u221C": { math: "\\sqrt[4]" },
      "\u221D": { math: "\\propto" },
      "\u221E": { math: "\\infty" },
      "\u221F": { math: "\\rightangle" },
      "\u2220": { math: "\\angle" },
      "\u2221": { math: "\\measuredangle" },
      "\u2222": { math: "\\sphericalangle" },
      "\u2223": { math: "\\mid" },
      "\u2224": { math: "\\nmid" },
      "\u2225": { math: "\\parallel" },
      "\u2226": { math: "\\nparallel" },
      "\u2227": { math: "\\wedge" },
      "\u2228": { math: "\\vee" },
      "\u2229": { math: "\\cap" },
      "\u222A": { math: "\\cup" },
      "\u222B": { math: "\\int" },
      "\u222C": { math: "{\\int\\!\\int}" },
      "\u222D": { math: "{\\int\\!\\int\\!\\int}" },
      "\u222E": { math: "\\oint" },
      "\u222F": { math: "\\surfintegral" },
      "\u2230": { math: "\\volintegral" },
      "\u2231": { math: "\\clwintegral" },
      "\u2232": { math: "\\lcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2233": { math: "\\rcirclerightint", mathpackages: ["MnSymbol"] },
      "\u2234": { math: "\\therefore" },
      "\u2235": { math: "\\because" },
      "\u2236": { math: ":" },
      "\u2237": { math: "\\Colon" },
      "\u2238": { math: "\\dotdiv", mathpackages: ["mathabx"] },
      "\u2239": { math: "\\eqcolon" },
      "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" },
      "\u223B": { math: "\\homothetic" },
      "\u223C": { math: "\\sim" },
      "\u223D": { math: "\\backsim" },
      "\u223E": { math: "\\lazysinv" },
      "\u223F": { math: "\\AC" },
      "\u2240": { math: "\\wr" },
      "\u2241": { math: "\\not\\sim" },
      "\u2242": { math: "\\texteqsim", mathpackages: ["xecjk"] },
      "\u2242\u0338": { math: "\\NotEqualTilde" },
      "\u2243": { math: "\\simeq" },
      "\u2244": { math: "\\not\\simeq" },
      "\u2245": { math: "\\cong" },
      "\u2246": { math: "\\approxnotequal" },
      "\u2247": { math: "\\not\\cong" },
      "\u2248": { math: "\\approx" },
      "\u2249": { math: "\\not\\approx" },
      "\u224A": { math: "\\approxeq" },
      "\u224B": { math: "\\tildetrpl" },
      "\u224B\u0338": { math: "\\not\\apid" },
      "\u224C": { math: "\\allequal" },
      "\u224D": { math: "\\asymp" },
      "\u224E": { math: "\\Bumpeq" },
      "\u224E\u0338": { math: "\\NotHumpDownHump" },
      "\u224F": { math: "\\bumpeq" },
      "\u224F\u0338": { math: "\\NotHumpEqual" },
      "\u2250": { math: "\\doteq" },
      "\u2250\u0338": { math: "\\not\\doteq" },
      "\u2251": { math: "\\doteqdot" },
      "\u2252": { math: "\\fallingdotseq" },
      "\u2253": { math: "\\risingdotseq" },
      "\u2254": { math: "\\coloneq", text: ":=" },
      "\u2255": { math: "=:" },
      "\u2256": { math: "\\eqcirc" },
      "\u2257": { math: "\\circeq" },
      "\u2258": { math: "\\arceq" },
      "\u2259": { math: "\\estimates" },
      "\u225B": { math: "\\starequal" },
      "\u225C": { math: "\\triangleq" },
      "\u225D": { math: "\\eqdef" },
      "\u225E": { math: "\\measeq" },
      "\u2260": { math: "\\neq" },
      "\u2261": { math: "\\equiv" },
      "\u2262": { math: "\\not\\equiv" },
      "\u2263": { math: "\\Equiv" },
      "\u2264": { math: "\\leq" },
      "\u2265": { math: "\\geq" },
      "\u2266": { math: "\\leqq" },
      "\u2267": { math: "\\geqq" },
      "\u2268": { math: "\\lneqq" },
      "\u2268\uFE00": { math: "\\lvertneqq" },
      "\u2269": { math: "\\gneqq" },
      "\u2269\uFE00": { math: "\\gvertneqq" },
      "\u226A": { math: "\\ll" },
      "\u226A\u0338": { math: "\\NotLessLess" },
      "\u226B": { math: "\\gg" },
      "\u226B\u0338": { math: "\\NotGreaterGreater" },
      "\u226C": { math: "\\between" },
      "\u226D": { math: "{\\not\\kern-0.3em\\times}" },
      "\u226E": { math: "\\not<" },
      "\u226F": { math: "\\not>" },
      "\u2270": { math: "\\not\\leq" },
      "\u2271": { math: "\\not\\geq" },
      "\u2272": { math: "\\lessequivlnt" },
      "\u2273": { math: "\\greaterequivlnt" },
      "\u2276": { math: "\\lessgtr" },
      "\u2277": { math: "\\gtrless" },
      "\u2278": { math: "\\notlessgreater" },
      "\u2279": { math: "\\notgreaterless" },
      "\u227A": { math: "\\prec" },
      "\u227B": { math: "\\succ" },
      "\u227C": { math: "\\preccurlyeq" },
      "\u227D": { math: "\\succcurlyeq" },
      "\u227E": { math: "\\precapprox" },
      "\u227E\u0338": { math: "\\NotPrecedesTilde" },
      "\u227F": { math: "\\succapprox" },
      "\u227F\u0338": { math: "\\NotSucceedsTilde" },
      "\u2280": { math: "\\not\\prec" },
      "\u2281": { math: "\\not\\succ" },
      "\u2282": { math: "\\subset" },
      "\u2283": { math: "\\supset" },
      "\u2284": { math: "\\not\\subset" },
      "\u2285": { math: "\\not\\supset" },
      "\u2286": { math: "\\subseteq" },
      "\u2287": { math: "\\supseteq" },
      "\u2288": { math: "\\not\\subseteq" },
      "\u2289": { math: "\\not\\supseteq" },
      "\u228A": { math: "\\subsetneq" },
      "\u228A\uFE00": { math: "\\varsubsetneqq" },
      "\u228B": { math: "\\supsetneq" },
      "\u228B\uFE00": { math: "\\varsupsetneq" },
      "\u228C": { math: "\\cupleftarrow" },
      "\u228D": { math: "\\cupdot" },
      "\u228E": { math: "\\uplus" },
      "\u228F": { math: "\\sqsubset" },
      "\u228F\u0338": { math: "\\NotSquareSubset" },
      "\u2290": { math: "\\sqsupset" },
      "\u2290\u0338": { math: "\\NotSquareSuperset" },
      "\u2291": { math: "\\sqsubseteq" },
      "\u2292": { math: "\\sqsupseteq" },
      "\u2293": { math: "\\sqcap" },
      "\u2294": { math: "\\sqcup" },
      "\u2295": { math: "\\oplus" },
      "\u2296": { math: "\\ominus" },
      "\u2297": { math: "\\otimes" },
      "\u2298": { math: "\\oslash" },
      "\u2299": { math: "\\odot" },
      "\u229A": { math: "\\circledcirc" },
      "\u229B": { math: "\\circledast" },
      "\u229C": { math: "\\circledequal" },
      "\u229D": { math: "\\circleddash" },
      "\u229E": { math: "\\boxplus" },
      "\u229F": { math: "\\boxminus" },
      "\u22A0": { math: "\\boxtimes" },
      "\u22A1": { math: "\\boxdot" },
      "\u22A2": { math: "\\vdash" },
      "\u22A3": { math: "\\dashv" },
      "\u22A4": { math: "\\top" },
      "\u22A5": { math: "\\perp" },
      "\u22A6": { math: "\\assert" },
      "\u22A7": { math: "\\truestate" },
      "\u22A8": { math: "\\forcesextra" },
      "\u22A9": { math: "\\Vdash" },
      "\u22AA": { math: "\\Vvdash" },
      "\u22AB": { math: "\\VDash" },
      "\u22AC": { math: "\\nvdash" },
      "\u22AD": { math: "\\nvDash" },
      "\u22AE": { math: "\\nVdash" },
      "\u22AF": { math: "\\nVDash" },
      "\u22B0": { math: "\\prurel" },
      "\u22B1": { math: "\\scurel" },
      "\u22B2": { math: "\\vartriangleleft" },
      "\u22B3": { math: "\\vartriangleright" },
      "\u22B4": { math: "\\trianglelefteq" },
      "\u22B5": { math: "\\trianglerighteq" },
      "\u22B6": { math: "\\original" },
      "\u22B7": { math: "\\image" },
      "\u22B8": { math: "\\multimap" },
      "\u22B9": { math: "\\hermitconjmatrix" },
      "\u22BA": { math: "\\intercal" },
      "\u22BB": { math: "\\veebar" },
      "\u22BC": { math: "\\barwedge" },
      "\u22BD": { math: "\\barvee" },
      "\u22BE": { math: "\\rightanglearc" },
      "\u22BF": { math: "\\varlrtriangle" },
      "\u22C2": { math: "\\bigcap" },
      "\u22C3": { math: "\\bigcup" },
      "\u22C4": { math: "\\diamond" },
      "\u22C5": { math: "\\cdot" },
      "\u22C6": { math: "\\star" },
      "\u22C7": { math: "\\divideontimes" },
      "\u22C8": { math: "\\bowtie" },
      "\u22C9": { math: "\\ltimes" },
      "\u22CA": { math: "\\rtimes" },
      "\u22CB": { math: "\\leftthreetimes" },
      "\u22CC": { math: "\\rightthreetimes" },
      "\u22CD": { math: "\\backsimeq" },
      "\u22CE": { math: "\\curlyvee" },
      "\u22CF": { math: "\\curlywedge" },
      "\u22D0": { math: "\\Subset" },
      "\u22D1": { math: "\\Supset" },
      "\u22D2": { math: "\\Cap" },
      "\u22D3": { math: "\\Cup" },
      "\u22D4": { math: "\\pitchfork" },
      "\u22D5": { math: "\\hash" },
      "\u22D6": { math: "\\lessdot" },
      "\u22D7": { math: "\\gtrdot" },
      "\u22D8": { math: "\\verymuchless" },
      "\u22D9": { math: "\\verymuchgreater" },
      "\u22DA": { math: "\\lesseqgtr" },
      "\u22DB": { math: "\\gtreqless" },
      "\u22DC": { math: "\\eqless" },
      "\u22DD": { math: "\\eqgtr" },
      "\u22DE": { math: "\\curlyeqprec" },
      "\u22DF": { math: "\\curlyeqsucc" },
      "\u22E0": { math: "\\npreceq" },
      "\u22E1": { math: "\\nsucceq" },
      "\u22E2": { math: "\\not\\sqsubseteq" },
      "\u22E3": { math: "\\not\\sqsupseteq" },
      "\u22E4": { math: "\\sqsubsetneq" },
      "\u22E5": { math: "\\Elzsqspne" },
      "\u22E6": { math: "\\lnsim" },
      "\u22E7": { math: "\\gnsim" },
      "\u22E8": { math: "\\precedesnotsimilar" },
      "\u22E9": { math: "\\succnsim" },
      "\u22EA": { math: "\\ntriangleleft" },
      "\u22EB": { math: "\\ntriangleright" },
      "\u22EC": { math: "\\ntrianglelefteq" },
      "\u22ED": { math: "\\ntrianglerighteq" },
      "\u22EE": { math: "\\vdots" },
      "\u22EF": { math: "\\cdots" },
      "\u22F0": { math: "\\upslopeellipsis" },
      "\u22F1": { math: "\\downslopeellipsis" },
      "\u22F2": { math: "\\disin" },
      "\u22F3": { math: "\\varisins" },
      "\u22F4": { math: "\\isins" },
      "\u22F5": { math: "\\isindot" },
      "\u22F6": { math: "\\barin" },
      "\u22F7": { math: "\\isinobar" },
      "\u22F8": { math: "\\isinvb" },
      "\u22F9": { math: "\\isinE" },
      "\u22FA": { math: "\\nisd" },
      "\u22FB": { math: "\\varnis" },
      "\u22FC": { math: "\\nis" },
      "\u22FD": { math: "\\varniobar" },
      "\u22FE": { math: "\\niobar" },
      "\u22FF": { math: "\\bagmember" },
      "\u2300": { math: "\\diameter" },
      "\u2302": { math: "\\house" },
      "\u2305": { math: "\\varbarwedge", text: "{\\barwedge}" },
      "\u2306": { math: "\\perspcorrespond" },
      "\u2308": { math: "\\lceil" },
      "\u2309": { math: "\\rceil" },
      "\u230A": { math: "\\lfloor" },
      "\u230B": { math: "\\rfloor" },
      "\u2310": { math: "\\invneg" },
      "\u2311": { math: "\\wasylozenge" },
      "\u2312": { math: "\\profline" },
      "\u2313": { math: "\\profsurf" },
      "\u2315": { math: "\\recorder" },
      "\u2316": { math: '{\\mathchar"2208}' },
      "\u2317": { math: "\\viewdata" },
      "\u2319": { math: "\\turnednot" },
      "\u231C": { math: "\\ulcorner" },
      "\u231D": { math: "\\urcorner" },
      "\u231E": { math: "\\llcorner" },
      "\u231F": { math: "\\lrcorner" },
      "\u2320": { math: "\\inttop" },
      "\u2321": { math: "\\intbottom" },
      "\u2322": { math: "\\frown" },
      "\u2323": { math: "\\smile" },
      "\u2329": { math: "\\langle" },
      "\u232A": { math: "\\rangle" },
      "\u232C": { math: "\\varhexagonlrbonds" },
      "\u2332": { math: "\\conictaper" },
      "\u2336": { math: "\\topbot" },
      "\u2339": { math: "\\APLinv" },
      "\u233F": { math: "\\notslash" },
      "\u2340": { math: "\\notbackslash" },
      "\u2347": { math: "\\APLleftarrowbox" },
      "\u2348": { math: "\\APLrightarrowbox" },
      "\u2349": { math: "\\invdiameter" },
      "\u2350": { math: "\\APLuparrowbox" },
      "\u2353": { math: "\\APLboxupcaret" },
      "\u2357": { math: "\\APLdownarrowbox" },
      "\u235D": { math: "\\APLcomment" },
      "\u235E": { math: "\\APLinput" },
      "\u235F": { math: "\\APLlog" },
      "\u2370": { math: "\\APLboxquestion" },
      "\u237C": { math: "\\rangledownzigzagarrow" },
      "\u2394": { math: "\\hexagon" },
      "\u239B": { math: "\\lparenuend" },
      "\u239C": { math: "\\lparenextender" },
      "\u239D": { math: "\\lparenlend" },
      "\u239E": { math: "\\rparenuend" },
      "\u239F": { math: "\\rparenextender" },
      "\u23A0": { math: "\\rparenlend" },
      "\u23A1": { math: "\\lbrackuend" },
      "\u23A2": { math: "\\lbrackextender" },
      "\u23A3": { math: "\\Elzdlcorn" },
      "\u23A4": { math: "\\rbrackuend" },
      "\u23A5": { math: "\\rbrackextender" },
      "\u23A6": { math: "\\rbracklend" },
      "\u23A7": { math: "\\lbraceuend" },
      "\u23A8": { math: "\\lbracemid" },
      "\u23A9": { math: "\\lbracelend" },
      "\u23AA": { math: "\\vbraceextender" },
      "\u23AB": { math: "\\rbraceuend" },
      "\u23AC": { math: "\\rbracemid" },
      "\u23AD": { math: "\\rbracelend" },
      "\u23AE": { math: "\\intextender" },
      "\u23AF": { math: "\\harrowextender" },
      "\u23B0": { math: "\\lmoustache" },
      "\u23B1": { math: "\\rmoustache" },
      "\u23B2": { math: "\\sumtop" },
      "\u23B3": { math: "\\sumbottom" },
      "\u23B4": { math: "\\overbracket" },
      "\u23B5": { math: "\\underbracket" },
      "\u23B6": { math: "\\bbrktbrk" },
      "\u23B7": { math: "\\sqrtbottom" },
      "\u23B8": { math: "\\lvboxline" },
      "\u23B9": { math: "\\rvboxline" },
      "\u23CE": { math: "\\varcarriagereturn" },
      "\u23DC": { math: "\\overparen" },
      "\u23DD": { math: "\\underparen" },
      "\u23DE": { math: "\\overbrace" },
      "\u23DF": { math: "\\underbrace" },
      "\u23E0": { math: "\\obrbrak" },
      "\u23E1": { math: "\\ubrbrak" },
      "\u23E2": { math: "\\trapezium" },
      "\u23E3": { math: "\\benzenr" },
      "\u23E4": { math: "\\strns" },
      "\u23E5": { math: "\\fltns" },
      "\u23E6": { math: "\\accurrent" },
      "\u23E7": { math: "\\elinters" },
      "\u2460": { text: "\\ding{172}" },
      "\u2461": { text: "\\ding{173}" },
      "\u2462": { text: "\\ding{174}" },
      "\u2463": { text: "\\ding{175}" },
      "\u2464": { text: "\\ding{176}" },
      "\u2465": { text: "\\ding{177}" },
      "\u2466": { text: "\\ding{178}" },
      "\u2467": { text: "\\ding{179}" },
      "\u2468": { text: "\\ding{180}" },
      "\u2469": { text: "\\ding{181}" },
      "\u246A": { text: "(11)" },
      "\u246B": { text: "(12)" },
      "\u246C": { text: "(13)" },
      "\u246D": { text: "(14)" },
      "\u246E": { text: "(15)" },
      "\u246F": { text: "(16)" },
      "\u2470": { text: "(17)" },
      "\u2471": { text: "(18)" },
      "\u2472": { text: "(19)" },
      "\u2473": { text: "(20)" },
      "\u2474": { text: "(1)" },
      "\u2475": { text: "(2)" },
      "\u2476": { text: "(3)" },
      "\u2477": { text: "(4)" },
      "\u2478": { text: "(5)" },
      "\u2479": { text: "(6)" },
      "\u247A": { text: "(7)" },
      "\u247B": { text: "(8)" },
      "\u247C": { text: "(9)" },
      "\u247D": { text: "(10)" },
      "\u247E": { text: "(11)" },
      "\u247F": { text: "(12)" },
      "\u2480": { text: "(13)" },
      "\u2481": { text: "(14)" },
      "\u2482": { text: "(15)" },
      "\u2483": { text: "(16)" },
      "\u2484": { text: "(17)" },
      "\u2485": { text: "(18)" },
      "\u2486": { text: "(19)" },
      "\u2487": { text: "(20)" },
      "\u2488": { text: "1." },
      "\u2489": { text: "2." },
      "\u248A": { text: "3." },
      "\u248B": { text: "4." },
      "\u248C": { text: "5." },
      "\u248D": { text: "6." },
      "\u248E": { text: "7." },
      "\u248F": { text: "8." },
      "\u2490": { text: "9." },
      "\u2491": { text: "10." },
      "\u2492": { text: "11." },
      "\u2493": { text: "12." },
      "\u2494": { text: "13." },
      "\u2495": { text: "14." },
      "\u2496": { text: "15." },
      "\u2497": { text: "16." },
      "\u2498": { text: "17." },
      "\u2499": { text: "18." },
      "\u249A": { text: "19." },
      "\u249B": { text: "20." },
      "\u249C": { text: "(a)" },
      "\u249D": { text: "(b)" },
      "\u249E": { text: "(c)" },
      "\u249F": { text: "(d)" },
      "\u24A0": { text: "(e)" },
      "\u24A1": { text: "(f)" },
      "\u24A2": { text: "(g)" },
      "\u24A3": { text: "(h)" },
      "\u24A4": { text: "(i)" },
      "\u24A5": { text: "(j)" },
      "\u24A6": { text: "(k)" },
      "\u24A7": { text: "(l)" },
      "\u24A8": { text: "(m)" },
      "\u24A9": { text: "(n)" },
      "\u24AA": { text: "(o)" },
      "\u24AB": { text: "(p)" },
      "\u24AC": { text: "(q)" },
      "\u24AD": { text: "(r)" },
      "\u24AE": { text: "(s)" },
      "\u24AF": { text: "(t)" },
      "\u24B0": { text: "(u)" },
      "\u24B1": { text: "(v)" },
      "\u24B2": { text: "(w)" },
      "\u24B3": { text: "(x)" },
      "\u24B4": { text: "(y)" },
      "\u24B5": { text: "(z)" },
      "\u24B6": { text: "(A)" },
      "\u24B7": { text: "(B)" },
      "\u24B8": { text: "(C)" },
      "\u24B9": { text: "(D)" },
      "\u24BA": { text: "(E)" },
      "\u24BB": { text: "(F)" },
      "\u24BC": { text: "(G)" },
      "\u24BD": { text: "(H)" },
      "\u24BE": { text: "(I)" },
      "\u24BF": { text: "(J)" },
      "\u24C0": { text: "(K)" },
      "\u24C1": { text: "(L)" },
      "\u24C2": { text: "(M)" },
      "\u24C3": { text: "(N)" },
      "\u24C4": { text: "(O)" },
      "\u24C5": { text: "(P)" },
      "\u24C6": { text: "(Q)" },
      "\u24C7": { text: "(R)" },
      "\u24C8": { math: "\\circledS" },
      "\u24C9": { text: "(T)" },
      "\u24CA": { text: "(U)" },
      "\u24CB": { text: "(V)" },
      "\u24CC": { text: "(W)" },
      "\u24CD": { text: "(X)" },
      "\u24CE": { text: "(Y)" },
      "\u24CF": { text: "(Z)" },
      "\u24D0": { text: "(a)" },
      "\u24D1": { text: "(b)" },
      "\u24D2": { text: "(c)" },
      "\u24D3": { text: "(d)" },
      "\u24D4": { text: "(e)" },
      "\u24D5": { text: "(f)" },
      "\u24D6": { text: "(g)" },
      "\u24D7": { text: "(h)" },
      "\u24D8": { text: "(i)" },
      "\u24D9": { text: "(j)" },
      "\u24DA": { text: "(k)" },
      "\u24DB": { text: "(l)" },
      "\u24DC": { text: "(m)" },
      "\u24DD": { text: "(n)" },
      "\u24DE": { text: "(o)" },
      "\u24DF": { text: "(p)" },
      "\u24E0": { text: "(q)" },
      "\u24E1": { text: "(r)" },
      "\u24E2": { text: "(s)" },
      "\u24E3": { text: "(t)" },
      "\u24E4": { text: "(u)" },
      "\u24E5": { text: "(v)" },
      "\u24E6": { text: "(w)" },
      "\u24E7": { text: "(x)" },
      "\u24E8": { text: "(y)" },
      "\u24E9": { text: "(z)" },
      "\u24EA": { text: "(0)" },
      "\u2500": { text: "-" },
      "\u2501": { text: "=" },
      "\u2502": { text: "|" },
      "\u2503": { text: "|" },
      "\u2504": { text: "-" },
      "\u2505": { text: "=" },
      "\u2506": { math: "\\Elzdshfnc" },
      "\u2507": { text: "|" },
      "\u2508": { text: "-" },
      "\u2509": { text: "=" },
      "\u250A": { text: "|" },
      "\u250B": { text: "|" },
      "\u250C": { text: "+" },
      "\u250D": { text: "+" },
      "\u250E": { text: "+" },
      "\u250F": { text: "+" },
      "\u2510": { text: "+" },
      "\u2511": { text: "+" },
      "\u2512": { text: "+" },
      "\u2513": { text: "+" },
      "\u2514": { text: "+" },
      "\u2515": { text: "+" },
      "\u2516": { text: "+" },
      "\u2517": { text: "+" },
      "\u2518": { text: "+" },
      "\u2519": { math: "\\Elzsqfnw" },
      "\u251A": { text: "+" },
      "\u251B": { text: "+" },
      "\u251C": { text: "+" },
      "\u251D": { text: "+" },
      "\u251E": { text: "+" },
      "\u251F": { text: "+" },
      "\u2520": { text: "+" },
      "\u2521": { text: "+" },
      "\u2522": { text: "+" },
      "\u2523": { text: "+" },
      "\u2524": { text: "+" },
      "\u2525": { text: "+" },
      "\u2526": { text: "+" },
      "\u2527": { text: "+" },
      "\u2528": { text: "+" },
      "\u2529": { text: "+" },
      "\u252A": { text: "+" },
      "\u252B": { text: "+" },
      "\u252C": { text: "+" },
      "\u252D": { text: "+" },
      "\u252E": { text: "+" },
      "\u252F": { text: "+" },
      "\u2530": { text: "+" },
      "\u2531": { text: "+" },
      "\u2532": { text: "+" },
      "\u2533": { text: "+" },
      "\u2534": { text: "+" },
      "\u2535": { text: "+" },
      "\u2536": { text: "+" },
      "\u2537": { text: "+" },
      "\u2538": { text: "+" },
      "\u2539": { text: "+" },
      "\u253A": { text: "+" },
      "\u253B": { text: "+" },
      "\u253C": { text: "+" },
      "\u253D": { text: "+" },
      "\u253E": { text: "+" },
      "\u253F": { text: "+" },
      "\u2540": { text: "+" },
      "\u2541": { text: "+" },
      "\u2542": { text: "+" },
      "\u2543": { text: "+" },
      "\u2544": { text: "+" },
      "\u2545": { text: "+" },
      "\u2546": { text: "+" },
      "\u2547": { text: "+" },
      "\u2548": { text: "+" },
      "\u2549": { text: "+" },
      "\u254A": { text: "+" },
      "\u254B": { text: "+" },
      "\u254C": { text: "-" },
      "\u254D": { text: "=" },
      "\u254E": { text: "|" },
      "\u254F": { text: "|" },
      "\u2550": { text: "=" },
      "\u2551": { text: "|" },
      "\u2552": { text: "+" },
      "\u2553": { text: "+" },
      "\u2554": { text: "+" },
      "\u2555": { text: "+" },
      "\u2556": { text: "+" },
      "\u2557": { text: "+" },
      "\u2558": { text: "+" },
      "\u2559": { text: "+" },
      "\u255A": { text: "+" },
      "\u255B": { text: "+" },
      "\u255C": { text: "+" },
      "\u255D": { text: "+" },
      "\u255E": { text: "+" },
      "\u255F": { text: "+" },
      "\u2560": { text: "+" },
      "\u2561": { text: "+" },
      "\u2562": { text: "+" },
      "\u2563": { text: "+" },
      "\u2564": { text: "+" },
      "\u2565": { text: "+" },
      "\u2566": { text: "+" },
      "\u2567": { text: "+" },
      "\u2568": { text: "+" },
      "\u2569": { text: "+" },
      "\u256A": { text: "+" },
      "\u256B": { text: "+" },
      "\u256C": { text: "+" },
      "\u256D": { text: "+" },
      "\u256E": { text: "+" },
      "\u256F": { text: "+" },
      "\u2570": { text: "+" },
      "\u2571": { math: "\\diagup" },
      "\u2572": { text: "\\" },
      "\u2573": { text: "X" },
      "\u257C": { text: "-" },
      "\u257D": { text: "|" },
      "\u257E": { text: "-" },
      "\u257F": { text: "|" },
      "\u2580": { math: "\\blockuphalf" },
      "\u2584": { math: "\\blocklowhalf" },
      "\u2588": { math: "\\blockfull" },
      "\u258C": { math: "\\blocklefthalf" },
      "\u2590": { math: "\\blockrighthalf" },
      "\u2591": { math: "\\blockqtrshaded" },
      "\u2592": { math: "\\blockhalfshaded" },
      "\u2593": { math: "\\blockthreeqtrshaded" },
      "\u25A0": { math: "\\mdlgblksquare", text: "\\ding{110}" },
      "\u25A1": { math: "\\square" },
      "\u25A2": { math: "\\squoval" },
      "\u25A3": { math: "\\blackinwhitesquare" },
      "\u25A4": { math: "\\squarehfill" },
      "\u25A5": { math: "\\squarevfill" },
      "\u25A6": { math: "\\squarehvfill" },
      "\u25A7": { math: "\\squarenwsefill" },
      "\u25A8": { math: "\\squareneswfill" },
      "\u25A9": { math: "\\squarecrossfill" },
      "\u25AA": { math: "\\blacksquare" },
      "\u25AB": { math: "\\smwhtsquare" },
      "\u25AC": { math: "\\hrectangleblack" },
      "\u25AD": { math: "\\fbox{~~}" },
      "\u25AE": { math: "\\vrectangleblack" },
      "\u25AF": { math: "\\Elzvrecto" },
      "\u25B0": { math: "\\parallelogramblack" },
      "\u25B2": { math: "\\bigblacktriangleup", text: "\\ding{115}" },
      "\u25B3": { math: "\\bigtriangleup" },
      "\u25B4": { math: "\\blacktriangle" },
      "\u25B5": { math: "\\vartriangle" },
      "\u25B6": { math: "\\RHD" },
      "\u25B7": { math: "\\rhd" },
      "\u25B8": { math: "\\blacktriangleright" },
      "\u25B9": { math: "\\triangleright" },
      "\u25BA": { math: "\\blackpointerright" },
      "\u25BB": { math: "\\whitepointerright" },
      "\u25BC": { math: "\\bigblacktriangledown", text: "\\ding{116}" },
      "\u25BD": { math: "\\bigtriangledown" },
      "\u25BE": { math: "\\blacktriangledown" },
      "\u25BF": { math: "\\triangledown" },
      "\u25C0": { math: "\\LHD" },
      "\u25C1": { math: "\\lhd" },
      "\u25C2": { math: "\\blacktriangleleft" },
      "\u25C3": { math: "\\triangleleft" },
      "\u25C4": { math: "\\blackpointerleft" },
      "\u25C5": { math: "\\whitepointerleft" },
      "\u25C6": { math: "\\Diamondblack", text: "\\ding{117}" },
      "\u25C7": { math: "\\Diamond" },
      "\u25C8": { math: "\\blackinwhitediamond" },
      "\u25C9": { math: "\\fisheye" },
      "\u25CA": { math: "\\lozenge" },
      "\u25CB": { math: "\\bigcirc" },
      "\u25CC": { math: "\\dottedcircle" },
      "\u25CD": { math: "\\circlevertfill" },
      "\u25CE": { math: "\\bullseye" },
      "\u25CF": { math: "\\CIRCLE", text: "\\ding{108}" },
      "\u25D0": { math: "\\Elzcirfl" },
      "\u25D1": { math: "\\Elzcirfr" },
      "\u25D2": { math: "\\Elzcirfb" },
      "\u25D3": { math: "\\circletophalfblack" },
      "\u25D4": { math: "\\circleurquadblack" },
      "\u25D5": { math: "\\blackcircleulquadwhite" },
      "\u25D6": { math: "\\LEFTCIRCLE" },
      "\u25D7": { math: "\\RIGHTCIRCLE", text: "\\ding{119}" },
      "\u25D8": { math: "\\Elzrvbull" },
      "\u25D9": { math: "\\inversewhitecircle" },
      "\u25DA": { math: "\\invwhiteupperhalfcircle" },
      "\u25DB": { math: "\\invwhitelowerhalfcircle" },
      "\u25DC": { math: "\\ularc" },
      "\u25DD": { math: "\\urarc" },
      "\u25DE": { math: "\\lrarc" },
      "\u25DF": { math: "\\llarc" },
      "\u25E0": { math: "\\topsemicircle" },
      "\u25E1": { math: "\\botsemicircle" },
      "\u25E2": { math: "\\lrblacktriangle" },
      "\u25E3": { math: "\\llblacktriangle" },
      "\u25E4": { math: "\\ulblacktriangle" },
      "\u25E5": { math: "\\urblacktriangle" },
      "\u25E6": { math: "\\smwhtcircle" },
      "\u25E7": { math: "\\Elzsqfl" },
      "\u25E8": { math: "\\Elzsqfr" },
      "\u25E9": { math: "\\squareulblack" },
      "\u25EA": { math: "\\Elzsqfse" },
      "\u25EB": { math: "\\boxbar" },
      "\u25EC": { math: "\\trianglecdot" },
      "\u25ED": { math: "\\triangleleftblack" },
      "\u25EE": { math: "\\trianglerightblack" },
      "\u25EF": { math: "\\bigcirc" },
      "\u25F0": { math: "\\squareulquad" },
      "\u25F1": { math: "\\squarellquad" },
      "\u25F2": { math: "\\squarelrquad" },
      "\u25F3": { math: "\\squareurquad" },
      "\u25F4": { math: "\\circleulquad" },
      "\u25F5": { math: "\\circlellquad" },
      "\u25F6": { math: "\\circlelrquad" },
      "\u25F7": { math: "\\circleurquad" },
      "\u25F8": { math: "\\ultriangle" },
      "\u25F9": { math: "\\urtriangle" },
      "\u25FA": { math: "\\lltriangle" },
      "\u25FB": { math: "\\square" },
      "\u25FC": { math: "\\blacksquare" },
      "\u25FD": { math: "\\mdsmwhtsquare" },
      "\u25FE": { math: "\\mdsmblksquare" },
      "\u25FF": { math: "\\lrtriangle" },
      "\u2605": { math: "\\bigstar", text: "\\ding{72}" },
      "\u2606": { math: "\\bigwhitestar", text: "\\ding{73}" },
      "\u2609": { math: "\\Sun" },
      "\u260E": { text: "\\ding{37}" },
      "\u2610": { math: "\\Square" },
      "\u2611": { math: "\\CheckedBox" },
      "\u2612": { math: "\\XBox" },
      "\u2613": { text: "X" },
      "\u2615": { math: "\\steaming" },
      "\u261B": { text: "\\ding{42}" },
      "\u261E": { math: "\\pointright", text: "\\ding{43}" },
      "\u2620": { math: "\\skull" },
      "\u2621": { math: "\\danger" },
      "\u2622": { math: "\\radiation" },
      "\u2623": { math: "\\biohazard" },
      "\u262F": { math: "\\yinyang" },
      "\u2639": { math: "\\frownie" },
      "\u263A": { math: "\\smiley" },
      "\u263B": { math: "\\blacksmiley" },
      "\u263C": { math: "\\sun" },
      "\u263D": { text: "{\\rightmoon}", textpackages: ["wasysym"] },
      "\u263E": { text: "{\\leftmoon}", textpackages: ["wasysym"] },
      "\u263F": { math: "\\mercury", text: "{\\mercury}" },
      "\u2640": { math: "\\female", text: "{\\venus}" },
      "\u2641": { math: "\\earth" },
      "\u2642": { math: "\\male", text: "{\\male}" },
      "\u2643": { math: "\\jupiter", text: "{\\jupiter}" },
      "\u2644": { math: "\\saturn", text: "{\\saturn}" },
      "\u2645": { math: "\\uranus", text: "{\\uranus}" },
      "\u2646": { math: "\\neptune", text: "{\\neptune}" },
      "\u2647": { math: "\\pluto", text: "{\\pluto}" },
      "\u2648": { math: "\\aries", text: "{\\aries}" },
      "\u2649": { math: "\\taurus", text: "{\\taurus}" },
      "\u264A": { math: "\\gemini", text: "{\\gemini}" },
      "\u264B": { math: "\\cancer", text: "{\\cancer}" },
      "\u264C": { math: "\\leo", text: "{\\leo}" },
      "\u264D": { math: "\\virgo", text: "{\\virgo}" },
      "\u264E": { math: "\\libra", text: "{\\libra}" },
      "\u264F": { math: "\\scorpio", text: "{\\scorpio}" },
      "\u2650": { math: "\\sagittarius", text: "{\\sagittarius}" },
      "\u2651": { math: "\\capricornus", text: "{\\capricornus}" },
      "\u2652": { math: "\\aquarius", text: "{\\aquarius}" },
      "\u2653": { math: "\\pisces", text: "{\\pisces}" },
      "\u2660": { math: "\\spadesuit", text: "\\ding{171}" },
      "\u2661": { math: "\\heartsuit" },
      "\u2662": { math: "\\diamond" },
      "\u2663": { math: "\\clubsuit", text: "\\ding{168}" },
      "\u2664": { math: "\\varspadesuit" },
      "\u2665": { math: "\\varheartsuit", text: "\\ding{170}" },
      "\u2666": { math: "\\vardiamondsuit", text: "\\ding{169}" },
      "\u2667": { math: "\\varclubsuit" },
      "\u2669": { math: "\\quarternote", text: "{\\quarternote}" },
      "\u266A": { math: "\\eighthnote", text: "{\\eighthnote}" },
      "\u266B": { math: "\\twonotes" },
      "\u266C": { math: "\\sixteenthnote" },
      "\u266D": { math: "\\flat" },
      "\u266E": { math: "\\natural" },
      "\u266F": { math: "\\sharp" },
      "\u267B": { math: "\\recycle" },
      "\u267E": { math: "\\acidfree" },
      "\u2680": { math: "\\dicei" },
      "\u2681": { math: "\\diceii" },
      "\u2682": { math: "\\diceiii" },
      "\u2683": { math: "\\diceiv" },
      "\u2684": { math: "\\dicev" },
      "\u2685": { math: "\\dicevi" },
      "\u2686": { math: "\\circledrightdot" },
      "\u2687": { math: "\\circledtwodots" },
      "\u2688": { math: "\\blackcircledrightdot" },
      "\u2689": { math: "\\blackcircledtwodots" },
      "\u2693": { math: "\\anchor" },
      "\u2694": { math: "\\swords" },
      "\u26A0": { math: "\\warning" },
      "\u26A5": { math: "\\Hermaphrodite" },
      "\u26AA": { math: "\\medcirc" },
      "\u26AB": { math: "\\medbullet" },
      "\u26AC": { math: "\\mdsmwhtcircle" },
      "\u26B2": { math: "\\neuter" },
      "\u2701": { text: "\\ding{33}" },
      "\u2702": { text: "\\ding{34}" },
      "\u2703": { text: "\\ding{35}" },
      "\u2704": { text: "\\ding{36}" },
      "\u2706": { text: "\\ding{38}" },
      "\u2707": { text: "\\ding{39}" },
      "\u2708": { text: "\\ding{40}" },
      "\u2709": { text: "\\ding{41}" },
      "\u270C": { text: "\\ding{44}" },
      "\u270D": { text: "\\ding{45}" },
      "\u270E": { math: "\\pencil", text: "\\ding{46}" },
      "\u270F": { text: "\\ding{47}" },
      "\u2710": { text: "\\ding{48}" },
      "\u2711": { text: "\\ding{49}" },
      "\u2712": { text: "\\ding{50}" },
      "\u2713": { math: "\\checkmark", text: "\\ding{51}" },
      "\u2714": { text: "\\ding{52}" },
      "\u2715": { text: "\\ding{53}" },
      "\u2716": { text: "\\ding{54}" },
      "\u2717": { math: "\\ballotx", text: "\\ding{55}" },
      "\u2718": { text: "\\ding{56}" },
      "\u2719": { text: "\\ding{57}" },
      "\u271A": { text: "\\ding{58}" },
      "\u271B": { text: "\\ding{59}" },
      "\u271C": { text: "\\ding{60}" },
      "\u271D": { text: "\\ding{61}" },
      "\u271E": { text: "\\ding{62}" },
      "\u271F": { text: "\\ding{63}" },
      "\u2720": { math: "\\maltese", text: "\\ding{64}" },
      "\u2721": { text: "\\ding{65}" },
      "\u2722": { text: "\\ding{66}" },
      "\u2723": { text: "\\ding{67}" },
      "\u2724": { text: "\\ding{68}" },
      "\u2725": { text: "\\ding{69}" },
      "\u2726": { text: "\\ding{70}" },
      "\u2727": { text: "\\ding{71}" },
      "\u2729": { text: "\\ding{73}" },
      "\u272A": { math: "\\circledstar", text: "\\ding{74}" },
      "\u272B": { text: "\\ding{75}" },
      "\u272C": { text: "\\ding{76}" },
      "\u272D": { text: "\\ding{77}" },
      "\u272E": { text: "\\ding{78}" },
      "\u272F": { text: "\\ding{79}" },
      "\u2730": { text: "\\ding{80}" },
      "\u2731": { text: "\\ding{81}" },
      "\u2732": { text: "\\ding{82}" },
      "\u2733": { text: "\\ding{83}" },
      "\u2734": { text: "\\ding{84}" },
      "\u2735": { text: "\\ding{85}" },
      "\u2736": { math: "\\varstar", text: "\\ding{86}" },
      "\u2737": { text: "\\ding{87}" },
      "\u2738": { text: "\\ding{88}" },
      "\u2739": { text: "\\ding{89}" },
      "\u273A": { text: "\\ding{90}" },
      "\u273B": { text: "\\ding{91}" },
      "\u273C": { text: "\\ding{92}" },
      "\u273D": { math: "\\dingasterisk", text: "\\ding{93}" },
      "\u273E": { text: "\\ding{94}" },
      "\u273F": { text: "\\ding{95}" },
      "\u2740": { text: "\\ding{96}" },
      "\u2741": { text: "\\ding{97}" },
      "\u2742": { text: "\\ding{98}" },
      "\u2743": { text: "\\ding{99}" },
      "\u2744": { text: "\\ding{100}" },
      "\u2745": { text: "\\ding{101}" },
      "\u2746": { text: "\\ding{102}" },
      "\u2747": { text: "\\ding{103}" },
      "\u2748": { text: "\\ding{104}" },
      "\u2749": { text: "\\ding{105}" },
      "\u274A": { text: "\\ding{106}" },
      "\u274B": { text: "\\ding{107}" },
      "\u274D": { text: "\\ding{109}" },
      "\u274F": { text: "\\ding{111}" },
      "\u2750": { text: "\\ding{112}" },
      "\u2751": { text: "\\ding{113}" },
      "\u2752": { text: "\\ding{114}" },
      "\u2756": { text: "\\ding{118}" },
      "\u2758": { text: "\\ding{120}" },
      "\u2759": { text: "\\ding{121}" },
      "\u275A": { text: "\\ding{122}" },
      "\u275B": { text: "\\ding{123}" },
      "\u275C": { text: "\\ding{124}" },
      "\u275D": { text: "\\ding{125}" },
      "\u275E": { text: "\\ding{126}" },
      "\u2761": { text: "\\ding{161}" },
      "\u2762": { text: "\\ding{162}" },
      "\u2763": { text: "\\ding{163}" },
      "\u2764": { text: "\\ding{164}" },
      "\u2765": { text: "\\ding{165}" },
      "\u2766": { text: "\\ding{166}" },
      "\u2767": { text: "\\ding{167}" },
      "\u2772": { math: "\\lbrbrak" },
      "\u2773": { math: "\\rbrbrak" },
      "\u2776": { text: "\\ding{182}" },
      "\u2777": { text: "\\ding{183}" },
      "\u2778": { text: "\\ding{184}" },
      "\u2779": { text: "\\ding{185}" },
      "\u277A": { text: "\\ding{186}" },
      "\u277B": { text: "\\ding{187}" },
      "\u277C": { text: "\\ding{188}" },
      "\u277D": { text: "\\ding{189}" },
      "\u277E": { text: "\\ding{190}" },
      "\u277F": { text: "\\ding{191}" },
      "\u2780": { text: "\\ding{192}" },
      "\u2781": { text: "\\ding{193}" },
      "\u2782": { text: "\\ding{194}" },
      "\u2783": { text: "\\ding{195}" },
      "\u2784": { text: "\\ding{196}" },
      "\u2785": { text: "\\ding{197}" },
      "\u2786": { text: "\\ding{198}" },
      "\u2787": { text: "\\ding{199}" },
      "\u2788": { text: "\\ding{200}" },
      "\u2789": { text: "\\ding{201}" },
      "\u278A": { text: "\\ding{202}" },
      "\u278B": { text: "\\ding{203}" },
      "\u278C": { text: "\\ding{204}" },
      "\u278D": { text: "\\ding{205}" },
      "\u278E": { text: "\\ding{206}" },
      "\u278F": { text: "\\ding{207}" },
      "\u2790": { text: "\\ding{208}" },
      "\u2791": { text: "\\ding{209}" },
      "\u2792": { text: "\\ding{210}" },
      "\u2793": { text: "\\ding{211}" },
      "\u2794": { text: "\\ding{212}" },
      "\u2798": { text: "\\ding{216}" },
      "\u2799": { text: "\\ding{217}" },
      "\u279A": { text: "\\ding{218}" },
      "\u279B": { math: "\\draftingarrow", text: "\\ding{219}" },
      "\u279C": { text: "\\ding{220}" },
      "\u279D": { text: "\\ding{221}" },
      "\u279E": { text: "\\ding{222}" },
      "\u279F": { text: "\\ding{223}" },
      "\u27A0": { text: "\\ding{224}" },
      "\u27A1": { text: "\\ding{225}" },
      "\u27A2": { math: "\\arrowbullet", text: "\\ding{226}" },
      "\u27A3": { text: "\\ding{227}" },
      "\u27A4": { text: "\\ding{228}" },
      "\u27A5": { text: "\\ding{229}" },
      "\u27A6": { text: "\\ding{230}" },
      "\u27A7": { text: "\\ding{231}" },
      "\u27A8": { text: "\\ding{232}" },
      "\u27A9": { text: "\\ding{233}" },
      "\u27AA": { text: "\\ding{234}" },
      "\u27AB": { text: "\\ding{235}" },
      "\u27AC": { text: "\\ding{236}" },
      "\u27AD": { text: "\\ding{237}" },
      "\u27AE": { text: "\\ding{238}" },
      "\u27AF": { text: "\\ding{239}" },
      "\u27B1": { text: "\\ding{241}" },
      "\u27B2": { text: "\\ding{242}" },
      "\u27B3": { text: "\\ding{243}" },
      "\u27B4": { text: "\\ding{244}" },
      "\u27B5": { text: "\\ding{245}" },
      "\u27B6": { text: "\\ding{246}" },
      "\u27B7": { text: "\\ding{247}" },
      "\u27B8": { text: "\\ding{248}" },
      "\u27B9": { text: "\\ding{249}" },
      "\u27BA": { text: "\\ding{250}" },
      "\u27BB": { text: "\\ding{251}" },
      "\u27BC": { text: "\\ding{252}" },
      "\u27BD": { text: "\\ding{253}" },
      "\u27BE": { text: "\\ding{254}" },
      "\u27C0": { math: "\\threedangle" },
      "\u27C1": { math: "\\whiteinwhitetriangle" },
      "\u27C2": { math: "\\perp" },
      "\u27C3": { math: "\\subsetcirc" },
      "\u27C4": { math: "\\supsetcirc" },
      "\u27C5": { math: "\\Lbag" },
      "\u27C6": { math: "\\Rbag" },
      "\u27C7": { math: "\\veedot" },
      "\u27C8": { math: "\\bsolhsub" },
      "\u27C9": { math: "\\suphsol" },
      "\u27CC": { math: "\\longdivision" },
      "\u27D0": { math: "\\Diamonddot" },
      "\u27D1": { math: "\\wedgedot" },
      "\u27D2": { math: "\\upin" },
      "\u27D3": { math: "\\pullback" },
      "\u27D4": { math: "\\pushout" },
      "\u27D5": { math: "\\leftouterjoin" },
      "\u27D6": { math: "\\rightouterjoin" },
      "\u27D7": { math: "\\fullouterjoin" },
      "\u27D8": { math: "\\bigbot" },
      "\u27D9": { math: "\\bigtop" },
      "\u27DA": { math: "\\DashVDash" },
      "\u27DB": { math: "\\dashVdash" },
      "\u27DC": { math: "\\multimapinv" },
      "\u27DD": { math: "\\vlongdash" },
      "\u27DE": { math: "\\longdashv" },
      "\u27DF": { math: "\\cirbot" },
      "\u27E0": { math: "\\lozengeminus" },
      "\u27E1": { math: "\\concavediamond" },
      "\u27E2": { math: "\\concavediamondtickleft" },
      "\u27E3": { math: "\\concavediamondtickright" },
      "\u27E4": { math: "\\whitesquaretickleft" },
      "\u27E5": { math: "\\whitesquaretickright" },
      "\u27E6": { math: "\\llbracket" },
      "\u27E7": { math: "\\rrbracket" },
      "\u27E8": { math: "\\langle" },
      "\u27E9": { math: "\\rangle" },
      "\u27EA": { math: "\\lang" },
      "\u27EB": { math: "\\rang" },
      "\u27EC": { math: "\\Lbrbrak" },
      "\u27ED": { math: "\\Rbrbrak" },
      "\u27EE": { math: "\\lgroup" },
      "\u27EF": { math: "\\rgroup" },
      "\u27F0": { math: "\\UUparrow" },
      "\u27F1": { math: "\\DDownarrow" },
      "\u27F2": { math: "\\acwgapcirclearrow" },
      "\u27F3": { math: "\\cwgapcirclearrow" },
      "\u27F4": { math: "\\rightarrowonoplus" },
      "\u27F5": { math: "\\longleftarrow" },
      "\u27F6": { math: "\\longrightarrow" },
      "\u27F7": { math: "\\longleftrightarrow" },
      "\u27F8": { math: "\\Longleftarrow" },
      "\u27F9": { math: "\\Longrightarrow" },
      "\u27FA": { math: "\\Longleftrightarrow" },
      "\u27FB": { math: "\\longmapsfrom" },
      "\u27FC": { math: "\\longmapsto" },
      "\u27FD": { math: "\\Longmapsfrom" },
      "\u27FE": { math: "\\Longmapsto" },
      "\u27FF": { math: "\\sim\\joinrel\\leadsto" },
      "\u2900": { math: "\\psur" },
      "\u2901": { math: "\\nVtwoheadrightarrow" },
      "\u2902": { math: "\\nvLeftarrow" },
      "\u2903": { math: "\\nvRightarrow" },
      "\u2904": { math: "\\nvLeftrightarrow" },
      "\u2906": { math: "\\Mapsfrom" },
      "\u2907": { math: "\\Mapsto" },
      "\u2908": { math: "\\downarrowbarred" },
      "\u2909": { math: "\\uparrowbarred" },
      "\u290A": { math: "\\Uuparrow" },
      "\u290B": { math: "\\Ddownarrow" },
      "\u290C": { math: "\\leftbkarrow" },
      "\u290D": { math: "\\rightbkarrow" },
      "\u290E": { math: "\\leftdbkarrow" },
      "\u290F": { math: "\\dbkarow" },
      "\u2910": { math: "\\drbkarow" },
      "\u2911": { math: "\\rightdotarrow" },
      "\u2912": { math: "\\UpArrowBar" },
      "\u2913": { math: "\\DownArrowBar" },
      "\u2914": { math: "\\pinj" },
      "\u2915": { math: "\\finj" },
      "\u2916": { math: "\\bij" },
      "\u2917": { math: "\\nvtwoheadrightarrowtail" },
      "\u2918": { math: "\\nVtwoheadrightarrowtail" },
      "\u2919": { math: "\\lefttail" },
      "\u291A": { math: "\\righttail" },
      "\u291B": { math: "\\leftdbltail" },
      "\u291C": { math: "\\rightdbltail" },
      "\u291D": { math: "\\diamondleftarrow" },
      "\u291E": { math: "\\rightarrowdiamond" },
      "\u291F": { math: "\\diamondleftarrowbar" },
      "\u2920": { math: "\\barrightarrowdiamond" },
      "\u2921": { math: "\\nwsearrow" },
      "\u2922": { math: "\\neswarrow" },
      "\u292B": { math: "\\rdiagovfdiag" },
      "\u292C": { math: "\\fdiagovrdiag" },
      "\u292D": { math: "\\seovnearrow" },
      "\u292E": { math: "\\neovsearrow" },
      "\u292F": { math: "\\fdiagovnearrow" },
      "\u2930": { math: "\\rdiagovsearrow" },
      "\u2931": { math: "\\neovnwarrow" },
      "\u2932": { math: "\\nwovnearrow" },
      "\u2934": { math: "\\uprightcurvearrow" },
      "\u2935": { math: "\\downrightcurvedarrow" },
      "\u2938": { math: "\\cwrightarcarrow" },
      "\u2939": { math: "\\acwleftarcarrow" },
      "\u293A": { math: "\\acwoverarcarrow" },
      "\u293B": { math: "\\acwunderarcarrow" },
      "\u293C": { math: "\\curvearrowrightminus" },
      "\u293D": { math: "\\curvearrowleftplus" },
      "\u293E": { math: "\\cwundercurvearrow" },
      "\u293F": { math: "\\ccwundercurvearrow" },
      "\u2940": { math: "\\Elolarr" },
      "\u2941": { math: "\\Elorarr" },
      "\u2942": { math: "\\ElzRlarr" },
      "\u2943": { math: "\\leftarrowshortrightarrow" },
      "\u2944": { math: "\\ElzrLarr" },
      "\u2945": { math: "\\rightarrowplus" },
      "\u2946": { math: "\\leftarrowplus" },
      "\u2947": { math: "\\Elzrarrx" },
      "\u2948": { math: "\\leftrightarrowcircle" },
      "\u2949": { math: "\\twoheaduparrowcircle" },
      "\u294A": { math: "\\leftrightharpoon" },
      "\u294B": { math: "\\rightleftharpoon" },
      "\u294C": { math: "\\updownharpoonrightleft" },
      "\u294D": { math: "\\updownharpoonleftright" },
      "\u294E": { math: "\\LeftRightVector" },
      "\u294F": { math: "\\RightUpDownVector" },
      "\u2950": { math: "\\DownLeftRightVector" },
      "\u2951": { math: "\\LeftUpDownVector" },
      "\u2952": { math: "\\LeftVectorBar" },
      "\u2953": { math: "\\RightVectorBar" },
      "\u2954": { math: "\\RightUpVectorBar" },
      "\u2955": { math: "\\RightDownVectorBar" },
      "\u2956": { math: "\\DownLeftVectorBar" },
      "\u2957": { math: "\\DownRightVectorBar" },
      "\u2958": { math: "\\LeftUpVectorBar" },
      "\u2959": { math: "\\LeftDownVectorBar" },
      "\u295A": { math: "\\LeftTeeVector" },
      "\u295B": { math: "\\RightTeeVector" },
      "\u295C": { math: "\\RightUpTeeVector" },
      "\u295D": { math: "\\RightDownTeeVector" },
      "\u295E": { math: "\\DownLeftTeeVector" },
      "\u295F": { math: "\\DownRightTeeVector" },
      "\u2960": { math: "\\LeftUpTeeVector" },
      "\u2961": { math: "\\LeftDownTeeVector" },
      "\u2962": { math: "\\leftleftharpoons" },
      "\u2963": { math: "\\upupharpoons" },
      "\u2964": { math: "\\rightrightharpoons" },
      "\u2965": { math: "\\downdownharpoons" },
      "\u2966": { math: "\\leftrightharpoonsup" },
      "\u2967": { math: "\\leftrightharpoonsdown" },
      "\u2968": { math: "\\rightleftharpoonsup" },
      "\u2969": { math: "\\rightleftharpoonsdown" },
      "\u296A": { math: "\\leftbarharpoon" },
      "\u296B": { math: "\\barleftharpoon" },
      "\u296C": { math: "\\rightbarharpoon" },
      "\u296D": { math: "\\barrightharpoon" },
      "\u296E": { math: "\\UpEquilibrium" },
      "\u296F": { math: "\\ReverseUpEquilibrium" },
      "\u2970": { math: "\\RoundImplies" },
      "\u2971": { math: "\\equalrightarrow" },
      "\u2972": { math: "\\similarrightarrow" },
      "\u2973": { math: "\\leftarrowsimilar" },
      "\u2974": { math: "\\rightarrowsimilar" },
      "\u2975": { math: "\\rightarrowapprox" },
      "\u2976": { math: "\\ltlarr" },
      "\u2977": { math: "\\leftarrowless" },
      "\u2978": { math: "\\gtrarr" },
      "\u2979": { math: "\\subrarr" },
      "\u297A": { math: "\\leftarrowsubset" },
      "\u297B": { math: "\\suplarr" },
      "\u297E": { math: "\\upfishtail" },
      "\u297F": { math: "\\downfishtail" },
      "\u2980": { math: "\\Elztfnc" },
      "\u2981": { math: "\\spot" },
      "\u2982": { math: "\\typecolon" },
      "\u2983": { math: "\\lBrace" },
      "\u2984": { math: "\\rBrace" },
      "\u2986": { math: "\\Elroang" },
      "\u2987": { math: "\\limg" },
      "\u2988": { math: "\\rimg" },
      "\u2989": { math: "\\lblot" },
      "\u298A": { math: "\\rblot" },
      "\u298B": { math: "\\lbrackubar" },
      "\u298C": { math: "\\rbrackubar" },
      "\u298D": { math: "\\lbrackultick" },
      "\u298E": { math: "\\rbracklrtick" },
      "\u298F": { math: "\\lbracklltick" },
      "\u2990": { math: "\\rbrackurtick" },
      "\u2991": { math: "\\langledot" },
      "\u2992": { math: "\\rangledot" },
      "\u2993": { math: "<\\kern-0.58em(" },
      "\u2995": { math: "\\Lparengtr" },
      "\u2996": { math: "\\Rparenless" },
      "\u2997": { math: "\\lblkbrbrak" },
      "\u2998": { math: "\\rblkbrbrak" },
      "\u2999": { math: "\\Elzddfnc" },
      "\u299A": { math: "\\vzigzag" },
      "\u299B": { math: "\\measuredangleleft" },
      "\u299C": { math: "\\Angle" },
      "\u299D": { math: "\\rightanglemdot" },
      "\u299E": { math: "\\angles" },
      "\u299F": { math: "\\angdnr" },
      "\u29A0": { math: "\\Elzlpargt" },
      "\u29A1": { math: "\\sphericalangleup" },
      "\u29A2": { math: "\\turnangle" },
      "\u29A3": { math: "\\revangle" },
      "\u29A4": { math: "\\angleubar" },
      "\u29A5": { math: "\\revangleubar" },
      "\u29A6": { math: "\\wideangledown" },
      "\u29A7": { math: "\\wideangleup" },
      "\u29A8": { math: "\\measanglerutone" },
      "\u29A9": { math: "\\measanglelutonw" },
      "\u29AA": { math: "\\measanglerdtose" },
      "\u29AB": { math: "\\measangleldtosw" },
      "\u29AC": { math: "\\measangleurtone" },
      "\u29AD": { math: "\\measangleultonw" },
      "\u29AE": { math: "\\measangledrtose" },
      "\u29AF": { math: "\\measangledltosw" },
      "\u29B0": { math: "\\revemptyset" },
      "\u29B1": { math: "\\emptysetobar" },
      "\u29B2": { math: "\\emptysetocirc" },
      "\u29B3": { math: "\\emptysetoarr" },
      "\u29B4": { math: "\\emptysetoarrl" },
      "\u29B7": { math: "\\circledparallel" },
      "\u29B8": { math: "\\circledbslash" },
      "\u29B9": { math: "\\operp" },
      "\u29BA": { math: "\\obot" },
      "\u29BB": { math: "\\olcross" },
      "\u29BC": { math: "\\odotslashdot" },
      "\u29BD": { math: "\\uparrowoncircle" },
      "\u29BE": { math: "\\circledwhitebullet" },
      "\u29BF": { math: "\\circledbullet" },
      "\u29C0": { math: "\\circledless" },
      "\u29C1": { math: "\\circledgtr" },
      "\u29C2": { math: "\\cirscir" },
      "\u29C3": { math: "\\cirE" },
      "\u29C4": { math: "\\boxslash" },
      "\u29C5": { math: "\\boxbslash" },
      "\u29C6": { math: "\\boxast" },
      "\u29C7": { math: "\\boxcircle" },
      "\u29C8": { math: "\\boxbox" },
      "\u29C9": { math: "\\boxonbox" },
      "\u29CA": { math: "\\ElzLap" },
      "\u29CB": { math: "\\Elzdefas" },
      "\u29CC": { math: "\\triangles" },
      "\u29CD": { math: "\\triangleserifs" },
      "\u29CE": { math: "\\rtriltri" },
      "\u29CF": { math: "\\LeftTriangleBar" },
      "\u29CF\u0338": { math: "\\NotLeftTriangleBar" },
      "\u29D0": { math: "\\RightTriangleBar" },
      "\u29D0\u0338": { math: "\\NotRightTriangleBar" },
      "\u29D1": { math: "\\lfbowtie" },
      "\u29D2": { math: "\\rfbowtie" },
      "\u29D3": { math: "\\fbowtie" },
      "\u29D4": { math: "\\lftimes" },
      "\u29D5": { math: "\\rftimes" },
      "\u29D6": { math: "\\hourglass" },
      "\u29D7": { math: "\\blackhourglass" },
      "\u29D8": { math: "\\lvzigzag" },
      "\u29D9": { math: "\\rvzigzag" },
      "\u29DA": { math: "\\Lvzigzag" },
      "\u29DB": { math: "\\Rvzigzag" },
      "\u29DD": { math: "\\tieinfty" },
      "\u29DE": { math: "\\nvinfty" },
      "\u29DF": { math: "\\multimapboth" },
      "\u29E0": { math: "\\laplac" },
      "\u29E1": { math: "\\lrtriangleeq" },
      "\u29E2": { math: "\\shuffle" },
      "\u29E3": { math: "\\eparsl" },
      "\u29E4": { math: "\\smeparsl" },
      "\u29E5": { math: "\\eqvparsl" },
      "\u29E6": { math: "\\gleichstark" },
      "\u29E7": { math: "\\thermod" },
      "\u29E8": { math: "\\downtriangleleftblack" },
      "\u29E9": { math: "\\downtrianglerightblack" },
      "\u29EA": { math: "\\blackdiamonddownarrow" },
      "\u29EB": { math: "\\blacklozenge" },
      "\u29EC": { math: "\\circledownarrow" },
      "\u29ED": { math: "\\blackcircledownarrow" },
      "\u29EE": { math: "\\errbarsquare" },
      "\u29EF": { math: "\\errbarblacksquare" },
      "\u29F0": { math: "\\errbardiamond" },
      "\u29F1": { math: "\\errbarblackdiamond" },
      "\u29F2": { math: "\\errbarcircle" },
      "\u29F3": { math: "\\errbarblackcircle" },
      "\u29F4": { math: "\\RuleDelayed" },
      "\u29F5": { math: "\\setminus" },
      "\u29F6": { math: "\\dsol" },
      "\u29F7": { math: "\\rsolbar" },
      "\u29F8": { math: "\\xsol" },
      "\u29F9": { math: "\\zhide" },
      "\u29FA": { math: "\\doubleplus" },
      "\u29FB": { math: "\\tripleplus" },
      "\u29FC": { math: "\\lcurvyangle" },
      "\u29FD": { math: "\\rcurvyangle" },
      "\u29FE": { math: "\\tplus" },
      "\u29FF": { math: "\\tminus" },
      "\u2A00": { math: "\\bigodot" },
      "\u2A01": { math: "\\bigoplus" },
      "\u2A02": { math: "\\bigotimes" },
      "\u2A03": { math: "\\bigcupdot" },
      "\u2A04": { math: "\\Elxuplus" },
      "\u2A05": { math: "\\ElzThr" },
      "\u2A06": { math: "\\Elxsqcup" },
      "\u2A07": { math: "\\ElzInf" },
      "\u2A08": { math: "\\ElzSup" },
      "\u2A09": { math: "\\varprod" },
      "\u2A0A": { math: "\\modtwosum" },
      "\u2A0B": { math: "\\sumint" },
      "\u2A0C": { math: "\\iiiint" },
      "\u2A0D": { math: "\\ElzCint" },
      "\u2A0E": { math: "\\intBar" },
      "\u2A0F": { math: "\\clockoint" },
      "\u2A11": { math: "\\awint" },
      "\u2A12": { math: "\\rppolint" },
      "\u2A13": { math: "\\scpolint" },
      "\u2A14": { math: "\\npolint" },
      "\u2A15": { math: "\\pointint" },
      "\u2A16": { math: "\\sqrint" },
      "\u2A17": { math: "\\intlarhk" },
      "\u2A18": { math: "\\intx" },
      "\u2A19": { math: "\\intcap" },
      "\u2A1A": { math: "\\intcup" },
      "\u2A1B": { math: "\\upint" },
      "\u2A1C": { math: "\\lowint" },
      "\u2A1D": { math: "\\Join" },
      "\u2A1E": { math: "\\bigtriangleleft" },
      "\u2A1F": { math: "\\zcmp" },
      "\u2A20": { math: "\\zpipe" },
      "\u2A21": { math: "\\zproject" },
      "\u2A22": { math: "\\ringplus" },
      "\u2A23": { math: "\\plushat" },
      "\u2A24": { math: "\\simplus" },
      "\u2A26": { math: "\\plussim" },
      "\u2A27": { math: "\\plussubtwo" },
      "\u2A28": { math: "\\plustrif" },
      "\u2A29": { math: "\\commaminus" },
      "\u2A2B": { math: "\\minusfdots" },
      "\u2A2C": { math: "\\minusrdots" },
      "\u2A2F": { math: "\\ElzTimes" },
      "\u2A30": { math: "\\dottimes" },
      "\u2A31": { math: "\\timesbar" },
      "\u2A32": { math: "\\btimes" },
      "\u2A33": { math: "\\smashtimes" },
      "\u2A36": { math: "\\otimeshat" },
      "\u2A37": { math: "\\Otimes" },
      "\u2A38": { math: "\\odiv" },
      "\u2A39": { math: "\\triangleplus" },
      "\u2A3A": { math: "\\triangleminus" },
      "\u2A3B": { math: "\\triangletimes" },
      "\u2A3D": { math: "\\intprodr" },
      "\u2A3E": { math: "\\fcmp" },
      "\u2A3F": { math: "\\amalg" },
      "\u2A40": { math: "\\capdot" },
      "\u2A41": { math: "\\uminus" },
      "\u2A42": { math: "\\barcup" },
      "\u2A43": { math: "\\barcap" },
      "\u2A44": { math: "\\capwedge" },
      "\u2A45": { math: "\\cupvee" },
      "\u2A46": { math: "\\cupovercap" },
      "\u2A47": { math: "\\capovercup" },
      "\u2A48": { math: "\\cupbarcap" },
      "\u2A49": { math: "\\capbarcup" },
      "\u2A4A": { math: "\\twocups" },
      "\u2A4B": { math: "\\twocaps" },
      "\u2A4C": { math: "\\closedvarcup" },
      "\u2A4D": { math: "\\closedvarcap" },
      "\u2A4E": { math: "\\Sqcap" },
      "\u2A4F": { math: "\\Sqcup" },
      "\u2A50": { math: "\\closedvarcupsmashprod" },
      "\u2A51": { math: "\\wedgeodot" },
      "\u2A52": { math: "\\veeodot" },
      "\u2A53": { math: "\\ElzAnd" },
      "\u2A54": { math: "\\ElzOr" },
      "\u2A56": { math: "\\ElOr" },
      "\u2A57": { math: "\\bigslopedvee" },
      "\u2A58": { math: "\\bigslopedwedge" },
      "\u2A59": { math: "\\veeonwedge" },
      "\u2A5A": { math: "\\wedgemidvert" },
      "\u2A5B": { math: "\\veemidvert" },
      "\u2A5C": { math: "\\midbarwedge" },
      "\u2A5D": { math: "\\midbarvee" },
      "\u2A5E": { math: "\\perspcorrespond" },
      "\u2A5F": { math: "\\Elzminhat" },
      "\u2A60": { math: "\\wedgedoublebar" },
      "\u2A61": { math: "\\varveebar" },
      "\u2A62": { math: "\\doublebarvee" },
      "\u2A64": { math: "\\dsub" },
      "\u2A65": { math: "\\rsub" },
      "\u2A66": { math: "\\eqdot" },
      "\u2A67": { math: "\\dotequiv" },
      "\u2A68": { math: "\\equivVert" },
      "\u2A69": { math: "\\equivVvert" },
      "\u2A6A": { math: "\\dotsim" },
      "\u2A6B": { math: "\\simrdots" },
      "\u2A6C": { math: "\\simminussim" },
      "\u2A6D": { math: "\\congdot" },
      "\u2A6E": { math: "\\stackrel{*}{=}" },
      "\u2A6F": { math: "\\hatapprox" },
      "\u2A70": { math: "\\approxeqq" },
      "\u2A71": { math: "\\eqqplus" },
      "\u2A72": { math: "\\pluseqq" },
      "\u2A73": { math: "\\eqqsim" },
      "\u2A74": { math: "\\Coloneqq" },
      "\u2A75": { math: "\\Equal" },
      "\u2A76": { math: "\\Same" },
      "\u2A77": { math: "\\ddotseq" },
      "\u2A78": { math: "\\equivDD" },
      "\u2A79": { math: "\\ltcir" },
      "\u2A7A": { math: "\\gtcir" },
      "\u2A7B": { math: "\\ltquest" },
      "\u2A7C": { math: "\\gtquest" },
      "\u2A7D": { math: "\\leqslant", mathpackages: ["amssymb"] },
      "\u2A7D\u0338": { math: "\\nleqslant", mathpackages: ["amssymb"] },
      "\u2A7E": { math: "\\geqslant", mathpackages: ["amssymb"] },
      "\u2A7E\u0338": { math: "\\ngeqslant", mathpackages: ["amssymb"] },
      "\u2A7F": { math: "\\lesdot" },
      "\u2A80": { math: "\\gesdot" },
      "\u2A81": { math: "\\lesdoto" },
      "\u2A82": { math: "\\gesdoto" },
      "\u2A83": { math: "\\lesdotor" },
      "\u2A84": { math: "\\gesdotol" },
      "\u2A85": { math: "\\lessapprox" },
      "\u2A86": { math: "\\gtrapprox" },
      "\u2A87": { math: "\\lneq" },
      "\u2A88": { math: "\\gneq" },
      "\u2A89": { math: "\\lnapprox" },
      "\u2A8A": { math: "\\gnapprox" },
      "\u2A8B": { math: "\\lesseqqgtr" },
      "\u2A8C": { math: "\\gtreqqless" },
      "\u2A8D": { math: "\\lsime" },
      "\u2A8E": { math: "\\gsime" },
      "\u2A8F": { math: "\\lsimg" },
      "\u2A90": { math: "\\gsiml" },
      "\u2A91": { math: "\\lgE" },
      "\u2A92": { math: "\\glE" },
      "\u2A93": { math: "\\lesges" },
      "\u2A94": { math: "\\gesles" },
      "\u2A95": { math: "\\eqslantless" },
      "\u2A96": { math: "\\eqslantgtr" },
      "\u2A97": { math: "\\elsdot" },
      "\u2A98": { math: "\\egsdot" },
      "\u2A99": { math: "\\eqqless" },
      "\u2A9A": { math: "\\eqqgtr" },
      "\u2A9B": { math: "\\eqqslantless" },
      "\u2A9C": { math: "\\eqqslantgtr" },
      "\u2A9D": { math: "\\Pisymbol{ppi020}{117}" },
      "\u2A9E": { math: "\\Pisymbol{ppi020}{105}" },
      "\u2A9F": { math: "\\simlE" },
      "\u2AA0": { math: "\\simgE" },
      "\u2AA1": { math: "\\NestedLessLess" },
      "\u2AA1\u0338": { math: "\\NotNestedLessLess" },
      "\u2AA2": { math: "\\NestedGreaterGreater" },
      "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" },
      "\u2AA3": { math: "\\partialmeetcontraction" },
      "\u2AA4": { math: "\\glj" },
      "\u2AA5": { math: "\\gla" },
      "\u2AA6": { math: "\\leftslice" },
      "\u2AA7": { math: "\\rightslice" },
      "\u2AA8": { math: "\\lescc" },
      "\u2AA9": { math: "\\gescc" },
      "\u2AAA": { math: "\\smt" },
      "\u2AAB": { math: "\\lat" },
      "\u2AAC": { math: "\\smte" },
      "\u2AAD": { math: "\\late" },
      "\u2AAE": { math: "\\bumpeqq" },
      "\u2AAF": { math: "\\preceq" },
      "\u2AAF\u0338": { math: "\\not\\preceq" },
      "\u2AB0": { math: "\\succeq" },
      "\u2AB0\u0338": { math: "\\not\\succeq" },
      "\u2AB1": { math: "\\precneq" },
      "\u2AB2": { math: "\\succneq" },
      "\u2AB3": { math: "\\preceqq" },
      "\u2AB4": { math: "\\succeqq" },
      "\u2AB5": { math: "\\precneqq" },
      "\u2AB6": { math: "\\succneqq" },
      "\u2AB7": { math: "\\precapprox" },
      "\u2AB8": { math: "\\succapprox" },
      "\u2AB9": { math: "\\precnapprox" },
      "\u2ABA": { math: "\\succnapprox" },
      "\u2ABB": { math: "\\llcurly" },
      "\u2ABC": { math: "\\ggcurly" },
      "\u2ABD": { math: "\\subsetdot" },
      "\u2ABE": { math: "\\supsetdot" },
      "\u2ABF": { math: "\\subsetplus" },
      "\u2AC0": { math: "\\supsetplus" },
      "\u2AC1": { math: "\\submult" },
      "\u2AC2": { math: "\\supmult" },
      "\u2AC3": { math: "\\subedot" },
      "\u2AC4": { math: "\\supedot" },
      "\u2AC5": { math: "\\subseteqq" },
      "\u2AC5\u0338": { math: "\\nsubseteqq" },
      "\u2AC6": { math: "\\supseteqq" },
      "\u2AC6\u0338": { math: "\\nsupseteqq" },
      "\u2AC7": { math: "\\subsim" },
      "\u2AC8": { math: "\\supsim" },
      "\u2AC9": { math: "\\subsetapprox" },
      "\u2ACA": { math: "\\supsetapprox" },
      "\u2ACB": { math: "\\subsetneqq" },
      "\u2ACC": { math: "\\supsetneqq" },
      "\u2ACD": { math: "\\lsqhook" },
      "\u2ACE": { math: "\\rsqhook" },
      "\u2ACF": { math: "\\csub" },
      "\u2AD0": { math: "\\csup" },
      "\u2AD1": { math: "\\csube" },
      "\u2AD2": { math: "\\csupe" },
      "\u2AD3": { math: "\\subsup" },
      "\u2AD4": { math: "\\supsub" },
      "\u2AD5": { math: "\\subsub" },
      "\u2AD6": { math: "\\supsup" },
      "\u2AD7": { math: "\\suphsub" },
      "\u2AD8": { math: "\\supdsub" },
      "\u2AD9": { math: "\\forkv" },
      "\u2ADA": { math: "\\topfork" },
      "\u2ADB": { math: "\\mlcp" },
      "\u2ADC": { math: "\\forks" },
      "\u2ADD": { math: "\\forksnot" },
      "\u2ADD\u0338": { math: "\\forks" },
      "\u2ADE": { math: "\\shortlefttack" },
      "\u2ADF": { math: "\\shortdowntack" },
      "\u2AE0": { math: "\\shortuptack" },
      "\u2AE1": { math: "\\perps" },
      "\u2AE2": { math: "\\vDdash" },
      "\u2AE3": { math: "\\dashV" },
      "\u2AE4": { math: "\\Dashv" },
      "\u2AE5": { math: "\\DashV" },
      "\u2AE6": { math: "\\varVdash" },
      "\u2AE7": { math: "\\Barv" },
      "\u2AE8": { math: "\\vBar" },
      "\u2AE9": { math: "\\vBarv" },
      "\u2AEA": { math: "\\Top" },
      "\u2AEC": { math: "\\Not" },
      "\u2AED": { math: "\\bNot" },
      "\u2AEE": { math: "\\revnmid" },
      "\u2AEF": { math: "\\cirmid" },
      "\u2AF0": { math: "\\midcir" },
      "\u2AF1": { math: "\\topcir" },
      "\u2AF2": { math: "\\nhpar" },
      "\u2AF3": { math: "\\parsim" },
      "\u2AF4": { math: "\\interleave" },
      "\u2AF5": { math: "\\nhVvert" },
      "\u2AF6": { math: "\\Elztdcol" },
      "\u2AF7": { math: "\\lllnest" },
      "\u2AF8": { math: "\\gggnest" },
      "\u2AF9": { math: "\\leqqslant" },
      "\u2AFA": { math: "\\geqqslant" },
      "\u2AFB": { math: "\\trslash" },
      "\u2AFC": { math: "\\biginterleave" },
      "\u2AFD": { math: "{{/}\\!\\!{/}}" },
      "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" },
      "\u2AFE": { math: "\\talloblong" },
      "\u2AFF": { math: "\\bigtalloblong" },
      "\u2B12": { math: "\\squaretopblack" },
      "\u2B13": { math: "\\squarebotblack" },
      "\u2B14": { math: "\\squareurblack" },
      "\u2B15": { math: "\\squarellblack" },
      "\u2B16": { math: "\\diamondleftblack" },
      "\u2B17": { math: "\\diamondrightblack" },
      "\u2B18": { math: "\\diamondtopblack" },
      "\u2B19": { math: "\\diamondbotblack" },
      "\u2B1A": { math: "\\dottedsquare" },
      "\u2B1B": { math: "\\blacksquare" },
      "\u2B1C": { math: "\\square" },
      "\u2B1D": { math: "\\vysmblksquare" },
      "\u2B1E": { math: "\\vysmwhtsquare" },
      "\u2B1F": { math: "\\pentagonblack" },
      "\u2B20": { math: "\\pentagon" },
      "\u2B21": { math: "\\varhexagon" },
      "\u2B22": { math: "\\varhexagonblack" },
      "\u2B23": { math: "\\hexagonblack" },
      "\u2B24": { math: "\\lgblkcircle" },
      "\u2B25": { math: "\\mdblkdiamond" },
      "\u2B26": { math: "\\mdwhtdiamond" },
      "\u2B27": { math: "\\mdblklozenge" },
      "\u2B28": { math: "\\mdwhtlozenge" },
      "\u2B29": { math: "\\smblkdiamond" },
      "\u2B2A": { math: "\\smblklozenge" },
      "\u2B2B": { math: "\\smwhtlozenge" },
      "\u2B2C": { math: "\\blkhorzoval" },
      "\u2B2D": { math: "\\whthorzoval" },
      "\u2B2E": { math: "\\blkvertoval" },
      "\u2B2F": { math: "\\whtvertoval" },
      "\u2B30": { math: "\\circleonleftarrow" },
      "\u2B31": { math: "\\leftthreearrows" },
      "\u2B32": { math: "\\leftarrowonoplus" },
      "\u2B33": { math: "\\longleftsquigarrow" },
      "\u2B34": { math: "\\nvtwoheadleftarrow" },
      "\u2B35": { math: "\\nVtwoheadleftarrow" },
      "\u2B36": { math: "\\twoheadmapsfrom" },
      "\u2B37": { math: "\\twoheadleftdbkarrow" },
      "\u2B38": { math: "\\leftdotarrow" },
      "\u2B39": { math: "\\nvleftarrowtail" },
      "\u2B3A": { math: "\\nVleftarrowtail" },
      "\u2B3B": { math: "\\twoheadleftarrowtail" },
      "\u2B3C": { math: "\\nvtwoheadleftarrowtail" },
      "\u2B3D": { math: "\\nVtwoheadleftarrowtail" },
      "\u2B3E": { math: "\\leftarrowx" },
      "\u2B3F": { math: "\\leftcurvedarrow" },
      "\u2B40": { math: "\\equalleftarrow" },
      "\u2B41": { math: "\\bsimilarleftarrow" },
      "\u2B42": { math: "\\leftarrowbackapprox" },
      "\u2B43": { math: "\\rightarrowgtr" },
      "\u2B44": { math: "\\rightarrowsupset" },
      "\u2B45": { math: "\\LLeftarrow" },
      "\u2B46": { math: "\\RRightarrow" },
      "\u2B47": { math: "\\bsimilarrightarrow" },
      "\u2B48": { math: "\\rightarrowbackapprox" },
      "\u2B49": { math: "\\similarleftarrow" },
      "\u2B4A": { math: "\\leftarrowapprox" },
      "\u2B4B": { math: "\\leftarrowbsimilar" },
      "\u2B4C": { math: "\\rightarrowbsimilar" },
      "\u2B50": { math: "\\medwhitestar" },
      "\u2B51": { math: "\\medblackstar" },
      "\u2B52": { math: "\\smwhitestar" },
      "\u2B53": { math: "\\rightpentagonblack" },
      "\u2B54": { math: "\\rightpentagon" },
      "\u3008": { math: "\\langle" },
      "\u3009": { math: "\\rangle" },
      "\u3012": { math: "\\postalmark" },
      "\u3014": { math: "\\lbrbrak" },
      "\u3015": { math: "\\rbrbrak" },
      "\u301A": { math: "\\openbracketleft" },
      "\u301B": { math: "\\openbracketright" },
      "\u3030": { math: "\\hzigzag" },
      \uFB00: { text: "ff" },
      \uFB01: { text: "fi" },
      \uFB02: { text: "fl" },
      \uFB03: { text: "ffi" },
      \uFB04: { text: "ffl" },
      \uFB05: { text: "st" },
      \uFB06: { text: "st" },
      "\uFFFD": { text: "{\\dbend}" },
      "\u{1D400}": { math: "\\mathbf{A}" },
      "\u{1D401}": { math: "\\mathbf{B}" },
      "\u{1D402}": { math: "\\mathbf{C}" },
      "\u{1D403}": { math: "\\mathbf{D}" },
      "\u{1D404}": { math: "\\mathbf{E}" },
      "\u{1D405}": { math: "\\mathbf{F}" },
      "\u{1D406}": { math: "\\mathbf{G}" },
      "\u{1D407}": { math: "\\mathbf{H}" },
      "\u{1D408}": { math: "\\mathbf{I}" },
      "\u{1D409}": { math: "\\mathbf{J}" },
      "\u{1D40A}": { math: "\\mathbf{K}" },
      "\u{1D40B}": { math: "\\mathbf{L}" },
      "\u{1D40C}": { math: "\\mathbf{M}" },
      "\u{1D40D}": { math: "\\mathbf{N}" },
      "\u{1D40E}": { math: "\\mathbf{O}" },
      "\u{1D40F}": { math: "\\mathbf{P}" },
      "\u{1D410}": { math: "\\mathbf{Q}" },
      "\u{1D411}": { math: "\\mathbf{R}" },
      "\u{1D412}": { math: "\\mathbf{S}" },
      "\u{1D413}": { math: "\\mathbf{T}" },
      "\u{1D414}": { math: "\\mathbf{U}" },
      "\u{1D415}": { math: "\\mathbf{V}" },
      "\u{1D416}": { math: "\\mathbf{W}" },
      "\u{1D417}": { math: "\\mathbf{X}" },
      "\u{1D418}": { math: "\\mathbf{Y}" },
      "\u{1D419}": { math: "\\mathbf{Z}" },
      "\u{1D41A}": { math: "\\mathbf{a}" },
      "\u{1D41B}": { math: "\\mathbf{b}" },
      "\u{1D41C}": { math: "\\mathbf{c}" },
      "\u{1D41D}": { math: "\\mathbf{d}" },
      "\u{1D41E}": { math: "\\mathbf{e}" },
      "\u{1D41F}": { math: "\\mathbf{f}" },
      "\u{1D420}": { math: "\\mathbf{g}" },
      "\u{1D421}": { math: "\\mathbf{h}" },
      "\u{1D422}": { math: "\\mathbf{i}" },
      "\u{1D423}": { math: "\\mathbf{j}" },
      "\u{1D424}": { math: "\\mathbf{k}" },
      "\u{1D425}": { math: "\\mathbf{l}" },
      "\u{1D426}": { math: "\\mathbf{m}" },
      "\u{1D427}": { math: "\\mathbf{n}" },
      "\u{1D428}": { math: "\\mathbf{o}" },
      "\u{1D429}": { math: "\\mathbf{p}" },
      "\u{1D42A}": { math: "\\mathbf{q}" },
      "\u{1D42B}": { math: "\\mathbf{r}" },
      "\u{1D42C}": { math: "\\mathbf{s}" },
      "\u{1D42D}": { math: "\\mathbf{t}" },
      "\u{1D42E}": { math: "\\mathbf{u}" },
      "\u{1D42F}": { math: "\\mathbf{v}" },
      "\u{1D430}": { math: "\\mathbf{w}" },
      "\u{1D431}": { math: "\\mathbf{x}" },
      "\u{1D432}": { math: "\\mathbf{y}" },
      "\u{1D433}": { math: "\\mathbf{z}" },
      "\u{1D434}": { math: "\\mathsl{A}" },
      "\u{1D435}": { math: "\\mathsl{B}" },
      "\u{1D436}": { math: "\\mathsl{C}" },
      "\u{1D437}": { math: "\\mathsl{D}" },
      "\u{1D438}": { math: "\\mathsl{E}" },
      "\u{1D439}": { math: "\\mathsl{F}" },
      "\u{1D43A}": { math: "\\mathsl{G}" },
      "\u{1D43B}": { math: "\\mathsl{H}" },
      "\u{1D43C}": { math: "\\mathsl{I}" },
      "\u{1D43D}": { math: "\\mathsl{J}" },
      "\u{1D43E}": { math: "\\mathsl{K}" },
      "\u{1D43F}": { math: "\\mathsl{L}" },
      "\u{1D440}": { math: "\\mathsl{M}" },
      "\u{1D441}": { math: "\\mathsl{N}" },
      "\u{1D442}": { math: "\\mathsl{O}" },
      "\u{1D443}": { math: "\\mathsl{P}" },
      "\u{1D444}": { math: "\\mathsl{Q}" },
      "\u{1D445}": { math: "\\mathsl{R}" },
      "\u{1D446}": { math: "\\mathsl{S}" },
      "\u{1D447}": { math: "\\mathsl{T}" },
      "\u{1D448}": { math: "\\mathsl{U}" },
      "\u{1D449}": { math: "\\mathsl{V}" },
      "\u{1D44A}": { math: "\\mathsl{W}" },
      "\u{1D44B}": { math: "\\mathsl{X}" },
      "\u{1D44C}": { math: "\\mathsl{Y}" },
      "\u{1D44D}": { math: "\\mathsl{Z}" },
      "\u{1D44E}": { math: "\\mathsl{a}" },
      "\u{1D44F}": { math: "\\mathsl{b}" },
      "\u{1D450}": { math: "\\mathsl{c}" },
      "\u{1D451}": { math: "\\mathsl{d}" },
      "\u{1D452}": { math: "\\mathsl{e}" },
      "\u{1D453}": { math: "\\mathsl{f}" },
      "\u{1D454}": { math: "\\mathsl{g}" },
      "\u{1D456}": { math: "\\mathsl{i}" },
      "\u{1D457}": { math: "\\mathsl{j}" },
      "\u{1D458}": { math: "\\mathsl{k}" },
      "\u{1D459}": { math: "\\mathsl{l}" },
      "\u{1D45A}": { math: "\\mathsl{m}" },
      "\u{1D45B}": { math: "\\mathsl{n}" },
      "\u{1D45C}": { math: "\\mathsl{o}" },
      "\u{1D45D}": { math: "\\mathsl{p}" },
      "\u{1D45E}": { math: "\\mathsl{q}" },
      "\u{1D45F}": { math: "\\mathsl{r}" },
      "\u{1D460}": { math: "\\mathsl{s}" },
      "\u{1D461}": { math: "\\mathsl{t}" },
      "\u{1D462}": { math: "\\mathsl{u}" },
      "\u{1D463}": { math: "\\mathsl{v}" },
      "\u{1D464}": { math: "\\mathsl{w}" },
      "\u{1D465}": { math: "\\mathsl{x}" },
      "\u{1D466}": { math: "\\mathsl{y}" },
      "\u{1D467}": { math: "\\mathsl{z}" },
      "\u{1D468}": { math: "\\mathbit{A}" },
      "\u{1D469}": { math: "\\mathbit{B}" },
      "\u{1D46A}": { math: "\\mathbit{C}" },
      "\u{1D46B}": { math: "\\mathbit{D}" },
      "\u{1D46C}": { math: "\\mathbit{E}" },
      "\u{1D46D}": { math: "\\mathbit{F}" },
      "\u{1D46E}": { math: "\\mathbit{G}" },
      "\u{1D46F}": { math: "\\mathbit{H}" },
      "\u{1D470}": { math: "\\mathbit{I}" },
      "\u{1D471}": { math: "\\mathbit{J}" },
      "\u{1D472}": { math: "\\mathbit{K}" },
      "\u{1D473}": { math: "\\mathbit{L}" },
      "\u{1D474}": { math: "\\mathbit{M}" },
      "\u{1D475}": { math: "\\mathbit{N}" },
      "\u{1D476}": { math: "\\mathbit{O}" },
      "\u{1D477}": { math: "\\mathbit{P}" },
      "\u{1D478}": { math: "\\mathbit{Q}" },
      "\u{1D479}": { math: "\\mathbit{R}" },
      "\u{1D47A}": { math: "\\mathbit{S}" },
      "\u{1D47B}": { math: "\\mathbit{T}" },
      "\u{1D47C}": { math: "\\mathbit{U}" },
      "\u{1D47D}": { math: "\\mathbit{V}" },
      "\u{1D47E}": { math: "\\mathbit{W}" },
      "\u{1D47F}": { math: "\\mathbit{X}" },
      "\u{1D480}": { math: "\\mathbit{Y}" },
      "\u{1D481}": { math: "\\mathbit{Z}" },
      "\u{1D482}": { math: "\\mathbit{a}" },
      "\u{1D483}": { math: "\\mathbit{b}" },
      "\u{1D484}": { math: "\\mathbit{c}" },
      "\u{1D485}": { math: "\\mathbit{d}" },
      "\u{1D486}": { math: "\\mathbit{e}" },
      "\u{1D487}": { math: "\\mathbit{f}" },
      "\u{1D488}": { math: "\\mathbit{g}" },
      "\u{1D489}": { math: "\\mathbit{h}" },
      "\u{1D48A}": { math: "\\mathbit{i}" },
      "\u{1D48B}": { math: "\\mathbit{j}" },
      "\u{1D48C}": { math: "\\mathbit{k}" },
      "\u{1D48D}": { math: "\\mathbit{l}" },
      "\u{1D48E}": { math: "\\mathbit{m}" },
      "\u{1D48F}": { math: "\\mathbit{n}" },
      "\u{1D490}": { math: "\\mathbit{o}" },
      "\u{1D491}": { math: "\\mathbit{p}" },
      "\u{1D492}": { math: "\\mathbit{q}" },
      "\u{1D493}": { math: "\\mathbit{r}" },
      "\u{1D494}": { math: "\\mathbit{s}" },
      "\u{1D495}": { math: "\\mathbit{t}" },
      "\u{1D496}": { math: "\\mathbit{u}" },
      "\u{1D497}": { math: "\\mathbit{v}" },
      "\u{1D498}": { math: "\\mathbit{w}" },
      "\u{1D499}": { math: "\\mathbit{x}" },
      "\u{1D49A}": { math: "\\mathbit{y}" },
      "\u{1D49B}": { math: "\\mathbit{z}" },
      "\u{1D49C}": { math: "\\mathscr{A}" },
      "\u{1D49E}": { math: "\\mathscr{C}" },
      "\u{1D49F}": { math: "\\mathscr{D}" },
      "\u{1D4A2}": { math: "\\mathscr{G}" },
      "\u{1D4A5}": { math: "\\mathscr{J}" },
      "\u{1D4A6}": { math: "\\mathscr{K}" },
      "\u{1D4A9}": { math: "\\mathscr{N}" },
      "\u{1D4AA}": { math: "\\mathscr{O}" },
      "\u{1D4AB}": { math: "\\mathscr{P}" },
      "\u{1D4AC}": { math: "\\mathscr{Q}" },
      "\u{1D4AE}": { math: "\\mathscr{S}" },
      "\u{1D4AF}": { math: "\\mathscr{T}" },
      "\u{1D4B0}": { math: "\\mathscr{U}" },
      "\u{1D4B1}": { math: "\\mathscr{V}" },
      "\u{1D4B2}": { math: "\\mathscr{W}" },
      "\u{1D4B3}": { math: "\\mathscr{X}" },
      "\u{1D4B4}": { math: "\\mathscr{Y}" },
      "\u{1D4B5}": { math: "\\mathscr{Z}" },
      "\u{1D4B6}": { math: "\\mathscr{a}" },
      "\u{1D4B7}": { math: "\\mathscr{b}" },
      "\u{1D4B8}": { math: "\\mathscr{c}" },
      "\u{1D4B9}": { math: "\\mathscr{d}" },
      "\u{1D4BB}": { math: "\\mathscr{f}" },
      "\u{1D4BD}": { math: "\\mathscr{h}" },
      "\u{1D4BE}": { math: "\\mathscr{i}" },
      "\u{1D4BF}": { math: "\\mathscr{j}" },
      "\u{1D4C0}": { math: "\\mathscr{k}" },
      "\u{1D4C1}": { math: "\\mathscr{l}" },
      "\u{1D4C2}": { math: "\\mathscr{m}" },
      "\u{1D4C3}": { math: "\\mathscr{n}" },
      "\u{1D4C5}": { math: "\\mathscr{p}" },
      "\u{1D4C6}": { math: "\\mathscr{q}" },
      "\u{1D4C7}": { math: "\\mathscr{r}" },
      "\u{1D4C8}": { math: "\\mathscr{s}" },
      "\u{1D4C9}": { math: "\\mathscr{t}" },
      "\u{1D4CA}": { math: "\\mathscr{u}" },
      "\u{1D4CB}": { math: "\\mathscr{v}" },
      "\u{1D4CC}": { math: "\\mathscr{w}" },
      "\u{1D4CD}": { math: "\\mathscr{x}" },
      "\u{1D4CE}": { math: "\\mathscr{y}" },
      "\u{1D4CF}": { math: "\\mathscr{z}" },
      "\u{1D4D0}": { math: "\\mathmit{A}" },
      "\u{1D4D1}": { math: "\\mathmit{B}" },
      "\u{1D4D2}": { math: "\\mathmit{C}" },
      "\u{1D4D3}": { math: "\\mathmit{D}" },
      "\u{1D4D4}": { math: "\\mathmit{E}" },
      "\u{1D4D5}": { math: "\\mathmit{F}" },
      "\u{1D4D6}": { math: "\\mathmit{G}" },
      "\u{1D4D7}": { math: "\\mathmit{H}" },
      "\u{1D4D8}": { math: "\\mathmit{I}" },
      "\u{1D4D9}": { math: "\\mathmit{J}" },
      "\u{1D4DA}": { math: "\\mathmit{K}" },
      "\u{1D4DB}": { math: "\\mathmit{L}" },
      "\u{1D4DC}": { math: "\\mathmit{M}" },
      "\u{1D4DD}": { math: "\\mathmit{N}" },
      "\u{1D4DE}": { math: "\\mathmit{O}" },
      "\u{1D4DF}": { math: "\\mathmit{P}" },
      "\u{1D4E0}": { math: "\\mathmit{Q}" },
      "\u{1D4E1}": { math: "\\mathmit{R}" },
      "\u{1D4E2}": { math: "\\mathmit{S}" },
      "\u{1D4E3}": { math: "\\mathmit{T}" },
      "\u{1D4E4}": { math: "\\mathmit{U}" },
      "\u{1D4E5}": { math: "\\mathmit{V}" },
      "\u{1D4E6}": { math: "\\mathmit{W}" },
      "\u{1D4E7}": { math: "\\mathmit{X}" },
      "\u{1D4E8}": { math: "\\mathmit{Y}" },
      "\u{1D4E9}": { math: "\\mathmit{Z}" },
      "\u{1D4EA}": { math: "\\mathmit{a}" },
      "\u{1D4EB}": { math: "\\mathmit{b}" },
      "\u{1D4EC}": { math: "\\mathmit{c}" },
      "\u{1D4ED}": { math: "\\mathmit{d}" },
      "\u{1D4EE}": { math: "\\mathmit{e}" },
      "\u{1D4EF}": { math: "\\mathmit{f}" },
      "\u{1D4F0}": { math: "\\mathmit{g}" },
      "\u{1D4F1}": { math: "\\mathmit{h}" },
      "\u{1D4F2}": { math: "\\mathmit{i}" },
      "\u{1D4F3}": { math: "\\mathmit{j}" },
      "\u{1D4F4}": { math: "\\mathmit{k}" },
      "\u{1D4F5}": { math: "\\mathmit{l}" },
      "\u{1D4F6}": { math: "\\mathmit{m}" },
      "\u{1D4F7}": { math: "\\mathmit{n}" },
      "\u{1D4F8}": { math: "\\mathmit{o}" },
      "\u{1D4F9}": { math: "\\mathmit{p}" },
      "\u{1D4FA}": { math: "\\mathmit{q}" },
      "\u{1D4FB}": { math: "\\mathmit{r}" },
      "\u{1D4FC}": { math: "\\mathmit{s}" },
      "\u{1D4FD}": { math: "\\mathmit{t}" },
      "\u{1D4FE}": { math: "\\mathmit{u}" },
      "\u{1D4FF}": { math: "\\mathmit{v}" },
      "\u{1D500}": { math: "\\mathmit{w}" },
      "\u{1D501}": { math: "\\mathmit{x}" },
      "\u{1D502}": { math: "\\mathmit{y}" },
      "\u{1D503}": { math: "\\mathmit{z}" },
      "\u{1D504}": { math: "\\mathfrak{A}" },
      "\u{1D505}": { math: "\\mathfrak{B}" },
      "\u{1D507}": { math: "\\mathfrak{D}" },
      "\u{1D508}": { math: "\\mathfrak{E}" },
      "\u{1D509}": { math: "\\mathfrak{F}" },
      "\u{1D50A}": { math: "\\mathfrak{G}" },
      "\u{1D50D}": { math: "\\mathfrak{J}" },
      "\u{1D50E}": { math: "\\mathfrak{K}" },
      "\u{1D50F}": { math: "\\mathfrak{L}" },
      "\u{1D510}": { math: "\\mathfrak{M}" },
      "\u{1D511}": { math: "\\mathfrak{N}" },
      "\u{1D512}": { math: "\\mathfrak{O}" },
      "\u{1D513}": { math: "\\mathfrak{P}" },
      "\u{1D514}": { math: "\\mathfrak{Q}" },
      "\u{1D516}": { math: "\\mathfrak{S}" },
      "\u{1D517}": { math: "\\mathfrak{T}" },
      "\u{1D518}": { math: "\\mathfrak{U}" },
      "\u{1D519}": { math: "\\mathfrak{V}" },
      "\u{1D51A}": { math: "\\mathfrak{W}" },
      "\u{1D51B}": { math: "\\mathfrak{X}" },
      "\u{1D51C}": { math: "\\mathfrak{Y}" },
      "\u{1D51E}": { math: "\\mathfrak{a}" },
      "\u{1D51F}": { math: "\\mathfrak{b}" },
      "\u{1D520}": { math: "\\mathfrak{c}" },
      "\u{1D521}": { math: "\\mathfrak{d}" },
      "\u{1D522}": { math: "\\mathfrak{e}" },
      "\u{1D523}": { math: "\\mathfrak{f}" },
      "\u{1D524}": { math: "\\mathfrak{g}" },
      "\u{1D525}": { math: "\\mathfrak{h}" },
      "\u{1D526}": { math: "\\mathfrak{i}" },
      "\u{1D527}": { math: "\\mathfrak{j}" },
      "\u{1D528}": { math: "\\mathfrak{k}" },
      "\u{1D529}": { math: "\\mathfrak{l}" },
      "\u{1D52A}": { math: "\\mathfrak{m}" },
      "\u{1D52B}": { math: "\\mathfrak{n}" },
      "\u{1D52C}": { math: "\\mathfrak{o}" },
      "\u{1D52D}": { math: "\\mathfrak{p}" },
      "\u{1D52E}": { math: "\\mathfrak{q}" },
      "\u{1D52F}": { math: "\\mathfrak{r}" },
      "\u{1D530}": { math: "\\mathfrak{s}" },
      "\u{1D531}": { math: "\\mathfrak{t}" },
      "\u{1D532}": { math: "\\mathfrak{u}" },
      "\u{1D533}": { math: "\\mathfrak{v}" },
      "\u{1D534}": { math: "\\mathfrak{w}" },
      "\u{1D535}": { math: "\\mathfrak{x}" },
      "\u{1D536}": { math: "\\mathfrak{y}" },
      "\u{1D537}": { math: "\\mathfrak{z}" },
      "\u{1D538}": { math: "\\mathbb{A}" },
      "\u{1D539}": { math: "\\mathbb{B}" },
      "\u{1D53B}": { math: "\\mathbb{D}" },
      "\u{1D53C}": { math: "\\mathbb{E}" },
      "\u{1D53D}": { math: "\\mathbb{F}" },
      "\u{1D53E}": { math: "\\mathbb{G}" },
      "\u{1D540}": { math: "\\mathbb{I}" },
      "\u{1D541}": { math: "\\mathbb{J}" },
      "\u{1D542}": { math: "\\mathbb{K}" },
      "\u{1D543}": { math: "\\mathbb{L}" },
      "\u{1D544}": { math: "\\mathbb{M}" },
      "\u{1D546}": { math: "\\mathbb{O}" },
      "\u{1D54A}": { math: "\\mathbb{S}" },
      "\u{1D54B}": { math: "\\mathbb{T}" },
      "\u{1D54C}": { math: "\\mathbb{U}" },
      "\u{1D54D}": { math: "\\mathbb{V}" },
      "\u{1D54E}": { math: "\\mathbb{W}" },
      "\u{1D54F}": { math: "\\mathbb{X}" },
      "\u{1D550}": { math: "\\mathbb{Y}" },
      "\u{1D552}": { math: "\\mathbb{a}" },
      "\u{1D553}": { math: "\\mathbb{b}" },
      "\u{1D554}": { math: "\\mathbb{c}" },
      "\u{1D555}": { math: "\\mathbb{d}" },
      "\u{1D556}": { math: "\\mathbb{e}" },
      "\u{1D557}": { math: "\\mathbb{f}" },
      "\u{1D558}": { math: "\\mathbb{g}" },
      "\u{1D559}": { math: "\\mathbb{h}" },
      "\u{1D55A}": { math: "\\mathbb{i}" },
      "\u{1D55B}": { math: "\\mathbb{j}" },
      "\u{1D55C}": { math: "\\mathbb{k}" },
      "\u{1D55D}": { math: "\\mathbb{l}" },
      "\u{1D55E}": { math: "\\mathbb{m}" },
      "\u{1D55F}": { math: "\\mathbb{n}" },
      "\u{1D560}": { math: "\\mathbb{o}" },
      "\u{1D561}": { math: "\\mathbb{p}" },
      "\u{1D562}": { math: "\\mathbb{q}" },
      "\u{1D563}": { math: "\\mathbb{r}" },
      "\u{1D564}": { math: "\\mathbb{s}" },
      "\u{1D565}": { math: "\\mathbb{t}" },
      "\u{1D566}": { math: "\\mathbb{u}" },
      "\u{1D567}": { math: "\\mathbb{v}" },
      "\u{1D568}": { math: "\\mathbb{w}" },
      "\u{1D569}": { math: "\\mathbb{x}" },
      "\u{1D56A}": { math: "\\mathbb{y}" },
      "\u{1D56B}": { math: "\\mathbb{z}" },
      "\u{1D56C}": { math: "\\mathslbb{A}" },
      "\u{1D56D}": { math: "\\mathslbb{B}" },
      "\u{1D56E}": { math: "\\mathslbb{C}" },
      "\u{1D56F}": { math: "\\mathslbb{D}" },
      "\u{1D570}": { math: "\\mathslbb{E}" },
      "\u{1D571}": { math: "\\mathslbb{F}" },
      "\u{1D572}": { math: "\\mathslbb{G}" },
      "\u{1D573}": { math: "\\mathslbb{H}" },
      "\u{1D574}": { math: "\\mathslbb{I}" },
      "\u{1D575}": { math: "\\mathslbb{J}" },
      "\u{1D576}": { math: "\\mathslbb{K}" },
      "\u{1D577}": { math: "\\mathslbb{L}" },
      "\u{1D578}": { math: "\\mathslbb{M}" },
      "\u{1D579}": { math: "\\mathslbb{N}" },
      "\u{1D57A}": { math: "\\mathslbb{O}" },
      "\u{1D57B}": { math: "\\mathslbb{P}" },
      "\u{1D57C}": { math: "\\mathslbb{Q}" },
      "\u{1D57D}": { math: "\\mathslbb{R}" },
      "\u{1D57E}": { math: "\\mathslbb{S}" },
      "\u{1D57F}": { math: "\\mathslbb{T}" },
      "\u{1D580}": { math: "\\mathslbb{U}" },
      "\u{1D581}": { math: "\\mathslbb{V}" },
      "\u{1D582}": { math: "\\mathslbb{W}" },
      "\u{1D583}": { math: "\\mathslbb{X}" },
      "\u{1D584}": { math: "\\mathslbb{Y}" },
      "\u{1D585}": { math: "\\mathslbb{Z}" },
      "\u{1D586}": { math: "\\mathslbb{a}" },
      "\u{1D587}": { math: "\\mathslbb{b}" },
      "\u{1D588}": { math: "\\mathslbb{c}" },
      "\u{1D589}": { math: "\\mathslbb{d}" },
      "\u{1D58A}": { math: "\\mathslbb{e}" },
      "\u{1D58B}": { math: "\\mathslbb{f}" },
      "\u{1D58C}": { math: "\\mathslbb{g}" },
      "\u{1D58D}": { math: "\\mathslbb{h}" },
      "\u{1D58E}": { math: "\\mathslbb{i}" },
      "\u{1D58F}": { math: "\\mathslbb{j}" },
      "\u{1D590}": { math: "\\mathslbb{k}" },
      "\u{1D591}": { math: "\\mathslbb{l}" },
      "\u{1D592}": { math: "\\mathslbb{m}" },
      "\u{1D593}": { math: "\\mathslbb{n}" },
      "\u{1D594}": { math: "\\mathslbb{o}" },
      "\u{1D595}": { math: "\\mathslbb{p}" },
      "\u{1D596}": { math: "\\mathslbb{q}" },
      "\u{1D597}": { math: "\\mathslbb{r}" },
      "\u{1D598}": { math: "\\mathslbb{s}" },
      "\u{1D599}": { math: "\\mathslbb{t}" },
      "\u{1D59A}": { math: "\\mathslbb{u}" },
      "\u{1D59B}": { math: "\\mathslbb{v}" },
      "\u{1D59C}": { math: "\\mathslbb{w}" },
      "\u{1D59D}": { math: "\\mathslbb{x}" },
      "\u{1D59E}": { math: "\\mathslbb{y}" },
      "\u{1D59F}": { math: "\\mathslbb{z}" },
      "\u{1D5A0}": { math: "\\mathsf{A}" },
      "\u{1D5A1}": { math: "\\mathsf{B}" },
      "\u{1D5A2}": { math: "\\mathsf{C}" },
      "\u{1D5A3}": { math: "\\mathsf{D}" },
      "\u{1D5A4}": { math: "\\mathsf{E}" },
      "\u{1D5A5}": { math: "\\mathsf{F}" },
      "\u{1D5A6}": { math: "\\mathsf{G}" },
      "\u{1D5A7}": { math: "\\mathsf{H}" },
      "\u{1D5A8}": { math: "\\mathsf{I}" },
      "\u{1D5A9}": { math: "\\mathsf{J}" },
      "\u{1D5AA}": { math: "\\mathsf{K}" },
      "\u{1D5AB}": { math: "\\mathsf{L}" },
      "\u{1D5AC}": { math: "\\mathsf{M}" },
      "\u{1D5AD}": { math: "\\mathsf{N}" },
      "\u{1D5AE}": { math: "\\mathsf{O}" },
      "\u{1D5AF}": { math: "\\mathsf{P}" },
      "\u{1D5B0}": { math: "\\mathsf{Q}" },
      "\u{1D5B1}": { math: "\\mathsf{R}" },
      "\u{1D5B2}": { math: "\\mathsf{S}" },
      "\u{1D5B3}": { math: "\\mathsf{T}" },
      "\u{1D5B4}": { math: "\\mathsf{U}" },
      "\u{1D5B5}": { math: "\\mathsf{V}" },
      "\u{1D5B6}": { math: "\\mathsf{W}" },
      "\u{1D5B7}": { math: "\\mathsf{X}" },
      "\u{1D5B8}": { math: "\\mathsf{Y}" },
      "\u{1D5B9}": { math: "\\mathsf{Z}" },
      "\u{1D5BA}": { math: "\\mathsf{a}" },
      "\u{1D5BB}": { math: "\\mathsf{b}" },
      "\u{1D5BC}": { math: "\\mathsf{c}" },
      "\u{1D5BD}": { math: "\\mathsf{d}" },
      "\u{1D5BE}": { math: "\\mathsf{e}" },
      "\u{1D5BF}": { math: "\\mathsf{f}" },
      "\u{1D5C0}": { math: "\\mathsf{g}" },
      "\u{1D5C1}": { math: "\\mathsf{h}" },
      "\u{1D5C2}": { math: "\\mathsf{i}" },
      "\u{1D5C3}": { math: "\\mathsf{j}" },
      "\u{1D5C4}": { math: "\\mathsf{k}" },
      "\u{1D5C5}": { math: "\\mathsf{l}" },
      "\u{1D5C6}": { math: "\\mathsf{m}" },
      "\u{1D5C7}": { math: "\\mathsf{n}" },
      "\u{1D5C8}": { math: "\\mathsf{o}" },
      "\u{1D5C9}": { math: "\\mathsf{p}" },
      "\u{1D5CA}": { math: "\\mathsf{q}" },
      "\u{1D5CB}": { math: "\\mathsf{r}" },
      "\u{1D5CC}": { math: "\\mathsf{s}" },
      "\u{1D5CD}": { math: "\\mathsf{t}" },
      "\u{1D5CE}": { math: "\\mathsf{u}" },
      "\u{1D5CF}": { math: "\\mathsf{v}" },
      "\u{1D5D0}": { math: "\\mathsf{w}" },
      "\u{1D5D1}": { math: "\\mathsf{x}" },
      "\u{1D5D2}": { math: "\\mathsf{y}" },
      "\u{1D5D3}": { math: "\\mathsf{z}" },
      "\u{1D5D4}": { math: "\\mathsfbf{A}" },
      "\u{1D5D5}": { math: "\\mathsfbf{B}" },
      "\u{1D5D6}": { math: "\\mathsfbf{C}" },
      "\u{1D5D7}": { math: "\\mathsfbf{D}" },
      "\u{1D5D8}": { math: "\\mathsfbf{E}" },
      "\u{1D5D9}": { math: "\\mathsfbf{F}" },
      "\u{1D5DA}": { math: "\\mathsfbf{G}" },
      "\u{1D5DB}": { math: "\\mathsfbf{H}" },
      "\u{1D5DC}": { math: "\\mathsfbf{I}" },
      "\u{1D5DD}": { math: "\\mathsfbf{J}" },
      "\u{1D5DE}": { math: "\\mathsfbf{K}" },
      "\u{1D5DF}": { math: "\\mathsfbf{L}" },
      "\u{1D5E0}": { math: "\\mathsfbf{M}" },
      "\u{1D5E1}": { math: "\\mathsfbf{N}" },
      "\u{1D5E2}": { math: "\\mathsfbf{O}" },
      "\u{1D5E3}": { math: "\\mathsfbf{P}" },
      "\u{1D5E4}": { math: "\\mathsfbf{Q}" },
      "\u{1D5E5}": { math: "\\mathsfbf{R}" },
      "\u{1D5E6}": { math: "\\mathsfbf{S}" },
      "\u{1D5E7}": { math: "\\mathsfbf{T}" },
      "\u{1D5E8}": { math: "\\mathsfbf{U}" },
      "\u{1D5E9}": { math: "\\mathsfbf{V}" },
      "\u{1D5EA}": { math: "\\mathsfbf{W}" },
      "\u{1D5EB}": { math: "\\mathsfbf{X}" },
      "\u{1D5EC}": { math: "\\mathsfbf{Y}" },
      "\u{1D5ED}": { math: "\\mathsfbf{Z}" },
      "\u{1D5EE}": { math: "\\mathsfbf{a}" },
      "\u{1D5EF}": { math: "\\mathsfbf{b}" },
      "\u{1D5F0}": { math: "\\mathsfbf{c}" },
      "\u{1D5F1}": { math: "\\mathsfbf{d}" },
      "\u{1D5F2}": { math: "\\mathsfbf{e}" },
      "\u{1D5F3}": { math: "\\mathsfbf{f}" },
      "\u{1D5F4}": { math: "\\mathsfbf{g}" },
      "\u{1D5F5}": { math: "\\mathsfbf{h}" },
      "\u{1D5F6}": { math: "\\mathsfbf{i}" },
      "\u{1D5F7}": { math: "\\mathsfbf{j}" },
      "\u{1D5F8}": { math: "\\mathsfbf{k}" },
      "\u{1D5F9}": { math: "\\mathsfbf{l}" },
      "\u{1D5FA}": { math: "\\mathsfbf{m}" },
      "\u{1D5FB}": { math: "\\mathsfbf{n}" },
      "\u{1D5FC}": { math: "\\mathsfbf{o}" },
      "\u{1D5FD}": { math: "\\mathsfbf{p}" },
      "\u{1D5FE}": { math: "\\mathsfbf{q}" },
      "\u{1D5FF}": { math: "\\mathsfbf{r}" },
      "\u{1D600}": { math: "\\mathsfbf{s}" },
      "\u{1D601}": { math: "\\mathsfbf{t}" },
      "\u{1D602}": { math: "\\mathsfbf{u}" },
      "\u{1D603}": { math: "\\mathsfbf{v}" },
      "\u{1D604}": { math: "\\mathsfbf{w}" },
      "\u{1D605}": { math: "\\mathsfbf{x}" },
      "\u{1D606}": { math: "\\mathsfbf{y}" },
      "\u{1D607}": { math: "\\mathsfbf{z}" },
      "\u{1D608}": { math: "\\mathsfsl{A}" },
      "\u{1D609}": { math: "\\mathsfsl{B}" },
      "\u{1D60A}": { math: "\\mathsfsl{C}" },
      "\u{1D60B}": { math: "\\mathsfsl{D}" },
      "\u{1D60C}": { math: "\\mathsfsl{E}" },
      "\u{1D60D}": { math: "\\mathsfsl{F}" },
      "\u{1D60E}": { math: "\\mathsfsl{G}" },
      "\u{1D60F}": { math: "\\mathsfsl{H}" },
      "\u{1D610}": { math: "\\mathsfsl{I}" },
      "\u{1D611}": { math: "\\mathsfsl{J}" },
      "\u{1D612}": { math: "\\mathsfsl{K}" },
      "\u{1D613}": { math: "\\mathsfsl{L}" },
      "\u{1D614}": { math: "\\mathsfsl{M}" },
      "\u{1D615}": { math: "\\mathsfsl{N}" },
      "\u{1D616}": { math: "\\mathsfsl{O}" },
      "\u{1D617}": { math: "\\mathsfsl{P}" },
      "\u{1D618}": { math: "\\mathsfsl{Q}" },
      "\u{1D619}": { math: "\\mathsfsl{R}" },
      "\u{1D61A}": { math: "\\mathsfsl{S}" },
      "\u{1D61B}": { math: "\\mathsfsl{T}" },
      "\u{1D61C}": { math: "\\mathsfsl{U}" },
      "\u{1D61D}": { math: "\\mathsfsl{V}" },
      "\u{1D61E}": { math: "\\mathsfsl{W}" },
      "\u{1D61F}": { math: "\\mathsfsl{X}" },
      "\u{1D620}": { math: "\\mathsfsl{Y}" },
      "\u{1D621}": { math: "\\mathsfsl{Z}" },
      "\u{1D622}": { math: "\\mathsfsl{a}" },
      "\u{1D623}": { math: "\\mathsfsl{b}" },
      "\u{1D624}": { math: "\\mathsfsl{c}" },
      "\u{1D625}": { math: "\\mathsfsl{d}" },
      "\u{1D626}": { math: "\\mathsfsl{e}" },
      "\u{1D627}": { math: "\\mathsfsl{f}" },
      "\u{1D628}": { math: "\\mathsfsl{g}" },
      "\u{1D629}": { math: "\\mathsfsl{h}" },
      "\u{1D62A}": { math: "\\mathsfsl{i}" },
      "\u{1D62B}": { math: "\\mathsfsl{j}" },
      "\u{1D62C}": { math: "\\mathsfsl{k}" },
      "\u{1D62D}": { math: "\\mathsfsl{l}" },
      "\u{1D62E}": { math: "\\mathsfsl{m}" },
      "\u{1D62F}": { math: "\\mathsfsl{n}" },
      "\u{1D630}": { math: "\\mathsfsl{o}" },
      "\u{1D631}": { math: "\\mathsfsl{p}" },
      "\u{1D632}": { math: "\\mathsfsl{q}" },
      "\u{1D633}": { math: "\\mathsfsl{r}" },
      "\u{1D634}": { math: "\\mathsfsl{s}" },
      "\u{1D635}": { math: "\\mathsfsl{t}" },
      "\u{1D636}": { math: "\\mathsfsl{u}" },
      "\u{1D637}": { math: "\\mathsfsl{v}" },
      "\u{1D638}": { math: "\\mathsfsl{w}" },
      "\u{1D639}": { math: "\\mathsfsl{x}" },
      "\u{1D63A}": { math: "\\mathsfsl{y}" },
      "\u{1D63B}": { math: "\\mathsfsl{z}" },
      "\u{1D63C}": { math: "\\mathsfbfsl{A}" },
      "\u{1D63D}": { math: "\\mathsfbfsl{B}" },
      "\u{1D63E}": { math: "\\mathsfbfsl{C}" },
      "\u{1D63F}": { math: "\\mathsfbfsl{D}" },
      "\u{1D640}": { math: "\\mathsfbfsl{E}" },
      "\u{1D641}": { math: "\\mathsfbfsl{F}" },
      "\u{1D642}": { math: "\\mathsfbfsl{G}" },
      "\u{1D643}": { math: "\\mathsfbfsl{H}" },
      "\u{1D644}": { math: "\\mathsfbfsl{I}" },
      "\u{1D645}": { math: "\\mathsfbfsl{J}" },
      "\u{1D646}": { math: "\\mathsfbfsl{K}" },
      "\u{1D647}": { math: "\\mathsfbfsl{L}" },
      "\u{1D648}": { math: "\\mathsfbfsl{M}" },
      "\u{1D649}": { math: "\\mathsfbfsl{N}" },
      "\u{1D64A}": { math: "\\mathsfbfsl{O}" },
      "\u{1D64B}": { math: "\\mathsfbfsl{P}" },
      "\u{1D64C}": { math: "\\mathsfbfsl{Q}" },
      "\u{1D64D}": { math: "\\mathsfbfsl{R}" },
      "\u{1D64E}": { math: "\\mathsfbfsl{S}" },
      "\u{1D64F}": { math: "\\mathsfbfsl{T}" },
      "\u{1D650}": { math: "\\mathsfbfsl{U}" },
      "\u{1D651}": { math: "\\mathsfbfsl{V}" },
      "\u{1D652}": { math: "\\mathsfbfsl{W}" },
      "\u{1D653}": { math: "\\mathsfbfsl{X}" },
      "\u{1D654}": { math: "\\mathsfbfsl{Y}" },
      "\u{1D655}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D656}": { math: "\\mathsfbfsl{a}" },
      "\u{1D657}": { math: "\\mathsfbfsl{b}" },
      "\u{1D658}": { math: "\\mathsfbfsl{c}" },
      "\u{1D659}": { math: "\\mathsfbfsl{d}" },
      "\u{1D65A}": { math: "\\mathsfbfsl{e}" },
      "\u{1D65B}": { math: "\\mathsfbfsl{f}" },
      "\u{1D65C}": { math: "\\mathsfbfsl{g}" },
      "\u{1D65D}": { math: "\\mathsfbfsl{h}" },
      "\u{1D65E}": { math: "\\mathsfbfsl{i}" },
      "\u{1D65F}": { math: "\\mathsfbfsl{j}" },
      "\u{1D660}": { math: "\\mathsfbfsl{k}" },
      "\u{1D661}": { math: "\\mathsfbfsl{l}" },
      "\u{1D662}": { math: "\\mathsfbfsl{m}" },
      "\u{1D663}": { math: "\\mathsfbfsl{n}" },
      "\u{1D664}": { math: "\\mathsfbfsl{o}" },
      "\u{1D665}": { math: "\\mathsfbfsl{p}" },
      "\u{1D666}": { math: "\\mathsfbfsl{q}" },
      "\u{1D667}": { math: "\\mathsfbfsl{r}" },
      "\u{1D668}": { math: "\\mathsfbfsl{s}" },
      "\u{1D669}": { math: "\\mathsfbfsl{t}" },
      "\u{1D66A}": { math: "\\mathsfbfsl{u}" },
      "\u{1D66B}": { math: "\\mathsfbfsl{v}" },
      "\u{1D66C}": { math: "\\mathsfbfsl{w}" },
      "\u{1D66D}": { math: "\\mathsfbfsl{x}" },
      "\u{1D66E}": { math: "\\mathsfbfsl{y}" },
      "\u{1D66F}": { math: "\\mathsfbfsl{z}" },
      "\u{1D670}": { math: "\\mathtt{A}" },
      "\u{1D671}": { math: "\\mathtt{B}" },
      "\u{1D672}": { math: "\\mathtt{C}" },
      "\u{1D673}": { math: "\\mathtt{D}" },
      "\u{1D674}": { math: "\\mathtt{E}" },
      "\u{1D675}": { math: "\\mathtt{F}" },
      "\u{1D676}": { math: "\\mathtt{G}" },
      "\u{1D677}": { math: "\\mathtt{H}" },
      "\u{1D678}": { math: "\\mathtt{I}" },
      "\u{1D679}": { math: "\\mathtt{J}" },
      "\u{1D67A}": { math: "\\mathtt{K}" },
      "\u{1D67B}": { math: "\\mathtt{L}" },
      "\u{1D67C}": { math: "\\mathtt{M}" },
      "\u{1D67D}": { math: "\\mathtt{N}" },
      "\u{1D67E}": { math: "\\mathtt{O}" },
      "\u{1D67F}": { math: "\\mathtt{P}" },
      "\u{1D680}": { math: "\\mathtt{Q}" },
      "\u{1D681}": { math: "\\mathtt{R}" },
      "\u{1D682}": { math: "\\mathtt{S}" },
      "\u{1D683}": { math: "\\mathtt{T}" },
      "\u{1D684}": { math: "\\mathtt{U}" },
      "\u{1D685}": { math: "\\mathtt{V}" },
      "\u{1D686}": { math: "\\mathtt{W}" },
      "\u{1D687}": { math: "\\mathtt{X}" },
      "\u{1D688}": { math: "\\mathtt{Y}" },
      "\u{1D689}": { math: "\\mathtt{Z}" },
      "\u{1D68A}": { math: "\\mathtt{a}" },
      "\u{1D68B}": { math: "\\mathtt{b}" },
      "\u{1D68C}": { math: "\\mathtt{c}" },
      "\u{1D68D}": { math: "\\mathtt{d}" },
      "\u{1D68E}": { math: "\\mathtt{e}" },
      "\u{1D68F}": { math: "\\mathtt{f}" },
      "\u{1D690}": { math: "\\mathtt{g}" },
      "\u{1D691}": { math: "\\mathtt{h}" },
      "\u{1D692}": { math: "\\mathtt{i}" },
      "\u{1D693}": { math: "\\mathtt{j}" },
      "\u{1D694}": { math: "\\mathtt{k}" },
      "\u{1D695}": { math: "\\mathtt{l}" },
      "\u{1D696}": { math: "\\mathtt{m}" },
      "\u{1D697}": { math: "\\mathtt{n}" },
      "\u{1D698}": { math: "\\mathtt{o}" },
      "\u{1D699}": { math: "\\mathtt{p}" },
      "\u{1D69A}": { math: "\\mathtt{q}" },
      "\u{1D69B}": { math: "\\mathtt{r}" },
      "\u{1D69C}": { math: "\\mathtt{s}" },
      "\u{1D69D}": { math: "\\mathtt{t}" },
      "\u{1D69E}": { math: "\\mathtt{u}" },
      "\u{1D69F}": { math: "\\mathtt{v}" },
      "\u{1D6A0}": { math: "\\mathtt{w}" },
      "\u{1D6A1}": { math: "\\mathtt{x}" },
      "\u{1D6A2}": { math: "\\mathtt{y}" },
      "\u{1D6A3}": { math: "\\mathtt{z}" },
      "\u{1D6A4}": { math: "\\imath" },
      "\u{1D6A5}": { math: "\\jmath" },
      "\u{1D6A8}": { math: "\\mathbf{A}" },
      "\u{1D6A9}": { math: "\\mathbf{B}" },
      "\u{1D6AA}": { math: "\\mathbf{\\Gamma}" },
      "\u{1D6AB}": { math: "\\mathbf{\\Delta}" },
      "\u{1D6AC}": { math: "\\mathbf{E}" },
      "\u{1D6AD}": { math: "\\mathbf{Z}" },
      "\u{1D6AE}": { math: "\\mathbf{H}" },
      "\u{1D6AF}": { math: "\\mathbf{\\Theta}" },
      "\u{1D6B0}": { math: "\\mathbf{I}" },
      "\u{1D6B1}": { math: "\\mathbf{K}" },
      "\u{1D6B2}": { math: "\\mathbf{\\Lambda}" },
      "\u{1D6B3}": { math: "M" },
      "\u{1D6B4}": { math: "N" },
      "\u{1D6B5}": { math: "\\mathbf{\\Xi}" },
      "\u{1D6B6}": { math: "O" },
      "\u{1D6B7}": { math: "\\mathbf{\\Pi}" },
      "\u{1D6B8}": { math: "\\mathbf{P}" },
      "\u{1D6B9}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6BA}": { math: "\\mathbf{\\Sigma}" },
      "\u{1D6BB}": { math: "\\mathbf{T}" },
      "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}" },
      "\u{1D6BD}": { math: "\\mathbf{\\Phi}" },
      "\u{1D6BE}": { math: "\\mathbf{X}" },
      "\u{1D6BF}": { math: "\\mathbf{\\Psi}" },
      "\u{1D6C0}": { math: "\\mathbf{\\Omega}" },
      "\u{1D6C1}": { math: "\\mathbf{\\nabla}" },
      "\u{1D6C2}": { math: "\\mathbf{\\alpha}" },
      "\u{1D6C3}": { math: "\\mathbf{\\beta}" },
      "\u{1D6C4}": { math: "\\mathbf{\\gamma}" },
      "\u{1D6C5}": { math: "\\mathbf{\\delta}" },
      "\u{1D6C6}": { math: "\\mathbf{\\epsilon}" },
      "\u{1D6C7}": { math: "\\mathbf{\\zeta}" },
      "\u{1D6C8}": { math: "\\mathbf{\\eta}" },
      "\u{1D6C9}": { math: "\\mathbf{\\theta}" },
      "\u{1D6CA}": { math: "\\mathbf{I}" },
      "\u{1D6CB}": { math: "\\mathbf{K}" },
      "\u{1D6CC}": { math: "\\mathbf{\\lambda}" },
      "\u{1D6CD}": { math: "M" },
      "\u{1D6CE}": { math: "N" },
      "\u{1D6CF}": { math: "\\mathbf{\\xi}" },
      "\u{1D6D0}": { math: "O" },
      "\u{1D6D1}": { math: "\\mathbf{\\pi}" },
      "\u{1D6D2}": { math: "\\mathbf{P}" },
      "\u{1D6D3}": { math: "\\mathbf{\\varsigma}" },
      "\u{1D6D4}": { math: "\\mathbf{\\sigma}" },
      "\u{1D6D5}": { math: "\\mathbf{T}" },
      "\u{1D6D6}": { math: "\\mathbf{\\upsilon}" },
      "\u{1D6D7}": { math: "\\mathbf{\\phi}" },
      "\u{1D6D8}": { math: "\\mathbf{X}" },
      "\u{1D6D9}": { math: "\\mathbf{\\psi}" },
      "\u{1D6DA}": { math: "\\mathbf{\\omega}" },
      "\u{1D6DB}": { math: "\\partial" },
      "\u{1D6DC}": { math: "\\in" },
      "\u{1D6DD}": { math: "\\mathbf{\\vartheta}" },
      "\u{1D6DE}": { math: "\\mathbf{\\varkappa}" },
      "\u{1D6DF}": { math: "\\mathbf{\\phi}" },
      "\u{1D6E0}": { math: "\\mathbf{\\varrho}" },
      "\u{1D6E1}": { math: "\\mathbf{\\varpi}" },
      "\u{1D6E2}": { math: "\\mathsl{A}" },
      "\u{1D6E3}": { math: "\\mathsl{B}" },
      "\u{1D6E4}": { math: "\\mathsl{\\Gamma}" },
      "\u{1D6E5}": { math: "\\mathsl{\\Delta}" },
      "\u{1D6E6}": { math: "\\mathsl{E}" },
      "\u{1D6E7}": { math: "\\mathsl{Z}" },
      "\u{1D6E8}": { math: "\\mathsl{H}" },
      "\u{1D6E9}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6EA}": { math: "\\mathsl{I}" },
      "\u{1D6EB}": { math: "\\mathsl{K}" },
      "\u{1D6EC}": { math: "\\mathsl{\\Lambda}" },
      "\u{1D6ED}": { math: "M" },
      "\u{1D6EE}": { math: "N" },
      "\u{1D6EF}": { math: "\\mathsl{\\Xi}" },
      "\u{1D6F0}": { math: "O" },
      "\u{1D6F1}": { math: "\\mathsl{\\Pi}" },
      "\u{1D6F2}": { math: "\\mathsl{P}" },
      "\u{1D6F3}": { math: "\\mathsl{\\Theta}" },
      "\u{1D6F4}": { math: "\\mathsl{\\Sigma}" },
      "\u{1D6F5}": { math: "\\mathsl{T}" },
      "\u{1D6F6}": { math: "\\mathsl{\\Upsilon}" },
      "\u{1D6F7}": { math: "\\mathsl{\\Phi}" },
      "\u{1D6F8}": { math: "\\mathsl{X}" },
      "\u{1D6F9}": { math: "\\mathsl{\\Psi}" },
      "\u{1D6FA}": { math: "\\mathsl{\\Omega}" },
      "\u{1D6FB}": { math: "\\mathsl{\\nabla}" },
      "\u{1D6FC}": { math: "\\mathsl{A}" },
      "\u{1D6FD}": { math: "\\mathsl{B}" },
      "\u{1D6FE}": { math: "\\mathsl{\\gamma}" },
      "\u{1D6FF}": { math: "\\mathsl{\\delta}" },
      "\u{1D700}": { math: "\\mathsl{E}" },
      "\u{1D701}": { math: "\\mathsl{Z}" },
      "\u{1D702}": { math: "\\mathsl{H}" },
      "\u{1D703}": { math: "\\mathsl{\\theta}" },
      "\u{1D704}": { math: "\\mathsl{I}" },
      "\u{1D705}": { math: "\\mathsl{K}" },
      "\u{1D706}": { math: "\\mathsl{\\lambda}" },
      "\u{1D707}": { math: "\\mu" },
      "\u{1D708}": { math: "\\nu" },
      "\u{1D709}": { math: "\\mathsl{\\xi}" },
      "\u{1D70A}": { math: "o" },
      "\u{1D70B}": { math: "\\mathsl{\\pi}" },
      "\u{1D70C}": { math: "\\mathsl{P}" },
      "\u{1D70D}": { math: "\\mathsl{\\varsigma}" },
      "\u{1D70E}": { math: "\\mathsl{\\sigma}" },
      "\u{1D70F}": { math: "\\mathsl{T}" },
      "\u{1D710}": { math: "\\mathsl{\\upsilon}" },
      "\u{1D711}": { math: "\\mathsl{\\varphi}" },
      "\u{1D712}": { math: "\\mathsl{X}" },
      "\u{1D713}": { math: "\\mathsl{\\psi}" },
      "\u{1D714}": { math: "\\mathsl{\\omega}" },
      "\u{1D715}": { math: "\\partial" },
      "\u{1D716}": { math: "\\in" },
      "\u{1D717}": { math: "\\mathsl{\\vartheta}" },
      "\u{1D718}": { math: "\\mathsl{\\varkappa}" },
      "\u{1D719}": { math: "\\mathsl{\\phi}" },
      "\u{1D71A}": { math: "\\mathsl{\\varrho}" },
      "\u{1D71B}": { math: "\\mathsl{\\varpi}" },
      "\u{1D71C}": { math: "\\mathbit{A}" },
      "\u{1D71D}": { math: "\\mathbit{B}" },
      "\u{1D71E}": { math: "\\mathbit{\\Gamma}" },
      "\u{1D71F}": { math: "\\mathbit{\\Delta}" },
      "\u{1D720}": { math: "\\mathbit{E}" },
      "\u{1D721}": { math: "\\mathbit{Z}" },
      "\u{1D722}": { math: "\\mathbit{H}" },
      "\u{1D723}": { math: "\\mathbit{\\Theta}" },
      "\u{1D724}": { math: "\\mathbit{I}" },
      "\u{1D725}": { math: "\\mathbit{K}" },
      "\u{1D726}": { math: "\\mathbit{\\Lambda}" },
      "\u{1D727}": { math: "M" },
      "\u{1D728}": { math: "N" },
      "\u{1D729}": { math: "\\mathbit{\\Xi}" },
      "\u{1D72A}": { math: "O" },
      "\u{1D72B}": { math: "\\mathbit{\\Pi}" },
      "\u{1D72C}": { math: "\\mathbit{P}" },
      "\u{1D72D}": { math: "\\mathbit{O}" },
      "\u{1D72E}": { math: "\\mathbit{\\Sigma}" },
      "\u{1D72F}": { math: "\\mathbit{T}" },
      "\u{1D730}": { math: "\\mathbit{\\Upsilon}" },
      "\u{1D731}": { math: "\\mathbit{\\Phi}" },
      "\u{1D732}": { math: "\\mathbit{X}" },
      "\u{1D733}": { math: "\\mathbit{\\Psi}" },
      "\u{1D734}": { math: "\\mathbit{\\Omega}" },
      "\u{1D735}": { math: "\\mathbit{\\nabla}" },
      "\u{1D736}": { math: "\\mathbit{\\alpha}" },
      "\u{1D737}": { math: "\\mathbit{\\beta}" },
      "\u{1D738}": { math: "\\mathbit{\\gamma}" },
      "\u{1D739}": { math: "\\mathbit{\\delta}" },
      "\u{1D73A}": { math: "\\mathbit{\\epsilon}" },
      "\u{1D73B}": { math: "\\mathbit{\\zeta}" },
      "\u{1D73C}": { math: "\\mathbit{\\eta}" },
      "\u{1D73D}": { math: "\\mathbit{\\theta}" },
      "\u{1D73E}": { math: "\\mathbit{\\imath}" },
      "\u{1D73F}": { math: "\\mathbit{\\kappa}" },
      "\u{1D740}": { math: "\\mathbit{\\lambda}" },
      "\u{1D741}": { math: "\\mu" },
      "\u{1D742}": { math: "N" },
      "\u{1D743}": { math: "\\mathbit{\\xi}" },
      "\u{1D744}": { math: "O" },
      "\u{1D745}": { math: "\\mathbit{\\pi}" },
      "\u{1D746}": { math: "\\mathbit{\\rho}" },
      "\u{1D747}": { math: "\\mathbit{\\varsigma}" },
      "\u{1D748}": { math: "\\mathbit{\\sigma}" },
      "\u{1D749}": { math: "\\mathbit{\\tau}" },
      "\u{1D74A}": { math: "\\mathbit{\\upsilon}" },
      "\u{1D74B}": { math: "\\mathbit{\\varphi}" },
      "\u{1D74C}": { math: "\\mathbit{\\chi}" },
      "\u{1D74D}": { math: "\\mathbit{\\psi}" },
      "\u{1D74E}": { math: "\\mathbit{\\omega}" },
      "\u{1D74F}": { math: "\\partial" },
      "\u{1D750}": { math: "\\in" },
      "\u{1D751}": { math: "\\mathbit{\\vartheta}" },
      "\u{1D752}": { math: "\\mathbit{\\varkappa}" },
      "\u{1D753}": { math: "\\mathbit{\\phi}" },
      "\u{1D754}": { math: "\\mathbit{\\varrho}" },
      "\u{1D755}": { math: "\\mathbit{\\varpi}" },
      "\u{1D756}": { math: "\\mathsfbf{A}" },
      "\u{1D757}": { math: "\\mathsfbf{B}" },
      "\u{1D758}": { math: "\\mathsfbf{\\Gamma}" },
      "\u{1D759}": { math: "\\mathsfbf{\\Delta}" },
      "\u{1D75A}": { math: "\\mathsfbf{E}" },
      "\u{1D75B}": { math: "\\mathsfbf{Z}" },
      "\u{1D75C}": { math: "\\mathsfbf{H}" },
      "\u{1D75D}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D75E}": { math: "\\mathsfbf{I}" },
      "\u{1D75F}": { math: "\\mathsfbf{K}" },
      "\u{1D760}": { math: "\\mathsfbf{\\Lambda}" },
      "\u{1D761}": { math: "M" },
      "\u{1D762}": { math: "N" },
      "\u{1D763}": { math: "\\mathsfbf{\\Xi}" },
      "\u{1D764}": { math: "O" },
      "\u{1D765}": { math: "\\mathsfbf{\\Pi}" },
      "\u{1D766}": { math: "\\mathsfbf{P}" },
      "\u{1D767}": { math: "\\mathsfbf{\\Theta}" },
      "\u{1D768}": { math: "\\mathsfbf{\\Sigma}" },
      "\u{1D769}": { math: "\\mathsfbf{T}" },
      "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}" },
      "\u{1D76B}": { math: "\\mathsfbf{\\Phi}" },
      "\u{1D76C}": { math: "\\mathsfbf{X}" },
      "\u{1D76D}": { math: "\\mathsfbf{\\Psi}" },
      "\u{1D76E}": { math: "\\mathsfbf{\\Omega}" },
      "\u{1D76F}": { math: "\\mathsfbf{\\nabla}" },
      "\u{1D770}": { math: "\\mathsfbf{\\alpha}" },
      "\u{1D771}": { math: "\\mathsfbf{\\beta}" },
      "\u{1D772}": { math: "\\mathsfbf{\\gamma}" },
      "\u{1D773}": { math: "\\mathsfbf{\\delta}" },
      "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}" },
      "\u{1D775}": { math: "\\mathsfbf{\\zeta}" },
      "\u{1D776}": { math: "\\mathsfbf{\\eta}" },
      "\u{1D777}": { math: "\\mathsfbf{\\theta}" },
      "\u{1D778}": { math: "\\mathsfbf{\\imath}" },
      "\u{1D779}": { math: "\\mathsfbf{\\kappa}" },
      "\u{1D77A}": { math: "\\mathsfbf{\\lambda}" },
      "\u{1D77B}": { math: "\\mu" },
      "\u{1D77C}": { math: "\\nu" },
      "\u{1D77D}": { math: "\\mathsfbf{\\xi}" },
      "\u{1D77E}": { math: "o" },
      "\u{1D77F}": { math: "\\mathsfbf{\\pi}" },
      "\u{1D780}": { math: "\\mathsfbf{\\rho}" },
      "\u{1D781}": { math: "\\mathsfbf{\\varsigma}" },
      "\u{1D782}": { math: "\\mathsfbf{\\sigma}" },
      "\u{1D783}": { math: "\\mathsfbf{\\tau}" },
      "\u{1D784}": { math: "\\mathsfbf{\\upsilon}" },
      "\u{1D785}": { math: "\\mathsfbf{\\varphi}" },
      "\u{1D786}": { math: "\\mathsfbf{\\chi}" },
      "\u{1D787}": { math: "\\mathsfbf{\\psi}" },
      "\u{1D788}": { math: "\\mathsfbf{\\omega}" },
      "\u{1D789}": { math: "\\partial" },
      "\u{1D78A}": { math: "\\in" },
      "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}" },
      "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}" },
      "\u{1D78D}": { math: "\\mathsfbf{\\phi}" },
      "\u{1D78E}": { math: "\\mathsfbf{\\varrho}" },
      "\u{1D78F}": { math: "\\mathsfbf{\\varpi}" },
      "\u{1D790}": { math: "\\mathsfbfsl{A}" },
      "\u{1D791}": { math: "\\mathsfbfsl{B}" },
      "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}" },
      "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}" },
      "\u{1D794}": { math: "\\mathsfbfsl{E}" },
      "\u{1D795}": { math: "\\mathsfbfsl{Z}" },
      "\u{1D796}": { math: "\\mathsfbfsl{H}" },
      "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D798}": { math: "\\mathsfbfsl{I}" },
      "\u{1D799}": { math: "\\mathsfbfsl{K}" },
      "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}" },
      "\u{1D79B}": { math: "\\mathsfbfsl{M}" },
      "\u{1D79C}": { math: "\\mathsfbfsl{N}" },
      "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}" },
      "\u{1D79E}": { math: "\\mathsfbfsl{O}" },
      "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}" },
      "\u{1D7A0}": { math: "\\mathsfbfsl{P}" },
      "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}" },
      "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}" },
      "\u{1D7A3}": { math: "\\mathsfbfsl{T}" },
      "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}" },
      "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}" },
      "\u{1D7A6}": { math: "\\mathsfbfsl{X}" },
      "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}" },
      "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}" },
      "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}" },
      "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}" },
      "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}" },
      "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}" },
      "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}" },
      "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}" },
      "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}" },
      "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}" },
      "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}" },
      "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}" },
      "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}" },
      "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}" },
      "\u{1D7B5}": { math: "\\mu" },
      "\u{1D7B6}": { math: "\\nu" },
      "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}" },
      "\u{1D7B8}": { math: "o" },
      "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}" },
      "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}" },
      "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}" },
      "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}" },
      "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}" },
      "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}" },
      "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}" },
      "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}" },
      "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}" },
      "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}" },
      "\u{1D7C3}": { math: "\\partial" },
      "\u{1D7C4}": { math: "\\in" },
      "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}" },
      "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}" },
      "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}" },
      "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}" },
      "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}" },
      "\u{1D7CA}": { math: "\\mbfDigamma" },
      "\u{1D7CB}": { math: "\\mbfdigamma" },
      "\u{1D7CE}": { math: "\\mathbf{0}" },
      "\u{1D7CF}": { math: "\\mathbf{1}" },
      "\u{1D7D0}": { math: "\\mathbf{2}" },
      "\u{1D7D1}": { math: "\\mathbf{3}" },
      "\u{1D7D2}": { math: "\\mathbf{4}" },
      "\u{1D7D3}": { math: "\\mathbf{5}" },
      "\u{1D7D4}": { math: "\\mathbf{6}" },
      "\u{1D7D5}": { math: "\\mathbf{7}" },
      "\u{1D7D6}": { math: "\\mathbf{8}" },
      "\u{1D7D7}": { math: "\\mathbf{9}" },
      "\u{1D7D8}": { math: "\\mathbb{0}" },
      "\u{1D7D9}": { math: "\\mathbb{1}" },
      "\u{1D7DA}": { math: "\\mathbb{2}" },
      "\u{1D7DB}": { math: "\\mathbb{3}" },
      "\u{1D7DC}": { math: "\\mathbb{4}" },
      "\u{1D7DD}": { math: "\\mathbb{5}" },
      "\u{1D7DE}": { math: "\\mathbb{6}" },
      "\u{1D7DF}": { math: "\\mathbb{7}" },
      "\u{1D7E0}": { math: "\\mathbb{8}" },
      "\u{1D7E1}": { math: "\\mathbb{9}" },
      "\u{1D7E2}": { math: "\\mathsf{0}" },
      "\u{1D7E3}": { math: "\\mathsf{1}" },
      "\u{1D7E4}": { math: "\\mathsf{2}" },
      "\u{1D7E5}": { math: "\\mathsf{3}" },
      "\u{1D7E6}": { math: "\\mathsf{4}" },
      "\u{1D7E7}": { math: "\\mathsf{5}" },
      "\u{1D7E8}": { math: "\\mathsf{6}" },
      "\u{1D7E9}": { math: "\\mathsf{7}" },
      "\u{1D7EA}": { math: "\\mathsf{8}" },
      "\u{1D7EB}": { math: "\\mathsf{9}" },
      "\u{1D7EC}": { math: "\\mathsfbf{0}" },
      "\u{1D7ED}": { math: "\\mathsfbf{1}" },
      "\u{1D7EE}": { math: "\\mathsfbf{2}" },
      "\u{1D7EF}": { math: "\\mathsfbf{3}" },
      "\u{1D7F0}": { math: "\\mathsfbf{4}" },
      "\u{1D7F1}": { math: "\\mathsfbf{5}" },
      "\u{1D7F2}": { math: "\\mathsfbf{6}" },
      "\u{1D7F3}": { math: "\\mathsfbf{7}" },
      "\u{1D7F4}": { math: "\\mathsfbf{8}" },
      "\u{1D7F5}": { math: "\\mathsfbf{9}" },
      "\u{1D7F6}": { math: "\\mathtt{0}" },
      "\u{1D7F7}": { math: "\\mathtt{1}" },
      "\u{1D7F8}": { math: "\\mathtt{2}" },
      "\u{1D7F9}": { math: "\\mathtt{3}" },
      "\u{1D7FA}": { math: "\\mathtt{4}" },
      "\u{1D7FB}": { math: "\\mathtt{5}" },
      "\u{1D7FC}": { math: "\\mathtt{6}" },
      "\u{1D7FD}": { math: "\\mathtt{7}" },
      "\u{1D7FE}": { math: "\\mathtt{8}" },
      "\u{1D7FF}": { math: "\\mathtt{9}" }
    };
  }
});

// node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/unicode.json
var require_unicode = __commonJS({
  "node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/unicode.json"(exports, module2) {
    module2.exports = {
      "#": { math: "\\#", text: "\\#" },
      $: { math: "\\$", text: "\\$" },
      "%": { math: "\\%", text: "\\%" },
      "&": { math: "\\&", text: "\\&" },
      "/\u200B": { text: "\\slash", commandspacer: true },
      "<": { math: "<" },
      ">": { math: ">" },
      "\\": { math: "\\backslash", text: "\\textbackslash", commandspacer: true },
      "^": { math: "\\sphat", text: "\\^" },
      _: { math: "\\_", text: "\\_" },
      "{": { math: "\\lbrace", text: "\\{" },
      "}": { math: "\\rbrace", text: "\\}" },
      "~": { math: "\\sptilde", text: "\\textasciitilde", commandspacer: true },
      "\xA0": { math: "~", space: true, text: "~" },
      "\u2000": { text: "\\hspace{0.6em}", space: true },
      "\u2001": { math: "\\quad", space: true },
      "\u2002": { text: "\\hspace{0.6em}", space: true },
      "\u2003": { math: "\\quad", space: true },
      "\u2004": { text: "\\;", space: true },
      "\u2005": { text: "\\hspace{0.25em}", space: true },
      "\u2006": { text: "\\hspace{0.166em}", space: true },
      "\u2007": { text: "\\hphantom{0}", space: true },
      "\u2008": { text: "\\hphantom{,}", space: true },
      "\u2009": { text: "\\,", space: true },
      "\u200A": { math: "\\mkern1mu", space: true },
      "\u200B": { text: "\\hspace{0pt}", space: true },
      "\u202F": { text: "\\,", space: true },
      "\u205F": { math: "\\:", space: true, text: "\\:" }
    };
  }
});

// node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/latex.json
var require_latex = __commonJS({
  "node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/latex.json"(exports, module2) {
    module2.exports = {
      "\\textquotedbl": '"',
      "\\#": "#",
      "\\$": "$",
      "\\%": "%",
      "\\&": "&",
      "\\slash": "/\u200B",
      "\\textless": "<",
      "\\textgreater": ">",
      "\\LaTeX": "LaTeX",
      "\\textbackslash": "\\",
      "\\backslash": "\\",
      "\\": "\\",
      "\\^": "^",
      "\\sphat": "^",
      "\\_": "_",
      "\\t{ia}": "i\uFE20a\uFE21",
      "{\\~ w}": "w\u0303",
      "\\{": "{",
      "\\lbrace": "{",
      "\\textbar": "|",
      "\\}": "}",
      "\\rbrace": "}",
      "\\textasciitilde": "~",
      "\\sptilde": "~",
      "\\textexclamdown": "\xA1",
      "\\textcent": "\xA2",
      "\\cent": "\xA2",
      "\\textsterling": "\xA3",
      "\\pounds": "\xA3",
      "\\textcurrency": "\xA4",
      "\\textyen": "\xA5",
      "\\yen": "\xA5",
      "\\textbrokenbar": "\xA6",
      "\\textsection": "\xA7",
      "\\textasciidieresis": "\xA8",
      "\\spddot": "\xA8",
      "\\textcopyright": "\xA9",
      "\\textordfeminine": "\xAA",
      "\\guillemotleft": "\xAB",
      "\\lnot": "\xAC",
      "\\neg": "\xAC",
      "\\-": "\xAD",
      "\\textregistered": "\xAE",
      "\\circledR": "\xAE",
      "\\textasciimacron": "\xAF",
      "\\textdegree": "\xB0",
      "^\\circ": "\xB0",
      "\\pm": "\xB1",
      "^{2}": "\xB2",
      "^{3}": "\xB3",
      "\\textasciiacute": "\xB4",
      "\\textmu": "\xB5",
      "\\textparagraph": "\xB6",
      "^{1}": "\xB9",
      "\\textordmasculine": "\xBA",
      "\\guillemotright": "\xBB",
      "\\frac{1}{4}": "\xBC",
      "\\textonequarter": "\xBC",
      "\\frac{1}{2}": "\xBD",
      "\\textonehalf": "\xBD",
      "\\frac{3}{4}": "\xBE",
      "\\textthreequarters": "\xBE",
      "\\textquestiondown": "\xBF",
      "\\`A": "\xC0",
      "\\'A": "\xC1",
      "\\^A": "\xC2",
      "\\~A": "\xC3",
      '\\"A': "\xC4",
      "\\AA": "\xC5",
      "\\r{A}": "\xC5",
      "{\\r A}": "\xC5",
      "\\AE": "\xC6",
      "\\c{C}": "\xC7",
      "\\`E": "\xC8",
      "\\'E": "\xC9",
      "\\^E": "\xCA",
      '\\"E': "\xCB",
      "\\`I": "\xCC",
      "\\'I": "\xCD",
      "\\^I": "\xCE",
      '\\"I': "\xCF",
      "\\DH": "\xD0",
      "\\~N": "\xD1",
      "\\`O": "\xD2",
      "\\'O": "\xD3",
      "\\^O": "\xD4",
      "\\~O": "\xD5",
      '\\"O': "\xD6",
      "\\texttimes": "\xD7",
      "\\times": "\xD7",
      "\\O": "\xD8",
      "\\`U": "\xD9",
      "\\'U": "\xDA",
      "\\^U": "\xDB",
      '\\"U': "\xDC",
      "\\'Y": "\xDD",
      "\\TH": "\xDE",
      "\\ss": "\xDF",
      "\\`a": "\xE0",
      "\\'a": "\xE1",
      "\\^a": "\xE2",
      "\\~a": "\xE3",
      '\\"a': "\xE4",
      "\\aa": "\xE5",
      "\\r{a}": "\xE5",
      "{\\r a}": "\xE5",
      "\\ae": "\xE6",
      "\\c{c}": "\xE7",
      "\\`e": "\xE8",
      "\\'e": "\xE9",
      "\\^e": "\xEA",
      '\\"e': "\xEB",
      "\\`i": "\xEC",
      "\\`\\i": "\xEC",
      "\\'i": "\xED",
      "\\'\\i": "\xED",
      "\\^i": "\xEE",
      "\\^\\i": "\xEE",
      '\\"i': "\xEF",
      '\\"\\i': "\xEF",
      "\\dh": "\xF0",
      "\\eth": "\xF0",
      "\\~n": "\xF1",
      "\\`o": "\xF2",
      "\\'o": "\xF3",
      "\\^o": "\xF4",
      "\\~o": "\xF5",
      '\\"o': "\xF6",
      "\\div": "\xF7",
      "\\o": "\xF8",
      "\\`u": "\xF9",
      "\\'u": "\xFA",
      "\\^u": "\xFB",
      '\\"u': "\xFC",
      "\\'y": "\xFD",
      "\\th": "\xFE",
      '\\"y': "\xFF",
      "\\=A": "\u0100",
      "\\=a": "\u0101",
      "\\u{A}": "\u0102",
      "\\u{a}": "\u0103",
      "\\k{A}": "\u0104",
      "\\k{a}": "\u0105",
      "\\'C": "\u0106",
      "\\'c": "\u0107",
      "\\^C": "\u0108",
      "\\^c": "\u0109",
      "\\.C": "\u010A",
      "\\.c": "\u010B",
      "\\v{C}": "\u010C",
      "\\v{c}": "\u010D",
      "\\v{D}": "\u010E",
      "\\v{d}": "\u010F",
      "\\DJ": "\u0110",
      "\\dj": "\u0111",
      "\\=E": "\u0112",
      "\\=e": "\u0113",
      "\\u{E}": "\u0114",
      "\\u{e}": "\u0115",
      "\\.E": "\u0116",
      "\\.e": "\u0117",
      "\\k{E}": "\u0118",
      "\\k{e}": "\u0119",
      "\\v{E}": "\u011A",
      "\\v{e}": "\u011B",
      "\\^G": "\u011C",
      "\\^g": "\u011D",
      "\\u{G}": "\u011E",
      "\\u{g}": "\u011F",
      "\\.G": "\u0120",
      "\\.g": "\u0121",
      "\\c{G}": "\u0122",
      "\\c{g}": "\u0123",
      "\\^H": "\u0124",
      "\\^h": "\u0125",
      "{\\fontencoding{LELA}\\selectfont\\char40}": "\u0126",
      "\\Elzxh": "\u0127",
      "\\~I": "\u0128",
      "\\~i": "\u0129",
      "\\=I": "\u012A",
      "\\=i": "\u012B",
      "\\u{I}": "\u012C",
      "{\\u \\i}": "\u012D",
      "\\k{I}": "\u012E",
      "\\k{i}": "\u012F",
      "\\.I": "\u0130",
      "\\i": "\u0131",
      "\\imath": "\u0131",
      "\\^J": "\u0134",
      "\\^\\j": "\u0135",
      "\\c{K}": "\u0136",
      "\\c{k}": "\u0137",
      "{\\fontencoding{LELA}\\selectfont\\char91}": "\u0138",
      "\\'L": "\u0139",
      "\\'l": "\u013A",
      "\\c{L}": "\u013B",
      "\\c{l}": "\u013C",
      "\\v{L}": "\u013D",
      "\\v{l}": "\u013E",
      "{\\fontencoding{LELA}\\selectfont\\char201}": "\u013F",
      "{\\fontencoding{LELA}\\selectfont\\char202}": "\u0140",
      "\\L": "\u0141",
      "\\l": "\u0142",
      "\\'N": "\u0143",
      "\\'n": "\u0144",
      "\\c{N}": "\u0145",
      "\\c{n}": "\u0146",
      "\\v{N}": "\u0147",
      "\\v{n}": "\u0148",
      "\\NG": "\u014A",
      "\\ng": "\u014B",
      "\\=O": "\u014C",
      "\\=o": "\u014D",
      "\\u{O}": "\u014E",
      "\\u{o}": "\u014F",
      "\\H{O}": "\u0150",
      "\\H{o}": "\u0151",
      "\\OE": "\u0152",
      "\\oe": "\u0153",
      "\\'R": "\u0154",
      "\\'r": "\u0155",
      "\\c{R}": "\u0156",
      "\\c{r}": "\u0157",
      "\\v{R}": "\u0158",
      "\\v{r}": "\u0159",
      "\\'S": "\u015A",
      "\\'s": "\u015B",
      "\\^S": "\u015C",
      "\\^s": "\u015D",
      "\\c{S}": "\u015E",
      "\\c{s}": "\u015F",
      "\\v{S}": "\u0160",
      "\\v{s}": "\u0161",
      "\\c{T}": "\u0162",
      "\\c{t}": "\u0163",
      "\\v{T}": "\u0164",
      "\\v{t}": "\u0165",
      "{\\fontencoding{LELA}\\selectfont\\char47}": "\u0166",
      "{\\fontencoding{LELA}\\selectfont\\char63}": "\u0167",
      "\\~U": "\u0168",
      "\\~u": "\u0169",
      "\\=U": "\u016A",
      "\\=u": "\u016B",
      "\\u{U}": "\u016C",
      "\\u{u}": "\u016D",
      "\\r{U}": "\u016E",
      "{\\r U}": "\u016E",
      "\\r{u}": "\u016F",
      "\\ocirc{u}": "\u016F",
      "{\\r u}": "\u016F",
      "\\H{U}": "\u0170",
      "\\H{u}": "\u0171",
      "\\k{U}": "\u0172",
      "\\k{u}": "\u0173",
      "\\^W": "\u0174",
      "\\^w": "\u0175",
      "\\^Y": "\u0176",
      "\\^y": "\u0177",
      '\\"Y': "\u0178",
      "\\'Z": "\u0179",
      "\\'z": "\u017A",
      "\\.Z": "\u017B",
      "\\.z": "\u017C",
      "\\v{Z}": "\u017D",
      "\\v{z}": "\u017E",
      "\\texthvlig": "\u0195",
      "\\textnrleg": "\u019E",
      "\\textesh": "\u01AA",
      "\\Zbar": "\u01B5",
      "{\\fontencoding{LELA}\\selectfont\\char195}": "\u01BA",
      "\\textdoublepipe": "\u01C2",
      "\\v{A}": "\u01CD",
      "\\v{a}": "\u01CE",
      "\\v{I}": "\u01CF",
      "\\v{i}": "\u01D0",
      "\\v{O}": "\u01D1",
      "\\v{o}": "\u01D2",
      "\\v{U}": "\u01D3",
      "\\v{u}": "\u01D4",
      "\\v{G}": "\u01E6",
      "\\v{g}": "\u01E7",
      "\\v{K}": "\u01E8",
      "\\v{k}": "\u01E9",
      "\\k{O}": "\u01EA",
      "\\k{o}": "\u01EB",
      "\\v{j}": "\u01F0",
      "\\'G": "\u01F4",
      "\\'g": "\u01F5",
      "\\c{E}": "\u0228",
      "\\c{e}": "\u0229",
      "\\jmath": "\u0237",
      "\\Elztrna": "\u0250",
      "\\Elztrnsa": "\u0252",
      "\\Elzopeno": "\u0254",
      "\\Elzrtld": "\u0256",
      "{\\fontencoding{LEIP}\\selectfont\\char61}": "\u0258",
      "\\Elzschwa": "\u0259",
      "\\varepsilon": "\u025B",
      "\\Elzpgamma": "\u0263",
      "\\Elzpbgam": "\u0264",
      "\\Elztrnh": "\u0265",
      "\\Elzbtdl": "\u026C",
      "\\Elzrtll": "\u026D",
      "\\Elztrnm": "\u026F",
      "\\Elztrnmlr": "\u0270",
      "\\Elzltlmr": "\u0271",
      "\\Elzltln": "\u0272",
      "\\Elzrtln": "\u0273",
      "\\Elzclomeg": "\u0277",
      "\\textphi": "\u0278",
      "\\Elztrnr": "\u0279",
      "\\Elztrnrl": "\u027A",
      "\\Elzrttrnr": "\u027B",
      "\\Elzrl": "\u027C",
      "\\Elzrtlr": "\u027D",
      "\\Elzfhr": "\u027E",
      "{\\fontencoding{LEIP}\\selectfont\\char202}": "\u027F",
      "\\Elzrtls": "\u0282",
      "\\Elzesh": "\u0283",
      "\\Elztrnt": "\u0287",
      "\\Elzrtlt": "\u0288",
      "\\Elzpupsil": "\u028A",
      "\\Elzpscrv": "\u028B",
      "\\Elzinvv": "\u028C",
      "\\Elzinvw": "\u028D",
      "\\Elztrny": "\u028E",
      "\\Elzrtlz": "\u0290",
      "\\Elzyogh": "\u0292",
      "\\Elzglst": "\u0294",
      "\\Elzreglst": "\u0295",
      "\\Elzinglst": "\u0296",
      "\\textturnk": "\u029E",
      "\\Elzdyogh": "\u02A4",
      "\\Elztesh": "\u02A7",
      "\\textsuperscript{h}": "\u02B0",
      "^{h}": "\u02B0",
      "\\textsuperscript{j}": "\u02B2",
      "^{j}": "\u02B2",
      "\\textsuperscript{r}": "\u02B3",
      "^{r}": "\u02B3",
      "\\textsuperscript{w}": "\u02B7",
      "^{w}": "\u02B7",
      "\\textsuperscript{y}": "\u02B8",
      "^{y}": "\u02B8",
      "\\lasp": "\u02BF",
      "\\textasciicircum": "\u02C6",
      "\\textasciicaron": "\u02C7",
      "\\Elzverts": "\u02C8",
      "\\Elzverti": "\u02CC",
      "\\Elzlmrk": "\u02D0",
      "\\Elzhlmrk": "\u02D1",
      "\\Elzsbrhr": "\u02D2",
      "\\Elzsblhr": "\u02D3",
      "\\Elzrais": "\u02D4",
      "\\Elzlow": "\u02D5",
      "\\textasciibreve": "\u02D8",
      "\\textperiodcentered": "\u02D9",
      "\\texttildelow": "\u02DC",
      "\\textsuperscript{l}": "\u02E1",
      "^{l}": "\u02E1",
      "\\textsuperscript{s}": "\u02E2",
      "^{s}": "\u02E2",
      "\\textsuperscript{x}": "\u02E3",
      "^{x}": "\u02E3",
      "\\tone{55}": "\u02E5",
      "\\tone{44}": "\u02E6",
      "\\tone{33}": "\u02E7",
      "\\tone{22}": "\u02E8",
      "\\tone{11}": "\u02E9",
      "\\`": "\u0300",
      "\\grave": "\u0300",
      "\\textgravemacron": "\u0300\u0304",
      "\\textgravedot": "\u0300\u0307",
      "\\'": "\u0301",
      "\\acute": "\u0301",
      "\\textacutemacron": "\u0301\u0304",
      "\\textacutewedge": "\u0301\u030C",
      "\\hat": "\u0302",
      "\\textcircumdot": "\u0302\u0307",
      "\\~": "\u0303",
      "\\tilde": "\u0303",
      "\\texttildedot": "\u0303\u0307",
      "\\=": "\u0304",
      "\\bar": "\u0304",
      "\\overline": "\u0305",
      "\\u": "\u0306",
      "\\breve": "\u0306",
      "\\textbrevemacron": "\u0306\u0304",
      "\\.": "\u0307",
      "\\dot": "\u0307",
      "\\textdotacute": "\u0307\u0301",
      '\\"': "\u0308",
      "\\ddot": "\u0308",
      "\\ovhook": "\u0309",
      "\\r": "\u030A",
      "\\mathring": "\u030A",
      "\\textringmacron": "\u030A\u0304",
      "\\H": "\u030B",
      "\\check": "\u030C",
      "\\v": "\u030C",
      "\\textvbaraccent": "\u030D",
      "\\textdoublevbaraccent": "\u030E",
      "\\textdoublegrave": "\u030F",
      "\\textdotbreve": "\u0310",
      "{\\fontencoding{LECO}\\selectfont\\char177}": "\u0311",
      "\\oturnedcomma": "\u0312",
      "\\ocommatopright": "\u0315",
      "\\textsubgrave": "\u0316",
      "\\textadvancing": "\u0318",
      "\\textretracting": "\u0319",
      "\\droang": "\u031A",
      "\\textcorner": "\u031A",
      "\\textsublhalfring": "\u031C",
      "\\textraising": "\u031D",
      "\\textlowering": "\u031E",
      "\\textsubplus": "\u031F",
      "\\Elzpalh": "\u0321",
      "\\Elzrh": "\u0322",
      "\\d": "\u0323",
      "\\textsubumlaut": "\u0324",
      "\\textsubring": "\u0325",
      "\\c": "\u0327",
      "\\k": "\u0328",
      "\\textsyllabic": "\u0329",
      "\\Elzsbbrg": "\u032A",
      "\\textsubbridge": "\u032A",
      "{\\fontencoding{LECO}\\selectfont\\char203}": "\u032B",
      "\\textsubwedge": "\u032C",
      "\\textsubarch": "\u032F",
      "\\utilde": "\u0330",
      "\\textsubtilde": "\u0330",
      "\\textsubbar": "\u0331",
      "\\underbar": "\u0331",
      "\\underline": "\u0332",
      "\\textsuperimposetilde": "\u0334",
      "\\Elzxl": "\u0335",
      "\\Elzbar": "\u0336",
      "{\\fontencoding{LECO}\\selectfont\\char215}": "\u0337",
      "\\not": "\u0338",
      "\\textsubrhalfring": "\u0339",
      "\\textinvsubbridge": "\u033A",
      "\\textsubsquare": "\u033B",
      "\\textseagull": "\u033C",
      "\\textovercross": "\u033D",
      "{\\fontencoding{LECO}\\selectfont\\char225}": "\u0361",
      "\\'H": "\u0389",
      "{\\'{}I}": "\u038A",
      "{\\'{}O}": "\u038C",
      "\\mathrm{'Y}": "\u038E",
      "\\mathrm{'\\Omega}": "\u038F",
      "\\acute{\\ddot{\\iota}}": "\u0390",
      "\\Gamma": "\u0393",
      "\\varGamma": "\u0393",
      "\\Delta": "\u0394",
      "\\Theta": "\u0398",
      "\\Lambda": "\u039B",
      "\\Xi": "\u039E",
      "\\Pi": "\u03A0",
      "\\Sigma": "\u03A3",
      "\\Upsilon": "\u03A5",
      "\\Phi": "\u03A6",
      "\\Psi": "\u03A8",
      "\\Omega": "\u03A9",
      "\\mathrm{\\ddot{I}}": "\u03AA",
      "\\mathrm{\\ddot{Y}}": "\u03AB",
      "{\\'$\\alpha$}": "\u03AC",
      "\\acute{\\epsilon}": "\u03AD",
      "\\acute{\\eta}": "\u03AE",
      "\\acute{\\iota}": "\u03AF",
      "\\acute{\\ddot{\\upsilon}}": "\u03B0",
      "\\alpha": "\u03B1",
      "\\beta": "\u03B2",
      "\\gamma": "\u03B3",
      "\\delta": "\u03B4",
      "\\zeta": "\u03B6",
      "\\eta": "\u03B7",
      "\\texttheta": "\u03B8",
      "\\theta": "\u03B8",
      "\\iota": "\u03B9",
      "\\kappa": "\u03BA",
      "\\lambda": "\u03BB",
      "\\nu": "\u03BD",
      "\\xi": "\u03BE",
      "\\pi": "\u03C0",
      "\\rho": "\u03C1",
      "\\varsigma": "\u03C2",
      "\\sigma": "\u03C3",
      "\\tau": "\u03C4",
      "\\upsilon": "\u03C5",
      "\\varphi": "\u03C6",
      "\\chi": "\u03C7",
      "\\psi": "\u03C8",
      "\\omega": "\u03C9",
      "\\ddot{\\iota}": "\u03CA",
      "\\ddot{\\upsilon}": "\u03CB",
      "\\acute{\\upsilon}": "\u03CD",
      "\\acute{\\omega}": "\u03CE",
      "\\Pisymbol{ppi022}{87}": "\u03D0",
      "\\varbeta": "\u03D0",
      "\\textvartheta": "\u03D1",
      "\\vartheta": "\u03D1",
      "\\phi": "\u03D5",
      "\\varpi": "\u03D6",
      "\\Qoppa": "\u03D8",
      "\\qoppa": "\u03D9",
      "\\Stigma": "\u03DA",
      "\\stigma": "\u03DB",
      "\\Digamma": "\u03DC",
      "\\digamma": "\u03DD",
      "\\Koppa": "\u03DE",
      "\\koppa": "\u03DF",
      "\\Sampi": "\u03E0",
      "\\sampi": "\u03E1",
      "\\varkappa": "\u03F0",
      "\\varrho": "\u03F1",
      "\\textTheta": "\u03F4",
      "\\upvarTheta": "\u03F4",
      "\\epsilon": "\u03F5",
      "\\backepsilon": "\u03F6",
      "\\cyrchar\\CYRYO": "\u0401",
      "\\cyrchar\\CYRDJE": "\u0402",
      "\\cyrchar{\\'\\CYRG}": "\u0403",
      "\\cyrchar\\CYRIE": "\u0404",
      "\\cyrchar\\CYRDZE": "\u0405",
      "\\cyrchar\\CYRII": "\u0406",
      "\\cyrchar\\CYRYI": "\u0407",
      "\\cyrchar\\CYRJE": "\u0408",
      "\\cyrchar\\CYRLJE": "\u0409",
      "\\cyrchar\\CYRNJE": "\u040A",
      "\\cyrchar\\CYRTSHE": "\u040B",
      "\\cyrchar{\\'\\CYRK}": "\u040C",
      "\\cyrchar\\CYRUSHRT": "\u040E",
      "\\cyrchar\\CYRDZHE": "\u040F",
      "\\cyrchar\\CYRA": "\u0410",
      "\\cyrchar\\CYRB": "\u0411",
      "\\cyrchar\\CYRV": "\u0412",
      "\\cyrchar\\CYRG": "\u0413",
      "\\cyrchar\\CYRD": "\u0414",
      "\\cyrchar\\CYRE": "\u0415",
      "\\cyrchar\\CYRZH": "\u0416",
      "\\cyrchar\\CYRZ": "\u0417",
      "\\cyrchar\\CYRI": "\u0418",
      "\\cyrchar\\CYRISHRT": "\u0419",
      "\\cyrchar\\CYRK": "\u041A",
      "\\cyrchar\\CYRL": "\u041B",
      "\\cyrchar\\CYRM": "\u041C",
      "\\cyrchar\\CYRN": "\u041D",
      "\\cyrchar\\CYRO": "\u041E",
      "\\cyrchar\\CYRP": "\u041F",
      "\\cyrchar\\CYRR": "\u0420",
      "\\cyrchar\\CYRS": "\u0421",
      "\\cyrchar\\CYRT": "\u0422",
      "\\cyrchar\\CYRU": "\u0423",
      "\\cyrchar\\CYRF": "\u0424",
      "\\cyrchar\\CYRH": "\u0425",
      "\\cyrchar\\CYRC": "\u0426",
      "\\cyrchar\\CYRCH": "\u0427",
      "\\cyrchar\\CYRSH": "\u0428",
      "\\cyrchar\\CYRSHCH": "\u0429",
      "\\cyrchar\\CYRHRDSN": "\u042A",
      "\\bud": "\u042A",
      "\\cdprime": "\u042A",
      "\\cyrchar\\CYRERY": "\u042B",
      "\\cyrchar\\CYRSFTSN": "\u042C",
      "\\cprime": "\u042C",
      "\\cyrchar\\CYREREV": "\u042D",
      "\\cyrchar\\CYRYU": "\u042E",
      "\\cyrchar\\CYRYA": "\u042F",
      "\\cyrchar\\cyra": "\u0430",
      "\\cyrchar\\cyrb": "\u0431",
      "\\cyrchar\\cyrv": "\u0432",
      "\\cyrchar\\cyrg": "\u0433",
      "\\cyrchar\\cyrd": "\u0434",
      "\\cyrchar\\cyre": "\u0435",
      "\\cyrchar\\cyrzh": "\u0436",
      "\\cyrchar\\cyrz": "\u0437",
      "\\cyrchar\\cyri": "\u0438",
      "\\cyrchar\\cyrishrt": "\u0439",
      "\\cyrchar\\cyrk": "\u043A",
      "\\cyrchar\\cyrl": "\u043B",
      "\\cyrchar\\cyrm": "\u043C",
      "\\cyrchar\\cyrn": "\u043D",
      "\\cyrchar\\cyro": "\u043E",
      "\\cyrchar\\cyrp": "\u043F",
      "\\cyrchar\\cyrr": "\u0440",
      "\\cyrchar\\cyrs": "\u0441",
      "\\cyrchar\\cyrt": "\u0442",
      "\\cyrchar\\cyru": "\u0443",
      "\\cyrchar\\cyrf": "\u0444",
      "\\cyrchar\\cyrh": "\u0445",
      "\\cyrchar\\cyrc": "\u0446",
      "\\cyrchar\\cyrch": "\u0447",
      "\\cyrchar\\cyrsh": "\u0448",
      "\\cyrchar\\cyrshch": "\u0449",
      "\\cyrchar\\cyrhrdsn": "\u044A",
      "\\cyrchar\\cyrery": "\u044B",
      "\\cyrchar\\cyrsftsn": "\u044C",
      "\\cyrchar\\cyrerev": "\u044D",
      "\\cyrchar\\cyryu": "\u044E",
      "\\cyrchar\\cyrya": "\u044F",
      "\\cyrchar\\cyryo": "\u0451",
      "\\cyrchar\\cyrdje": "\u0452",
      "\\cyrchar{\\'\\cyrg}": "\u0453",
      "\\cyrchar\\cyrie": "\u0454",
      "\\cyrchar\\cyrdze": "\u0455",
      "\\cyrchar\\cyrii": "\u0456",
      "\\cyrchar\\cyryi": "\u0457",
      "\\cyrchar\\cyrje": "\u0458",
      "\\cyrchar\\cyrlje": "\u0459",
      "\\cyrchar\\cyrnje": "\u045A",
      "\\cyrchar\\cyrtshe": "\u045B",
      "\\cyrchar{\\'\\cyrk}": "\u045C",
      "\\cyrchar\\cyrushrt": "\u045E",
      "\\cyrchar\\cyrdzhe": "\u045F",
      "\\cyrchar\\CYROMEGA": "\u0460",
      "\\cyrchar\\cyromega": "\u0461",
      "\\cyrchar\\CYRYAT": "\u0462",
      "\\cyrchar\\CYRIOTE": "\u0464",
      "\\cyrchar\\cyriote": "\u0465",
      "\\cyrchar\\CYRLYUS": "\u0466",
      "\\cyrchar\\cyrlyus": "\u0467",
      "\\cyrchar\\CYRIOTLYUS": "\u0468",
      "\\cyrchar\\cyriotlyus": "\u0469",
      "\\cyrchar\\CYRBYUS": "\u046A",
      "\\cyrchar\\CYRIOTBYUS": "\u046C",
      "\\cyrchar\\cyriotbyus": "\u046D",
      "\\cyrchar\\CYRKSI": "\u046E",
      "\\cyrchar\\cyrksi": "\u046F",
      "\\cyrchar\\CYRPSI": "\u0470",
      "\\cyrchar\\cyrpsi": "\u0471",
      "\\cyrchar\\CYRFITA": "\u0472",
      "\\cyrchar\\CYRIZH": "\u0474",
      "\\cyrchar\\CYRUK": "\u0478",
      "\\cyrchar\\cyruk": "\u0479",
      "\\cyrchar\\CYROMEGARND": "\u047A",
      "\\cyrchar\\cyromegarnd": "\u047B",
      "\\cyrchar\\CYROMEGATITLO": "\u047C",
      "\\cyrchar\\cyromegatitlo": "\u047D",
      "\\cyrchar\\CYROT": "\u047E",
      "\\cyrchar\\cyrot": "\u047F",
      "\\cyrchar\\CYRKOPPA": "\u0480",
      "\\cyrchar\\cyrkoppa": "\u0481",
      "\\cyrchar\\cyrthousands": "\u0482",
      "\\cyrchar\\cyrhundredthousands": "\u0488",
      "\\cyrchar\\cyrmillions": "\u0489",
      "\\cyrchar\\CYRSEMISFTSN": "\u048C",
      "\\cyrchar\\cyrsemisftsn": "\u048D",
      "\\cyrchar\\CYRRTICK": "\u048E",
      "\\cyrchar\\cyrrtick": "\u048F",
      "\\cyrchar\\CYRGUP": "\u0490",
      "\\cyrchar\\cyrgup": "\u0491",
      "\\cyrchar\\CYRGHCRS": "\u0492",
      "\\cyrchar\\cyrghcrs": "\u0493",
      "\\cyrchar\\CYRGHK": "\u0494",
      "\\cyrchar\\cyrghk": "\u0495",
      "\\cyrchar\\CYRZHDSC": "\u0496",
      "\\cyrchar\\cyrzhdsc": "\u0497",
      "\\cyrchar\\CYRZDSC": "\u0498",
      "\\cyrchar\\cyrzdsc": "\u0499",
      "\\cyrchar\\CYRKDSC": "\u049A",
      "\\cyrchar\\cyrkdsc": "\u049B",
      "\\cyrchar\\CYRKVCRS": "\u049C",
      "\\cyrchar\\cyrkvcrs": "\u049D",
      "\\cyrchar\\CYRKHCRS": "\u049E",
      "\\cyrchar\\cyrkhcrs": "\u049F",
      "\\cyrchar\\CYRKBEAK": "\u04A0",
      "\\cyrchar\\cyrkbeak": "\u04A1",
      "\\cyrchar\\CYRNDSC": "\u04A2",
      "\\cyrchar\\cyrndsc": "\u04A3",
      "\\cyrchar\\CYRNG": "\u04A4",
      "\\cyrchar\\cyrng": "\u04A5",
      "\\cyrchar\\CYRPHK": "\u04A6",
      "\\cyrchar\\cyrphk": "\u04A7",
      "\\cyrchar\\CYRABHHA": "\u04A8",
      "\\cyrchar\\cyrabhha": "\u04A9",
      "\\cyrchar\\CYRSDSC": "\u04AA",
      "\\cyrchar\\cyrsdsc": "\u04AB",
      "\\cyrchar\\CYRTDSC": "\u04AC",
      "\\cyrchar\\cyrtdsc": "\u04AD",
      "\\cyrchar\\CYRY": "\u04AE",
      "\\cyrchar\\cyry": "\u04AF",
      "\\cyrchar\\CYRYHCRS": "\u04B0",
      "\\cyrchar\\cyryhcrs": "\u04B1",
      "\\cyrchar\\CYRHDSC": "\u04B2",
      "\\cyrchar\\cyrhdsc": "\u04B3",
      "\\cyrchar\\CYRTETSE": "\u04B4",
      "\\cyrchar\\cyrtetse": "\u04B5",
      "\\cyrchar\\CYRCHRDSC": "\u04B6",
      "\\cyrchar\\cyrchrdsc": "\u04B7",
      "\\cyrchar\\CYRCHVCRS": "\u04B8",
      "\\cyrchar\\cyrchvcrs": "\u04B9",
      "\\cyrchar\\CYRSHHA": "\u04BA",
      "\\cyrchar\\cyrshha": "\u04BB",
      "\\cyrchar\\CYRABHCH": "\u04BC",
      "\\cyrchar\\cyrabhch": "\u04BD",
      "\\cyrchar\\CYRABHCHDSC": "\u04BE",
      "\\cyrchar\\cyrabhchdsc": "\u04BF",
      "\\cyrchar\\CYRpalochka": "\u04C0",
      "\\cyrchar\\CYRKHK": "\u04C3",
      "\\cyrchar\\cyrkhk": "\u04C4",
      "\\cyrchar\\CYRNHK": "\u04C7",
      "\\cyrchar\\cyrnhk": "\u04C8",
      "\\cyrchar\\CYRCHLDSC": "\u04CB",
      "\\cyrchar\\cyrchldsc": "\u04CC",
      "\\cyrchar\\CYRAE": "\u04D4",
      "\\cyrchar\\cyrae": "\u04D5",
      "\\cyrchar\\CYRSCHWA": "\u04D8",
      "\\cyrchar\\cyrschwa": "\u04D9",
      "\\cyrchar\\CYRABHDZE": "\u04E0",
      "\\cyrchar\\cyrabhdze": "\u04E1",
      "\\cyrchar\\CYROTLD": "\u04E8",
      "\\cyrchar\\cyrotld": "\u04E9",
      "\\\\backslash": "\u0871",
      "\\textsuperscript{a}": "\u1D43",
      "^{a}": "\u1D43",
      "\\textsuperscript{b}": "\u1D47",
      "^{b}": "\u1D47",
      "\\textsuperscript{d}": "\u1D48",
      "^{d}": "\u1D48",
      "\\textsuperscript{e}": "\u1D49",
      "^{e}": "\u1D49",
      "\\textsuperscript{g}": "\u1D4D",
      "^{g}": "\u1D4D",
      "\\textsuperscript{k}": "\u1D4F",
      "^{k}": "\u1D4F",
      "\\textsuperscript{m}": "\u1D50",
      "^{m}": "\u1D50",
      "\\textsuperscript{o}": "\u1D52",
      "^{o}": "\u1D52",
      "\\textsuperscript{p}": "\u1D56",
      "^{p}": "\u1D56",
      "\\textsuperscript{t}": "\u1D57",
      "^{t}": "\u1D57",
      "\\textsuperscript{u}": "\u1D58",
      "^{u}": "\u1D58",
      "\\textsuperscript{v}": "\u1D5B",
      "^{v}": "\u1D5B",
      "\\textsuperscript{c}": "\u1D9C",
      "^{c}": "\u1D9C",
      "\\textsuperscript{f}": "\u1DA0",
      "^{f}": "\u1DA0",
      "\\textsuperscript{z}": "\u1DBB",
      "^{z}": "\u1DBB",
      "\\.B": "\u1E02",
      "\\.b": "\u1E03",
      "\\d{B}": "\u1E04",
      "\\d{b}": "\u1E05",
      "\\b{B}": "\u1E06",
      "\\b{b}": "\u1E07",
      "\\.D": "\u1E0A",
      "\\.d": "\u1E0B",
      "\\d{D}": "\u1E0C",
      "\\d{d}": "\u1E0D",
      "\\b{D}": "\u1E0E",
      "\\b{d}": "\u1E0F",
      "\\c{D}": "\u1E10",
      "\\c{d}": "\u1E11",
      "\\c{\\u{E}}": "\u1E1C",
      "\\c{\\u{e}}": "\u1E1D",
      "\\.F": "\u1E1E",
      "\\.f": "\u1E1F",
      "\\=G": "\u1E20",
      "\\=g": "\u1E21",
      "\\.H": "\u1E22",
      "\\.h": "\u1E23",
      "\\d{H}": "\u1E24",
      "\\d{h}": "\u1E25",
      '\\"H': "\u1E26",
      '\\"h': "\u1E27",
      "\\c{H}": "\u1E28",
      "\\c{h}": "\u1E29",
      "\\'K": "\u1E30",
      "\\'k": "\u1E31",
      "\\d{K}": "\u1E32",
      "\\d{k}": "\u1E33",
      "\\b{K}": "\u1E34",
      "\\b{k}": "\u1E35",
      "\\d{L}": "\u1E36",
      "\\d{l}": "\u1E37",
      "\\b{L}": "\u1E3A",
      "\\b{l}": "\u1E3B",
      "\\'M": "\u1E3E",
      "\\'m": "\u1E3F",
      "\\.M": "\u1E40",
      "\\.m": "\u1E41",
      "\\d{M}": "\u1E42",
      "\\d{m}": "\u1E43",
      "\\.N": "\u1E44",
      "\\.n": "\u1E45",
      "\\d{N}": "\u1E46",
      "\\d{n}": "\u1E47",
      "\\b{N}": "\u1E48",
      "\\b{n}": "\u1E49",
      "\\'P": "\u1E54",
      "\\'p": "\u1E55",
      "\\.P": "\u1E56",
      "\\.p": "\u1E57",
      "\\.R": "\u1E58",
      "\\.r": "\u1E59",
      "\\d{R}": "\u1E5A",
      "\\d{r}": "\u1E5B",
      "\\b{R}": "\u1E5E",
      "\\b{r}": "\u1E5F",
      "\\.S": "\u1E60",
      "\\.s": "\u1E61",
      "\\d{S}": "\u1E62",
      "\\d{s}": "\u1E63",
      "\\.T": "\u1E6A",
      "\\.t": "\u1E6B",
      "\\d{T}": "\u1E6C",
      "\\d{t}": "\u1E6D",
      "\\b{T}": "\u1E6E",
      "\\b{t}": "\u1E6F",
      "\\~V": "\u1E7C",
      "\\~v": "\u1E7D",
      "\\d{V}": "\u1E7E",
      "\\d{v}": "\u1E7F",
      "\\`W": "\u1E80",
      "\\`w": "\u1E81",
      "\\'W": "\u1E82",
      "\\'w": "\u1E83",
      '\\"W': "\u1E84",
      '\\"w': "\u1E85",
      "\\.W": "\u1E86",
      "\\.w": "\u1E87",
      "\\d{W}": "\u1E88",
      "\\d{w}": "\u1E89",
      "\\.X": "\u1E8A",
      "\\.x": "\u1E8B",
      '\\"X': "\u1E8C",
      '\\"x': "\u1E8D",
      "\\.Y": "\u1E8E",
      "\\.y": "\u1E8F",
      "\\^Z": "\u1E90",
      "\\^z": "\u1E91",
      "\\d{Z}": "\u1E92",
      "\\d{z}": "\u1E93",
      "\\b{Z}": "\u1E94",
      "\\b{z}": "\u1E95",
      "\\b{h}": "\u1E96",
      '\\"t': "\u1E97",
      "\\r{w}": "\u1E98",
      "\\r{y}": "\u1E99",
      "\\d{A}": "\u1EA0",
      "\\d{a}": "\u1EA1",
      "\\d{E}": "\u1EB8",
      "\\d{e}": "\u1EB9",
      "\\~E": "\u1EBC",
      "\\~e": "\u1EBD",
      "\\d{I}": "\u1ECA",
      "\\d{i}": "\u1ECB",
      "\\d{O}": "\u1ECC",
      "\\d{o}": "\u1ECD",
      "\\d{U}": "\u1EE4",
      "\\d{u}": "\u1EE5",
      "\\`Y": "\u1EF2",
      "\\`y": "\u1EF3",
      "\\d{Y}": "\u1EF4",
      "\\d{y}": "\u1EF5",
      "\\~Y": "\u1EF8",
      "\\~y": "\u1EF9",
      "\\hspace{0.6em}": "\u2000",
      "\\quad": "\u2003",
      "\\;": "\u2004",
      "\\hspace{0.25em}": "\u2005",
      "\\hspace{0.166em}": "\u2006",
      "\\hphantom{0}": "\u2007",
      "\\hphantom{,}": "\u2008",
      "\\,": "\u2009",
      "\\mkern1mu": "\u200A",
      "\\hspace{0pt}": "\u200B",
      "{\\aftergroup\\ignorespaces}": "\u200C",
      "\\textendash": "\u2013",
      "\\textemdash": "\u2014",
      "\\rule{1em}{1pt}": "\u2015",
      "\\horizbar": "\u2015",
      "\\Vert": "\u2016",
      "\\twolowline": "\u2017",
      "\\textquoteleft": "\u2018",
      "\\textquoteright": "\u2019",
      "\\Elzreapos": "\u201B",
      "\\textquotedblleft": "\u201C",
      "\\textquotedblright": "\u201D",
      "\\quotedblbase": "\u201F",
      "\\textdagger": "\u2020",
      "\\dagger": "\u2020",
      "\\textdaggerdbl": "\u2021",
      "\\ddagger": "\u2021",
      "\\textbullet": "\u2022",
      "\\enleadertwodots": "\u2025",
      "\\ldots": "\u2026",
      "\\textperthousand": "\u2030",
      "\\textpertenthousand": "\u2031",
      "{'}": "\u2032",
      "{''}": "\u2033",
      "{'''}": "\u2034",
      "\\backprime": "\u2035",
      "\\backdprime": "\u2036",
      "\\backtrprime": "\u2037",
      "\\caretinsert": "\u2038",
      "\\guilsinglleft": "\u2039",
      "\\guilsinglright": "\u203A",
      "\\Exclam": "\u203C",
      "\\hyphenbullet": "\u2043",
      "\\fracslash": "\u2044",
      "\\Question": "\u2047",
      "\\closure": "\u2050",
      "\\:": "\u205F",
      "\\nolinebreak": "\u2060",
      "^{0}": "\u2070",
      "\\textsuperscript{i}": "\u2071",
      "^{i}": "\u2071",
      "^{4}": "\u2074",
      "^{5}": "\u2075",
      "^{6}": "\u2076",
      "^{7}": "\u2077",
      "^{8}": "\u2078",
      "^{9}": "\u2079",
      "^{+}": "\u207A",
      "^{-}": "\u207B",
      "^{=}": "\u207C",
      "^{(}": "\u207D",
      "^{)}": "\u207E",
      "\\textsuperscript{n}": "\u207F",
      "^{n}": "\u207F",
      "_{0}": "\u2080",
      "_{1}": "\u2081",
      "_{2}": "\u2082",
      "_{3}": "\u2083",
      "_{4}": "\u2084",
      "_{5}": "\u2085",
      "_{6}": "\u2086",
      "_{7}": "\u2087",
      "_{8}": "\u2088",
      "_{9}": "\u2089",
      "_{+}": "\u208A",
      "_{-}": "\u208B",
      "_{=}": "\u208C",
      "_{(}": "\u208D",
      "_{)}": "\u208E",
      "\\textsubscript{a}": "\u2090",
      "_{a}": "\u2090",
      "\\textsubscript{e}": "\u2091",
      "_{e}": "\u2091",
      "\\textsubscript{o}": "\u2092",
      "_{o}": "\u2092",
      "\\textsubscript{x}": "\u2093",
      "_{x}": "\u2093",
      "\\textsubscript{\\textschwa}": "\u2094",
      "\\textsubscript{h}": "\u2095",
      "_{h}": "\u2095",
      "\\textsubscript{k}": "\u2096",
      "_{k}": "\u2096",
      "\\textsubscript{l}": "\u2097",
      "_{l}": "\u2097",
      "\\textsubscript{m}": "\u2098",
      "_{m}": "\u2098",
      "\\textsubscript{n}": "\u2099",
      "_{n}": "\u2099",
      "\\textsubscript{p}": "\u209A",
      "_{p}": "\u209A",
      "\\textsubscript{s}": "\u209B",
      "_{s}": "\u209B",
      "\\textsubscript{t}": "\u209C",
      "_{t}": "\u209C",
      "\\ensuremath{\\Elzpes}": "\u20A7",
      "\\texteuro": "\u20AC",
      "\\euro": "\u20AC",
      "\\lvec": "\u20D0",
      "\\vertoverlay": "\u20D2",
      "\\LVec": "\u20D6",
      "\\vec": "\u20D7",
      "\\dddot": "\u20DB",
      "\\ddddot": "\u20DC",
      "\\enclosecircle": "\u20DD",
      "\\enclosesquare": "\u20DE",
      "\\enclosediamond": "\u20DF",
      "\\overleftrightarrow": "\u20E1",
      "\\enclosetriangle": "\u20E4",
      "\\annuity": "\u20E7",
      "\\threeunderdot": "\u20E8",
      "\\widebridgeabove": "\u20E9",
      "\\underrightharpoondown": "\u20EC",
      "\\underleftharpoondown": "\u20ED",
      "\\underleftarrow": "\u20EE",
      "\\underrightarrow": "\u20EF",
      "\\asteraccent": "\u20F0",
      "\\mathbb{C}": "\u2102",
      "\\textcelsius": "\u2103",
      "\\Euler": "\u2107",
      "\\mathscr{g}": "\u210A",
      "\\mathscr{H}": "\u210B",
      "\\mathfrak{H}": "\u210C",
      "\\mathbb{H}": "\u210D",
      "\\Planckconst": "\u210E",
      "\\hslash": "\u210F",
      "\\mathscr{I}": "\u2110",
      "\\mathfrak{I}": "\u2111",
      "\\mathscr{L}": "\u2112",
      "\\mathscr{l}": "\u2113",
      "\\mathbb{N}": "\u2115",
      "\\cyrchar\\textnumero": "\u2116",
      "\\textcircledP": "\u2117",
      "\\wp": "\u2118",
      "\\mathbb{P}": "\u2119",
      "\\mathbb{Q}": "\u211A",
      "\\mathscr{R}": "\u211B",
      "\\mathfrak{R}": "\u211C",
      "\\mathbb{R}": "\u211D",
      "\\Elzxrat": "\u211E",
      "\\textservicemark": "\u2120",
      "\\texttrademark": "\u2122",
      "\\mathbb{Z}": "\u2124",
      "\\mho": "\u2127",
      "\\mathfrak{Z}": "\u2128",
      "\\textriota": "\u2129",
      "\\Angstroem": "\u212B",
      "\\mathscr{B}": "\u212C",
      "\\mathfrak{C}": "\u212D",
      "\\textestimated": "\u212E",
      "\\mathscr{e}": "\u212F",
      "\\mathscr{E}": "\u2130",
      "\\mathscr{F}": "\u2131",
      "\\Finv": "\u2132",
      "\\mathscr{M}": "\u2133",
      "\\mathscr{o}": "\u2134",
      "\\aleph": "\u2135",
      "\\beth": "\u2136",
      "\\gimel": "\u2137",
      "\\daleth": "\u2138",
      "\\mathbb{\\pi}": "\u213C",
      "\\mathbb{\\gamma}": "\u213D",
      "\\mathbb{\\Gamma}": "\u213E",
      "\\mathbb{\\Pi}": "\u213F",
      "\\mathbb{\\Sigma}": "\u2140",
      "\\Game": "\u2141",
      "\\sansLturned": "\u2142",
      "\\sansLmirrored": "\u2143",
      "\\Yup": "\u2144",
      "\\CapitalDifferentialD": "\u2145",
      "\\DifferentialD": "\u2146",
      "\\ExponetialE": "\u2147",
      "\\ComplexI": "\u2148",
      "\\ComplexJ": "\u2149",
      "\\PropertyLine": "\u214A",
      "\\invamp": "\u214B",
      "\\frac{1}{7}": "\u2150",
      "\\textfrac{1}{7}": "\u2150",
      "\\frac{1}{9}": "\u2151",
      "\\textfrac{1}{9}": "\u2151",
      "\\frac{1}{10}": "\u2152",
      "\\textfrac{1}{10}": "\u2152",
      "\\frac{1}{3}": "\u2153",
      "\\textfrac{1}{3}": "\u2153",
      "\\frac{2}{3}": "\u2154",
      "\\textfrac{2}{3}": "\u2154",
      "\\frac{1}{5}": "\u2155",
      "\\textfrac{1}{5}": "\u2155",
      "\\frac{2}{5}": "\u2156",
      "\\textfrac{2}{5}": "\u2156",
      "\\frac{3}{5}": "\u2157",
      "\\textfrac{3}{5}": "\u2157",
      "\\frac{4}{5}": "\u2158",
      "\\textfrac{4}{5}": "\u2158",
      "\\frac{1}{6}": "\u2159",
      "\\textfrac{1}{6}": "\u2159",
      "\\frac{5}{6}": "\u215A",
      "\\textfrac{5}{6}": "\u215A",
      "\\frac{1}{8}": "\u215B",
      "\\textfrac{1}{8}": "\u215B",
      "\\frac{3}{8}": "\u215C",
      "\\textfrac{3}{8}": "\u215C",
      "\\frac{5}{8}": "\u215D",
      "\\textfrac{5}{8}": "\u215D",
      "\\frac{7}{8}": "\u215E",
      "\\textfrac{7}{8}": "\u215E",
      "\\frac{1}": "\u215F",
      "\\textfrac{1}": "\u215F",
      "\\frac{0}{3}": "\u2189",
      "\\textfrac{0}{3}": "\u2189",
      "\\leftarrow": "\u2190",
      "\\uparrow": "\u2191",
      "\\textrightarrow": "\u2192",
      "\\rightarrow": "\u2192",
      "\\to": "\u2192",
      "\\downarrow": "\u2193",
      "\\leftrightarrow": "\u2194",
      "\\updownarrow": "\u2195",
      "\\nwarrow": "\u2196",
      "\\nearrow": "\u2197",
      "\\searrow": "\u2198",
      "\\swarrow": "\u2199",
      "\\nleftarrow": "\u219A",
      "\\nrightarrow": "\u219B",
      "\\arrowwaveleft": "\u219C",
      "\\arrowwaveright": "\u219D",
      "\\twoheadleftarrow": "\u219E",
      "\\twoheaduparrow": "\u219F",
      "\\twoheadrightarrow": "\u21A0",
      "\\twoheaddownarrow": "\u21A1",
      "\\leftarrowtail": "\u21A2",
      "\\rightarrowtail": "\u21A3",
      "\\mapsfrom": "\u21A4",
      "\\MapsUp": "\u21A5",
      "\\mapsto": "\u21A6",
      "\\MapsDown": "\u21A7",
      "\\updownarrowbar": "\u21A8",
      "\\hookleftarrow": "\u21A9",
      "\\hookrightarrow": "\u21AA",
      "\\looparrowleft": "\u21AB",
      "\\looparrowright": "\u21AC",
      "\\leftrightsquigarrow": "\u21AD",
      "\\nleftrightarrow": "\u21AE",
      "\\lightning": "\u21AF",
      "\\Lsh": "\u21B0",
      "\\Rsh": "\u21B1",
      "\\dlsh": "\u21B2",
      "\\reflectbox{\\carriagereturn}": "\u21B3",
      "\\linefeed": "\u21B4",
      "\\carriagereturn": "\u21B5",
      "\\curvearrowleft": "\u21B6",
      "\\curvearrowright": "\u21B7",
      "\\barovernorthwestarrow": "\u21B8",
      "\\barleftarrowrightarrowba": "\u21B9",
      "\\circlearrowleft": "\u21BA",
      "\\circlearrowright": "\u21BB",
      "\\leftharpoonup": "\u21BC",
      "\\leftharpoondown": "\u21BD",
      "\\upharpoonright": "\u21BE",
      "\\upharpoonleft": "\u21BF",
      "\\rightharpoonup": "\u21C0",
      "\\rightharpoondown": "\u21C1",
      "\\downharpoonright": "\u21C2",
      "\\downharpoonleft": "\u21C3",
      "\\rightleftarrows": "\u21C4",
      "\\dblarrowupdown": "\u21C5",
      "\\leftrightarrows": "\u21C6",
      "\\leftleftarrows": "\u21C7",
      "\\upuparrows": "\u21C8",
      "\\rightrightarrows": "\u21C9",
      "\\downdownarrows": "\u21CA",
      "\\leftrightharpoons": "\u21CB",
      "\\rightleftharpoons": "\u21CC",
      "\\nLeftarrow": "\u21CD",
      "\\nLeftrightarrow": "\u21CE",
      "\\nRightarrow": "\u21CF",
      "\\Leftarrow": "\u21D0",
      "\\Uparrow": "\u21D1",
      "\\Rightarrow": "\u21D2",
      "\\Downarrow": "\u21D3",
      "\\Leftrightarrow": "\u21D4",
      "\\Updownarrow": "\u21D5",
      "\\Nwarrow": "\u21D6",
      "\\Nearrow": "\u21D7",
      "\\Searrow": "\u21D8",
      "\\Swarrow": "\u21D9",
      "\\Lleftarrow": "\u21DA",
      "\\Rrightarrow": "\u21DB",
      "\\leftsquigarrow": "\u21DC",
      "\\rightsquigarrow": "\u21DD",
      "\\nHuparrow": "\u21DE",
      "\\nHdownarrow": "\u21DF",
      "\\dashleftarrow": "\u21E0",
      "\\updasharrow": "\u21E1",
      "\\dashrightarrow": "\u21E2",
      "\\downdasharrow": "\u21E3",
      "\\LeftArrowBar": "\u21E4",
      "\\RightArrowBar": "\u21E5",
      "\\leftwhitearrow": "\u21E6",
      "\\upwhitearrow": "\u21E7",
      "\\rightwhitearrow": "\u21E8",
      "\\downwhitearrow": "\u21E9",
      "\\whitearrowupfrombar": "\u21EA",
      "\\circleonrightarrow": "\u21F4",
      "\\DownArrowUpArrow": "\u21F5",
      "\\rightthreearrows": "\u21F6",
      "\\nvleftarrow": "\u21F7",
      "\\pfun": "\u21F8",
      "\\nvleftrightarrow": "\u21F9",
      "\\nVleftarrow": "\u21FA",
      "\\ffun": "\u21FB",
      "\\nVleftrightarrow": "\u21FC",
      "\\leftarrowtriangle": "\u21FD",
      "\\rightarrowtriangle": "\u21FE",
      "\\leftrightarrowtriangle": "\u21FF",
      "\\forall": "\u2200",
      "\\complement": "\u2201",
      "\\partial": "\u2202",
      "\\exists": "\u2203",
      "\\nexists": "\u2204",
      "\\varnothing": "\u2205",
      "\\increment": "\u2206",
      "\\nabla": "\u2207",
      "\\in": "\u2208",
      "\\not\\in": "\u2209",
      "\\smallin": "\u220A",
      "\\ni": "\u220B",
      "\\not\\ni": "\u220C",
      "\\smallni": "\u220D",
      "\\QED": "\u220E",
      "\\prod": "\u220F",
      "\\coprod": "\u2210",
      "\\sum": "\u2211",
      "\\mp": "\u2213",
      "\\dotplus": "\u2214",
      "\\setminus": "\u2216",
      "{_\\ast}": "\u2217",
      "\\circ": "\u2218",
      "\\bullet": "\u2219",
      "\\surd": "\u221A",
      "\\sqrt[3]": "\u221B",
      "\\sqrt[4]": "\u221C",
      "\\propto": "\u221D",
      "\\infty": "\u221E",
      "\\rightangle": "\u221F",
      "\\angle": "\u2220",
      "\\measuredangle": "\u2221",
      "\\sphericalangle": "\u2222",
      "\\mid": "\u2223",
      "\\nmid": "\u2224",
      "\\parallel": "\u2225",
      "\\nparallel": "\u2226",
      "\\wedge": "\u2227",
      "\\vee": "\u2228",
      "\\cap": "\u2229",
      "\\cup": "\u222A",
      "\\int": "\u222B",
      "{\\int\\!\\int}": "\u222C",
      "{\\int\\!\\int\\!\\int}": "\u222D",
      "\\oint": "\u222E",
      "\\surfintegral": "\u222F",
      "\\volintegral": "\u2230",
      "\\clwintegral": "\u2231",
      "\\lcirclerightint": "\u2232",
      "\\rcirclerightint": "\u2233",
      "\\therefore": "\u2234",
      "\\because": "\u2235",
      "\\Colon": "\u2237",
      "\\dotdiv": "\u2238",
      "\\eqcolon": "\u2239",
      "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}": "\u223A",
      "\\homothetic": "\u223B",
      "\\sim": "\u223C",
      "\\backsim": "\u223D",
      "\\lazysinv": "\u223E",
      "\\AC": "\u223F",
      "\\wr": "\u2240",
      "\\not\\sim": "\u2241",
      "\\texteqsim": "\u2242",
      "\\NotEqualTilde": "\u2242\u0338",
      "\\simeq": "\u2243",
      "\\not\\simeq": "\u2244",
      "\\cong": "\u2245",
      "\\approxnotequal": "\u2246",
      "\\not\\cong": "\u2247",
      "\\approx": "\u2248",
      "\\not\\approx": "\u2249",
      "\\approxeq": "\u224A",
      "\\tildetrpl": "\u224B",
      "\\not\\apid": "\u224B\u0338",
      "\\allequal": "\u224C",
      "\\asymp": "\u224D",
      "\\Bumpeq": "\u224E",
      "\\NotHumpDownHump": "\u224E\u0338",
      "\\bumpeq": "\u224F",
      "\\NotHumpEqual": "\u224F\u0338",
      "\\doteq": "\u2250",
      "\\not\\doteq": "\u2250\u0338",
      "\\doteqdot": "\u2251",
      "\\fallingdotseq": "\u2252",
      "\\risingdotseq": "\u2253",
      "\\coloneq": "\u2254",
      "\\eqcirc": "\u2256",
      "\\circeq": "\u2257",
      "\\arceq": "\u2258",
      "\\estimates": "\u2259",
      "\\starequal": "\u225B",
      "\\triangleq": "\u225C",
      "\\eqdef": "\u225D",
      "\\measeq": "\u225E",
      "\\neq": "\u2260",
      "\\equiv": "\u2261",
      "\\not\\equiv": "\u2262",
      "\\Equiv": "\u2263",
      "\\leq": "\u2264",
      "\\le": "\u2264",
      "\\geq": "\u2265",
      "\\leqq": "\u2266",
      "\\geqq": "\u2267",
      "\\lneqq": "\u2268",
      "\\lvertneqq": "\u2268\uFE00",
      "\\gneqq": "\u2269",
      "\\gvertneqq": "\u2269\uFE00",
      "\\ll": "\u226A",
      "\\NotLessLess": "\u226A\u0338",
      "\\gg": "\u226B",
      "\\NotGreaterGreater": "\u226B\u0338",
      "\\between": "\u226C",
      "{\\not\\kern-0.3em\\times}": "\u226D",
      "\\not<": "\u226E",
      "\\not>": "\u226F",
      "\\not\\leq": "\u2270",
      "\\not\\geq": "\u2271",
      "\\lessequivlnt": "\u2272",
      "\\greaterequivlnt": "\u2273",
      "\\lessgtr": "\u2276",
      "\\gtrless": "\u2277",
      "\\notlessgreater": "\u2278",
      "\\notgreaterless": "\u2279",
      "\\prec": "\u227A",
      "\\succ": "\u227B",
      "\\preccurlyeq": "\u227C",
      "\\succcurlyeq": "\u227D",
      "\\NotPrecedesTilde": "\u227E\u0338",
      "\\NotSucceedsTilde": "\u227F\u0338",
      "\\not\\prec": "\u2280",
      "\\not\\succ": "\u2281",
      "\\subset": "\u2282",
      "\\supset": "\u2283",
      "\\not\\subset": "\u2284",
      "\\not\\supset": "\u2285",
      "\\subseteq": "\u2286",
      "\\supseteq": "\u2287",
      "\\not\\subseteq": "\u2288",
      "\\not\\supseteq": "\u2289",
      "\\subsetneq": "\u228A",
      "\\varsubsetneqq": "\u228A\uFE00",
      "\\supsetneq": "\u228B",
      "\\varsupsetneq": "\u228B\uFE00",
      "\\cupleftarrow": "\u228C",
      "\\cupdot": "\u228D",
      "\\uplus": "\u228E",
      "\\sqsubset": "\u228F",
      "\\NotSquareSubset": "\u228F\u0338",
      "\\sqsupset": "\u2290",
      "\\NotSquareSuperset": "\u2290\u0338",
      "\\sqsubseteq": "\u2291",
      "\\sqsupseteq": "\u2292",
      "\\sqcap": "\u2293",
      "\\sqcup": "\u2294",
      "\\oplus": "\u2295",
      "\\ominus": "\u2296",
      "\\otimes": "\u2297",
      "\\oslash": "\u2298",
      "\\odot": "\u2299",
      "\\circledcirc": "\u229A",
      "\\circledast": "\u229B",
      "\\circledequal": "\u229C",
      "\\circleddash": "\u229D",
      "\\boxplus": "\u229E",
      "\\boxminus": "\u229F",
      "\\boxtimes": "\u22A0",
      "\\boxdot": "\u22A1",
      "\\vdash": "\u22A2",
      "\\dashv": "\u22A3",
      "\\top": "\u22A4",
      "\\assert": "\u22A6",
      "\\truestate": "\u22A7",
      "\\forcesextra": "\u22A8",
      "\\Vdash": "\u22A9",
      "\\Vvdash": "\u22AA",
      "\\VDash": "\u22AB",
      "\\nvdash": "\u22AC",
      "\\nvDash": "\u22AD",
      "\\nVdash": "\u22AE",
      "\\nVDash": "\u22AF",
      "\\prurel": "\u22B0",
      "\\scurel": "\u22B1",
      "\\vartriangleleft": "\u22B2",
      "\\vartriangleright": "\u22B3",
      "\\trianglelefteq": "\u22B4",
      "\\trianglerighteq": "\u22B5",
      "\\original": "\u22B6",
      "\\image": "\u22B7",
      "\\multimap": "\u22B8",
      "\\hermitconjmatrix": "\u22B9",
      "\\intercal": "\u22BA",
      "\\veebar": "\u22BB",
      "\\barvee": "\u22BD",
      "\\rightanglearc": "\u22BE",
      "\\varlrtriangle": "\u22BF",
      "\\bigcap": "\u22C2",
      "\\bigcup": "\u22C3",
      "\\diamond": "\u22C4",
      "\\cdot": "\u22C5",
      "\\star": "\u22C6",
      "\\divideontimes": "\u22C7",
      "\\bowtie": "\u22C8",
      "\\ltimes": "\u22C9",
      "\\rtimes": "\u22CA",
      "\\leftthreetimes": "\u22CB",
      "\\rightthreetimes": "\u22CC",
      "\\backsimeq": "\u22CD",
      "\\curlyvee": "\u22CE",
      "\\curlywedge": "\u22CF",
      "\\Subset": "\u22D0",
      "\\Supset": "\u22D1",
      "\\Cap": "\u22D2",
      "\\Cup": "\u22D3",
      "\\pitchfork": "\u22D4",
      "\\hash": "\u22D5",
      "\\lessdot": "\u22D6",
      "\\gtrdot": "\u22D7",
      "\\verymuchless": "\u22D8",
      "\\verymuchgreater": "\u22D9",
      "\\lesseqgtr": "\u22DA",
      "\\gtreqless": "\u22DB",
      "\\eqless": "\u22DC",
      "\\eqgtr": "\u22DD",
      "\\curlyeqprec": "\u22DE",
      "\\curlyeqsucc": "\u22DF",
      "\\npreceq": "\u22E0",
      "\\nsucceq": "\u22E1",
      "\\not\\sqsubseteq": "\u22E2",
      "\\not\\sqsupseteq": "\u22E3",
      "\\sqsubsetneq": "\u22E4",
      "\\Elzsqspne": "\u22E5",
      "\\lnsim": "\u22E6",
      "\\gnsim": "\u22E7",
      "\\precedesnotsimilar": "\u22E8",
      "\\succnsim": "\u22E9",
      "\\ntriangleleft": "\u22EA",
      "\\ntriangleright": "\u22EB",
      "\\ntrianglelefteq": "\u22EC",
      "\\ntrianglerighteq": "\u22ED",
      "\\vdots": "\u22EE",
      "\\cdots": "\u22EF",
      "\\upslopeellipsis": "\u22F0",
      "\\downslopeellipsis": "\u22F1",
      "\\disin": "\u22F2",
      "\\varisins": "\u22F3",
      "\\isins": "\u22F4",
      "\\isindot": "\u22F5",
      "\\barin": "\u22F6",
      "\\isinobar": "\u22F7",
      "\\isinvb": "\u22F8",
      "\\isinE": "\u22F9",
      "\\nisd": "\u22FA",
      "\\varnis": "\u22FB",
      "\\nis": "\u22FC",
      "\\varniobar": "\u22FD",
      "\\niobar": "\u22FE",
      "\\bagmember": "\u22FF",
      "\\diameter": "\u2300",
      "\\house": "\u2302",
      "\\barwedge": "\u2305",
      "\\varbarwedge": "\u2305",
      "\\perspcorrespond": "\u2306",
      "\\lceil": "\u2308",
      "\\rceil": "\u2309",
      "\\lfloor": "\u230A",
      "\\rfloor": "\u230B",
      "\\invneg": "\u2310",
      "\\wasylozenge": "\u2311",
      "\\profline": "\u2312",
      "\\profsurf": "\u2313",
      "\\recorder": "\u2315",
      '{\\mathchar"2208}': "\u2316",
      "\\viewdata": "\u2317",
      "\\turnednot": "\u2319",
      "\\ulcorner": "\u231C",
      "\\urcorner": "\u231D",
      "\\llcorner": "\u231E",
      "\\lrcorner": "\u231F",
      "\\inttop": "\u2320",
      "\\intbottom": "\u2321",
      "\\frown": "\u2322",
      "\\smile": "\u2323",
      "\\varhexagonlrbonds": "\u232C",
      "\\conictaper": "\u2332",
      "\\topbot": "\u2336",
      "\\APLinv": "\u2339",
      "\\notslash": "\u233F",
      "\\notbackslash": "\u2340",
      "\\APLleftarrowbox": "\u2347",
      "\\APLrightarrowbox": "\u2348",
      "\\invdiameter": "\u2349",
      "\\APLuparrowbox": "\u2350",
      "\\APLboxupcaret": "\u2353",
      "\\APLdownarrowbox": "\u2357",
      "\\APLcomment": "\u235D",
      "\\APLinput": "\u235E",
      "\\APLlog": "\u235F",
      "\\APLboxquestion": "\u2370",
      "\\rangledownzigzagarrow": "\u237C",
      "\\hexagon": "\u2394",
      "\\lparenuend": "\u239B",
      "\\lparenextender": "\u239C",
      "\\lparenlend": "\u239D",
      "\\rparenuend": "\u239E",
      "\\rparenextender": "\u239F",
      "\\rparenlend": "\u23A0",
      "\\lbrackuend": "\u23A1",
      "\\lbrackextender": "\u23A2",
      "\\Elzdlcorn": "\u23A3",
      "\\rbrackuend": "\u23A4",
      "\\rbrackextender": "\u23A5",
      "\\rbracklend": "\u23A6",
      "\\lbraceuend": "\u23A7",
      "\\lbracemid": "\u23A8",
      "\\lbracelend": "\u23A9",
      "\\vbraceextender": "\u23AA",
      "\\rbraceuend": "\u23AB",
      "\\rbracemid": "\u23AC",
      "\\rbracelend": "\u23AD",
      "\\intextender": "\u23AE",
      "\\harrowextender": "\u23AF",
      "\\lmoustache": "\u23B0",
      "\\rmoustache": "\u23B1",
      "\\sumtop": "\u23B2",
      "\\sumbottom": "\u23B3",
      "\\overbracket": "\u23B4",
      "\\underbracket": "\u23B5",
      "\\bbrktbrk": "\u23B6",
      "\\sqrtbottom": "\u23B7",
      "\\lvboxline": "\u23B8",
      "\\rvboxline": "\u23B9",
      "\\varcarriagereturn": "\u23CE",
      "\\overparen": "\u23DC",
      "\\underparen": "\u23DD",
      "\\overbrace": "\u23DE",
      "\\underbrace": "\u23DF",
      "\\obrbrak": "\u23E0",
      "\\ubrbrak": "\u23E1",
      "\\trapezium": "\u23E2",
      "\\benzenr": "\u23E3",
      "\\strns": "\u23E4",
      "\\fltns": "\u23E5",
      "\\accurrent": "\u23E6",
      "\\elinters": "\u23E7",
      "\\ding{172}": "\u2460",
      "\\ding{173}": "\u2461",
      "\\ding{174}": "\u2462",
      "\\ding{175}": "\u2463",
      "\\ding{176}": "\u2464",
      "\\ding{177}": "\u2465",
      "\\ding{178}": "\u2466",
      "\\ding{179}": "\u2467",
      "\\ding{180}": "\u2468",
      "\\ding{181}": "\u2469",
      "\\circledS": "\u24C8",
      "\\Elzdshfnc": "\u2506",
      "\\Elzsqfnw": "\u2519",
      "\\diagup": "\u2571",
      "\\blockuphalf": "\u2580",
      "\\blocklowhalf": "\u2584",
      "\\blockfull": "\u2588",
      "\\blocklefthalf": "\u258C",
      "\\blockrighthalf": "\u2590",
      "\\blockqtrshaded": "\u2591",
      "\\blockhalfshaded": "\u2592",
      "\\blockthreeqtrshaded": "\u2593",
      "\\ding{110}": "\u25A0",
      "\\mdlgblksquare": "\u25A0",
      "\\square": "\u25A1",
      "\\Box": "\u25A1",
      "\\squoval": "\u25A2",
      "\\blackinwhitesquare": "\u25A3",
      "\\squarehfill": "\u25A4",
      "\\squarevfill": "\u25A5",
      "\\squarehvfill": "\u25A6",
      "\\squarenwsefill": "\u25A7",
      "\\squareneswfill": "\u25A8",
      "\\squarecrossfill": "\u25A9",
      "\\smwhtsquare": "\u25AB",
      "\\hrectangleblack": "\u25AC",
      "\\fbox{~~}": "\u25AD",
      "\\vrectangleblack": "\u25AE",
      "\\Elzvrecto": "\u25AF",
      "\\parallelogramblack": "\u25B0",
      "\\ding{115}": "\u25B2",
      "\\bigblacktriangleup": "\u25B2",
      "\\bigtriangleup": "\u25B3",
      "\\blacktriangle": "\u25B4",
      "\\vartriangle": "\u25B5",
      "\\RHD": "\u25B6",
      "\\rhd": "\u25B7",
      "\\blacktriangleright": "\u25B8",
      "\\triangleright": "\u25B9",
      "\\blackpointerright": "\u25BA",
      "\\whitepointerright": "\u25BB",
      "\\ding{116}": "\u25BC",
      "\\bigblacktriangledown": "\u25BC",
      "\\bigtriangledown": "\u25BD",
      "\\blacktriangledown": "\u25BE",
      "\\triangledown": "\u25BF",
      "\\LHD": "\u25C0",
      "\\lhd": "\u25C1",
      "\\blacktriangleleft": "\u25C2",
      "\\triangleleft": "\u25C3",
      "\\blackpointerleft": "\u25C4",
      "\\whitepointerleft": "\u25C5",
      "\\ding{117}": "\u25C6",
      "\\Diamondblack": "\u25C6",
      "\\Diamond": "\u25C7",
      "\\blackinwhitediamond": "\u25C8",
      "\\fisheye": "\u25C9",
      "\\lozenge": "\u25CA",
      "\\dottedcircle": "\u25CC",
      "\\circlevertfill": "\u25CD",
      "\\bullseye": "\u25CE",
      "\\ding{108}": "\u25CF",
      "\\CIRCLE": "\u25CF",
      "\\Elzcirfl": "\u25D0",
      "\\Elzcirfr": "\u25D1",
      "\\Elzcirfb": "\u25D2",
      "\\circletophalfblack": "\u25D3",
      "\\circleurquadblack": "\u25D4",
      "\\blackcircleulquadwhite": "\u25D5",
      "\\LEFTCIRCLE": "\u25D6",
      "\\ding{119}": "\u25D7",
      "\\RIGHTCIRCLE": "\u25D7",
      "\\Elzrvbull": "\u25D8",
      "\\inversewhitecircle": "\u25D9",
      "\\invwhiteupperhalfcircle": "\u25DA",
      "\\invwhitelowerhalfcircle": "\u25DB",
      "\\ularc": "\u25DC",
      "\\urarc": "\u25DD",
      "\\lrarc": "\u25DE",
      "\\llarc": "\u25DF",
      "\\topsemicircle": "\u25E0",
      "\\botsemicircle": "\u25E1",
      "\\lrblacktriangle": "\u25E2",
      "\\llblacktriangle": "\u25E3",
      "\\ulblacktriangle": "\u25E4",
      "\\urblacktriangle": "\u25E5",
      "\\smwhtcircle": "\u25E6",
      "\\Elzsqfl": "\u25E7",
      "\\Elzsqfr": "\u25E8",
      "\\squareulblack": "\u25E9",
      "\\Elzsqfse": "\u25EA",
      "\\boxbar": "\u25EB",
      "\\trianglecdot": "\u25EC",
      "\\triangleleftblack": "\u25ED",
      "\\trianglerightblack": "\u25EE",
      "\\bigcirc": "\u25EF",
      "\\squareulquad": "\u25F0",
      "\\squarellquad": "\u25F1",
      "\\squarelrquad": "\u25F2",
      "\\squareurquad": "\u25F3",
      "\\circleulquad": "\u25F4",
      "\\circlellquad": "\u25F5",
      "\\circlelrquad": "\u25F6",
      "\\circleurquad": "\u25F7",
      "\\ultriangle": "\u25F8",
      "\\urtriangle": "\u25F9",
      "\\lltriangle": "\u25FA",
      "\\mdsmwhtsquare": "\u25FD",
      "\\mdsmblksquare": "\u25FE",
      "\\lrtriangle": "\u25FF",
      "\\ding{72}": "\u2605",
      "\\bigstar": "\u2605",
      "\\ding{73}": "\u2606",
      "\\bigwhitestar": "\u2606",
      "\\Sun": "\u2609",
      "\\ding{37}": "\u260E",
      "\\Square": "\u2610",
      "\\CheckedBox": "\u2611",
      "\\XBox": "\u2612",
      "\\steaming": "\u2615",
      "\\ding{42}": "\u261B",
      "\\ding{43}": "\u261E",
      "\\pointright": "\u261E",
      "\\skull": "\u2620",
      "\\danger": "\u2621",
      "\\radiation": "\u2622",
      "\\biohazard": "\u2623",
      "\\yinyang": "\u262F",
      "\\frownie": "\u2639",
      "\\smiley": "\u263A",
      "\\blacksmiley": "\u263B",
      "\\sun": "\u263C",
      "\\rightmoon": "\u263D",
      "\\leftmoon": "\u263E",
      "\\mercury": "\u263F",
      "\\venus": "\u2640",
      "\\female": "\u2640",
      "\\earth": "\u2641",
      "\\male": "\u2642",
      "\\jupiter": "\u2643",
      "\\saturn": "\u2644",
      "\\uranus": "\u2645",
      "\\neptune": "\u2646",
      "\\pluto": "\u2647",
      "\\aries": "\u2648",
      "\\taurus": "\u2649",
      "\\gemini": "\u264A",
      "\\cancer": "\u264B",
      "\\leo": "\u264C",
      "\\virgo": "\u264D",
      "\\libra": "\u264E",
      "\\scorpio": "\u264F",
      "\\sagittarius": "\u2650",
      "\\capricornus": "\u2651",
      "\\aquarius": "\u2652",
      "\\pisces": "\u2653",
      "\\ding{171}": "\u2660",
      "\\spadesuit": "\u2660",
      "\\heartsuit": "\u2661",
      "\\ding{168}": "\u2663",
      "\\clubsuit": "\u2663",
      "\\varspadesuit": "\u2664",
      "\\ding{170}": "\u2665",
      "\\varheartsuit": "\u2665",
      "\\ding{169}": "\u2666",
      "\\vardiamondsuit": "\u2666",
      "\\varclubsuit": "\u2667",
      "\\quarternote": "\u2669",
      "\\eighthnote": "\u266A",
      "\\twonotes": "\u266B",
      "\\sixteenthnote": "\u266C",
      "\\flat": "\u266D",
      "\\natural": "\u266E",
      "\\sharp": "\u266F",
      "\\recycle": "\u267B",
      "\\acidfree": "\u267E",
      "\\dicei": "\u2680",
      "\\diceii": "\u2681",
      "\\diceiii": "\u2682",
      "\\diceiv": "\u2683",
      "\\dicev": "\u2684",
      "\\dicevi": "\u2685",
      "\\circledrightdot": "\u2686",
      "\\circledtwodots": "\u2687",
      "\\blackcircledrightdot": "\u2688",
      "\\blackcircledtwodots": "\u2689",
      "\\anchor": "\u2693",
      "\\swords": "\u2694",
      "\\warning": "\u26A0",
      "\\Hermaphrodite": "\u26A5",
      "\\medcirc": "\u26AA",
      "\\medbullet": "\u26AB",
      "\\mdsmwhtcircle": "\u26AC",
      "\\neuter": "\u26B2",
      "\\ding{33}": "\u2701",
      "\\ding{34}": "\u2702",
      "\\ding{35}": "\u2703",
      "\\ding{36}": "\u2704",
      "\\ding{38}": "\u2706",
      "\\ding{39}": "\u2707",
      "\\ding{40}": "\u2708",
      "\\ding{41}": "\u2709",
      "\\ding{44}": "\u270C",
      "\\ding{45}": "\u270D",
      "\\ding{46}": "\u270E",
      "\\pencil": "\u270E",
      "\\ding{47}": "\u270F",
      "\\ding{48}": "\u2710",
      "\\ding{49}": "\u2711",
      "\\ding{50}": "\u2712",
      "\\ding{51}": "\u2713",
      "\\checkmark": "\u2713",
      "\\ding{52}": "\u2714",
      "\\ding{53}": "\u2715",
      "\\ding{54}": "\u2716",
      "\\ding{55}": "\u2717",
      "\\ballotx": "\u2717",
      "\\ding{56}": "\u2718",
      "\\ding{57}": "\u2719",
      "\\ding{58}": "\u271A",
      "\\ding{59}": "\u271B",
      "\\ding{60}": "\u271C",
      "\\ding{61}": "\u271D",
      "\\ding{62}": "\u271E",
      "\\ding{63}": "\u271F",
      "\\ding{64}": "\u2720",
      "\\maltese": "\u2720",
      "\\ding{65}": "\u2721",
      "\\ding{66}": "\u2722",
      "\\ding{67}": "\u2723",
      "\\ding{68}": "\u2724",
      "\\ding{69}": "\u2725",
      "\\ding{70}": "\u2726",
      "\\ding{71}": "\u2727",
      "\\ding{74}": "\u272A",
      "\\circledstar": "\u272A",
      "\\ding{75}": "\u272B",
      "\\ding{76}": "\u272C",
      "\\ding{77}": "\u272D",
      "\\ding{78}": "\u272E",
      "\\ding{79}": "\u272F",
      "\\ding{80}": "\u2730",
      "\\ding{81}": "\u2731",
      "\\ding{82}": "\u2732",
      "\\ding{83}": "\u2733",
      "\\ding{84}": "\u2734",
      "\\ding{85}": "\u2735",
      "\\ding{86}": "\u2736",
      "\\varstar": "\u2736",
      "\\ding{87}": "\u2737",
      "\\ding{88}": "\u2738",
      "\\ding{89}": "\u2739",
      "\\ding{90}": "\u273A",
      "\\ding{91}": "\u273B",
      "\\ding{92}": "\u273C",
      "\\ding{93}": "\u273D",
      "\\dingasterisk": "\u273D",
      "\\ding{94}": "\u273E",
      "\\ding{95}": "\u273F",
      "\\ding{96}": "\u2740",
      "\\ding{97}": "\u2741",
      "\\ding{98}": "\u2742",
      "\\ding{99}": "\u2743",
      "\\ding{100}": "\u2744",
      "\\ding{101}": "\u2745",
      "\\ding{102}": "\u2746",
      "\\ding{103}": "\u2747",
      "\\ding{104}": "\u2748",
      "\\ding{105}": "\u2749",
      "\\ding{106}": "\u274A",
      "\\ding{107}": "\u274B",
      "\\ding{109}": "\u274D",
      "\\ding{111}": "\u274F",
      "\\ding{112}": "\u2750",
      "\\ding{113}": "\u2751",
      "\\ding{114}": "\u2752",
      "\\ding{118}": "\u2756",
      "\\ding{120}": "\u2758",
      "\\ding{121}": "\u2759",
      "\\ding{122}": "\u275A",
      "\\ding{123}": "\u275B",
      "\\ding{124}": "\u275C",
      "\\ding{125}": "\u275D",
      "\\ding{126}": "\u275E",
      "\\ding{161}": "\u2761",
      "\\ding{162}": "\u2762",
      "\\ding{163}": "\u2763",
      "\\ding{164}": "\u2764",
      "\\ding{165}": "\u2765",
      "\\ding{166}": "\u2766",
      "\\ding{167}": "\u2767",
      "\\ding{182}": "\u2776",
      "\\ding{183}": "\u2777",
      "\\ding{184}": "\u2778",
      "\\ding{185}": "\u2779",
      "\\ding{186}": "\u277A",
      "\\ding{187}": "\u277B",
      "\\ding{188}": "\u277C",
      "\\ding{189}": "\u277D",
      "\\ding{190}": "\u277E",
      "\\ding{191}": "\u277F",
      "\\ding{192}": "\u2780",
      "\\ding{193}": "\u2781",
      "\\ding{194}": "\u2782",
      "\\ding{195}": "\u2783",
      "\\ding{196}": "\u2784",
      "\\ding{197}": "\u2785",
      "\\ding{198}": "\u2786",
      "\\ding{199}": "\u2787",
      "\\ding{200}": "\u2788",
      "\\ding{201}": "\u2789",
      "\\ding{202}": "\u278A",
      "\\ding{203}": "\u278B",
      "\\ding{204}": "\u278C",
      "\\ding{205}": "\u278D",
      "\\ding{206}": "\u278E",
      "\\ding{207}": "\u278F",
      "\\ding{208}": "\u2790",
      "\\ding{209}": "\u2791",
      "\\ding{210}": "\u2792",
      "\\ding{211}": "\u2793",
      "\\ding{212}": "\u2794",
      "\\ding{216}": "\u2798",
      "\\ding{217}": "\u2799",
      "\\ding{218}": "\u279A",
      "\\ding{219}": "\u279B",
      "\\draftingarrow": "\u279B",
      "\\ding{220}": "\u279C",
      "\\ding{221}": "\u279D",
      "\\ding{222}": "\u279E",
      "\\ding{223}": "\u279F",
      "\\ding{224}": "\u27A0",
      "\\ding{225}": "\u27A1",
      "\\ding{226}": "\u27A2",
      "\\arrowbullet": "\u27A2",
      "\\ding{227}": "\u27A3",
      "\\ding{228}": "\u27A4",
      "\\ding{229}": "\u27A5",
      "\\ding{230}": "\u27A6",
      "\\ding{231}": "\u27A7",
      "\\ding{232}": "\u27A8",
      "\\ding{233}": "\u27A9",
      "\\ding{234}": "\u27AA",
      "\\ding{235}": "\u27AB",
      "\\ding{236}": "\u27AC",
      "\\ding{237}": "\u27AD",
      "\\ding{238}": "\u27AE",
      "\\ding{239}": "\u27AF",
      "\\ding{241}": "\u27B1",
      "\\ding{242}": "\u27B2",
      "\\ding{243}": "\u27B3",
      "\\ding{244}": "\u27B4",
      "\\ding{245}": "\u27B5",
      "\\ding{246}": "\u27B6",
      "\\ding{247}": "\u27B7",
      "\\ding{248}": "\u27B8",
      "\\ding{249}": "\u27B9",
      "\\ding{250}": "\u27BA",
      "\\ding{251}": "\u27BB",
      "\\ding{252}": "\u27BC",
      "\\ding{253}": "\u27BD",
      "\\ding{254}": "\u27BE",
      "\\threedangle": "\u27C0",
      "\\whiteinwhitetriangle": "\u27C1",
      "\\perp": "\u27C2",
      "\\subsetcirc": "\u27C3",
      "\\supsetcirc": "\u27C4",
      "\\Lbag": "\u27C5",
      "\\Rbag": "\u27C6",
      "\\veedot": "\u27C7",
      "\\bsolhsub": "\u27C8",
      "\\suphsol": "\u27C9",
      "\\longdivision": "\u27CC",
      "\\Diamonddot": "\u27D0",
      "\\wedgedot": "\u27D1",
      "\\upin": "\u27D2",
      "\\pullback": "\u27D3",
      "\\pushout": "\u27D4",
      "\\leftouterjoin": "\u27D5",
      "\\rightouterjoin": "\u27D6",
      "\\fullouterjoin": "\u27D7",
      "\\bigbot": "\u27D8",
      "\\bigtop": "\u27D9",
      "\\DashVDash": "\u27DA",
      "\\dashVdash": "\u27DB",
      "\\multimapinv": "\u27DC",
      "\\vlongdash": "\u27DD",
      "\\longdashv": "\u27DE",
      "\\cirbot": "\u27DF",
      "\\lozengeminus": "\u27E0",
      "\\concavediamond": "\u27E1",
      "\\concavediamondtickleft": "\u27E2",
      "\\concavediamondtickright": "\u27E3",
      "\\whitesquaretickleft": "\u27E4",
      "\\whitesquaretickright": "\u27E5",
      "\\llbracket": "\u27E6",
      "\\rrbracket": "\u27E7",
      "\\langle": "\u27E8",
      "\\rangle": "\u27E9",
      "\\lang": "\u27EA",
      "\\rang": "\u27EB",
      "\\Lbrbrak": "\u27EC",
      "\\Rbrbrak": "\u27ED",
      "\\lgroup": "\u27EE",
      "\\rgroup": "\u27EF",
      "\\UUparrow": "\u27F0",
      "\\DDownarrow": "\u27F1",
      "\\acwgapcirclearrow": "\u27F2",
      "\\cwgapcirclearrow": "\u27F3",
      "\\rightarrowonoplus": "\u27F4",
      "\\longleftarrow": "\u27F5",
      "\\longrightarrow": "\u27F6",
      "\\longleftrightarrow": "\u27F7",
      "\\Longleftarrow": "\u27F8",
      "\\Longrightarrow": "\u27F9",
      "\\Longleftrightarrow": "\u27FA",
      "\\longmapsfrom": "\u27FB",
      "\\longmapsto": "\u27FC",
      "\\Longmapsfrom": "\u27FD",
      "\\Longmapsto": "\u27FE",
      "\\sim\\joinrel\\leadsto": "\u27FF",
      "\\psur": "\u2900",
      "\\nVtwoheadrightarrow": "\u2901",
      "\\nvLeftarrow": "\u2902",
      "\\nvRightarrow": "\u2903",
      "\\nvLeftrightarrow": "\u2904",
      "\\Mapsfrom": "\u2906",
      "\\Mapsto": "\u2907",
      "\\downarrowbarred": "\u2908",
      "\\uparrowbarred": "\u2909",
      "\\Uuparrow": "\u290A",
      "\\Ddownarrow": "\u290B",
      "\\leftbkarrow": "\u290C",
      "\\rightbkarrow": "\u290D",
      "\\leftdbkarrow": "\u290E",
      "\\dbkarow": "\u290F",
      "\\drbkarow": "\u2910",
      "\\rightdotarrow": "\u2911",
      "\\UpArrowBar": "\u2912",
      "\\DownArrowBar": "\u2913",
      "\\pinj": "\u2914",
      "\\finj": "\u2915",
      "\\bij": "\u2916",
      "\\nvtwoheadrightarrowtail": "\u2917",
      "\\nVtwoheadrightarrowtail": "\u2918",
      "\\lefttail": "\u2919",
      "\\righttail": "\u291A",
      "\\leftdbltail": "\u291B",
      "\\rightdbltail": "\u291C",
      "\\diamondleftarrow": "\u291D",
      "\\rightarrowdiamond": "\u291E",
      "\\diamondleftarrowbar": "\u291F",
      "\\barrightarrowdiamond": "\u2920",
      "\\nwsearrow": "\u2921",
      "\\neswarrow": "\u2922",
      "\\rdiagovfdiag": "\u292B",
      "\\fdiagovrdiag": "\u292C",
      "\\seovnearrow": "\u292D",
      "\\neovsearrow": "\u292E",
      "\\fdiagovnearrow": "\u292F",
      "\\rdiagovsearrow": "\u2930",
      "\\neovnwarrow": "\u2931",
      "\\nwovnearrow": "\u2932",
      "\\uprightcurvearrow": "\u2934",
      "\\downrightcurvedarrow": "\u2935",
      "\\cwrightarcarrow": "\u2938",
      "\\acwleftarcarrow": "\u2939",
      "\\acwoverarcarrow": "\u293A",
      "\\acwunderarcarrow": "\u293B",
      "\\curvearrowrightminus": "\u293C",
      "\\curvearrowleftplus": "\u293D",
      "\\cwundercurvearrow": "\u293E",
      "\\ccwundercurvearrow": "\u293F",
      "\\Elolarr": "\u2940",
      "\\Elorarr": "\u2941",
      "\\ElzRlarr": "\u2942",
      "\\leftarrowshortrightarrow": "\u2943",
      "\\ElzrLarr": "\u2944",
      "\\rightarrowplus": "\u2945",
      "\\leftarrowplus": "\u2946",
      "\\Elzrarrx": "\u2947",
      "\\leftrightarrowcircle": "\u2948",
      "\\twoheaduparrowcircle": "\u2949",
      "\\leftrightharpoon": "\u294A",
      "\\rightleftharpoon": "\u294B",
      "\\updownharpoonrightleft": "\u294C",
      "\\updownharpoonleftright": "\u294D",
      "\\LeftRightVector": "\u294E",
      "\\RightUpDownVector": "\u294F",
      "\\DownLeftRightVector": "\u2950",
      "\\LeftUpDownVector": "\u2951",
      "\\LeftVectorBar": "\u2952",
      "\\RightVectorBar": "\u2953",
      "\\RightUpVectorBar": "\u2954",
      "\\RightDownVectorBar": "\u2955",
      "\\DownLeftVectorBar": "\u2956",
      "\\DownRightVectorBar": "\u2957",
      "\\LeftUpVectorBar": "\u2958",
      "\\LeftDownVectorBar": "\u2959",
      "\\LeftTeeVector": "\u295A",
      "\\RightTeeVector": "\u295B",
      "\\RightUpTeeVector": "\u295C",
      "\\RightDownTeeVector": "\u295D",
      "\\DownLeftTeeVector": "\u295E",
      "\\DownRightTeeVector": "\u295F",
      "\\LeftUpTeeVector": "\u2960",
      "\\LeftDownTeeVector": "\u2961",
      "\\leftleftharpoons": "\u2962",
      "\\upupharpoons": "\u2963",
      "\\rightrightharpoons": "\u2964",
      "\\downdownharpoons": "\u2965",
      "\\leftrightharpoonsup": "\u2966",
      "\\leftrightharpoonsdown": "\u2967",
      "\\rightleftharpoonsup": "\u2968",
      "\\rightleftharpoonsdown": "\u2969",
      "\\leftbarharpoon": "\u296A",
      "\\barleftharpoon": "\u296B",
      "\\rightbarharpoon": "\u296C",
      "\\barrightharpoon": "\u296D",
      "\\UpEquilibrium": "\u296E",
      "\\ReverseUpEquilibrium": "\u296F",
      "\\RoundImplies": "\u2970",
      "\\equalrightarrow": "\u2971",
      "\\similarrightarrow": "\u2972",
      "\\leftarrowsimilar": "\u2973",
      "\\rightarrowsimilar": "\u2974",
      "\\rightarrowapprox": "\u2975",
      "\\ltlarr": "\u2976",
      "\\leftarrowless": "\u2977",
      "\\gtrarr": "\u2978",
      "\\subrarr": "\u2979",
      "\\leftarrowsubset": "\u297A",
      "\\suplarr": "\u297B",
      "\\upfishtail": "\u297E",
      "\\downfishtail": "\u297F",
      "\\Elztfnc": "\u2980",
      "\\spot": "\u2981",
      "\\typecolon": "\u2982",
      "\\lBrace": "\u2983",
      "\\rBrace": "\u2984",
      "\\Elroang": "\u2986",
      "\\limg": "\u2987",
      "\\rimg": "\u2988",
      "\\lblot": "\u2989",
      "\\rblot": "\u298A",
      "\\lbrackubar": "\u298B",
      "\\rbrackubar": "\u298C",
      "\\lbrackultick": "\u298D",
      "\\rbracklrtick": "\u298E",
      "\\lbracklltick": "\u298F",
      "\\rbrackurtick": "\u2990",
      "\\langledot": "\u2991",
      "\\rangledot": "\u2992",
      "<\\kern-0.58em(": "\u2993",
      "\\Lparengtr": "\u2995",
      "\\Rparenless": "\u2996",
      "\\lblkbrbrak": "\u2997",
      "\\rblkbrbrak": "\u2998",
      "\\Elzddfnc": "\u2999",
      "\\vzigzag": "\u299A",
      "\\measuredangleleft": "\u299B",
      "\\Angle": "\u299C",
      "\\rightanglemdot": "\u299D",
      "\\angles": "\u299E",
      "\\angdnr": "\u299F",
      "\\Elzlpargt": "\u29A0",
      "\\sphericalangleup": "\u29A1",
      "\\turnangle": "\u29A2",
      "\\revangle": "\u29A3",
      "\\angleubar": "\u29A4",
      "\\revangleubar": "\u29A5",
      "\\wideangledown": "\u29A6",
      "\\wideangleup": "\u29A7",
      "\\measanglerutone": "\u29A8",
      "\\measanglelutonw": "\u29A9",
      "\\measanglerdtose": "\u29AA",
      "\\measangleldtosw": "\u29AB",
      "\\measangleurtone": "\u29AC",
      "\\measangleultonw": "\u29AD",
      "\\measangledrtose": "\u29AE",
      "\\measangledltosw": "\u29AF",
      "\\revemptyset": "\u29B0",
      "\\emptysetobar": "\u29B1",
      "\\emptysetocirc": "\u29B2",
      "\\emptysetoarr": "\u29B3",
      "\\emptysetoarrl": "\u29B4",
      "\\circledparallel": "\u29B7",
      "\\circledbslash": "\u29B8",
      "\\operp": "\u29B9",
      "\\obot": "\u29BA",
      "\\olcross": "\u29BB",
      "\\odotslashdot": "\u29BC",
      "\\uparrowoncircle": "\u29BD",
      "\\circledwhitebullet": "\u29BE",
      "\\circledbullet": "\u29BF",
      "\\circledless": "\u29C0",
      "\\circledgtr": "\u29C1",
      "\\cirscir": "\u29C2",
      "\\cirE": "\u29C3",
      "\\boxslash": "\u29C4",
      "\\boxbslash": "\u29C5",
      "\\boxast": "\u29C6",
      "\\boxcircle": "\u29C7",
      "\\boxbox": "\u29C8",
      "\\boxonbox": "\u29C9",
      "\\ElzLap": "\u29CA",
      "\\Elzdefas": "\u29CB",
      "\\triangles": "\u29CC",
      "\\triangleserifs": "\u29CD",
      "\\rtriltri": "\u29CE",
      "\\LeftTriangleBar": "\u29CF",
      "\\NotLeftTriangleBar": "\u29CF\u0338",
      "\\RightTriangleBar": "\u29D0",
      "\\NotRightTriangleBar": "\u29D0\u0338",
      "\\lfbowtie": "\u29D1",
      "\\rfbowtie": "\u29D2",
      "\\fbowtie": "\u29D3",
      "\\lftimes": "\u29D4",
      "\\rftimes": "\u29D5",
      "\\hourglass": "\u29D6",
      "\\blackhourglass": "\u29D7",
      "\\lvzigzag": "\u29D8",
      "\\rvzigzag": "\u29D9",
      "\\Lvzigzag": "\u29DA",
      "\\Rvzigzag": "\u29DB",
      "\\tieinfty": "\u29DD",
      "\\nvinfty": "\u29DE",
      "\\multimapboth": "\u29DF",
      "\\laplac": "\u29E0",
      "\\lrtriangleeq": "\u29E1",
      "\\shuffle": "\u29E2",
      "\\eparsl": "\u29E3",
      "\\smeparsl": "\u29E4",
      "\\eqvparsl": "\u29E5",
      "\\gleichstark": "\u29E6",
      "\\thermod": "\u29E7",
      "\\downtriangleleftblack": "\u29E8",
      "\\downtrianglerightblack": "\u29E9",
      "\\blackdiamonddownarrow": "\u29EA",
      "\\blacklozenge": "\u29EB",
      "\\circledownarrow": "\u29EC",
      "\\blackcircledownarrow": "\u29ED",
      "\\errbarsquare": "\u29EE",
      "\\errbarblacksquare": "\u29EF",
      "\\errbardiamond": "\u29F0",
      "\\errbarblackdiamond": "\u29F1",
      "\\errbarcircle": "\u29F2",
      "\\errbarblackcircle": "\u29F3",
      "\\RuleDelayed": "\u29F4",
      "\\dsol": "\u29F6",
      "\\rsolbar": "\u29F7",
      "\\xsol": "\u29F8",
      "\\zhide": "\u29F9",
      "\\doubleplus": "\u29FA",
      "\\tripleplus": "\u29FB",
      "\\lcurvyangle": "\u29FC",
      "\\rcurvyangle": "\u29FD",
      "\\tplus": "\u29FE",
      "\\tminus": "\u29FF",
      "\\bigodot": "\u2A00",
      "\\bigoplus": "\u2A01",
      "\\bigotimes": "\u2A02",
      "\\bigcupdot": "\u2A03",
      "\\Elxuplus": "\u2A04",
      "\\ElzThr": "\u2A05",
      "\\Elxsqcup": "\u2A06",
      "\\ElzInf": "\u2A07",
      "\\ElzSup": "\u2A08",
      "\\varprod": "\u2A09",
      "\\modtwosum": "\u2A0A",
      "\\sumint": "\u2A0B",
      "\\iiiint": "\u2A0C",
      "\\ElzCint": "\u2A0D",
      "\\intBar": "\u2A0E",
      "\\clockoint": "\u2A0F",
      "\\awint": "\u2A11",
      "\\rppolint": "\u2A12",
      "\\scpolint": "\u2A13",
      "\\npolint": "\u2A14",
      "\\pointint": "\u2A15",
      "\\sqrint": "\u2A16",
      "\\intlarhk": "\u2A17",
      "\\intx": "\u2A18",
      "\\intcap": "\u2A19",
      "\\intcup": "\u2A1A",
      "\\upint": "\u2A1B",
      "\\lowint": "\u2A1C",
      "\\Join": "\u2A1D",
      "\\bigtriangleleft": "\u2A1E",
      "\\zcmp": "\u2A1F",
      "\\zpipe": "\u2A20",
      "\\zproject": "\u2A21",
      "\\ringplus": "\u2A22",
      "\\plushat": "\u2A23",
      "\\simplus": "\u2A24",
      "\\plussim": "\u2A26",
      "\\plussubtwo": "\u2A27",
      "\\plustrif": "\u2A28",
      "\\commaminus": "\u2A29",
      "\\minusfdots": "\u2A2B",
      "\\minusrdots": "\u2A2C",
      "\\ElzTimes": "\u2A2F",
      "\\dottimes": "\u2A30",
      "\\timesbar": "\u2A31",
      "\\btimes": "\u2A32",
      "\\smashtimes": "\u2A33",
      "\\otimeshat": "\u2A36",
      "\\Otimes": "\u2A37",
      "\\odiv": "\u2A38",
      "\\triangleplus": "\u2A39",
      "\\triangleminus": "\u2A3A",
      "\\triangletimes": "\u2A3B",
      "\\intprodr": "\u2A3D",
      "\\fcmp": "\u2A3E",
      "\\amalg": "\u2A3F",
      "\\capdot": "\u2A40",
      "\\uminus": "\u2A41",
      "\\barcup": "\u2A42",
      "\\barcap": "\u2A43",
      "\\capwedge": "\u2A44",
      "\\cupvee": "\u2A45",
      "\\cupovercap": "\u2A46",
      "\\capovercup": "\u2A47",
      "\\cupbarcap": "\u2A48",
      "\\capbarcup": "\u2A49",
      "\\twocups": "\u2A4A",
      "\\twocaps": "\u2A4B",
      "\\closedvarcup": "\u2A4C",
      "\\closedvarcap": "\u2A4D",
      "\\Sqcap": "\u2A4E",
      "\\Sqcup": "\u2A4F",
      "\\closedvarcupsmashprod": "\u2A50",
      "\\wedgeodot": "\u2A51",
      "\\veeodot": "\u2A52",
      "\\ElzAnd": "\u2A53",
      "\\ElzOr": "\u2A54",
      "\\ElOr": "\u2A56",
      "\\bigslopedvee": "\u2A57",
      "\\bigslopedwedge": "\u2A58",
      "\\veeonwedge": "\u2A59",
      "\\wedgemidvert": "\u2A5A",
      "\\veemidvert": "\u2A5B",
      "\\midbarwedge": "\u2A5C",
      "\\midbarvee": "\u2A5D",
      "\\Elzminhat": "\u2A5F",
      "\\wedgedoublebar": "\u2A60",
      "\\varveebar": "\u2A61",
      "\\doublebarvee": "\u2A62",
      "\\dsub": "\u2A64",
      "\\rsub": "\u2A65",
      "\\eqdot": "\u2A66",
      "\\dotequiv": "\u2A67",
      "\\equivVert": "\u2A68",
      "\\equivVvert": "\u2A69",
      "\\dotsim": "\u2A6A",
      "\\simrdots": "\u2A6B",
      "\\simminussim": "\u2A6C",
      "\\congdot": "\u2A6D",
      "\\stackrel{*}{=}": "\u2A6E",
      "\\hatapprox": "\u2A6F",
      "\\approxeqq": "\u2A70",
      "\\eqqplus": "\u2A71",
      "\\pluseqq": "\u2A72",
      "\\eqqsim": "\u2A73",
      "\\Coloneqq": "\u2A74",
      "\\Equal": "\u2A75",
      "\\Same": "\u2A76",
      "\\ddotseq": "\u2A77",
      "\\equivDD": "\u2A78",
      "\\ltcir": "\u2A79",
      "\\gtcir": "\u2A7A",
      "\\ltquest": "\u2A7B",
      "\\gtquest": "\u2A7C",
      "\\leqslant": "\u2A7D",
      "\\nleqslant": "\u2A7D\u0338",
      "\\geqslant": "\u2A7E",
      "\\ngeqslant": "\u2A7E\u0338",
      "\\lesdot": "\u2A7F",
      "\\gesdot": "\u2A80",
      "\\lesdoto": "\u2A81",
      "\\gesdoto": "\u2A82",
      "\\lesdotor": "\u2A83",
      "\\gesdotol": "\u2A84",
      "\\lessapprox": "\u2A85",
      "\\gtrapprox": "\u2A86",
      "\\lneq": "\u2A87",
      "\\gneq": "\u2A88",
      "\\lnapprox": "\u2A89",
      "\\gnapprox": "\u2A8A",
      "\\lesseqqgtr": "\u2A8B",
      "\\gtreqqless": "\u2A8C",
      "\\lsime": "\u2A8D",
      "\\gsime": "\u2A8E",
      "\\lsimg": "\u2A8F",
      "\\gsiml": "\u2A90",
      "\\lgE": "\u2A91",
      "\\glE": "\u2A92",
      "\\lesges": "\u2A93",
      "\\gesles": "\u2A94",
      "\\eqslantless": "\u2A95",
      "\\eqslantgtr": "\u2A96",
      "\\elsdot": "\u2A97",
      "\\egsdot": "\u2A98",
      "\\eqqless": "\u2A99",
      "\\eqqgtr": "\u2A9A",
      "\\eqqslantless": "\u2A9B",
      "\\eqqslantgtr": "\u2A9C",
      "\\Pisymbol{ppi020}{117}": "\u2A9D",
      "\\Pisymbol{ppi020}{105}": "\u2A9E",
      "\\simlE": "\u2A9F",
      "\\simgE": "\u2AA0",
      "\\NestedLessLess": "\u2AA1",
      "\\NotNestedLessLess": "\u2AA1\u0338",
      "\\NestedGreaterGreater": "\u2AA2",
      "\\NotNestedGreaterGreater": "\u2AA2\u0338",
      "\\partialmeetcontraction": "\u2AA3",
      "\\glj": "\u2AA4",
      "\\gla": "\u2AA5",
      "\\leftslice": "\u2AA6",
      "\\rightslice": "\u2AA7",
      "\\lescc": "\u2AA8",
      "\\gescc": "\u2AA9",
      "\\smt": "\u2AAA",
      "\\lat": "\u2AAB",
      "\\smte": "\u2AAC",
      "\\late": "\u2AAD",
      "\\bumpeqq": "\u2AAE",
      "\\preceq": "\u2AAF",
      "\\not\\preceq": "\u2AAF\u0338",
      "\\succeq": "\u2AB0",
      "\\not\\succeq": "\u2AB0\u0338",
      "\\precneq": "\u2AB1",
      "\\succneq": "\u2AB2",
      "\\preceqq": "\u2AB3",
      "\\succeqq": "\u2AB4",
      "\\precneqq": "\u2AB5",
      "\\succneqq": "\u2AB6",
      "\\precapprox": "\u2AB7",
      "\\succapprox": "\u2AB8",
      "\\precnapprox": "\u2AB9",
      "\\succnapprox": "\u2ABA",
      "\\llcurly": "\u2ABB",
      "\\ggcurly": "\u2ABC",
      "\\subsetdot": "\u2ABD",
      "\\supsetdot": "\u2ABE",
      "\\subsetplus": "\u2ABF",
      "\\supsetplus": "\u2AC0",
      "\\submult": "\u2AC1",
      "\\supmult": "\u2AC2",
      "\\subedot": "\u2AC3",
      "\\supedot": "\u2AC4",
      "\\subseteqq": "\u2AC5",
      "\\nsubseteqq": "\u2AC5\u0338",
      "\\supseteqq": "\u2AC6",
      "\\nsupseteqq": "\u2AC6\u0338",
      "\\subsim": "\u2AC7",
      "\\supsim": "\u2AC8",
      "\\subsetapprox": "\u2AC9",
      "\\supsetapprox": "\u2ACA",
      "\\subsetneqq": "\u2ACB",
      "\\supsetneqq": "\u2ACC",
      "\\lsqhook": "\u2ACD",
      "\\rsqhook": "\u2ACE",
      "\\csub": "\u2ACF",
      "\\csup": "\u2AD0",
      "\\csube": "\u2AD1",
      "\\csupe": "\u2AD2",
      "\\subsup": "\u2AD3",
      "\\supsub": "\u2AD4",
      "\\subsub": "\u2AD5",
      "\\supsup": "\u2AD6",
      "\\suphsub": "\u2AD7",
      "\\supdsub": "\u2AD8",
      "\\forkv": "\u2AD9",
      "\\topfork": "\u2ADA",
      "\\mlcp": "\u2ADB",
      "\\forks": "\u2ADC",
      "\\forksnot": "\u2ADD",
      "\\shortlefttack": "\u2ADE",
      "\\shortdowntack": "\u2ADF",
      "\\shortuptack": "\u2AE0",
      "\\perps": "\u2AE1",
      "\\vDdash": "\u2AE2",
      "\\dashV": "\u2AE3",
      "\\Dashv": "\u2AE4",
      "\\DashV": "\u2AE5",
      "\\varVdash": "\u2AE6",
      "\\Barv": "\u2AE7",
      "\\vBar": "\u2AE8",
      "\\vBarv": "\u2AE9",
      "\\Top": "\u2AEA",
      "\\Not": "\u2AEC",
      "\\bNot": "\u2AED",
      "\\revnmid": "\u2AEE",
      "\\cirmid": "\u2AEF",
      "\\midcir": "\u2AF0",
      "\\topcir": "\u2AF1",
      "\\nhpar": "\u2AF2",
      "\\parsim": "\u2AF3",
      "\\interleave": "\u2AF4",
      "\\nhVvert": "\u2AF5",
      "\\Elztdcol": "\u2AF6",
      "\\lllnest": "\u2AF7",
      "\\gggnest": "\u2AF8",
      "\\leqqslant": "\u2AF9",
      "\\geqqslant": "\u2AFA",
      "\\trslash": "\u2AFB",
      "\\biginterleave": "\u2AFC",
      "{{/}\\!\\!{/}}": "\u2AFD",
      "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}": "\u2AFD\u20E5",
      "\\talloblong": "\u2AFE",
      "\\bigtalloblong": "\u2AFF",
      "\\squaretopblack": "\u2B12",
      "\\squarebotblack": "\u2B13",
      "\\squareurblack": "\u2B14",
      "\\squarellblack": "\u2B15",
      "\\diamondleftblack": "\u2B16",
      "\\diamondrightblack": "\u2B17",
      "\\diamondtopblack": "\u2B18",
      "\\diamondbotblack": "\u2B19",
      "\\dottedsquare": "\u2B1A",
      "\\blacksquare": "\u2B1B",
      "\\vysmblksquare": "\u2B1D",
      "\\vysmwhtsquare": "\u2B1E",
      "\\pentagonblack": "\u2B1F",
      "\\pentagon": "\u2B20",
      "\\varhexagon": "\u2B21",
      "\\varhexagonblack": "\u2B22",
      "\\hexagonblack": "\u2B23",
      "\\lgblkcircle": "\u2B24",
      "\\mdblkdiamond": "\u2B25",
      "\\mdwhtdiamond": "\u2B26",
      "\\mdblklozenge": "\u2B27",
      "\\mdwhtlozenge": "\u2B28",
      "\\smblkdiamond": "\u2B29",
      "\\smblklozenge": "\u2B2A",
      "\\smwhtlozenge": "\u2B2B",
      "\\blkhorzoval": "\u2B2C",
      "\\whthorzoval": "\u2B2D",
      "\\blkvertoval": "\u2B2E",
      "\\whtvertoval": "\u2B2F",
      "\\circleonleftarrow": "\u2B30",
      "\\leftthreearrows": "\u2B31",
      "\\leftarrowonoplus": "\u2B32",
      "\\longleftsquigarrow": "\u2B33",
      "\\nvtwoheadleftarrow": "\u2B34",
      "\\nVtwoheadleftarrow": "\u2B35",
      "\\twoheadmapsfrom": "\u2B36",
      "\\twoheadleftdbkarrow": "\u2B37",
      "\\leftdotarrow": "\u2B38",
      "\\nvleftarrowtail": "\u2B39",
      "\\nVleftarrowtail": "\u2B3A",
      "\\twoheadleftarrowtail": "\u2B3B",
      "\\nvtwoheadleftarrowtail": "\u2B3C",
      "\\nVtwoheadleftarrowtail": "\u2B3D",
      "\\leftarrowx": "\u2B3E",
      "\\leftcurvedarrow": "\u2B3F",
      "\\equalleftarrow": "\u2B40",
      "\\bsimilarleftarrow": "\u2B41",
      "\\leftarrowbackapprox": "\u2B42",
      "\\rightarrowgtr": "\u2B43",
      "\\rightarrowsupset": "\u2B44",
      "\\LLeftarrow": "\u2B45",
      "\\RRightarrow": "\u2B46",
      "\\bsimilarrightarrow": "\u2B47",
      "\\rightarrowbackapprox": "\u2B48",
      "\\similarleftarrow": "\u2B49",
      "\\leftarrowapprox": "\u2B4A",
      "\\leftarrowbsimilar": "\u2B4B",
      "\\rightarrowbsimilar": "\u2B4C",
      "\\medwhitestar": "\u2B50",
      "\\medblackstar": "\u2B51",
      "\\smwhitestar": "\u2B52",
      "\\rightpentagonblack": "\u2B53",
      "\\rightpentagon": "\u2B54",
      "\\postalmark": "\u3012",
      "\\lbrbrak": "\u3014",
      "\\rbrbrak": "\u3015",
      "\\openbracketleft": "\u301A",
      "\\openbracketright": "\u301B",
      "\\hzigzag": "\u3030",
      "\\dbend": "\uFFFD",
      "\\mathbf{A}": "\u{1D400}",
      "\\mathbf{B}": "\u{1D401}",
      "\\mathbf{C}": "\u{1D402}",
      "\\mathbf{D}": "\u{1D403}",
      "\\mathbf{E}": "\u{1D404}",
      "\\mathbf{F}": "\u{1D405}",
      "\\mathbf{G}": "\u{1D406}",
      "\\mathbf{H}": "\u{1D407}",
      "\\mathbf{I}": "\u{1D408}",
      "\\mathbf{J}": "\u{1D409}",
      "\\mathbf{K}": "\u{1D40A}",
      "\\mathbf{L}": "\u{1D40B}",
      "\\mathbf{M}": "\u{1D40C}",
      "\\mathbf{N}": "\u{1D40D}",
      "\\mathbf{O}": "\u{1D40E}",
      "\\mathbf{P}": "\u{1D40F}",
      "\\mathbf{Q}": "\u{1D410}",
      "\\mathbf{R}": "\u{1D411}",
      "\\mathbf{S}": "\u{1D412}",
      "\\mathbf{T}": "\u{1D413}",
      "\\mathbf{U}": "\u{1D414}",
      "\\mathbf{V}": "\u{1D415}",
      "\\mathbf{W}": "\u{1D416}",
      "\\mathbf{X}": "\u{1D417}",
      "\\mathbf{Y}": "\u{1D418}",
      "\\mathbf{Z}": "\u{1D419}",
      "\\mathbf{a}": "\u{1D41A}",
      "\\mathbf{b}": "\u{1D41B}",
      "\\mathbf{c}": "\u{1D41C}",
      "\\mathbf{d}": "\u{1D41D}",
      "\\mathbf{e}": "\u{1D41E}",
      "\\mathbf{f}": "\u{1D41F}",
      "\\mathbf{g}": "\u{1D420}",
      "\\mathbf{h}": "\u{1D421}",
      "\\mathbf{i}": "\u{1D422}",
      "\\mathbf{j}": "\u{1D423}",
      "\\mathbf{k}": "\u{1D424}",
      "\\mathbf{l}": "\u{1D425}",
      "\\mathbf{m}": "\u{1D426}",
      "\\mathbf{n}": "\u{1D427}",
      "\\mathbf{o}": "\u{1D428}",
      "\\mathbf{p}": "\u{1D429}",
      "\\mathbf{q}": "\u{1D42A}",
      "\\mathbf{r}": "\u{1D42B}",
      "\\mathbf{s}": "\u{1D42C}",
      "\\mathbf{t}": "\u{1D42D}",
      "\\mathbf{u}": "\u{1D42E}",
      "\\mathbf{v}": "\u{1D42F}",
      "\\mathbf{w}": "\u{1D430}",
      "\\mathbf{x}": "\u{1D431}",
      "\\mathbf{y}": "\u{1D432}",
      "\\mathbf{z}": "\u{1D433}",
      "\\mathsl{A}": "\u{1D434}",
      "\\mathsl{B}": "\u{1D435}",
      "\\mathsl{C}": "\u{1D436}",
      "\\mathsl{D}": "\u{1D437}",
      "\\mathsl{E}": "\u{1D438}",
      "\\mathsl{F}": "\u{1D439}",
      "\\mathsl{G}": "\u{1D43A}",
      "\\mathsl{H}": "\u{1D43B}",
      "\\mathsl{I}": "\u{1D43C}",
      "\\mathsl{J}": "\u{1D43D}",
      "\\mathsl{K}": "\u{1D43E}",
      "\\mathsl{L}": "\u{1D43F}",
      "\\mathsl{M}": "\u{1D440}",
      "\\mathsl{N}": "\u{1D441}",
      "\\mathsl{O}": "\u{1D442}",
      "\\mathsl{P}": "\u{1D443}",
      "\\mathsl{Q}": "\u{1D444}",
      "\\mathsl{R}": "\u{1D445}",
      "\\mathsl{S}": "\u{1D446}",
      "\\mathsl{T}": "\u{1D447}",
      "\\mathsl{U}": "\u{1D448}",
      "\\mathsl{V}": "\u{1D449}",
      "\\mathsl{W}": "\u{1D44A}",
      "\\mathsl{X}": "\u{1D44B}",
      "\\mathsl{Y}": "\u{1D44C}",
      "\\mathsl{Z}": "\u{1D44D}",
      "\\mathsl{a}": "\u{1D44E}",
      "\\mathsl{b}": "\u{1D44F}",
      "\\mathsl{c}": "\u{1D450}",
      "\\mathsl{d}": "\u{1D451}",
      "\\mathsl{e}": "\u{1D452}",
      "\\mathsl{f}": "\u{1D453}",
      "\\mathsl{g}": "\u{1D454}",
      "\\mathsl{i}": "\u{1D456}",
      "\\mathsl{j}": "\u{1D457}",
      "\\mathsl{k}": "\u{1D458}",
      "\\mathsl{l}": "\u{1D459}",
      "\\mathsl{m}": "\u{1D45A}",
      "\\mathsl{n}": "\u{1D45B}",
      "\\mathsl{o}": "\u{1D45C}",
      "\\mathsl{p}": "\u{1D45D}",
      "\\mathsl{q}": "\u{1D45E}",
      "\\mathsl{r}": "\u{1D45F}",
      "\\mathsl{s}": "\u{1D460}",
      "\\mathsl{t}": "\u{1D461}",
      "\\mathsl{u}": "\u{1D462}",
      "\\mathsl{v}": "\u{1D463}",
      "\\mathsl{w}": "\u{1D464}",
      "\\mathsl{x}": "\u{1D465}",
      "\\mathsl{y}": "\u{1D466}",
      "\\mathsl{z}": "\u{1D467}",
      "\\mathbit{A}": "\u{1D468}",
      "\\mathbit{B}": "\u{1D469}",
      "\\mathbit{C}": "\u{1D46A}",
      "\\mathbit{D}": "\u{1D46B}",
      "\\mathbit{E}": "\u{1D46C}",
      "\\mathbit{F}": "\u{1D46D}",
      "\\mathbit{G}": "\u{1D46E}",
      "\\mathbit{H}": "\u{1D46F}",
      "\\mathbit{I}": "\u{1D470}",
      "\\mathbit{J}": "\u{1D471}",
      "\\mathbit{K}": "\u{1D472}",
      "\\mathbit{L}": "\u{1D473}",
      "\\mathbit{M}": "\u{1D474}",
      "\\mathbit{N}": "\u{1D475}",
      "\\mathbit{O}": "\u{1D476}",
      "\\mathbit{P}": "\u{1D477}",
      "\\mathbit{Q}": "\u{1D478}",
      "\\mathbit{R}": "\u{1D479}",
      "\\mathbit{S}": "\u{1D47A}",
      "\\mathbit{T}": "\u{1D47B}",
      "\\mathbit{U}": "\u{1D47C}",
      "\\mathbit{V}": "\u{1D47D}",
      "\\mathbit{W}": "\u{1D47E}",
      "\\mathbit{X}": "\u{1D47F}",
      "\\mathbit{Y}": "\u{1D480}",
      "\\mathbit{Z}": "\u{1D481}",
      "\\mathbit{a}": "\u{1D482}",
      "\\mathbit{b}": "\u{1D483}",
      "\\mathbit{c}": "\u{1D484}",
      "\\mathbit{d}": "\u{1D485}",
      "\\mathbit{e}": "\u{1D486}",
      "\\mathbit{f}": "\u{1D487}",
      "\\mathbit{g}": "\u{1D488}",
      "\\mathbit{h}": "\u{1D489}",
      "\\mathbit{i}": "\u{1D48A}",
      "\\mathbit{j}": "\u{1D48B}",
      "\\mathbit{k}": "\u{1D48C}",
      "\\mathbit{l}": "\u{1D48D}",
      "\\mathbit{m}": "\u{1D48E}",
      "\\mathbit{n}": "\u{1D48F}",
      "\\mathbit{o}": "\u{1D490}",
      "\\mathbit{p}": "\u{1D491}",
      "\\mathbit{q}": "\u{1D492}",
      "\\mathbit{r}": "\u{1D493}",
      "\\mathbit{s}": "\u{1D494}",
      "\\mathbit{t}": "\u{1D495}",
      "\\mathbit{u}": "\u{1D496}",
      "\\mathbit{v}": "\u{1D497}",
      "\\mathbit{w}": "\u{1D498}",
      "\\mathbit{x}": "\u{1D499}",
      "\\mathbit{y}": "\u{1D49A}",
      "\\mathbit{z}": "\u{1D49B}",
      "\\mathscr{A}": "\u{1D49C}",
      "\\mathscr{C}": "\u{1D49E}",
      "\\mathscr{D}": "\u{1D49F}",
      "\\mathscr{G}": "\u{1D4A2}",
      "\\mathscr{J}": "\u{1D4A5}",
      "\\mathscr{K}": "\u{1D4A6}",
      "\\mathscr{N}": "\u{1D4A9}",
      "\\mathscr{O}": "\u{1D4AA}",
      "\\mathscr{P}": "\u{1D4AB}",
      "\\mathscr{Q}": "\u{1D4AC}",
      "\\mathscr{S}": "\u{1D4AE}",
      "\\mathscr{T}": "\u{1D4AF}",
      "\\mathscr{U}": "\u{1D4B0}",
      "\\mathscr{V}": "\u{1D4B1}",
      "\\mathscr{W}": "\u{1D4B2}",
      "\\mathscr{X}": "\u{1D4B3}",
      "\\mathscr{Y}": "\u{1D4B4}",
      "\\mathscr{Z}": "\u{1D4B5}",
      "\\mathscr{a}": "\u{1D4B6}",
      "\\mathscr{b}": "\u{1D4B7}",
      "\\mathscr{c}": "\u{1D4B8}",
      "\\mathscr{d}": "\u{1D4B9}",
      "\\mathscr{f}": "\u{1D4BB}",
      "\\mathscr{h}": "\u{1D4BD}",
      "\\mathscr{i}": "\u{1D4BE}",
      "\\mathscr{j}": "\u{1D4BF}",
      "\\mathscr{k}": "\u{1D4C0}",
      "\\mathscr{m}": "\u{1D4C2}",
      "\\mathscr{n}": "\u{1D4C3}",
      "\\mathscr{p}": "\u{1D4C5}",
      "\\mathscr{q}": "\u{1D4C6}",
      "\\mathscr{r}": "\u{1D4C7}",
      "\\mathscr{s}": "\u{1D4C8}",
      "\\mathscr{t}": "\u{1D4C9}",
      "\\mathscr{u}": "\u{1D4CA}",
      "\\mathscr{v}": "\u{1D4CB}",
      "\\mathscr{w}": "\u{1D4CC}",
      "\\mathscr{x}": "\u{1D4CD}",
      "\\mathscr{y}": "\u{1D4CE}",
      "\\mathscr{z}": "\u{1D4CF}",
      "\\mathmit{A}": "\u{1D4D0}",
      "\\mathmit{B}": "\u{1D4D1}",
      "\\mathmit{C}": "\u{1D4D2}",
      "\\mathmit{D}": "\u{1D4D3}",
      "\\mathmit{E}": "\u{1D4D4}",
      "\\mathmit{F}": "\u{1D4D5}",
      "\\mathmit{G}": "\u{1D4D6}",
      "\\mathmit{H}": "\u{1D4D7}",
      "\\mathmit{I}": "\u{1D4D8}",
      "\\mathmit{J}": "\u{1D4D9}",
      "\\mathmit{K}": "\u{1D4DA}",
      "\\mathmit{L}": "\u{1D4DB}",
      "\\mathmit{M}": "\u{1D4DC}",
      "\\mathmit{N}": "\u{1D4DD}",
      "\\mathmit{O}": "\u{1D4DE}",
      "\\mathmit{P}": "\u{1D4DF}",
      "\\mathmit{Q}": "\u{1D4E0}",
      "\\mathmit{R}": "\u{1D4E1}",
      "\\mathmit{S}": "\u{1D4E2}",
      "\\mathmit{T}": "\u{1D4E3}",
      "\\mathmit{U}": "\u{1D4E4}",
      "\\mathmit{V}": "\u{1D4E5}",
      "\\mathmit{W}": "\u{1D4E6}",
      "\\mathmit{X}": "\u{1D4E7}",
      "\\mathmit{Y}": "\u{1D4E8}",
      "\\mathmit{Z}": "\u{1D4E9}",
      "\\mathmit{a}": "\u{1D4EA}",
      "\\mathmit{b}": "\u{1D4EB}",
      "\\mathmit{c}": "\u{1D4EC}",
      "\\mathmit{d}": "\u{1D4ED}",
      "\\mathmit{e}": "\u{1D4EE}",
      "\\mathmit{f}": "\u{1D4EF}",
      "\\mathmit{g}": "\u{1D4F0}",
      "\\mathmit{h}": "\u{1D4F1}",
      "\\mathmit{i}": "\u{1D4F2}",
      "\\mathmit{j}": "\u{1D4F3}",
      "\\mathmit{k}": "\u{1D4F4}",
      "\\mathmit{l}": "\u{1D4F5}",
      "\\mathmit{m}": "\u{1D4F6}",
      "\\mathmit{n}": "\u{1D4F7}",
      "\\mathmit{o}": "\u{1D4F8}",
      "\\mathmit{p}": "\u{1D4F9}",
      "\\mathmit{q}": "\u{1D4FA}",
      "\\mathmit{r}": "\u{1D4FB}",
      "\\mathmit{s}": "\u{1D4FC}",
      "\\mathmit{t}": "\u{1D4FD}",
      "\\mathmit{u}": "\u{1D4FE}",
      "\\mathmit{v}": "\u{1D4FF}",
      "\\mathmit{w}": "\u{1D500}",
      "\\mathmit{x}": "\u{1D501}",
      "\\mathmit{y}": "\u{1D502}",
      "\\mathmit{z}": "\u{1D503}",
      "\\mathfrak{A}": "\u{1D504}",
      "\\mathfrak{B}": "\u{1D505}",
      "\\mathfrak{D}": "\u{1D507}",
      "\\mathfrak{E}": "\u{1D508}",
      "\\mathfrak{F}": "\u{1D509}",
      "\\mathfrak{G}": "\u{1D50A}",
      "\\mathfrak{J}": "\u{1D50D}",
      "\\mathfrak{K}": "\u{1D50E}",
      "\\mathfrak{L}": "\u{1D50F}",
      "\\mathfrak{M}": "\u{1D510}",
      "\\mathfrak{N}": "\u{1D511}",
      "\\mathfrak{O}": "\u{1D512}",
      "\\mathfrak{P}": "\u{1D513}",
      "\\mathfrak{Q}": "\u{1D514}",
      "\\mathfrak{S}": "\u{1D516}",
      "\\mathfrak{T}": "\u{1D517}",
      "\\mathfrak{U}": "\u{1D518}",
      "\\mathfrak{V}": "\u{1D519}",
      "\\mathfrak{W}": "\u{1D51A}",
      "\\mathfrak{X}": "\u{1D51B}",
      "\\mathfrak{Y}": "\u{1D51C}",
      "\\mathfrak{a}": "\u{1D51E}",
      "\\mathfrak{b}": "\u{1D51F}",
      "\\mathfrak{c}": "\u{1D520}",
      "\\mathfrak{d}": "\u{1D521}",
      "\\mathfrak{e}": "\u{1D522}",
      "\\mathfrak{f}": "\u{1D523}",
      "\\mathfrak{g}": "\u{1D524}",
      "\\mathfrak{h}": "\u{1D525}",
      "\\mathfrak{i}": "\u{1D526}",
      "\\mathfrak{j}": "\u{1D527}",
      "\\mathfrak{k}": "\u{1D528}",
      "\\mathfrak{l}": "\u{1D529}",
      "\\mathfrak{m}": "\u{1D52A}",
      "\\mathfrak{n}": "\u{1D52B}",
      "\\mathfrak{o}": "\u{1D52C}",
      "\\mathfrak{p}": "\u{1D52D}",
      "\\mathfrak{q}": "\u{1D52E}",
      "\\mathfrak{r}": "\u{1D52F}",
      "\\mathfrak{s}": "\u{1D530}",
      "\\mathfrak{t}": "\u{1D531}",
      "\\mathfrak{u}": "\u{1D532}",
      "\\mathfrak{v}": "\u{1D533}",
      "\\mathfrak{w}": "\u{1D534}",
      "\\mathfrak{x}": "\u{1D535}",
      "\\mathfrak{y}": "\u{1D536}",
      "\\mathfrak{z}": "\u{1D537}",
      "\\mathbb{A}": "\u{1D538}",
      "\\mathbb{B}": "\u{1D539}",
      "\\mathbb{D}": "\u{1D53B}",
      "\\mathbb{E}": "\u{1D53C}",
      "\\mathbb{F}": "\u{1D53D}",
      "\\mathbb{G}": "\u{1D53E}",
      "\\mathbb{I}": "\u{1D540}",
      "\\mathbb{J}": "\u{1D541}",
      "\\mathbb{K}": "\u{1D542}",
      "\\mathbb{L}": "\u{1D543}",
      "\\mathbb{M}": "\u{1D544}",
      "\\mathbb{O}": "\u{1D546}",
      "\\mathbb{S}": "\u{1D54A}",
      "\\mathbb{T}": "\u{1D54B}",
      "\\mathbb{U}": "\u{1D54C}",
      "\\mathbb{V}": "\u{1D54D}",
      "\\mathbb{W}": "\u{1D54E}",
      "\\mathbb{X}": "\u{1D54F}",
      "\\mathbb{Y}": "\u{1D550}",
      "\\mathbb{a}": "\u{1D552}",
      "\\mathbb{b}": "\u{1D553}",
      "\\mathbb{c}": "\u{1D554}",
      "\\mathbb{d}": "\u{1D555}",
      "\\mathbb{e}": "\u{1D556}",
      "\\mathbb{f}": "\u{1D557}",
      "\\mathbb{g}": "\u{1D558}",
      "\\mathbb{h}": "\u{1D559}",
      "\\mathbb{i}": "\u{1D55A}",
      "\\mathbb{j}": "\u{1D55B}",
      "\\mathbb{k}": "\u{1D55C}",
      "\\mathbb{l}": "\u{1D55D}",
      "\\mathbb{m}": "\u{1D55E}",
      "\\mathbb{n}": "\u{1D55F}",
      "\\mathbb{o}": "\u{1D560}",
      "\\mathbb{p}": "\u{1D561}",
      "\\mathbb{q}": "\u{1D562}",
      "\\mathbb{r}": "\u{1D563}",
      "\\mathbb{s}": "\u{1D564}",
      "\\mathbb{t}": "\u{1D565}",
      "\\mathbb{u}": "\u{1D566}",
      "\\mathbb{v}": "\u{1D567}",
      "\\mathbb{w}": "\u{1D568}",
      "\\mathbb{x}": "\u{1D569}",
      "\\mathbb{y}": "\u{1D56A}",
      "\\mathbb{z}": "\u{1D56B}",
      "\\mathslbb{A}": "\u{1D56C}",
      "\\mathslbb{B}": "\u{1D56D}",
      "\\mathslbb{C}": "\u{1D56E}",
      "\\mathslbb{D}": "\u{1D56F}",
      "\\mathslbb{E}": "\u{1D570}",
      "\\mathslbb{F}": "\u{1D571}",
      "\\mathslbb{G}": "\u{1D572}",
      "\\mathslbb{H}": "\u{1D573}",
      "\\mathslbb{I}": "\u{1D574}",
      "\\mathslbb{J}": "\u{1D575}",
      "\\mathslbb{K}": "\u{1D576}",
      "\\mathslbb{L}": "\u{1D577}",
      "\\mathslbb{M}": "\u{1D578}",
      "\\mathslbb{N}": "\u{1D579}",
      "\\mathslbb{O}": "\u{1D57A}",
      "\\mathslbb{P}": "\u{1D57B}",
      "\\mathslbb{Q}": "\u{1D57C}",
      "\\mathslbb{R}": "\u{1D57D}",
      "\\mathslbb{S}": "\u{1D57E}",
      "\\mathslbb{T}": "\u{1D57F}",
      "\\mathslbb{U}": "\u{1D580}",
      "\\mathslbb{V}": "\u{1D581}",
      "\\mathslbb{W}": "\u{1D582}",
      "\\mathslbb{X}": "\u{1D583}",
      "\\mathslbb{Y}": "\u{1D584}",
      "\\mathslbb{Z}": "\u{1D585}",
      "\\mathslbb{a}": "\u{1D586}",
      "\\mathslbb{b}": "\u{1D587}",
      "\\mathslbb{c}": "\u{1D588}",
      "\\mathslbb{d}": "\u{1D589}",
      "\\mathslbb{e}": "\u{1D58A}",
      "\\mathslbb{f}": "\u{1D58B}",
      "\\mathslbb{g}": "\u{1D58C}",
      "\\mathslbb{h}": "\u{1D58D}",
      "\\mathslbb{i}": "\u{1D58E}",
      "\\mathslbb{j}": "\u{1D58F}",
      "\\mathslbb{k}": "\u{1D590}",
      "\\mathslbb{l}": "\u{1D591}",
      "\\mathslbb{m}": "\u{1D592}",
      "\\mathslbb{n}": "\u{1D593}",
      "\\mathslbb{o}": "\u{1D594}",
      "\\mathslbb{p}": "\u{1D595}",
      "\\mathslbb{q}": "\u{1D596}",
      "\\mathslbb{r}": "\u{1D597}",
      "\\mathslbb{s}": "\u{1D598}",
      "\\mathslbb{t}": "\u{1D599}",
      "\\mathslbb{u}": "\u{1D59A}",
      "\\mathslbb{v}": "\u{1D59B}",
      "\\mathslbb{w}": "\u{1D59C}",
      "\\mathslbb{x}": "\u{1D59D}",
      "\\mathslbb{y}": "\u{1D59E}",
      "\\mathslbb{z}": "\u{1D59F}",
      "\\mathsf{A}": "\u{1D5A0}",
      "\\mathsf{B}": "\u{1D5A1}",
      "\\mathsf{C}": "\u{1D5A2}",
      "\\mathsf{D}": "\u{1D5A3}",
      "\\mathsf{E}": "\u{1D5A4}",
      "\\mathsf{F}": "\u{1D5A5}",
      "\\mathsf{G}": "\u{1D5A6}",
      "\\mathsf{H}": "\u{1D5A7}",
      "\\mathsf{I}": "\u{1D5A8}",
      "\\mathsf{J}": "\u{1D5A9}",
      "\\mathsf{K}": "\u{1D5AA}",
      "\\mathsf{L}": "\u{1D5AB}",
      "\\mathsf{M}": "\u{1D5AC}",
      "\\mathsf{N}": "\u{1D5AD}",
      "\\mathsf{O}": "\u{1D5AE}",
      "\\mathsf{P}": "\u{1D5AF}",
      "\\mathsf{Q}": "\u{1D5B0}",
      "\\mathsf{R}": "\u{1D5B1}",
      "\\mathsf{S}": "\u{1D5B2}",
      "\\mathsf{T}": "\u{1D5B3}",
      "\\mathsf{U}": "\u{1D5B4}",
      "\\mathsf{V}": "\u{1D5B5}",
      "\\mathsf{W}": "\u{1D5B6}",
      "\\mathsf{X}": "\u{1D5B7}",
      "\\mathsf{Y}": "\u{1D5B8}",
      "\\mathsf{Z}": "\u{1D5B9}",
      "\\mathsf{a}": "\u{1D5BA}",
      "\\mathsf{b}": "\u{1D5BB}",
      "\\mathsf{c}": "\u{1D5BC}",
      "\\mathsf{d}": "\u{1D5BD}",
      "\\mathsf{e}": "\u{1D5BE}",
      "\\mathsf{f}": "\u{1D5BF}",
      "\\mathsf{g}": "\u{1D5C0}",
      "\\mathsf{h}": "\u{1D5C1}",
      "\\mathsf{i}": "\u{1D5C2}",
      "\\mathsf{j}": "\u{1D5C3}",
      "\\mathsf{k}": "\u{1D5C4}",
      "\\mathsf{l}": "\u{1D5C5}",
      "\\mathsf{m}": "\u{1D5C6}",
      "\\mathsf{n}": "\u{1D5C7}",
      "\\mathsf{o}": "\u{1D5C8}",
      "\\mathsf{p}": "\u{1D5C9}",
      "\\mathsf{q}": "\u{1D5CA}",
      "\\mathsf{r}": "\u{1D5CB}",
      "\\mathsf{s}": "\u{1D5CC}",
      "\\mathsf{t}": "\u{1D5CD}",
      "\\mathsf{u}": "\u{1D5CE}",
      "\\mathsf{v}": "\u{1D5CF}",
      "\\mathsf{w}": "\u{1D5D0}",
      "\\mathsf{x}": "\u{1D5D1}",
      "\\mathsf{y}": "\u{1D5D2}",
      "\\mathsf{z}": "\u{1D5D3}",
      "\\mathsfbf{A}": "\u{1D5D4}",
      "\\mathsfbf{B}": "\u{1D5D5}",
      "\\mathsfbf{C}": "\u{1D5D6}",
      "\\mathsfbf{D}": "\u{1D5D7}",
      "\\mathsfbf{E}": "\u{1D5D8}",
      "\\mathsfbf{F}": "\u{1D5D9}",
      "\\mathsfbf{G}": "\u{1D5DA}",
      "\\mathsfbf{H}": "\u{1D5DB}",
      "\\mathsfbf{I}": "\u{1D5DC}",
      "\\mathsfbf{J}": "\u{1D5DD}",
      "\\mathsfbf{K}": "\u{1D5DE}",
      "\\mathsfbf{L}": "\u{1D5DF}",
      "\\mathsfbf{M}": "\u{1D5E0}",
      "\\mathsfbf{N}": "\u{1D5E1}",
      "\\mathsfbf{O}": "\u{1D5E2}",
      "\\mathsfbf{P}": "\u{1D5E3}",
      "\\mathsfbf{Q}": "\u{1D5E4}",
      "\\mathsfbf{R}": "\u{1D5E5}",
      "\\mathsfbf{S}": "\u{1D5E6}",
      "\\mathsfbf{T}": "\u{1D5E7}",
      "\\mathsfbf{U}": "\u{1D5E8}",
      "\\mathsfbf{V}": "\u{1D5E9}",
      "\\mathsfbf{W}": "\u{1D5EA}",
      "\\mathsfbf{X}": "\u{1D5EB}",
      "\\mathsfbf{Y}": "\u{1D5EC}",
      "\\mathsfbf{Z}": "\u{1D5ED}",
      "\\mathsfbf{a}": "\u{1D5EE}",
      "\\mathsfbf{b}": "\u{1D5EF}",
      "\\mathsfbf{c}": "\u{1D5F0}",
      "\\mathsfbf{d}": "\u{1D5F1}",
      "\\mathsfbf{e}": "\u{1D5F2}",
      "\\mathsfbf{f}": "\u{1D5F3}",
      "\\mathsfbf{g}": "\u{1D5F4}",
      "\\mathsfbf{h}": "\u{1D5F5}",
      "\\mathsfbf{i}": "\u{1D5F6}",
      "\\mathsfbf{j}": "\u{1D5F7}",
      "\\mathsfbf{k}": "\u{1D5F8}",
      "\\mathsfbf{l}": "\u{1D5F9}",
      "\\mathsfbf{m}": "\u{1D5FA}",
      "\\mathsfbf{n}": "\u{1D5FB}",
      "\\mathsfbf{o}": "\u{1D5FC}",
      "\\mathsfbf{p}": "\u{1D5FD}",
      "\\mathsfbf{q}": "\u{1D5FE}",
      "\\mathsfbf{r}": "\u{1D5FF}",
      "\\mathsfbf{s}": "\u{1D600}",
      "\\mathsfbf{t}": "\u{1D601}",
      "\\mathsfbf{u}": "\u{1D602}",
      "\\mathsfbf{v}": "\u{1D603}",
      "\\mathsfbf{w}": "\u{1D604}",
      "\\mathsfbf{x}": "\u{1D605}",
      "\\mathsfbf{y}": "\u{1D606}",
      "\\mathsfbf{z}": "\u{1D607}",
      "\\mathsfsl{A}": "\u{1D608}",
      "\\mathsfsl{B}": "\u{1D609}",
      "\\mathsfsl{C}": "\u{1D60A}",
      "\\mathsfsl{D}": "\u{1D60B}",
      "\\mathsfsl{E}": "\u{1D60C}",
      "\\mathsfsl{F}": "\u{1D60D}",
      "\\mathsfsl{G}": "\u{1D60E}",
      "\\mathsfsl{H}": "\u{1D60F}",
      "\\mathsfsl{I}": "\u{1D610}",
      "\\mathsfsl{J}": "\u{1D611}",
      "\\mathsfsl{K}": "\u{1D612}",
      "\\mathsfsl{L}": "\u{1D613}",
      "\\mathsfsl{M}": "\u{1D614}",
      "\\mathsfsl{N}": "\u{1D615}",
      "\\mathsfsl{O}": "\u{1D616}",
      "\\mathsfsl{P}": "\u{1D617}",
      "\\mathsfsl{Q}": "\u{1D618}",
      "\\mathsfsl{R}": "\u{1D619}",
      "\\mathsfsl{S}": "\u{1D61A}",
      "\\mathsfsl{T}": "\u{1D61B}",
      "\\mathsfsl{U}": "\u{1D61C}",
      "\\mathsfsl{V}": "\u{1D61D}",
      "\\mathsfsl{W}": "\u{1D61E}",
      "\\mathsfsl{X}": "\u{1D61F}",
      "\\mathsfsl{Y}": "\u{1D620}",
      "\\mathsfsl{Z}": "\u{1D621}",
      "\\mathsfsl{a}": "\u{1D622}",
      "\\mathsfsl{b}": "\u{1D623}",
      "\\mathsfsl{c}": "\u{1D624}",
      "\\mathsfsl{d}": "\u{1D625}",
      "\\mathsfsl{e}": "\u{1D626}",
      "\\mathsfsl{f}": "\u{1D627}",
      "\\mathsfsl{g}": "\u{1D628}",
      "\\mathsfsl{h}": "\u{1D629}",
      "\\mathsfsl{i}": "\u{1D62A}",
      "\\mathsfsl{j}": "\u{1D62B}",
      "\\mathsfsl{k}": "\u{1D62C}",
      "\\mathsfsl{l}": "\u{1D62D}",
      "\\mathsfsl{m}": "\u{1D62E}",
      "\\mathsfsl{n}": "\u{1D62F}",
      "\\mathsfsl{o}": "\u{1D630}",
      "\\mathsfsl{p}": "\u{1D631}",
      "\\mathsfsl{q}": "\u{1D632}",
      "\\mathsfsl{r}": "\u{1D633}",
      "\\mathsfsl{s}": "\u{1D634}",
      "\\mathsfsl{t}": "\u{1D635}",
      "\\mathsfsl{u}": "\u{1D636}",
      "\\mathsfsl{v}": "\u{1D637}",
      "\\mathsfsl{w}": "\u{1D638}",
      "\\mathsfsl{x}": "\u{1D639}",
      "\\mathsfsl{y}": "\u{1D63A}",
      "\\mathsfsl{z}": "\u{1D63B}",
      "\\mathsfbfsl{A}": "\u{1D63C}",
      "\\mathsfbfsl{B}": "\u{1D63D}",
      "\\mathsfbfsl{C}": "\u{1D63E}",
      "\\mathsfbfsl{D}": "\u{1D63F}",
      "\\mathsfbfsl{E}": "\u{1D640}",
      "\\mathsfbfsl{F}": "\u{1D641}",
      "\\mathsfbfsl{G}": "\u{1D642}",
      "\\mathsfbfsl{H}": "\u{1D643}",
      "\\mathsfbfsl{I}": "\u{1D644}",
      "\\mathsfbfsl{J}": "\u{1D645}",
      "\\mathsfbfsl{K}": "\u{1D646}",
      "\\mathsfbfsl{L}": "\u{1D647}",
      "\\mathsfbfsl{M}": "\u{1D648}",
      "\\mathsfbfsl{N}": "\u{1D649}",
      "\\mathsfbfsl{O}": "\u{1D64A}",
      "\\mathsfbfsl{P}": "\u{1D64B}",
      "\\mathsfbfsl{Q}": "\u{1D64C}",
      "\\mathsfbfsl{R}": "\u{1D64D}",
      "\\mathsfbfsl{S}": "\u{1D64E}",
      "\\mathsfbfsl{T}": "\u{1D64F}",
      "\\mathsfbfsl{U}": "\u{1D650}",
      "\\mathsfbfsl{V}": "\u{1D651}",
      "\\mathsfbfsl{W}": "\u{1D652}",
      "\\mathsfbfsl{X}": "\u{1D653}",
      "\\mathsfbfsl{Y}": "\u{1D654}",
      "\\mathsfbfsl{Z}": "\u{1D655}",
      "\\mathsfbfsl{a}": "\u{1D656}",
      "\\mathsfbfsl{b}": "\u{1D657}",
      "\\mathsfbfsl{c}": "\u{1D658}",
      "\\mathsfbfsl{d}": "\u{1D659}",
      "\\mathsfbfsl{e}": "\u{1D65A}",
      "\\mathsfbfsl{f}": "\u{1D65B}",
      "\\mathsfbfsl{g}": "\u{1D65C}",
      "\\mathsfbfsl{h}": "\u{1D65D}",
      "\\mathsfbfsl{i}": "\u{1D65E}",
      "\\mathsfbfsl{j}": "\u{1D65F}",
      "\\mathsfbfsl{k}": "\u{1D660}",
      "\\mathsfbfsl{l}": "\u{1D661}",
      "\\mathsfbfsl{m}": "\u{1D662}",
      "\\mathsfbfsl{n}": "\u{1D663}",
      "\\mathsfbfsl{o}": "\u{1D664}",
      "\\mathsfbfsl{p}": "\u{1D665}",
      "\\mathsfbfsl{q}": "\u{1D666}",
      "\\mathsfbfsl{r}": "\u{1D667}",
      "\\mathsfbfsl{s}": "\u{1D668}",
      "\\mathsfbfsl{t}": "\u{1D669}",
      "\\mathsfbfsl{u}": "\u{1D66A}",
      "\\mathsfbfsl{v}": "\u{1D66B}",
      "\\mathsfbfsl{w}": "\u{1D66C}",
      "\\mathsfbfsl{x}": "\u{1D66D}",
      "\\mathsfbfsl{y}": "\u{1D66E}",
      "\\mathsfbfsl{z}": "\u{1D66F}",
      "\\mathtt{A}": "\u{1D670}",
      "\\mathtt{B}": "\u{1D671}",
      "\\mathtt{C}": "\u{1D672}",
      "\\mathtt{D}": "\u{1D673}",
      "\\mathtt{E}": "\u{1D674}",
      "\\mathtt{F}": "\u{1D675}",
      "\\mathtt{G}": "\u{1D676}",
      "\\mathtt{H}": "\u{1D677}",
      "\\mathtt{I}": "\u{1D678}",
      "\\mathtt{J}": "\u{1D679}",
      "\\mathtt{K}": "\u{1D67A}",
      "\\mathtt{L}": "\u{1D67B}",
      "\\mathtt{M}": "\u{1D67C}",
      "\\mathtt{N}": "\u{1D67D}",
      "\\mathtt{O}": "\u{1D67E}",
      "\\mathtt{P}": "\u{1D67F}",
      "\\mathtt{Q}": "\u{1D680}",
      "\\mathtt{R}": "\u{1D681}",
      "\\mathtt{S}": "\u{1D682}",
      "\\mathtt{T}": "\u{1D683}",
      "\\mathtt{U}": "\u{1D684}",
      "\\mathtt{V}": "\u{1D685}",
      "\\mathtt{W}": "\u{1D686}",
      "\\mathtt{X}": "\u{1D687}",
      "\\mathtt{Y}": "\u{1D688}",
      "\\mathtt{Z}": "\u{1D689}",
      "\\mathtt{a}": "\u{1D68A}",
      "\\mathtt{b}": "\u{1D68B}",
      "\\mathtt{c}": "\u{1D68C}",
      "\\mathtt{d}": "\u{1D68D}",
      "\\mathtt{e}": "\u{1D68E}",
      "\\mathtt{f}": "\u{1D68F}",
      "\\mathtt{g}": "\u{1D690}",
      "\\mathtt{h}": "\u{1D691}",
      "\\mathtt{i}": "\u{1D692}",
      "\\mathtt{j}": "\u{1D693}",
      "\\mathtt{k}": "\u{1D694}",
      "\\mathtt{l}": "\u{1D695}",
      "\\mathtt{m}": "\u{1D696}",
      "\\mathtt{n}": "\u{1D697}",
      "\\mathtt{o}": "\u{1D698}",
      "\\mathtt{p}": "\u{1D699}",
      "\\mathtt{q}": "\u{1D69A}",
      "\\mathtt{r}": "\u{1D69B}",
      "\\mathtt{s}": "\u{1D69C}",
      "\\mathtt{t}": "\u{1D69D}",
      "\\mathtt{u}": "\u{1D69E}",
      "\\mathtt{v}": "\u{1D69F}",
      "\\mathtt{w}": "\u{1D6A0}",
      "\\mathtt{x}": "\u{1D6A1}",
      "\\mathtt{y}": "\u{1D6A2}",
      "\\mathtt{z}": "\u{1D6A3}",
      "\\mathbf{\\Gamma}": "\u{1D6AA}",
      "\\mathbf{\\Delta}": "\u{1D6AB}",
      "\\mathbf{\\Theta}": "\u{1D6AF}",
      "\\mathbf{\\Lambda}": "\u{1D6B2}",
      "\\mathbf{\\Xi}": "\u{1D6B5}",
      "\\mathbf{\\Pi}": "\u{1D6B7}",
      "\\mathbf{\\vartheta}": "\u{1D6B9}",
      "\\mathbf{\\Sigma}": "\u{1D6BA}",
      "\\mathbf{\\Upsilon}": "\u{1D6BC}",
      "\\mathbf{\\Phi}": "\u{1D6BD}",
      "\\mathbf{\\Psi}": "\u{1D6BF}",
      "\\mathbf{\\Omega}": "\u{1D6C0}",
      "\\mathbf{\\nabla}": "\u{1D6C1}",
      "\\mathbf{\\alpha}": "\u{1D6C2}",
      "\\mathbf{\\beta}": "\u{1D6C3}",
      "\\mathbf{\\gamma}": "\u{1D6C4}",
      "\\mathbf{\\delta}": "\u{1D6C5}",
      "\\mathbf{\\epsilon}": "\u{1D6C6}",
      "\\mathbf{\\zeta}": "\u{1D6C7}",
      "\\mathbf{\\eta}": "\u{1D6C8}",
      "\\mathbf{\\theta}": "\u{1D6C9}",
      "\\mathbf{\\lambda}": "\u{1D6CC}",
      "\\mathbf{\\xi}": "\u{1D6CF}",
      "\\mathbf{\\pi}": "\u{1D6D1}",
      "\\mathbf{\\varsigma}": "\u{1D6D3}",
      "\\mathbf{\\sigma}": "\u{1D6D4}",
      "\\mathbf{\\upsilon}": "\u{1D6D6}",
      "\\mathbf{\\phi}": "\u{1D6D7}",
      "\\mathbf{\\psi}": "\u{1D6D9}",
      "\\mathbf{\\omega}": "\u{1D6DA}",
      "\\mathbf{\\varkappa}": "\u{1D6DE}",
      "\\mathbf{\\varrho}": "\u{1D6E0}",
      "\\mathbf{\\varpi}": "\u{1D6E1}",
      "\\mathsl{\\Gamma}": "\u{1D6E4}",
      "\\mathsl{\\Delta}": "\u{1D6E5}",
      "\\mathsl{\\Lambda}": "\u{1D6EC}",
      "\\mathsl{\\Xi}": "\u{1D6EF}",
      "\\mathsl{\\Pi}": "\u{1D6F1}",
      "\\mathsl{\\Theta}": "\u{1D6F3}",
      "\\mathsl{\\Sigma}": "\u{1D6F4}",
      "\\mathsl{\\Upsilon}": "\u{1D6F6}",
      "\\mathsl{\\Phi}": "\u{1D6F7}",
      "\\mathsl{\\Psi}": "\u{1D6F9}",
      "\\mathsl{\\Omega}": "\u{1D6FA}",
      "\\mathsl{\\nabla}": "\u{1D6FB}",
      "\\mathsl{\\gamma}": "\u{1D6FE}",
      "\\mathsl{\\delta}": "\u{1D6FF}",
      "\\mathsl{\\theta}": "\u{1D703}",
      "\\mathsl{\\lambda}": "\u{1D706}",
      "\\mu": "\u{1D707}",
      "\\mathsl{\\xi}": "\u{1D709}",
      "\\mathsl{\\pi}": "\u{1D70B}",
      "\\mathsl{\\varsigma}": "\u{1D70D}",
      "\\mathsl{\\sigma}": "\u{1D70E}",
      "\\mathsl{\\upsilon}": "\u{1D710}",
      "\\mathsl{\\varphi}": "\u{1D711}",
      "\\mathsl{\\psi}": "\u{1D713}",
      "\\mathsl{\\omega}": "\u{1D714}",
      "\\mathsl{\\vartheta}": "\u{1D717}",
      "\\mathsl{\\varkappa}": "\u{1D718}",
      "\\mathsl{\\phi}": "\u{1D719}",
      "\\mathsl{\\varrho}": "\u{1D71A}",
      "\\mathsl{\\varpi}": "\u{1D71B}",
      "\\mathbit{\\Gamma}": "\u{1D71E}",
      "\\mathbit{\\Delta}": "\u{1D71F}",
      "\\mathbit{\\Theta}": "\u{1D723}",
      "\\mathbit{\\Lambda}": "\u{1D726}",
      "\\mathbit{\\Xi}": "\u{1D729}",
      "\\mathbit{\\Pi}": "\u{1D72B}",
      "\\mathbit{\\Sigma}": "\u{1D72E}",
      "\\mathbit{\\Upsilon}": "\u{1D730}",
      "\\mathbit{\\Phi}": "\u{1D731}",
      "\\mathbit{\\Psi}": "\u{1D733}",
      "\\mathbit{\\Omega}": "\u{1D734}",
      "\\mathbit{\\nabla}": "\u{1D735}",
      "\\mathbit{\\alpha}": "\u{1D736}",
      "\\mathbit{\\beta}": "\u{1D737}",
      "\\mathbit{\\gamma}": "\u{1D738}",
      "\\mathbit{\\delta}": "\u{1D739}",
      "\\mathbit{\\epsilon}": "\u{1D73A}",
      "\\mathbit{\\zeta}": "\u{1D73B}",
      "\\mathbit{\\eta}": "\u{1D73C}",
      "\\mathbit{\\theta}": "\u{1D73D}",
      "\\mathbit{\\imath}": "\u{1D73E}",
      "\\mathbit{\\kappa}": "\u{1D73F}",
      "\\mathbit{\\lambda}": "\u{1D740}",
      "\\mathbit{\\xi}": "\u{1D743}",
      "\\mathbit{\\pi}": "\u{1D745}",
      "\\mathbit{\\rho}": "\u{1D746}",
      "\\mathbit{\\varsigma}": "\u{1D747}",
      "\\mathbit{\\sigma}": "\u{1D748}",
      "\\mathbit{\\tau}": "\u{1D749}",
      "\\mathbit{\\upsilon}": "\u{1D74A}",
      "\\mathbit{\\varphi}": "\u{1D74B}",
      "\\mathbit{\\chi}": "\u{1D74C}",
      "\\mathbit{\\psi}": "\u{1D74D}",
      "\\mathbit{\\omega}": "\u{1D74E}",
      "\\mathbit{\\vartheta}": "\u{1D751}",
      "\\mathbit{\\varkappa}": "\u{1D752}",
      "\\mathbit{\\phi}": "\u{1D753}",
      "\\mathbit{\\varrho}": "\u{1D754}",
      "\\mathbit{\\varpi}": "\u{1D755}",
      "\\mathsfbf{\\Gamma}": "\u{1D758}",
      "\\mathsfbf{\\Delta}": "\u{1D759}",
      "\\mathsfbf{\\Theta}": "\u{1D75D}",
      "\\mathsfbf{\\Lambda}": "\u{1D760}",
      "\\mathsfbf{\\Xi}": "\u{1D763}",
      "\\mathsfbf{\\Pi}": "\u{1D765}",
      "\\mathsfbf{\\Sigma}": "\u{1D768}",
      "\\mathsfbf{\\Upsilon}": "\u{1D76A}",
      "\\mathsfbf{\\Phi}": "\u{1D76B}",
      "\\mathsfbf{\\Psi}": "\u{1D76D}",
      "\\mathsfbf{\\Omega}": "\u{1D76E}",
      "\\mathsfbf{\\nabla}": "\u{1D76F}",
      "\\mathsfbf{\\alpha}": "\u{1D770}",
      "\\mathsfbf{\\beta}": "\u{1D771}",
      "\\mathsfbf{\\gamma}": "\u{1D772}",
      "\\mathsfbf{\\delta}": "\u{1D773}",
      "\\mathsfbf{\\varepsilon}": "\u{1D774}",
      "\\mathsfbf{\\zeta}": "\u{1D775}",
      "\\mathsfbf{\\eta}": "\u{1D776}",
      "\\mathsfbf{\\theta}": "\u{1D777}",
      "\\mathsfbf{\\imath}": "\u{1D778}",
      "\\mathsfbf{\\kappa}": "\u{1D779}",
      "\\mathsfbf{\\lambda}": "\u{1D77A}",
      "\\mathsfbf{\\xi}": "\u{1D77D}",
      "\\mathsfbf{\\pi}": "\u{1D77F}",
      "\\mathsfbf{\\rho}": "\u{1D780}",
      "\\mathsfbf{\\varsigma}": "\u{1D781}",
      "\\mathsfbf{\\sigma}": "\u{1D782}",
      "\\mathsfbf{\\tau}": "\u{1D783}",
      "\\mathsfbf{\\upsilon}": "\u{1D784}",
      "\\mathsfbf{\\varphi}": "\u{1D785}",
      "\\mathsfbf{\\chi}": "\u{1D786}",
      "\\mathsfbf{\\psi}": "\u{1D787}",
      "\\mathsfbf{\\omega}": "\u{1D788}",
      "\\mathsfbf{\\vartheta}": "\u{1D78B}",
      "\\mathsfbf{\\varkappa}": "\u{1D78C}",
      "\\mathsfbf{\\phi}": "\u{1D78D}",
      "\\mathsfbf{\\varrho}": "\u{1D78E}",
      "\\mathsfbf{\\varpi}": "\u{1D78F}",
      "\\mathsfbfsl{\\Gamma}": "\u{1D792}",
      "\\mathsfbfsl{\\Delta}": "\u{1D793}",
      "\\mathsfbfsl{\\Theta}": "\u{1D797}",
      "\\mathsfbfsl{\\Lambda}": "\u{1D79A}",
      "\\mathsfbfsl{\\Xi}": "\u{1D79D}",
      "\\mathsfbfsl{\\Pi}": "\u{1D79F}",
      "\\mathsfbfsl{\\Sigma}": "\u{1D7A2}",
      "\\mathsfbfsl{\\Upsilon}": "\u{1D7A4}",
      "\\mathsfbfsl{\\Phi}": "\u{1D7A5}",
      "\\mathsfbfsl{\\Psi}": "\u{1D7A7}",
      "\\mathsfbfsl{\\Omega}": "\u{1D7A8}",
      "\\mathsfbfsl{\\nabla}": "\u{1D7A9}",
      "\\mathsfbfsl{\\alpha}": "\u{1D7AA}",
      "\\mathsfbfsl{\\beta}": "\u{1D7AB}",
      "\\mathsfbfsl{\\gamma}": "\u{1D7AC}",
      "\\mathsfbfsl{\\delta}": "\u{1D7AD}",
      "\\mathsfbfsl{\\varepsilon}": "\u{1D7AE}",
      "\\mathsfbfsl{\\zeta}": "\u{1D7AF}",
      "\\mathsfbfsl{\\eta}": "\u{1D7B0}",
      "\\mathsfbfsl{\\theta}": "\u{1D7B1}",
      "\\mathsfbfsl{\\imath}": "\u{1D7B2}",
      "\\mathsfbfsl{\\kappa}": "\u{1D7B3}",
      "\\mathsfbfsl{\\lambda}": "\u{1D7B4}",
      "\\mathsfbfsl{\\xi}": "\u{1D7B7}",
      "\\mathsfbfsl{\\pi}": "\u{1D7B9}",
      "\\mathsfbfsl{\\rho}": "\u{1D7BA}",
      "\\mathsfbfsl{\\varsigma}": "\u{1D7BB}",
      "\\mathsfbfsl{\\sigma}": "\u{1D7BC}",
      "\\mathsfbfsl{\\tau}": "\u{1D7BD}",
      "\\mathsfbfsl{\\upsilon}": "\u{1D7BE}",
      "\\mathsfbfsl{\\varphi}": "\u{1D7BF}",
      "\\mathsfbfsl{\\chi}": "\u{1D7C0}",
      "\\mathsfbfsl{\\psi}": "\u{1D7C1}",
      "\\mathsfbfsl{\\omega}": "\u{1D7C2}",
      "\\mathsfbfsl{\\vartheta}": "\u{1D7C5}",
      "\\mathsfbfsl{\\varkappa}": "\u{1D7C6}",
      "\\mathsfbfsl{\\phi}": "\u{1D7C7}",
      "\\mathsfbfsl{\\varrho}": "\u{1D7C8}",
      "\\mathsfbfsl{\\varpi}": "\u{1D7C9}",
      "\\mbfDigamma": "\u{1D7CA}",
      "\\mbfdigamma": "\u{1D7CB}",
      "\\mathbf{0}": "\u{1D7CE}",
      "\\mathbf{1}": "\u{1D7CF}",
      "\\mathbf{2}": "\u{1D7D0}",
      "\\mathbf{3}": "\u{1D7D1}",
      "\\mathbf{4}": "\u{1D7D2}",
      "\\mathbf{5}": "\u{1D7D3}",
      "\\mathbf{6}": "\u{1D7D4}",
      "\\mathbf{7}": "\u{1D7D5}",
      "\\mathbf{8}": "\u{1D7D6}",
      "\\mathbf{9}": "\u{1D7D7}",
      "\\mathbb{0}": "\u{1D7D8}",
      "\\mathbb{1}": "\u{1D7D9}",
      "\\mathbb{2}": "\u{1D7DA}",
      "\\mathbb{3}": "\u{1D7DB}",
      "\\mathbb{4}": "\u{1D7DC}",
      "\\mathbb{5}": "\u{1D7DD}",
      "\\mathbb{6}": "\u{1D7DE}",
      "\\mathbb{7}": "\u{1D7DF}",
      "\\mathbb{8}": "\u{1D7E0}",
      "\\mathbb{9}": "\u{1D7E1}",
      "\\mathsf{0}": "\u{1D7E2}",
      "\\mathsf{1}": "\u{1D7E3}",
      "\\mathsf{2}": "\u{1D7E4}",
      "\\mathsf{3}": "\u{1D7E5}",
      "\\mathsf{4}": "\u{1D7E6}",
      "\\mathsf{5}": "\u{1D7E7}",
      "\\mathsf{6}": "\u{1D7E8}",
      "\\mathsf{7}": "\u{1D7E9}",
      "\\mathsf{8}": "\u{1D7EA}",
      "\\mathsf{9}": "\u{1D7EB}",
      "\\mathsfbf{0}": "\u{1D7EC}",
      "\\mathsfbf{1}": "\u{1D7ED}",
      "\\mathsfbf{2}": "\u{1D7EE}",
      "\\mathsfbf{3}": "\u{1D7EF}",
      "\\mathsfbf{4}": "\u{1D7F0}",
      "\\mathsfbf{5}": "\u{1D7F1}",
      "\\mathsfbf{6}": "\u{1D7F2}",
      "\\mathsfbf{7}": "\u{1D7F3}",
      "\\mathsfbf{8}": "\u{1D7F4}",
      "\\mathsfbf{9}": "\u{1D7F5}",
      "\\mathtt{0}": "\u{1D7F6}",
      "\\mathtt{1}": "\u{1D7F7}",
      "\\mathtt{2}": "\u{1D7F8}",
      "\\mathtt{3}": "\u{1D7F9}",
      "\\mathtt{4}": "\u{1D7FA}",
      "\\mathtt{5}": "\u{1D7FB}",
      "\\mathtt{6}": "\u{1D7FC}",
      "\\mathtt{7}": "\u{1D7FD}",
      "\\mathtt{8}": "\u{1D7FE}",
      "\\mathtt{9}": "\u{1D7FF}"
    };
  }
});

// node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/diacritics.json
var require_diacritics = __commonJS({
  "node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/tables/diacritics.json"(exports, module2) {
    module2.exports = {
      commands: [
        "acute",
        "bar",
        "breve",
        "c",
        "d",
        "ddot",
        "dot",
        "grave",
        "hat",
        "k",
        "mathring",
        "overline",
        "r",
        "textacutemacron",
        "textacutewedge",
        "textadvancing",
        "textbrevemacron",
        "textcircumdot",
        "textcorner",
        "textdotacute",
        "textdotbreve",
        "textdoublegrave",
        "textdoublevbaraccent",
        "textgravedot",
        "textgravemacron",
        "textinvsubbridge",
        "textlowering",
        "textovercross",
        "textraising",
        "textretracting",
        "textringmacron",
        "textseagull",
        "textsubarch",
        "textsubbar",
        "textsubbridge",
        "textsubgrave",
        "textsublhalfring",
        "textsubplus",
        "textsubrhalfring",
        "textsubring",
        "textsubsquare",
        "textsubtilde",
        "textsubumlaut",
        "textsubwedge",
        "textsuperimposetilde",
        "textsyllabic",
        "texttildedot",
        "textvbaraccent",
        "tilde",
        "u",
        "underbar",
        "v"
      ],
      tolatex: {
        "\u0300": {
          command: "`",
          mode: "text"
        },
        "\u0300\u0304": {
          command: "textgravemacron",
          mode: "text"
        },
        "\u0300\u0307": {
          command: "textgravedot",
          mode: "text"
        },
        "\u0301": {
          command: "'",
          mode: "text"
        },
        "\u0301\u0304": {
          command: "textacutemacron",
          mode: "text"
        },
        "\u0301\u0307": {
          command: "textdotacute",
          mode: "text"
        },
        "\u0301\u030C": {
          command: "textacutewedge",
          mode: "text"
        },
        "\u0302": {
          command: "^",
          mode: "text"
        },
        "\u0302\u0307": {
          command: "textcircumdot",
          mode: "text"
        },
        "\u0303": {
          command: "~",
          mode: "text"
        },
        "\u0303\u0307": {
          command: "texttildedot",
          mode: "text"
        },
        "\u0304": {
          command: "=",
          mode: "text"
        },
        "\u0304\u0300": {
          command: "textgravemacron",
          mode: "text"
        },
        "\u0304\u0301": {
          command: "textacutemacron",
          mode: "text"
        },
        "\u0304\u0306": {
          command: "textbrevemacron",
          mode: "text"
        },
        "\u0304\u030A": {
          command: "textringmacron",
          mode: "text"
        },
        "\u0305": {
          command: "overline",
          mode: "math"
        },
        "\u0306": {
          command: "u",
          mode: "text"
        },
        "\u0306\u0304": {
          command: "textbrevemacron",
          mode: "text"
        },
        "\u0306\u0307": {
          command: "textdotbreve",
          mode: "text"
        },
        "\u0307": {
          command: ".",
          mode: "text"
        },
        "\u0307\u0300": {
          command: "textgravedot",
          mode: "text"
        },
        "\u0307\u0301": {
          command: "textdotacute",
          mode: "text"
        },
        "\u0307\u0302": {
          command: "textcircumdot",
          mode: "text"
        },
        "\u0307\u0303": {
          command: "texttildedot",
          mode: "text"
        },
        "\u0307\u0306": {
          command: "textdotbreve",
          mode: "text"
        },
        "\u0308": {
          command: '"',
          mode: "text"
        },
        "\u030A": {
          command: "r",
          mode: "text"
        },
        "\u030A\u0304": {
          command: "textringmacron",
          mode: "text"
        },
        "\u030B": {
          command: "H",
          mode: "text"
        },
        "\u030C": {
          command: "v",
          mode: "text"
        },
        "\u030C\u0301": {
          command: "textacutewedge",
          mode: "text"
        },
        "\u030D": {
          command: "textvbaraccent",
          mode: "text"
        },
        "\u030E": {
          command: "textdoublevbaraccent",
          mode: "text"
        },
        "\u030F": {
          command: "textdoublegrave",
          mode: "text"
        },
        "\u0310": {
          command: "textdotbreve",
          mode: "text"
        },
        "\u0316": {
          command: "textsubgrave",
          mode: "text"
        },
        "\u0318": {
          command: "textadvancing",
          mode: "text"
        },
        "\u0319": {
          command: "textretracting",
          mode: "text"
        },
        "\u031A": {
          command: "textcorner",
          mode: "text"
        },
        "\u031C": {
          command: "textsublhalfring",
          mode: "text"
        },
        "\u031D": {
          command: "textraising",
          mode: "text"
        },
        "\u031E": {
          command: "textlowering",
          mode: "text"
        },
        "\u031F": {
          command: "textsubplus",
          mode: "text"
        },
        "\u0323": {
          command: "d",
          mode: "text"
        },
        "\u0324": {
          command: "textsubumlaut",
          mode: "text"
        },
        "\u0325": {
          command: "textsubring",
          mode: "text"
        },
        "\u0327": {
          command: "c",
          mode: "text"
        },
        "\u0328": {
          command: "k",
          mode: "text"
        },
        "\u0329": {
          command: "textsyllabic",
          mode: "text"
        },
        "\u032A": {
          command: "textsubbridge",
          mode: "text"
        },
        "\u032C": {
          command: "textsubwedge",
          mode: "text"
        },
        "\u032F": {
          command: "textsubarch",
          mode: "text"
        },
        "\u0330": {
          command: "textsubtilde",
          mode: "text"
        },
        "\u0331": {
          command: "textsubbar",
          mode: "text"
        },
        "\u0334": {
          command: "textsuperimposetilde",
          mode: "text"
        },
        "\u0339": {
          command: "textsubrhalfring",
          mode: "text"
        },
        "\u033A": {
          command: "textinvsubbridge",
          mode: "text"
        },
        "\u033B": {
          command: "textsubsquare",
          mode: "text"
        },
        "\u033C": {
          command: "textseagull",
          mode: "text"
        },
        "\u033D": {
          command: "textovercross",
          mode: "text"
        }
      },
      tounicode: {
        '"': "\u0308",
        "'": "\u0301",
        ".": "\u0307",
        "=": "\u0304",
        H: "\u030B",
        "^": "\u0302",
        "`": "\u0300",
        acute: "\u0301",
        bar: "\u0304",
        breve: "\u0306",
        c: "\u0327",
        d: "\u0323",
        ddot: "\u0308",
        dot: "\u0307",
        grave: "\u0300",
        hat: "\u0302",
        k: "\u0328",
        mathring: "\u030A",
        overline: "\u0305",
        r: "\u030A",
        textacutemacron: "\u0304\u0301",
        textacutewedge: "\u030C\u0301",
        textadvancing: "\u0318",
        textbrevemacron: "\u0304\u0306",
        textcircumdot: "\u0307\u0302",
        textcorner: "\u031A",
        textdotacute: "\u0301\u0307",
        textdotbreve: "\u0310",
        textdoublegrave: "\u030F",
        textdoublevbaraccent: "\u030E",
        textgravedot: "\u0307\u0300",
        textgravemacron: "\u0300\u0304",
        textinvsubbridge: "\u033A",
        textlowering: "\u031E",
        textovercross: "\u033D",
        textraising: "\u031D",
        textretracting: "\u0319",
        textringmacron: "\u0304\u030A",
        textseagull: "\u033C",
        textsubarch: "\u032F",
        textsubbar: "\u0331",
        textsubbridge: "\u032A",
        textsubgrave: "\u0316",
        textsublhalfring: "\u031C",
        textsubplus: "\u031F",
        textsubrhalfring: "\u0339",
        textsubring: "\u0325",
        textsubsquare: "\u033B",
        textsubtilde: "\u0330",
        textsubumlaut: "\u0324",
        textsubwedge: "\u032C",
        textsuperimposetilde: "\u0334",
        textsyllabic: "\u0329",
        texttildedot: "\u0307\u0303",
        textvbaraccent: "\u030D",
        tilde: "\u0303",
        u: "\u0306",
        underbar: "\u0331",
        v: "\u030C",
        "~": "\u0303"
      }
    };
  }
});

// node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/index.js
var require_unicode2latex = __commonJS({
  "node_modules/.pnpm/unicode2latex@3.0.3/node_modules/unicode2latex/index.js"(exports, module2) {
    module2.exports = {
      ascii: require_ascii(),
      ascii_bibtex_creator: require_ascii_bibtex_creator(),
      unicode: require_unicode(),
      latex: require_latex(),
      diacritics: require_diacritics()
    };
  }
});

// node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/crossref.json
var require_crossref = __commonJS({
  "node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/crossref.json"(exports, module2) {
    module2.exports = {
      "*": {
        "*": {
          verbb: "verba"
        }
      },
      article: {
        periodical: {
          journalsubtitle: "subtitle",
          journaltitle: "title"
        }
      },
      book: {
        mvbook: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      bookinbook: {
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      collection: {
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      inbook: {
        "*": {
          bookauthor: "author"
        },
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      incollection: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      inproceedings: {
        mvproceedings: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        proceedings: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      inreference: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      proceedings: {
        mvproceedings: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      reference: {
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      suppbook: {
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      suppcollection: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      suppperiodical: {
        periodical: {
          journalsubtitle: "subtitle",
          journaltitle: "title"
        }
      }
    };
  }
});

// node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/fields.json
var require_fields = __commonJS({
  "node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/fields.json"(exports, module2) {
    module2.exports = {
      article: [
        "abstract",
        "addendum",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "issn",
        "issue",
        "issuesubtitle",
        "issuetitle",
        "issuetitleaddon",
        "iswc",
        "journalsubtitle",
        "journaltitle",
        "journaltitleaddon",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "volume",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      artwork: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      audio: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      bibnote: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      book: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      bookinbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      booklet: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      collection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      commentary: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customa: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customb: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customc: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customd: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      custome: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customf: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      dataset: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      image: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      incollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inproceedings: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inreference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      jurisdiction: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      legal: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      legislation: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      letter: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      manual: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      misc: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      movie: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      music: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvcollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvproceedings: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvreference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      online: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      patent: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "holder",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      performance: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      periodical: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "issn",
        "issue",
        "issuesubtitle",
        "issuetitle",
        "issuetitleaddon",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      proceedings: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      reference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      report: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "institution",
        "isan",
        "ismn",
        "isrn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      review: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      set: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      software: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      standard: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppcollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppperiodical: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      thesis: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "institution",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      unpublished: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      video: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      xdata: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ]
    };
  }
});

// node_modules/.pnpm/xregexp@5.1.1/node_modules/xregexp/tools/output/categories.js
var require_categories = __commonJS({
  "node_modules/.pnpm/xregexp@5.1.1/node_modules/xregexp/tools/output/categories.js"(exports, module2) {
    module2.exports = [
      {
        "name": "C",
        "alias": "Other",
        "isBmpLast": true,
        "bmp": "\0-\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F-\u0897\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCBD\uDCC3-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]"
      },
      {
        "name": "Cc",
        "alias": "Control",
        "bmp": "\0-\x7F-\x9F"
      },
      {
        "name": "Cf",
        "alias": "Format",
        "bmp": "\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
        "astral": "\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]"
      },
      {
        "name": "Cn",
        "alias": "Unassigned",
        "bmp": "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F\u0892-\u0897\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCC3-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]"
      },
      {
        "name": "Co",
        "alias": "Private_Use",
        "bmp": "\uE000-\uF8FF",
        "astral": "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]"
      },
      {
        "name": "Cs",
        "alias": "Surrogate",
        "bmp": "\uD800-\uDFFF"
      },
      {
        "name": "L",
        "alias": "Letter",
        "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "LC",
        "alias": "Cased_Letter",
        "bmp": "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
        "astral": "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD00-\uDD43]"
      },
      {
        "name": "Ll",
        "alias": "Lowercase_Letter",
        "bmp": "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
        "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
      },
      {
        "name": "Lm",
        "alias": "Modifier_Letter",
        "bmp": "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u08C9\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F2-\uA7F4\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F",
        "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD838[\uDD37-\uDD3D]|\u{1E94B}"
      },
      {
        "name": "Lo",
        "alias": "Other_Letter",
        "bmp": "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C8\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\u{1DF0A}|\uD838[\uDD00-\uDD2C\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "Lt",
        "alias": "Titlecase_Letter",
        "bmp": "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC"
      },
      {
        "name": "Lu",
        "alias": "Uppercase_Letter",
        "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
        "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]"
      },
      {
        "name": "M",
        "alias": "Mark",
        "bmp": "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "Mc",
        "alias": "Spacing_Mark",
        "bmp": "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
        "astral": "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]"
      },
      {
        "name": "Me",
        "alias": "Enclosing_Mark",
        "bmp": "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672"
      },
      {
        "name": "Mn",
        "alias": "Nonspacing_Mark",
        "bmp": "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "N",
        "alias": "Number",
        "bmp": "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nd",
        "alias": "Decimal_Number",
        "bmp": "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nl",
        "alias": "Letter_Number",
        "bmp": "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
        "astral": "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]"
      },
      {
        "name": "No",
        "alias": "Other_Number",
        "bmp": "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
        "astral": "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]"
      },
      {
        "name": "P",
        "alias": "Punctuation",
        "bmp": "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Pc",
        "alias": "Connector_Punctuation",
        "bmp": "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F"
      },
      {
        "name": "Pd",
        "alias": "Dash_Punctuation",
        "bmp": "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u2E5D\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
        "astral": "\u{10EAD}"
      },
      {
        "name": "Pe",
        "alias": "Close_Punctuation",
        "bmp": "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u2E56\u2E58\u2E5A\u2E5C\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63"
      },
      {
        "name": "Pf",
        "alias": "Final_Punctuation",
        "bmp": "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21"
      },
      {
        "name": "Pi",
        "alias": "Initial_Punctuation",
        "bmp": "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20"
      },
      {
        "name": "Po",
        "alias": "Other_Punctuation",
        "bmp": "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52-\u2E54\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Ps",
        "alias": "Open_Punctuation",
        "bmp": "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u2E55\u2E57\u2E59\u2E5B\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62"
      },
      {
        "name": "S",
        "alias": "Symbol",
        "bmp": "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Sc",
        "alias": "Currency_Symbol",
        "bmp": "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
        "astral": "\uD807[\uDFDD-\uDFE0]|\u{1E2FF}|\u{1ECB0}"
      },
      {
        "name": "Sk",
        "alias": "Modifier_Symbol",
        "bmp": "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u0888\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC2\uFF3E\uFF40\uFFE3",
        "astral": "\uD83C[\uDFFB-\uDFFF]"
      },
      {
        "name": "Sm",
        "alias": "Math_Symbol",
        "bmp": "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
        "astral": "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]"
      },
      {
        "name": "So",
        "alias": "Other_Symbol",
        "bmp": "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFD40-\uFD4F\uFDCF\uFDFD-\uFDFF\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\u{1E14F}|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Z",
        "alias": "Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
      },
      {
        "name": "Zl",
        "alias": "Line_Separator",
        "bmp": "\u2028"
      },
      {
        "name": "Zp",
        "alias": "Paragraph_Separator",
        "bmp": "\u2029"
      },
      {
        "name": "Zs",
        "alias": "Space_Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000"
      }
    ];
  }
});

// node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/sentence-case.js
var require_sentence_case = __commonJS({
  "node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/sentence-case.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toSentenceCase = void 0;
    var categories = require_categories();
    var cat = (name) => categories.find((c2) => c2.name === name).bmp;
    var L = cat("L");
    var Lu = cat("Lu");
    var Ll = cat("Ll");
    var N = cat("N");
    var No = cat("No");
    var Pc = cat("Pc");
    var re = {
      acronym: new RegExp(`([${Lu}][.])+$`),
      innerCaps: new RegExp(`.[${Lu}]`),
      ident: new RegExp(`^[$p{L}]+[${N}${No}][${L}${N}${No}]*$`),
      allCaps: new RegExp(`^[${Lu}${N}${No}]+$`),
      skipWords: /^(but|or|yet|so|for|and|nor|a|an|the|at|by|from|in|into|of|on|to|with|updown|as)$/i,
      words: new RegExp(`([\uFFFD${L}${N}${No}]+([\uFFFD${Pc}${L}${N}${No}]*))|(\\s([\uFFFD${Lu}]+[.]){2,})?`, "g"),
      titleCase: new RegExp(`^[${Lu}][${Ll}${N}${No}]+$`),
      subSentenceStart: new RegExp(`([.?!][\\s]+)(<[^>]+>)?([${Lu}])`, "g"),
      sentenceStart: new RegExp(`^(<[^>]+>)?([${Lu}])`, "g")
    };
    function lowercase(word, allcaps) {
      if (!word)
        return word;
      if (allcaps)
        return word.toLowerCase();
      const unmasked = word.replace(/\uFFFD/g, "");
      if (unmasked.match(re.skipWords))
        return word.toLowerCase();
      if (unmasked.match(re.titleCase))
        return word.toLowerCase();
      if (unmasked.length === 1)
        return unmasked === "A" ? word.toLowerCase() : word;
      if (unmasked.match(re.innerCaps))
        return word;
      if (unmasked.match(re.ident) || unmasked.match(re.allCaps))
        return word;
      return word.toLowerCase();
    }
    function toSentenceCase(sentence, preserveQuoted = false) {
      const allcaps = sentence === sentence.toUpperCase();
      const preserve = [];
      sentence.replace(re.subSentenceStart, (match, end2, markup, char, i) => {
        if (!sentence.substring(0, i + 1).match(re.acronym)) {
          preserve.push({ pos: i + end2.length + ((markup === null || markup === void 0 ? void 0 : markup.length) || 0), text: char, description: "sub-sentence-start" });
        }
        return "";
      });
      sentence.replace(re.sentenceStart, (match, markup, char) => {
        preserve.push({ pos: (markup === null || markup === void 0 ? void 0 : markup.length) || 0, text: char, description: "sentence-start" });
        return "";
      });
      sentence.replace(/<span class="nocase">.*?<\/span>|<nc>.*?<\/nc>/gi, (text, pos) => {
        preserve.push({ pos, text, description: "nocase" });
        return "";
      });
      let masked = sentence.replace(/<[^>]+>/g, (text, pos) => {
        preserve.push({ pos, text, description: "markup" });
        return "\uFFFD".repeat(text.length);
      });
      for (const q of [/(“)(.*?)”/g, /(‘)(.*?)’/g, /(["])(.*?)\1/g]) {
        sentence.replace(q, (text, quote, quoted, pos) => {
          preserve.push({
            pos: pos + (preserveQuoted ? 0 : quote.length),
            text: preserveQuoted ? text : toSentenceCase(quoted, preserveQuoted),
            description: `quoted with ${q}`
          });
          return "";
        });
      }
      masked = masked.replace(/[;:]\uFFFD*\s+\uFFFD*A\s/g, (match) => match.toLowerCase()).replace(/[–—]\uFFFD*\s*\uFFFD*A\s/g, (match) => match.toLowerCase()).replace(re.words, (word) => lowercase(word, allcaps));
      sentence = masked;
      for (const { pos, text } of preserve) {
        sentence = sentence.substring(0, pos) + text + sentence.substring(pos + text.length);
      }
      return sentence;
    }
    exports.toSentenceCase = toSentenceCase;
  }
});

// node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/index.js
var require_bibtex_parser = __commonJS({
  "node_modules/.pnpm/@retorquere+bibtex-parser@7.0.8/node_modules/@retorquere/bibtex-parser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jabref = exports.chunker = exports.promises = exports.ast = exports.parse = exports.fields = exports.toSentenceCase = void 0;
    var bibtex = __importStar(require_grammar());
    var chunker = __importStar(require_chunker());
    exports.chunker = chunker;
    var jabref = __importStar(require_jabref());
    exports.jabref = jabref;
    var jabref_1 = require_jabref();
    var unicode2latex_1 = require_unicode2latex();
    var crossref_json_1 = __importDefault(require_crossref());
    var fields_json_1 = __importDefault(require_fields());
    var sentence_case_1 = require_sentence_case();
    Object.defineProperty(exports, "toSentenceCase", { enumerable: true, get: function() {
      return sentence_case_1.toSentenceCase;
    } });
    var sentence_case_2 = require_sentence_case();
    var ParserError = class extends Error {
      constructor(message, node) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = this.constructor.name;
        this.node = node;
      }
    };
    var TeXError = class extends Error {
      constructor(message, node, text) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = this.constructor.name;
        this.node = node;
        this.text = text;
      }
    };
    function charCat(charcats, select) {
      return charcats.filter((cat) => select.includes(cat.alias)).map((cat) => cat.bmp).join("");
    }
    var charCategories = require_categories();
    var charClass = {
      Lu: charCat(charCategories, ["Uppercase_Letter", "Titlecase_Letter"]),
      Ll: charCat(charCategories, ["Lowercase_Letter"]),
      LnotLu: charCat(charCategories, ["Lowercase_Letter", "Modifier_Letter", "Other_Letter", "Nonspacing_Mark", "Spacing_Mark", "Decimal_Number", "Letter_Number"]),
      P: charCat(charCategories, ["Punctuation"]),
      L: charCat(charCategories, ["Letter"]),
      N: charCat(charCategories, ["Decimal_Number", "Letter_Number"]),
      AlphaNum: charCat(charCategories, ["Letter", "Decimal_Number", "Letter_Number"]),
      LC: charCat(charCategories, ["Cased_Letter"])
    };
    var marker = {
      and: "",
      comma: "",
      space: "",
      literal: "",
      markup: "",
      re: {
        and: /./,
        comma: /./,
        space: /./,
        literal: /./,
        literalName: /./
      },
      clean(s) {
        return s.replace(marker.re.space, " ").replace(marker.re.comma, ", ").replace(marker.re.literal, "");
      }
    };
    marker.re = {
      and: new RegExp(marker.and, "g"),
      comma: new RegExp(marker.comma, "g"),
      space: new RegExp(marker.space, "g"),
      literal: new RegExp(marker.literal, "g"),
      literalName: new RegExp(`^${marker.literal}([^${marker.literal}]*)${marker.literal}$`)
    };
    var preserveCase = {
      leadingCap: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]+[${charClass.P}]?$`),
      allCaps: new RegExp(`^[${charClass.Lu}${charClass.N}]{2,}$`),
      allLower: new RegExp(`^[${charClass.Ll}${charClass.N}]{2,}$`),
      joined: new RegExp(`^[${charClass.Lu}][${charClass.LnotLu}]*([-+][${charClass.L}${charClass.N}]+)*[${charClass.P}]*$`),
      hasUpper: new RegExp(`[${charClass.Lu}]`),
      hasLower: new RegExp(`[${charClass.Ll}]`),
      isNumber: /^[0-9]+$/,
      hasAlpha: new RegExp(`[${charClass.L}]`),
      hasAlphaNum: new RegExp(`[${charClass.AlphaNum}]`),
      notAlphaNum: new RegExp(`[^${charClass.AlphaNum}]`, "g"),
      sentenceStart: new RegExp(`(^|([\u2014:?!.]\\s+))[${charClass.Lu}]`, "g"),
      markup: /<\/?span[^>]*>/g,
      acronym: new RegExp(`.*\\.${marker.markup}*[${charClass.Lu}]${marker.markup}*\\.$`),
      notCaseSensitive: new RegExp(`[^${charClass.LC}]`),
      isCaseSensitive: new RegExp(`[${charClass.LC}]`),
      quoted: /("[^"]+")|(“[^“]+“)/g
    };
    exports.fields = {
      creator: [
        "author",
        "bookauthor",
        "collaborator",
        "commentator",
        "director",
        "editor",
        "editora",
        "editorb",
        "editors",
        "holder",
        "scriptwriter",
        "translator"
      ],
      title: [
        "title",
        "series",
        "shorttitle",
        "booktitle",
        "type",
        "origtitle",
        "maintitle",
        "eventtitle"
      ],
      unnest: [
        "publisher",
        "location"
      ],
      verbatim: [
        "doi",
        "eprint",
        "file",
        "files",
        "pdf",
        "groups",
        "ids",
        "url",
        "verba",
        "verbb",
        "verbc"
      ],
      html: [
        "annotation",
        "comment",
        "annote",
        "review",
        "notes",
        "note"
      ],
      unabbrev: [
        "journal",
        "journaltitle",
        "journal-full"
      ]
    };
    var english = [
      "american",
      "british",
      "canadian",
      "english",
      "australian",
      "newzealand",
      "usenglish",
      "ukenglish",
      "en",
      "eng",
      "en-au",
      "en-bz",
      "en-ca",
      "en-cb",
      "en-gb",
      "en-ie",
      "en-jm",
      "en-nz",
      "en-ph",
      "en-tt",
      "en-us",
      "en-za",
      "en-zw",
      "anglais"
    ];
    var Parser = class {
      constructor(options = {}) {
        this.in_preamble = false;
        this.preamble = [];
        this.log = function(_str) {
        };
        for (const [option, value] of Object.entries(options)) {
          if (typeof value === "undefined")
            delete options[option];
        }
        if (options.errorHandler === false) {
          options.errorHandler = function(_err) {
          };
        } else if (typeof options.errorHandler === "undefined") {
          options.errorHandler = function(err) {
            throw err;
          };
        }
        if (typeof options.sentenceCase === "boolean") {
          options.sentenceCase = options.sentenceCase ? english : [];
        } else {
          options.sentenceCase = options.sentenceCase || english;
        }
        if (!options.strings)
          options.strings = {};
        if (!options.unabbreviate)
          options.unabbreviate = {};
        if (options.raw) {
          options.sentenceCase = false;
          options.caseProtection = false;
        }
        this.options = Object.assign({ caseProtection: "as-needed", verbatimFields: [/^citeulike-linkout-[0-9]+$/, /^bdsk-url-[0-9]+$/, ...exports.fields.verbatim], verbatimCommands: ["url"], unnestFields: [...exports.fields.title, ...exports.fields.unnest, ...exports.fields.verbatim], unnestMode: "unwrap", htmlFields: exports.fields.html, guessAlreadySentenceCased: true, applyCrossRef: options.applyCrossRef || typeof options.applyCrossRef === "undefined", markup: {} }, options);
        const markup_defaults = {
          enquote: { open: "\u201C", close: "\u201D" },
          sub: { open: "<sub>", close: "</sub>" },
          sup: { open: "<sup>", close: "</sup>" },
          bold: { open: "<b>", close: "</b>" },
          italics: { open: "<i>", close: "</i>" },
          smallCaps: { open: '<span style="font-variant:small-caps;">', close: "</span>" },
          caseProtect: { open: '<span class="nocase">', close: "</span>" },
          roman: { open: "", close: "" },
          fixedWidth: { open: "<tt>", close: "</tt>" }
        };
        for (const [markup, { open, close }] of Object.entries(markup_defaults)) {
          this.options.markup[markup] = this.options.markup[markup] || { open, close };
        }
        for (const i of [1, 2, 3, 4]) {
          this.options.markup[`h${i}`] = this.options.markup[`h${i}`] || { open: `<h${i}>`, close: `</h${i}>` };
        }
        this.unresolvedStrings = {};
        this.errors = [];
        this.comments = [];
        this.entries = [];
        this.strings = {};
        this.newcommands = {};
        this.default_strings = {
          JAN: [this.text("01")],
          FEB: [this.text("02")],
          MAR: [this.text("03")],
          APR: [this.text("04")],
          MAY: [this.text("05")],
          JUN: [this.text("06")],
          JUL: [this.text("07")],
          AUG: [this.text("08")],
          SEP: [this.text("09")],
          OCT: [this.text("10")],
          NOV: [this.text("11")],
          DEC: [this.text("12")],
          ACMCS: [this.text("ACM Computing Surveys")],
          ACTA: [this.text("Acta Informatica")],
          CACM: [this.text("Communications of the ACM")],
          IBMJRD: [this.text("IBM Journal of Research and Development")],
          IBMSJ: [this.text("IBM Systems Journal")],
          IEEESE: [this.text("IEEE Transactions on Software Engineering")],
          IEEETC: [this.text("IEEE Transactions on Computers")],
          IEEETCAD: [this.text("IEEE Transactions on Computer-Aided Design of Integrated Circuits")],
          IPL: [this.text("Information Processing Letters")],
          JACM: [this.text("Journal of the ACM")],
          JCSS: [this.text("Journal of Computer and System Sciences")],
          SCP: [this.text("Science of Computer Programming")],
          SICOMP: [this.text("SIAM Journal on Computing")],
          TOCS: [this.text("ACM Transactions on Computer Systems")],
          TODS: [this.text("ACM Transactions on Database Systems")],
          TOG: [this.text("ACM Transactions on Graphics")],
          TOMS: [this.text("ACM Transactions on Mathematical Software")],
          TOOIS: [this.text("ACM Transactions on Office Information Systems")],
          TOPLAS: [this.text("ACM Transactions on Programming Languages and Systems")],
          TCS: [this.text("Theoretical Computer Science")]
        };
        if (typeof this.options.strings === "string") {
          const strings = this.options.strings;
          this.options.strings = {};
          this.parseChunk({ text: strings, offset: { pos: 0, line: 0 } });
          this.preloaded_strings = this.strings;
          this.strings = {};
        } else {
          this.preloaded_strings = {};
        }
      }
      ast(input, clean = true) {
        let parsed = [];
        for (const chunk of chunker.parse(input)) {
          const { children: children2 } = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
          if (clean)
            this.clean(children2);
          parsed = parsed.concat(children2);
        }
        return parsed;
      }
      parse(input) {
        for (const chunk of chunker.parse(input)) {
          this.parseChunk(chunk);
        }
        return this.parsed();
      }
      async parseAsync(input) {
        for (const chunk of await chunker.promises.parse(input)) {
          this.parseChunk(chunk);
        }
        return this.parsed();
      }
      applyCrossrefField(parent, parentfield, child, childfield) {
        let applied = false;
        for (const field of ["fields", "creators"]) {
          if (!child[field][childfield] && parent[field][parentfield]) {
            child[field][childfield] = parent[field][parentfield];
            applied = true;
            if (!child.crossref.inherited.includes(childfield))
              child.crossref.inherited.push(childfield);
            if (!parent.crossref.donated.includes(parentfield))
              parent.crossref.donated.push(parentfield);
          }
        }
        return applied;
      }
      applyCrossref(entry, entries) {
        for (const xref of ["crossref", "xdata"]) {
          if (!entry.fields[xref])
            continue;
          for (const parents of entry.fields[xref]) {
            let applied = false;
            for (const parent of parents.split(/\s*,\s*/).map((key) => entries[key]).filter((p) => p)) {
              this.applyCrossref(parent, entries);
              for (const mappings of [crossref_json_1.default[entry.type], crossref_json_1.default["*"]].filter((m2) => m2)) {
                for (const mapping of [mappings[parent.type], mappings["*"]].filter((m2) => m2)) {
                  for (const [target, source] of Object.entries(mapping)) {
                    if (this.applyCrossrefField(parent, source, entry, target))
                      applied = true;
                  }
                  for (const field of fields_json_1.default[entry.type] || []) {
                    if (this.applyCrossrefField(parent, field, entry, field))
                      applied = true;
                  }
                }
              }
            }
            if (applied)
              delete entry.fields[xref];
          }
        }
      }
      parsed() {
        this.field = null;
        const strings = {};
        this.cleaning = { type: "other" };
        for (const [key, value] of Object.entries(this.strings)) {
          this.field = {
            name: "@string",
            text: "",
            level: 0,
            preserveRanges: null,
            words: {
              upper: 0,
              lower: 0,
              other: 0
            }
          };
          this.convert(this.clean(value));
          strings[key] = this.field.text;
        }
        if (this.options.applyCrossRef) {
          const entries = this.entries.reduce((acc, entry) => {
            acc[entry.key] = entry;
            return acc;
          }, {});
          for (const entry of this.entries) {
            this.applyCrossref(entry, entries);
          }
        }
        const { comments, jabref: jabref2 } = (0, jabref_1.parse)(this.comments);
        return {
          errors: this.errors,
          entries: this.entries,
          comments,
          jabref: jabref2,
          strings,
          preamble: this.preamble
        };
      }
      preserve(start3, end2, reason) {
        if (!this.field.preserveRanges)
          return;
        if (!end2) {
          this.field.preserveRanges = null;
          return;
        }
        this.field.preserveRanges.push({ start: start3, end: end2, description: reason });
      }
      parseChunk(chunk) {
        this.chunk = chunk.text;
        try {
          let bib = bibtex.parse(chunk.text, Object.assign(Object.assign({}, this.options), { combiningDiacritics: unicode2latex_1.diacritics.commands }));
          if (bib.kind !== "Bibliography")
            throw new Error(this.show(bib));
          bib = this.clean(bib);
          for (const entity of bib.children) {
            switch (entity.kind) {
              case "Entry":
              case "BracedComment":
              case "LineComment":
              case "PreambleExpression":
                this.convert(entity);
                break;
              case "StringDeclaration":
              case "NonEntryText":
                break;
            }
          }
          return bib;
        } catch (err) {
          if (!err.location)
            throw err;
          this.errors.push({
            message: err.message,
            line: err.location.start.line + chunk.offset.line,
            column: err.location.start.column,
            source: this.chunk
          });
          return null;
        }
      }
      show(o) {
        let text = JSON.stringify(o);
        if (this.chunk)
          text += `
${this.chunk.trim()}`;
        return text;
      }
      text(value = "") {
        return { kind: "Text", value, mode: "text" };
      }
      error(err, returnvalue) {
        if (typeof this.options.errorHandler === "function")
          this.options.errorHandler(err);
        return returnvalue || this.text();
      }
      condense(node) {
        node.value = this.clean(node.value);
        node.value = node.value.reduce((acc, child) => {
          if (child.kind === "Block" && !child.case && Object.keys(child.markup).length === 0) {
            acc = acc.concat(child.value);
          } else {
            acc.push(child);
          }
          return acc;
        }, []);
        node.value = node.value.reduce((acc, child, i) => {
          if (acc.length === 0) {
            acc.push(child);
            return acc;
          }
          const last = acc[acc.length - 1];
          const next = node.value[i + 1];
          if (this.options.caseProtection === "strict" && this.onlyCaseProtected(last) && child.kind === "Text" && !child.value.match(preserveCase.isCaseSensitive) && this.onlyCaseProtected(next)) {
            last.value.push(child);
            delete last.source;
            return acc;
          }
          if (last.kind === "Block" && child.kind === "Block" && Object.keys(last.markup).sort().join("/") === Object.keys(child.markup).sort().join("/")) {
            last.value = last.value.concat(child.value);
            delete last.source;
            return acc;
          }
          if (last.kind === "Text" && child.kind === "Text" && last.mode === child.mode) {
            last.value += child.value;
            delete last.source;
            return acc;
          }
          acc.push(child);
          return acc;
        }, []);
      }
      onlyCaseProtected(node) {
        return (node === null || node === void 0 ? void 0 : node.kind) === "Block" && node.case === "protect" && Object.keys(node.markup).join("/") === "";
      }
      argument(node, kind) {
        if (!node.arguments || !node.arguments.required.length)
          return kind === "none";
        if (typeof kind === "number") {
          return node.arguments.required.length === kind ? node.arguments.required : false;
        }
        if (node.arguments.required.length !== 1)
          return false;
        if (kind === "text") {
          const first = node.arguments.required[0];
          if (first.kind === "Block") {
            switch (first.value.length) {
              case 0:
                return "";
              case 1:
                if (first.value[0].kind === "Text")
                  return first.value[0].value;
                break;
            }
          }
          kind = "Text";
        }
        if (node.arguments.required.length !== 1 || node.arguments.required[0].kind !== kind)
          return false;
        switch (node.arguments.required[0].kind) {
          case "Text":
            return node.arguments.required[0].value;
          case "RegularCommand":
            return node.arguments.required[0];
          case "Block":
            return node.arguments.required[0];
        }
        return false;
      }
      isBreak(node, kind) {
        return node && node.kind === "RegularCommand" && kind.includes(node.command);
      }
      clean(node) {
        if (Array.isArray(node)) {
          return node.filter((child, i) => !(this.isBreak(child, ["\\"]) && this.isBreak(node[i - 1], ["\\", "par"]))).filter((child, i) => !this.isBreak(child, ["par"]) || !this.isBreak(node[i - 1], ["par"])).map((child) => this.clean(child));
        }
        delete node.loc;
        switch (node.kind) {
          case "InlineMath":
          case "DisplayMath":
            return this.clean_block(node);
          case "Environment":
            return this.clean_environment(node);
          case "Block":
            return this.clean_block(node);
          case "Bibliography":
            return this.clean_bib(node);
          case "RegularCommand":
            return this.clean_command(node);
          case "DiacriticCommand":
            return this.clean_diacritic(node);
          case "Entry":
            return this.clean_entry(node);
          case "Field":
            return this.options.raw ? node : this.clean_field(node);
          case "StringDeclaration":
            return this.clean_stringdecl(node);
          case "StringReference":
            return this.clean_stringref(node);
          case "SubscriptCommand":
          case "SuperscriptCommand":
            return this.clean_script(node);
          case "SymbolCommand":
            return this.clean_symbol(node);
          case "PreambleExpression":
            return this.clean_preamble(node);
          case "Number":
          case "Text":
          case "BracedComment":
          case "LineComment":
          case "NonEntryText":
            return node;
          default:
            return this.error(new ParserError(`no cleanup method for ${this.show(node)}`, node), this.text());
        }
      }
      clean_preamble(node) {
        this.in_preamble = true;
        try {
          return this.clean(node.value);
        } finally {
          this.in_preamble = false;
        }
      }
      clean_bib(node) {
        node.children = node.children.filter((child) => child.kind !== "NonEntryText").map((child) => this.clean(child));
        return node;
      }
      clean_stringdecl(node) {
        this.strings[node.name.toUpperCase()] = node.value;
        return node;
      }
      clean_stringref(node) {
        const name = node.name.toUpperCase();
        const stringvalue = this.strings[name] || this.options.strings[name] || this.preloaded_strings[name] || this.default_strings[name] || exports.fields.unabbrev.includes(this.cleaning.name) && this.options.unabbreviate[name] && [this.text(this.options.unabbreviate[name])];
        if (!stringvalue) {
          if (!this.unresolvedStrings[name])
            this.errors.push({ message: `Unresolved @string reference ${JSON.stringify(node.name)}` });
          this.unresolvedStrings[name] = true;
        }
        return this.clean({
          kind: "Block",
          case: stringvalue ? void 0 : "preserve",
          markup: {},
          value: stringvalue ? JSON.parse(JSON.stringify(stringvalue)) : [this.text(node.name)]
        });
      }
      clean_entry(node) {
        const shortjournals = [];
        for (const field of node.fields) {
          if (exports.fields.unabbrev.includes(field.name) && Array.isArray(field.value)) {
            const abbr = field.value.map((v) => v.source).join("").toUpperCase();
            const journal = this.options.unabbreviate[abbr];
            if (journal) {
              shortjournals.push(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(field))), { name: "shortjournal" }));
              field.value = [this.text(journal)];
            }
          }
        }
        node.fields = node.fields.concat(shortjournals).map((child) => this.clean(child));
        return node;
      }
      startCleaning(name) {
        name = name.toLowerCase();
        if (exports.fields.title.includes(name)) {
          this.cleaning = { type: "title", name };
        } else if (exports.fields.creator.includes(name.replace(/s$/, ""))) {
          this.cleaning = { type: "creator", name: name.replace(/s$/, "") };
        } else {
          this.cleaning = { type: "other", name };
        }
      }
      stripNoCase(node, strip, preserve) {
        switch (node.kind) {
          case "RegularCommand":
            if (["chsf", "bibstring", "cite"].includes(node.command))
              strip = true;
            node.arguments.required.map((arg) => this.stripNoCase(arg, strip, preserve));
            break;
          case "Block":
          case "InlineMath":
          case "DisplayMath":
            if (strip && node.case === "protect") {
              if (preserve) {
                node.case = "preserve";
              } else {
                delete node.case;
              }
            }
            node.value.map((v) => this.stripNoCase(v, strip || node.case === "protect", preserve));
            break;
          case "Field":
            if (Array.isArray(node.value))
              node.value.forEach((v) => this.stripNoCase(v, strip, preserve));
            break;
        }
      }
      isVerbatimField(name) {
        return !!this.options.verbatimFields.find((p) => typeof p === "string" ? name === p : name.match(p));
      }
      clean_field(node) {
        this.startCleaning(node.name);
        this.stripNoCase(node, !this.options.caseProtection || this.isVerbatimField(node.name), this.options.sentenceCase.length === 0);
        if (Array.isArray(node.value))
          this.condense(node);
        return node;
      }
      clean_script(node) {
        let m2, value, singlechar;
        if (singlechar = unicode2latex_1.latex[node.source])
          return this.text(singlechar);
        if ((m2 = node.source.match(/^([\^_])([^{}]+)$/)) && ((singlechar = unicode2latex_1.latex[`${m2[1]}${m2[2]}`]) || (singlechar = unicode2latex_1.latex[`${m2[1]}{${m2[2]}}`])))
          return this.text(singlechar);
        if ((m2 = node.source.match(/^([\^_])\{([^{}]+)\}$/)) && ((singlechar = unicode2latex_1.latex[`${m2[1]}${m2[2]}`]) || (singlechar = unicode2latex_1.latex[`${m2[1]}{${m2[2]}}`])))
          return this.text(singlechar);
        const cmd = node.kind === "SuperscriptCommand" ? "^" : "_";
        if (typeof node.value === "string" && (singlechar = unicode2latex_1.latex[`${cmd}${node.value}`] || unicode2latex_1.latex[`${cmd}{${node.value}}`])) {
          return this.text(singlechar);
        }
        if (typeof node.value === "string") {
          value = [this.text(node.value)];
        } else if (!Array.isArray(node.value)) {
          value = [node.value];
        } else {
          value = node.value;
        }
        const mode = node.kind === "SuperscriptCommand" ? "sup" : "sub";
        return this.clean({
          kind: "Block",
          markup: { [mode]: true },
          value
        });
      }
      clean_environment(node) {
        this.condense(node);
        return node;
      }
      needsProtection(word) {
        return !word.match(preserveCase.hasUpper) && !!word.match(preserveCase.hasLower);
      }
      clean_block(node) {
        var _a;
        this.condense(node);
        if (this.options.caseProtection !== "strict" && ((_a = this.cleaning) === null || _a === void 0 ? void 0 : _a.type) === "title" && node.case === "protect") {
          let preserve = true;
          for (const child of node.value) {
            if (child.kind === "Text") {
              const value = child.value.trim();
              preserve = !value.match(preserveCase.isCaseSensitive) || !value.split(/\s+/).find((word) => this.needsProtection(word));
            } else {
              preserve = false;
            }
            if (!preserve)
              break;
          }
          if (preserve)
            node.case = "preserve";
        }
        if (node.kind === "Block") {
          for (const [markup, on] of Object.entries(node.markup)) {
            if (!on)
              delete node.markup[markup];
          }
        }
        return node;
      }
      clean_diacritic(node) {
        const char = node.dotless ? `\\${node.character}` : node.character;
        let unicode = unicode2latex_1.latex[`\\${node.mark}{${char}}`] || unicode2latex_1.latex[`\\${node.mark}${char}`] || unicode2latex_1.latex[`{\\${node.mark} ${char}}`] || unicode2latex_1.latex[`{\\${node.mark}${char}}`] || unicode2latex_1.latex[`\\${node.mark} ${char}`];
        if (!unicode && !node.dotless && node.character.length === 1 && unicode2latex_1.diacritics.tounicode[node.mark])
          unicode = node.character + unicode2latex_1.diacritics.tounicode[node.mark];
        if (!unicode && !this.in_preamble)
          return this.error(new TeXError(`Unhandled \\${node.mark}{${char}}`, node, this.chunk));
        return this.text(unicode);
      }
      clean_symbol(node) {
        if (node.command === "\\")
          return this.text("\n");
        return this.text(unicode2latex_1.latex[`\\${node.command}`] || node.command);
      }
      first_text_block(node) {
        if (!node)
          return null;
        if (node.kind === "Block") {
          for (const child of node.value) {
            switch (child.kind) {
              case "Text":
                return child.value ? node : null;
              case "Block":
                const candidate = this.first_text_block(child);
                if (candidate)
                  return candidate;
                break;
              default:
                return null;
            }
          }
        } else {
          return null;
        }
      }
      clean_command(node) {
        var _a;
        let arg, unicode;
        if (unicode = unicode2latex_1.latex[node.source])
          return this.text(unicode);
        switch (node.command) {
          case "newcommand":
            if (((_a = node.arguments) === null || _a === void 0 ? void 0 : _a.required.length) === 2 && node.arguments.required[0].kind === "Block" && node.arguments.required[0].value.length === 1 && node.arguments.required[0].value[0].kind === "RegularCommand" && node.arguments.required[1].kind === "Block") {
              this.newcommands[node.arguments.required[0].value[0].command] = node.arguments.required[1].value;
              return this.text();
            }
            break;
          case "item":
            return { kind: "Markup", value: "<li>", source: node.source };
          case "frac":
            if (arg = this.argument(node, 2)) {
              if (arg[0].kind === "Text" && arg[1].kind === "Text" && (unicode = unicode2latex_1.latex[`\\frac{${arg[0].value}}{${arg[1].value}}`]))
                return this.text(unicode);
              return this.clean({
                kind: "Block",
                case: "protect",
                markup: {},
                value: [
                  { kind: "Block", markup: { sup: true }, value: [arg[0]] },
                  this.text("\u2044"),
                  { kind: "Block", markup: { sub: true }, value: [arg[1]] }
                ]
              });
            }
            break;
          case "vspace":
          case "vphantom":
          case "path":
          case "aftergroup":
          case "ignorespaces":
          case "relax":
          case "noopsort":
          case "ifdefined":
          case "DeclarePrefChars":
          case "else":
          case "fi":
          case "makeatletter":
            return this.text();
          case "ElsevierGlyph":
            if (arg = this.argument(node, "Text")) {
              if (unicode = unicode2latex_1.latex[`\\${node.command}{${arg}}`])
                return this.text(unicode);
              return this.text(String.fromCharCode(parseInt(arg, 16)));
            }
            break;
          case "chsf":
            if (this.argument(node, "none"))
              return this.text();
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "enquote":
          case "mkbibquote":
          case "bibstring":
          case "cite":
          case "textcite":
          case "textup":
          case "citeauthor":
          case "textsc":
          case "textbf":
          case "texttt":
          case "mkbibbold":
          case "section":
          case "subsection":
          case "subsubsection":
          case "subsubsubsection":
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "textsuperscript":
          case "sp":
            if ((arg = this.argument(node, "Text")) && (unicode = unicode2latex_1.latex[`^{${arg}}`]))
              return this.text(unicode);
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "textsubscript":
          case "sb":
            if ((arg = this.argument(node, "Text")) && (unicode = unicode2latex_1.latex[`_{${arg}}`]))
              return this.text(unicode);
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "mkbibitalic":
          case "mkbibemph":
          case "textit":
          case "emph":
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            if (arg = this.argument(node, "Text"))
              return this.clean({ kind: "Block", markup: { italics: true }, value: [this.text(arg)] });
            break;
          case "bibcyr":
            if (this.argument(node, "none"))
              return this.text();
            if (arg = this.argument(node, "Block"))
              return this.clean(arg);
            break;
          case "hspace":
          case "mathrm":
          case "textrm":
          case "ocirc":
          case "mbox":
            if (arg = this.argument(node, "text")) {
              if (node.command === "mbox" && !arg)
                return this.text("\u200B");
              unicode = unicode2latex_1.latex[`\\${node.command}{${arg}}`];
              return this.text(unicode || (node.command === "hspace" ? " " : arg));
            } else if (!node.arguments.required.length) {
              return node.command === "mbox" ? this.text("\u200B") : this.text();
            } else if (arg = this.argument(node, "Block")) {
              return this.clean(arg);
            }
            break;
          case "href":
          case "url":
            node.arguments.required = node.arguments.required.map((a2) => this.clean(a2));
            return node;
          case "sl":
          case "em":
          case "it":
          case "itshape":
          case "bf":
          case "bfseries":
          case "sc":
          case "scshape":
          case "tt":
          case "rm":
          case "sf":
          case "verb":
            return this.text();
          case "left":
          case "right":
            return this.text();
          case "par":
          case "\\":
            return node;
          case "cyr":
            if (this.argument(node, "none"))
              return this.text();
            break;
          case "polhk":
            if (unicode = this.argument(node, "text")) {
              if (unicode.length === 1)
                return this.text(`${unicode}\u0328`);
            }
            if (this.argument(node, "none"))
              return this.text("\u0328");
            break;
          default:
            if (node.kind === "RegularCommand" && this.newcommands[node.command]) {
              return this.clean({
                kind: "Block",
                markup: {},
                value: JSON.parse(JSON.stringify(this.newcommands[node.command]))
              });
            }
            if (unicode2latex_1.diacritics.tounicode[node.command]) {
              node.arguments.required = this.clean(node.arguments.required);
              let block;
              if (node.arguments.required.length === 1 && node.arguments.required[0].kind === "Text") {
                block = {
                  kind: "Block",
                  markup: {},
                  value: [{
                    kind: "DiacriticCommand",
                    mark: node.command,
                    character: node.arguments.required[0].value,
                    dotless: false,
                    loc: node.arguments.required[0].loc,
                    source: node.arguments.required[0].source
                  }]
                };
                return this.clean(block);
              } else if (block = this.first_text_block(node.arguments.required[0])) {
                let fixed = false;
                block.value = block.value.reduce((value, child) => {
                  if (!fixed && child.kind === "Text") {
                    fixed = true;
                    value.push({ kind: "DiacriticCommand", mark: node.command, character: child.value[0] });
                    value.push(Object.assign(Object.assign({}, child), { value: child.value.substring(1) }));
                  } else {
                    value.push(child);
                  }
                  return value;
                }, []);
                return this.clean({
                  kind: "Block",
                  markup: {},
                  value: node.arguments.required
                });
              } else {
                if (node.command === "overline")
                  return this.text(" ");
                return this.clean({
                  kind: "Block",
                  markup: {},
                  value: [this.text(` ${unicode2latex_1.diacritics.tounicode[node.command]}`)].concat(node.arguments.required)
                });
              }
            }
            if (unicode = unicode2latex_1.latex[node.source] || unicode2latex_1.latex[`${node.source}{}`])
              return this.text(unicode);
            if ((unicode = unicode2latex_1.latex[`\\${node.command}`] || unicode2latex_1.latex[`\\${node.command}{}`]) && this.argument(node, "none"))
              return this.text(unicode);
            if ((arg = this.argument(node, "Text")) && (unicode = unicode2latex_1.latex[`\\${node.command}{${arg}}`]))
              return this.text(unicode);
            break;
        }
        if (this.in_preamble)
          return this.text(node.source);
        if (this.options.unknownCommandHandler) {
          return this.options.unknownCommandHandler.call(this, node);
        } else if (this.options.unknownCommandHandler === false) {
          return this.text();
        } else {
          return this.error(new TeXError(`Unhandled command: ${node.command}${this.show(node)}`, node, this.chunk));
        }
      }
      preserveCase(word) {
        var _a, _b;
        if (!word.trim())
          return false;
        if (!word.match(preserveCase.hasAlphaNum))
          return true;
        word = word.replace(/[/’'”:()]/g, "");
        if (word === "I")
          return true;
        if (word.length === 1)
          return false;
        if (word.replace(preserveCase.notCaseSensitive) === "")
          return false;
        if (word.match(preserveCase.leadingCap) && ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.text) === null || _b === void 0 ? void 0 : _b.length) === 0)
          return false;
        if (word.match(preserveCase.allCaps))
          return true;
        if (word.length > 1 && word.match(preserveCase.joined))
          return false;
        if (word.match(preserveCase.hasUpper))
          return true;
        if (word.match(preserveCase.isNumber))
          return true;
        return false;
      }
      convert(node) {
        if (Array.isArray(node))
          return node.map((child) => this.convert(child));
        if (this.options.raw && this.field)
          node = this.text(node.source);
        switch (node.kind) {
          case "Markup":
            if (this.field)
              this.field.text += node.value;
            break;
          case "BracedComment":
          case "LineComment":
            this.comments.push(node.value);
            break;
          case "Entry":
            this.convert_entry(node);
            break;
          case "Number":
            this.convert_number(node);
            break;
          case "Text":
            this.convert_text(node);
            break;
          case "Block":
          case "InlineMath":
          case "DisplayMath":
            const start3 = this.field ? this.field.text.length : null;
            const preserve = typeof start3 === "number" && this.field.preserveRanges;
            this.convert_block(node);
            if (preserve && (node.case || node.kind.endsWith("Math")))
              this.preserve(start3, this.field.text.length);
            break;
          case "Environment":
            this.convert_environment(node);
            break;
          case "PreambleExpression":
            this.preamble.push(node.value.map((preamble) => preamble.source).join("\n\n"));
            break;
          case "StringDeclaration":
            break;
          default:
            if (node.kind === "RegularCommand" && (node.command === "href" || node.command === "url")) {
              this.convert_href(node);
            } else if (node.kind === "RegularCommand" && node.command === "par") {
              this.field.text += this.field.html ? "<p>\n" : " ";
            } else if (node.kind === "RegularCommand" && node.command === "\\") {
              this.field.text += this.field.html ? "<b>\n" : " ";
            } else {
              return this.error(new ParserError(`no converter for ${node.kind}: ${this.show(node)}`, node));
            }
        }
      }
      splitOnce(s, sep, fromEnd = false) {
        const split = fromEnd ? s.lastIndexOf(sep) : s.indexOf(sep);
        return split < 0 ? [s, ""] : [s.substr(0, split), s.substr(split + 1)];
      }
      parseName(name) {
        let parsed = null;
        const parts = name.split(marker.comma);
        if (parts.length && !parts.find((p) => !p.match(/^[a-z]+(-i)?=/i))) {
          for (const part of parts) {
            parsed = parsed || {};
            const [attr, value] = this.splitOnce(part.replace(marker.re.space, ""), "=").map((v) => v.trim());
            if (!value) {
              parsed = null;
              break;
            }
            switch (attr.toLowerCase()) {
              case "family":
                parsed.lastName = value;
                break;
              case "given-i":
                parsed.initial = value;
                break;
              case "given":
                parsed.firstName = value;
                break;
              case "prefix":
                parsed.prefix = value;
                break;
              case "suffix":
                parsed.suffix = value;
                break;
              case "useprefix":
                parsed.useprefix = value.toLowerCase() === "true";
                break;
              case "juniorcomma":
                parsed.useprefix = value.toLowerCase() === "true";
                break;
              default:
                parsed[attr.toLowerCase()] = value;
                break;
            }
          }
        }
        const prefix = /(.+?)\s+(vere|von|van den|van der|van|de|del|della|der|di|da|pietro|vanden|du|st.|st|la|lo|ter|bin|ibn|te|ten|op|ben|al)\s+(.+)/;
        let m2;
        switch (parsed ? 0 : parts.length) {
          case 0:
            break;
          case 1:
            if (marker.re.literalName.test(parts[0])) {
              parsed = { literal: parts[0] };
            } else if (m2 = parts[0].replace(marker.re.space, " ").match(prefix)) {
              parsed = {
                firstName: m2[1],
                prefix: m2[2],
                lastName: m2[3]
              };
            } else {
              const [firstName, lastName] = this.splitOnce(parts[0], marker.space, true);
              if (lastName) {
                parsed = { firstName, lastName };
              } else {
                parsed = { lastName: firstName };
              }
            }
            break;
          case 2:
            parsed = {
              lastName: parts[0],
              firstName: parts[1]
            };
            break;
          default:
            parsed = {
              lastName: parts[0],
              suffix: parts[1],
              firstName: parts.slice(2).join(marker.comma)
            };
        }
        for (const [k, v] of Object.entries(parsed)) {
          if (typeof v !== "string")
            continue;
          parsed[k] = marker.clean(v).trim();
        }
        return parsed;
      }
      restore(text, orig, preserve) {
        for (const { start: start3, end: end2 } of preserve) {
          text = text.substring(0, start3) + orig.substring(start3, end2) + text.substring(end2);
        }
        return text;
      }
      convert_entry(node) {
        this.entry = {
          key: node.id,
          type: node.type,
          fields: {},
          creators: {},
          crossref: {
            inherited: [],
            donated: []
          }
        };
        this.entries.push(this.entry);
        const order2 = ["langid", "hyphenation", "language"];
        node.fields.sort((a2, b) => {
          const ia = order2.indexOf(a2.name);
          const ib = order2.indexOf(b.name);
          if (ia === -1 && ib === -1)
            return a2.name.localeCompare(b.name);
          if (ia === -1)
            return 1;
          if (ib === -1)
            return -1;
          return ia - ib;
        });
        let sentenceCase = !!this.options.sentenceCase.length;
        for (const field of node.fields) {
          if (field.kind !== "Field")
            return this.error(new ParserError(`Expected Field, got ${field.kind}`, node));
          this.startCleaning(field.name);
          this.field = {
            name: field.name,
            text: "",
            level: 0,
            words: {
              upper: 0,
              lower: 0,
              other: 0
            },
            preserveRanges: sentenceCase && exports.fields.title.includes(field.name) ? [] : null,
            html: this.options.htmlFields.includes(field.name)
          };
          this.entry.fields[this.field.name] = this.entry.fields[this.field.name] || [];
          if (field.value.kind === "Number") {
            this.entry.fields[this.field.name].push(field.value.value);
            this.field = null;
            continue;
          }
          this.convert(field.value);
          this.field.text = this.field.text.trim();
          this.field.text = this.field.text.replace(/<\/([a-z])><\1>/g, "");
          this.field.text = this.field.text.replace(/<([a-z])>(\s*)<\/\1>/g, "$1");
          if (!this.field.text)
            continue;
          switch (this.field.name) {
            case "langid":
            case "hyphenation":
              sentenceCase = sentenceCase && this.options.sentenceCase.includes(this.field.text.toLowerCase());
              break;
            case "language":
              sentenceCase = sentenceCase && !!this.field.text.toLowerCase().trim().split(/\s*,\s*/).find((lang) => this.options.sentenceCase.includes(lang));
              break;
          }
          if (this.field.name.match(/^(keywords?|groups)$/)) {
            for (let text of this.field.text.split(marker.comma)) {
              text = text.trim();
              if (text)
                this.entry.fields[this.field.name].push(text);
            }
          } else if (this.cleaning.type === "creator") {
            if (!this.entry.creators[this.field.name])
              this.entry.creators[this.field.name] = [];
            if (this.field.text.includes(`${marker.comma}${marker.and}`)) {
              this.field.text = this.field.text.replace(new RegExp(`${marker.comma}${marker.and}`, "g"), marker.and).replace(new RegExp(marker.comma), marker.and);
            }
            for (const creator of this.field.text.split(marker.and)) {
              this.entry.fields[this.field.name].push(marker.clean(creator));
              this.entry.creators[this.field.name].push(this.parseName(creator));
            }
          } else if (exports.fields.unabbrev.includes(field.name)) {
            this.entry.fields[this.field.name].push((this.options.unabbreviate[this.field.text] || this.field.text).normalize("NFC"));
          } else {
            if (this.field.preserveRanges) {
              const allCaps = this.field.text.match(/\s/) && this.field.words.upper && !this.field.words.lower && !this.field.words.other;
              const seemsSentenceCased = Math.max(this.field.words.upper, this.field.words.lower) > this.field.words.other + Math.min(this.field.words.upper, this.field.words.lower);
              if (!allCaps && seemsSentenceCased && this.options.guessAlreadySentenceCased) {
                this.preserve(null, null);
              } else {
                if (allCaps)
                  this.field.preserveRanges = [];
                const txt = this.field.text.replace(preserveCase.markup, (markup) => marker.markup.repeat(markup.length));
                let match;
                preserveCase.sentenceStart.lastIndex = 0;
                while (match = preserveCase.sentenceStart.exec(txt)) {
                  if (match.index > 2 && txt.substr(0, match.index + 1).match(preserveCase.acronym))
                    continue;
                  this.preserve(match.index, match.index + match[0].length);
                }
                preserveCase.quoted.lastIndex = 0;
                while (match = preserveCase.quoted.exec(this.field.text)) {
                  this.preserve(match.index, match.index + match[0].length);
                }
              }
            }
            this.entry.fields[this.field.name].push(this.convertToSentenceCase(this.field.text).normalize("NFC"));
          }
        }
        this.field = null;
      }
      convertToSentenceCase(text) {
        if (!this.field.preserveRanges)
          return text;
        const sentenceCased = this.restore((0, sentence_case_2.toSentenceCase)(text, this.options.sentenceCasePreserveQuoted || false), text, this.field.preserveRanges);
        if (text !== sentenceCased)
          this.entry.sentenceCased = true;
        return sentenceCased;
      }
      convert_number(node) {
        this.field.text += `${node.value}`;
      }
      convert_text(node) {
        if (node.mode === "verbatim") {
          this.field.text += node.value.trim();
          return;
        }
        for (const word of node.value.split(/\b/)) {
          if (word.match(preserveCase.allLower)) {
            this.field.words.lower++;
          } else if (word.match(preserveCase.allCaps)) {
            this.field.words.upper++;
          } else if (word.match(preserveCase.hasAlpha)) {
            this.field.words.other++;
          }
        }
        if (this.field.level === 0 && this.cleaning.type === "creator") {
          this.field.text += node.value.replace(/\s+and\s+/ig, marker.and).replace(/\s*,\s*/g, marker.comma).replace(/\s+/g, marker.space);
          return;
        }
        if (this.field.level === 0 && this.field.name.match(/^(keywords?|groups)$/)) {
          this.field.text += node.value.replace(/\s*[;,]\s*/g, marker.comma);
          return;
        }
        if (this.field.html) {
          this.field.text += node.value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        } else if (this.field.preserveRanges) {
          const words = node.value.split(/(\s+)/);
          for (const word of words) {
            const start3 = this.field.text.length;
            this.field.text += word;
            if (this.preserveCase(word))
              this.preserve(start3, this.field.text.length);
          }
        } else {
          this.field.text += node.value;
        }
      }
      convert_environment(node) {
        const [open, close] = {
          enumerate: ["<ol>", "</ol>"],
          itemize: ["<ul>", "</ul>"],
          quotation: ["<blockquote>", "</blockquote>"]
        }[node.env] || ["", ""];
        if (!open)
          this.error(new TeXError(`Unhandled \\${node.env}{...}`, node, this.chunk));
        this.field.text += open;
        this.convert_block(Object.assign(Object.assign({}, node), { kind: "Block", markup: {} }));
        this.field.text += close;
      }
      convert_href(node) {
        this.field.text += '<a href="';
        this.convert(node.arguments.required[0]);
        this.field.text += '">';
        this.convert(node.arguments.required[1] || node.arguments.required[0]);
        this.field.text += "</a>";
      }
      convert_block(node) {
        const start3 = this.field.text.length;
        let prefix = "";
        let postfix = "";
        if (this.options.caseProtection !== "strict" && this.cleaning.type === "other")
          delete node.case;
        if (this.cleaning.type === "creator" && node.case === "protect") {
          prefix += marker.literal;
          postfix = marker.literal + postfix;
          delete node.case;
        }
        if (node.case === "protect") {
          prefix += this.options.markup.caseProtect.open;
          postfix = this.options.markup.caseProtect.close + postfix;
        }
        if (node.kind === "Block") {
          for (const markup of Object.keys(node.markup)) {
            if (!this.options.markup[markup]) {
              this.error(new ParserError(`markup: ${markup}`, node));
              return;
            }
            prefix += this.options.markup[markup].open;
            postfix = `${this.options.markup[markup].close}${postfix}`;
          }
        }
        const end2 = {
          withoutPrefix: this.field.text.length,
          withPrefix: this.field.text.length + prefix.length
        };
        this.field.text += prefix;
        this.field.level++;
        this.convert(node.value);
        this.field.level--;
        const added = this.field.text.substring(end2.withPrefix);
        const added_text = added.replace(/<\/?[^>]+>/g, "");
        const needsProtection = added_text && (this.options.caseProtection === "strict" && added_text.match(preserveCase.isCaseSensitive) || this.options.caseProtection === "as-needed" && added_text.split(/\s+/).find((word) => this.needsProtection(word)));
        if (!added) {
          this.field.text = this.field.text.substring(0, end2.withoutPrefix);
        } else if (this.field.preserveRanges && prefix === this.options.markup.caseProtect.open && !needsProtection) {
          this.field.text = this.field.text.substring(0, end2.withoutPrefix) + added;
          this.field.preserveRanges = this.field.preserveRanges.filter((range) => range.start < end2.withoutPrefix);
        } else {
          this.field.text += postfix;
        }
        this.field.text = this.field.text.replace(/<(sup|sub)>([^<>]+)<\/\1>$/i, (m2, mode, chars) => {
          const cmd = mode === "sup" ? "^" : "_";
          let script = "";
          for (const char of chars) {
            const unicode = unicode2latex_1.latex[`${cmd}${char}`] || unicode2latex_1.latex[`${cmd}{${char}}`];
            script += unicode ? unicode : `<${mode}>${char}</${mode}>`;
          }
          script = script.replace(new RegExp(`</${mode}><${mode}>`, "g"), "");
          return script.length < m2.length ? script : m2;
        });
        if (node.case && this.field.preserveRanges)
          this.preserve(start3, this.field.text.length);
      }
    };
    function parse2(input, options = {}) {
      const parser = new Parser(options);
      return parser.parse(input);
    }
    exports.parse = parse2;
    function ast(input, options = {}, clean = true) {
      const parser = new Parser(options);
      return parser.ast(input, clean);
    }
    exports.ast = ast;
    exports.promises = {
      async parse(input, options = {}) {
        const parser = new Parser(options);
        return await parser.parseAsync(input);
      }
    };
  }
});

// node_modules/.pnpm/citeproc@2.4.63/node_modules/citeproc/citeproc_commonjs.js
var require_citeproc_commonjs = __commonJS({
  "node_modules/.pnpm/citeproc@2.4.63/node_modules/citeproc/citeproc_commonjs.js"(exports, module2) {
    "use strict";
    var CSL2 = {
      PROCESSOR_VERSION: "1.4.61",
      error: function(str) {
        if (typeof Error === "undefined") {
          throw new Error("citeproc-js error: " + str);
        } else {
          throw "citeproc-js error: " + str;
        }
      },
      debug: function(str) {
        if (typeof console === "undefined") {
          dump("CSL: " + str + "\n");
        } else {
          console.log("citeproc-js warning: " + str);
        }
      },
      toLocaleUpperCase(str) {
        var arr = this.tmp.lang_array;
        try {
          str = str.toLocaleUpperCase(arr);
        } catch (e) {
          str = str.toUpperCase();
        }
        return str;
      },
      toLocaleLowerCase(str) {
        var arr = this.tmp.lang_array;
        try {
          str = str.toLocaleLowerCase(arr);
        } catch (e) {
          str = str.toLowerCase();
        }
        return str;
      },
      LOCATOR_LABELS_REGEXP: new RegExp("^((vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\\.)\\s+(.*)"),
      STATUTE_SUBDIV_PLAIN_REGEX: /(?:(?:^| )(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
      STATUTE_SUBDIV_PLAIN_REGEX_FRONT: /(?:^\s*[.,;]*\s*(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
      STATUTE_SUBDIV_STRINGS: {
        "vrs.": "verse",
        "sv.": "sub-verbo",
        "subpara.": "subparagraph",
        "op.": "opus",
        "subch.": "subchapter",
        "add.": "addendum",
        "amend.": "amendment",
        "annot.": "annotation",
        "app.": "appendix",
        "art.": "article",
        "bibliog.": "bibliography",
        "bk.": "book",
        "ch.": "chapter",
        "cl.": "clause",
        "col.": "column",
        "cmt.": "comment",
        "dec.": "decision",
        "dept.": "department",
        "ex.": "example",
        "fig.": "figure",
        "fld.": "field",
        "fol.": "folio",
        "n.": "note",
        "hypo.": "hypothetical",
        "illus.": "illustration",
        "intro.": "introduction",
        "l.": "line",
        "no.": "issue",
        "p.": "page",
        "pp.": "page",
        "para.": "paragraph",
        "pt.": "part",
        "pmbl.": "preamble",
        "princ.": "principle",
        "pub.": "publication",
        "r.": "rule",
        "rn.": "randnummer",
        "sched.": "schedule",
        "sec.": "section",
        "ser.": "series,",
        "subdiv.": "subdivision",
        "subsec.": "subsection",
        "supp.": "supplement",
        "tbl.": "table",
        "tit.": "title",
        "vol.": "volume"
      },
      STATUTE_SUBDIV_STRINGS_REVERSE: {
        "verse": "vrs.",
        "sub-verbo": "sv.",
        "sub verbo": "sv.",
        "subparagraph": "subpara.",
        "opus": "op.",
        "subchapter": "subch.",
        "addendum": "add.",
        "amendment": "amend.",
        "annotation": "annot.",
        "appendix": "app.",
        "article": "art.",
        "bibliography": "bibliog.",
        "book": "bk.",
        "chapter": "ch.",
        "clause": "cl.",
        "column": "col.",
        "comment": "cmt.",
        "decision": "dec.",
        "department": "dept.",
        "example": "ex.",
        "figure": "fig.",
        "field": "fld.",
        "folio": "fol.",
        "note": "n.",
        "hypothetical": "hypo.",
        "illustration": "illus.",
        "introduction": "intro.",
        "line": "l.",
        "issue": "no.",
        "page": "p.",
        "paragraph": "para.",
        "part": "pt.",
        "preamble": "pmbl.",
        "principle": "princ.",
        "publication": "pub.",
        "rule": "r.",
        "randnummer": "rn.",
        "schedule": "sched.",
        "section": "sec.",
        "series,": "ser.",
        "subdivision": "subdiv.",
        "subsection": "subsec.",
        "supplement": "supp.",
        "table": "tbl.",
        "title": "tit.",
        "volume": "vol."
      },
      LOCATOR_LABELS_MAP: {
        "vrs": "verse",
        "sv": "sub-verbo",
        "subpara": "subparagraph",
        "op": "opus",
        "subch": "subchapter",
        "add": "addendum",
        "amend": "amendment",
        "annot": "annotation",
        "app": "appendix",
        "art": "article",
        "bibliog": "bibliography",
        "bk": "book",
        "ch": "chapter",
        "cl": "clause",
        "col": "column",
        "cmt": "comment",
        "dec": "decision",
        "dept": "department",
        "ex": "example",
        "fig": "figure",
        "fld": "field",
        "fol": "folio",
        "n": "note",
        "hypo": "hypothetical",
        "illus": "illustration",
        "intro": "introduction",
        "l": "line",
        "no": "issue",
        "p": "page",
        "pp": "page",
        "para": "paragraph",
        "pt": "part",
        "pmbl": "preamble",
        "princ": "principle",
        "pub": "publication",
        "r": "rule",
        "rn": "randnummer",
        "sched": "schedule",
        "sec": "section",
        "ser": "series,",
        "subdiv": "subdivision",
        "subsec": "subsection",
        "supp": "supplement",
        "tbl": "table",
        "tit": "title",
        "vol": "volume"
      },
      MODULE_MACROS: {
        "juris-pretitle": true,
        "juris-title": true,
        "juris-pretitle-short": true,
        "juris-title-short": true,
        "juris-main": true,
        "juris-main-short": true,
        "juris-tail": true,
        "juris-tail-short": true,
        "juris-locator": true
      },
      MODULE_TYPES: {
        "legal_case": true,
        "legislation": true,
        "bill": true,
        "hearing": true,
        "gazette": true,
        "report": true,
        "regulation": true,
        "standard": true,
        "patent": true,
        "locator": true
      },
      checkNestedBrace: function(state) {
        if (state.opt.xclass === "note") {
          this.depth = 0;
          this.update = function(str) {
            var str = str ? str : "";
            var lst = str.split(/([\(\)])/);
            for (var i = 1, ilen = lst.length; i < ilen; i += 2) {
              if (lst[i] === "(") {
                if (this.depth % 2 === 1) {
                  lst[i] = "[";
                }
                this.depth += 1;
              } else if (lst[i] === ")") {
                if (this.depth % 2 === 0) {
                  lst[i] = "]";
                }
                this.depth -= 1;
              }
            }
            var ret = lst.join("");
            return ret;
          };
        } else {
          this.update = function(str) {
            return str;
          };
        }
      },
      MULTI_FIELDS: ["event", "publisher", "publisher-place", "event-place", "title", "container-title", "collection-title", "authority", "genre", "title-short", "medium", "country", "jurisdiction", "archive", "archive-place"],
      LangPrefsMap: {
        "title": "titles",
        "title-short": "titles",
        "event": "titles",
        "genre": "titles",
        "medium": "titles",
        "container-title": "journals",
        "collection-title": "titles",
        "archive": "journals",
        "publisher": "publishers",
        "authority": "publishers",
        "publisher-place": "places",
        "event-place": "places",
        "archive-place": "places",
        "jurisdiction": "places",
        "number": "places",
        "edition": "places",
        "issue": "places",
        "volume": "places"
      },
      AbbreviationSegments: function() {
        this["container-title"] = {};
        this["collection-title"] = {};
        this["institution-entire"] = {};
        this["institution-part"] = {};
        this.nickname = {};
        this.number = {};
        this.title = {};
        this.place = {};
        this.hereinafter = {};
        this.classic = {};
        this["container-phrase"] = {};
        this["title-phrase"] = {};
      },
      getAbbrevsDomain: function(state, country, lang) {
        var domain = null;
        if (state.opt.availableAbbrevDomains && country && country !== "default") {
          var globalDomainPreference = state.locale[state.opt.lang].opts["jurisdiction-preference"];
          var itemDomainPreference = null;
          if (state.locale[lang]) {
            itemDomainPreference = state.locale[lang].opts["jurisdiction-preference"];
          }
          if (itemDomainPreference) {
            for (var j = itemDomainPreference.length - 1; j > -1; j--) {
              if (state.opt.availableAbbrevDomains[country].indexOf(itemDomainPreference[j]) > -1) {
                domain = itemDomainPreference[j];
                break;
              }
            }
          }
          if (!domain && globalDomainPreference) {
            for (var j = globalDomainPreference.length - 1; j > -1; j--) {
              if (state.opt.availableAbbrevDomains[country].indexOf(globalDomainPreference[j]) > -1) {
                domain = globalDomainPreference[j];
                break;
              }
            }
          }
        }
        return domain;
      },
      FIELD_CATEGORY_REMAP: {
        "title": "title",
        "container-title": "container-title",
        "collection-title": "collection-title",
        "country": "place",
        "number": "number",
        "place": "place",
        "archive": "container-title",
        "title-short": "title",
        "genre": "title",
        "event": "title",
        "medium": "title",
        "archive-place": "place",
        "publisher-place": "place",
        "event-place": "place",
        "jurisdiction": "place",
        "language-name": "place",
        "language-name-original": "place",
        "call-number": "number",
        "chapter-number": "number",
        "collection-number": "number",
        "edition": "number",
        "page": "number",
        "issue": "number",
        "locator": "number",
        "locator-extra": "number",
        "number-of-pages": "number",
        "number-of-volumes": "number",
        "volume": "number",
        "citation-number": "number",
        "publisher": "institution-part"
      },
      parseLocator: function(item) {
        if (this.opt.development_extensions.locator_date_and_revision) {
          if (item.locator) {
            item.locator = "" + item.locator;
            var idx = item.locator.indexOf("|");
            if (idx > -1) {
              var raw_locator = item.locator;
              item.locator = raw_locator.slice(0, idx);
              raw_locator = raw_locator.slice(idx + 1);
              var m2 = raw_locator.match(/^([0-9]{4}-[0-9]{2}-[0-9]{2}).*/);
              if (m2) {
                item["locator-date"] = this.fun.dateparser.parseDateToObject(m2[1]);
                raw_locator = raw_locator.slice(m2[1].length);
              }
              item["locator-extra"] = raw_locator.replace(/^\s+/, "").replace(/\s+$/, "");
            }
          }
        }
        if (item.locator) {
          item.locator = ("" + item.locator).replace(/\s+$/, "");
        }
        return item;
      },
      normalizeLocaleStr: function(str) {
        if (!str) {
          return;
        }
        var lst = str.split("-");
        lst[0] = lst[0].toLowerCase();
        if (lst[1]) {
          lst[1] = lst[1].toUpperCase();
        }
        return lst.join("-");
      },
      parseNoteFieldHacks: function(Item, validFieldsForType, allowDateOverride) {
        if (typeof Item.note !== "string") {
          return;
        }
        var elems = [];
        var lines = Item.note.split("\n");
        for (var i = 0, ilen = lines.length; i < ilen; i++) {
          var line = lines[i];
          var elems = [];
          var m2 = line.match(CSL2.NOTE_FIELDS_REGEXP);
          if (m2) {
            var splt = line.split(CSL2.NOTE_FIELDS_REGEXP);
            for (var j = 0, jlen = splt.length - 1; j < jlen; j++) {
              elems.push(splt[j]);
              elems.push(m2[j]);
            }
            elems.push(splt[splt.length - 1]);
            for (var j = 1, jlen = elems.length; j < jlen; j += 2) {
              if (elems[j - 1].trim() && (i > 0 || j > 1) && !elems[j - 1].match(CSL2.NOTE_FIELD_REGEXP)) {
                break;
              } else {
                elems[j] = "\n" + elems[j].slice(2, -1).trim() + "\n";
              }
            }
            lines[i] = elems.join("");
          }
        }
        lines = lines.join("\n").split("\n");
        var offset2 = 0;
        var names2 = {};
        for (var i = 0, ilen = lines.length; i < ilen; i++) {
          var line = lines[i];
          var mm = line.match(CSL2.NOTE_FIELD_REGEXP);
          if (!line.trim()) {
            continue;
          } else if (!mm) {
            if (i === 0) {
              continue;
            } else {
              offset2 = i;
              break;
            }
          }
          var key = mm[1];
          var val = mm[2].replace(/^\s+/, "").replace(/\s+$/, "");
          if (key === "type") {
            Item.type = val;
            lines[i] = "";
          } else if (CSL2.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
            if (!Item[key] || allowDateOverride) {
              Item[key] = CSL2.DateParser.parseDateToArray(val);
              if (!validFieldsForType || validFieldsForType[key] && this.isDateString(val)) {
                lines[i] = "";
              }
            }
          } else if (!Item[key]) {
            if (CSL2.NAME_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
              if (!names2[key]) {
                names2[key] = [];
              }
              var lst = val.split(/\s*\|\|\s*/);
              if (lst.length === 1) {
                names2[key].push({ literal: lst[0] });
              } else if (lst.length === 2) {
                var name = { family: lst[0], given: lst[1] };
                CSL2.parseParticles(name);
                names2[key].push(name);
              }
            } else {
              Item[key] = val;
            }
            if (!validFieldsForType || validFieldsForType[key]) {
              lines[i] = "";
            }
          }
        }
        for (var key in names2) {
          Item[key] = names2[key];
        }
        if (validFieldsForType) {
          if (lines[offset2].trim()) {
            lines[offset2] = "\n" + lines[offset2];
          }
          for (var i = offset2 - 1; i > -1; i--) {
            if (!lines[i].trim()) {
              lines = lines.slice(0, i).concat(lines.slice(i + 1));
            }
          }
        }
        Item.note = lines.join("\n").trim();
      },
      checkPrefixSpaceAppend: function(state, prefix) {
        if (!prefix) {
          prefix = "";
        }
        var sp = "";
        var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
        var test_char = test_prefix.slice(-1);
        if (test_prefix.match(CSL2.ENDSWITH_ROMANESQUE_REGEXP)) {
          sp = " ";
        } else if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1) {
          sp = " ";
        } else if (test_char.match(/[\)\],0-9]/)) {
          sp = " ";
        }
        var prefix = (prefix + sp).replace(/\s+/g, " ");
        return prefix;
      },
      checkIgnorePredecessor: function(state, prefix) {
        var ignorePredecessor = false;
        var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
        var test_char = test_prefix.slice(-1);
        if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1 && prefix.trim().indexOf(" ") > -1) {
          state.tmp.term_predecessor = false;
          return true;
        }
        return false;
      },
      checkSuffixSpacePrepend: function(state, suffix) {
        if (!suffix) {
          return "";
        }
        if (suffix.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) || ["[", "("].indexOf(suffix.slice(0, 1)) > -1) {
          suffix = " " + suffix;
        }
        return suffix;
      },
      GENDERS: ["masculine", "feminine"],
      ERROR_NO_RENDERED_FORM: 1,
      PREVIEW: "Just for laughs.",
      ASSUME_ALL_ITEMS_REGISTERED: 2,
      START: 0,
      END: 1,
      SINGLETON: 2,
      SEEN: 6,
      SUCCESSOR: 3,
      SUCCESSOR_OF_SUCCESSOR: 4,
      SUPPRESS: 5,
      SINGULAR: 0,
      PLURAL: 1,
      LITERAL: true,
      BEFORE: 1,
      AFTER: 2,
      DESCENDING: 1,
      ASCENDING: 2,
      PRIMARY: 1,
      SECONDARY: 2,
      POSITION_FIRST: 0,
      POSITION_SUBSEQUENT: 1,
      POSITION_IBID: 2,
      POSITION_IBID_WITH_LOCATOR: 3,
      POSITION_CONTAINER_SUBSEQUENT: 4,
      POSITION_MAP: {
        "0": 0,
        "4": 1,
        "1": 2,
        "2": 3,
        "3": 4
      },
      POSITION_TEST_VARS: ["position", "first-reference-note-number", "near-note"],
      AREAS: ["citation", "citation_sort", "bibliography", "bibliography_sort", "intext"],
      CITE_FIELDS: ["first-reference-note-number", "first-container-reference-note-number", "locator", "locator-extra"],
      SWAPPING_PUNCTUATION: [".", "!", "?", ":", ","],
      TERMINAL_PUNCTUATION: [":", ".", ";", "!", "?", " "],
      NONE: 0,
      NUMERIC: 1,
      POSITION: 2,
      TRIGRAPH: 3,
      DATE_PARTS: ["year", "month", "day"],
      DATE_PARTS_ALL: ["year", "month", "day", "season"],
      DATE_PARTS_INTERNAL: ["year", "month", "day", "year_end", "month_end", "day_end"],
      NAME_PARTS: ["non-dropping-particle", "family", "given", "dropping-particle", "suffix", "literal"],
      DISAMBIGUATE_OPTIONS: [
        "disambiguate-add-names",
        "disambiguate-add-givenname",
        "disambiguate-add-year-suffix"
      ],
      GIVENNAME_DISAMBIGUATION_RULES: [
        "all-names",
        "all-names-with-initials",
        "primary-name",
        "primary-name-with-initials",
        "by-cite"
      ],
      NAME_ATTRIBUTES: [
        "and",
        "delimiter-precedes-last",
        "delimiter-precedes-et-al",
        "initialize-with",
        "initialize",
        "name-as-sort-order",
        "sort-separator",
        "et-al-min",
        "et-al-use-first",
        "et-al-subsequent-min",
        "et-al-subsequent-use-first",
        "form",
        "prefix",
        "suffix",
        "delimiter"
      ],
      LOOSE: 0,
      STRICT: 1,
      TOLERANT: 2,
      PREFIX_PUNCTUATION: /[.;:]\s*$/,
      SUFFIX_PUNCTUATION: /^\s*[.;:,\(\)]/,
      NUMBER_REGEXP: /(?:^\d+|\d+$)/,
      NAME_INITIAL_REGEXP: /^([A-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u042f\u0590-\u05d4\u05d6-\u05ff\u0600-\u06ff\u0370\u0372\u0376\u0386\u0388-\u03ab\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f4\u03f7\u03fd-\u03ff])([a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u052f\u0600-\u06ff\u0370-\u03ff\u1f00-\u1fff]*|)(\.)*/,
      ROMANESQUE_REGEXP: /[-0-9a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
      ROMANESQUE_NOT_REGEXP: /[^a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/g,
      STARTSWITH_ROMANESQUE_REGEXP: /^[&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
      ENDSWITH_ROMANESQUE_REGEXP: /[.;:&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]$/,
      ALL_ROMANESQUE_REGEXP: /^[a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]+$/,
      VIETNAMESE_SPECIALS: /[\u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]/,
      VIETNAMESE_NAMES: /^(?:(?:[.AaBbCcDdEeGgHhIiKkLlMmNnOoPpQqRrSsTtUuVvXxYy \u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]{2,6})(\s+|$))+$/,
      NOTE_FIELDS_REGEXP: /\{:(?:[\-_a-z]+|[A-Z]+):[^\}]+\}/g,
      NOTE_FIELD_REGEXP: /^([\-_a-z]+|[A-Z]+):\s*([^\}]+)$/,
      PARTICLE_GIVEN_REGEXP: /^([^ ]+(?:\u02bb |\u2019 | |\' ) *)(.+)$/,
      PARTICLE_FAMILY_REGEXP: /^([^ ]+(?:\-|\u02bb|\u2019| |\') *)(.+)$/,
      DISPLAY_CLASSES: ["block", "left-margin", "right-inline", "indent"],
      NAME_VARIABLES: [
        "author",
        "chair",
        "collection-editor",
        "compiler",
        "composer",
        "container-author",
        "contributor",
        "curator",
        "director",
        "editor",
        "editor-translator",
        "editorial-director",
        "executive-producer",
        "guest",
        "host",
        "illustrator",
        "interviewer",
        "narrator",
        "organizer",
        "original-author",
        "performer",
        "producer",
        "recipient",
        "reviewed-author",
        "script-writer",
        "series-creator",
        "translator",
        "commenter"
      ],
      CREATORS: [
        "author",
        "chair",
        "collection-editor",
        "compiler",
        "composer",
        "container-author",
        "contributor",
        "curator",
        "director",
        "editor",
        "editor-translator",
        "editorial-director",
        "executive-producer",
        "guest",
        "host",
        "illustrator",
        "interviewer",
        "narrator",
        "organizer",
        "original-author",
        "performer",
        "producer",
        "recipient",
        "reviewed-author",
        "script-writer",
        "series-creator",
        "translator",
        "commenter"
      ],
      NUMERIC_VARIABLES: [
        "call-number",
        "chapter-number",
        "collection-number",
        "division",
        "edition",
        "page",
        "issue",
        "locator",
        "locator-extra",
        "number",
        "number-of-pages",
        "number-of-volumes",
        "part-number",
        "printing-number",
        "section",
        "supplement-number",
        "version",
        "volume",
        "supplement",
        "citation-number"
      ],
      DATE_VARIABLES: [
        "locator-date",
        "issued",
        "event-date",
        "accessed",
        "original-date",
        "publication-date",
        "available-date",
        "submitted",
        "alt-issued",
        "alt-event"
      ],
      VARIABLES_WITH_SHORT_FORM: [
        "title",
        "container-title"
      ],
      TITLE_FIELD_SPLITS: function(seg) {
        var keys = ["title", "short", "main", "sub", "subjoin"];
        var ret = {};
        for (var i = 0, ilen = keys.length; i < ilen; i++) {
          ret[keys[i]] = seg + "title" + (keys[i] === "title" ? "" : "-" + keys[i]);
        }
        return ret;
      },
      demoteNoiseWords: function(state, fld, drop_or_demote) {
        var SKIP_WORDS = state.locale[state.opt.lang].opts["leading-noise-words"];
        if (fld && drop_or_demote) {
          fld = fld.split(/\s+/);
          fld.reverse();
          var toEnd = [];
          for (var j = fld.length - 1; j > -1; j += -1) {
            if (SKIP_WORDS.indexOf(fld[j].toLowerCase()) > -1) {
              toEnd.push(fld.pop());
            } else {
              break;
            }
          }
          fld.reverse();
          var start3 = fld.join(" ");
          var end2 = toEnd.join(" ");
          if (drop_or_demote === "drop" || !end2) {
            fld = start3;
          } else if (drop_or_demote === "demote") {
            fld = [start3, end2].join(", ");
          }
        }
        return fld;
      },
      extractTitleAndSubtitle: function(Item, narrowSpaceLocale) {
        var narrowSpace = narrowSpaceLocale ? "\u202F" : "";
        var segments = [""];
        if (this.opt.development_extensions.split_container_title) {
          segments.push("container-");
        }
        for (var i = 0, ilen = segments.length; i < ilen; i++) {
          var seg = segments[i];
          var title = CSL2.TITLE_FIELD_SPLITS(seg);
          var langs = [false];
          if (Item.multi) {
            for (var lang in Item.multi._keys[title.short]) {
              langs.push(lang);
            }
          }
          for (var j = 0, jlen = langs.length; j < jlen; j++) {
            var lang = langs[j];
            var vals = {};
            if (lang) {
              if (Item.multi._keys[title.title]) {
                vals[title.title] = Item.multi._keys[title.title][lang];
              }
              if (Item.multi._keys[title["short"]]) {
                vals[title["short"]] = Item.multi._keys[title["short"]][lang];
              }
            } else {
              vals[title.title] = Item[title.title];
              vals[title["short"]] = Item[title["short"]];
            }
            vals[title.main] = vals[title.title];
            vals[title.sub] = false;
            var shortTitle = vals[title["short"]];
            if (vals[title.title]) {
              if (shortTitle && shortTitle.toLowerCase() === vals[title.title].toLowerCase()) {
                vals[title.main] = vals[title.title];
                vals[title.subjoin] = "";
                vals[title.sub] = "";
              } else if (shortTitle) {
                var tail = vals[title.title].slice(shortTitle.replace(/[\?\!]+$/, "").length);
                var top2 = vals[title.title].replace(tail.replace(/^[\?\!]+/, ""), "").trim();
                var m2 = CSL2.TITLE_SPLIT_REGEXP.matchfirst.exec(tail);
                if (m2 && top2.toLowerCase() === shortTitle.toLowerCase()) {
                  vals[title.main] = top2;
                  vals[title.subjoin] = m2[1].replace(/[\?\!]+(\s*)$/, "$1");
                  vals[title.sub] = tail.replace(CSL2.TITLE_SPLIT_REGEXP.matchfirst, "");
                  if (this.opt.development_extensions.force_short_title_casing_alignment) {
                    vals[title["short"]] = vals[title.main];
                  }
                } else {
                  var splitTitle = CSL2.TITLE_SPLIT(vals[title.title]);
                  if (splitTitle.length == 3) {
                    vals[title.main] = splitTitle[0];
                    vals[title.subjoin] = splitTitle[1];
                    vals[title.sub] = splitTitle[2];
                  } else {
                    vals[title.main] = vals[title.title];
                    vals[title.subjoin] = "";
                    vals[title.sub] = "";
                  }
                }
              } else {
                var splitTitle = CSL2.TITLE_SPLIT(vals[title.title]);
                if (splitTitle.length == 3) {
                  vals[title.main] = splitTitle[0];
                  vals[title.subjoin] = splitTitle[1];
                  vals[title.sub] = splitTitle[2];
                  if (this.opt.development_extensions.implicit_short_title && Item.type !== "legal_case") {
                    if (!Item[title.short] && !vals[title.main].match(/^[\-\.[0-9]+$/)) {
                      var punct = vals[title.subjoin].trim();
                      if (["?", "!"].indexOf(punct) === -1) {
                        punct = "";
                      }
                      vals[title.short] = vals[title.main] + punct;
                    }
                  }
                } else {
                  vals[title.main] = vals[title.title];
                  vals[title.subjoin] = "";
                  vals[title.sub] = "";
                }
              }
              if (vals[title.subjoin]) {
                if (vals[title.subjoin].match(/([\?\!])/)) {
                  var m2 = vals[title.subjoin].match(/(\s*)$/);
                  vals[title.main] = vals[title.main] + narrowSpace + vals[title.subjoin].trim();
                  vals[title.subjoin] = m2[1];
                }
              }
            }
            if (vals[title.subjoin]) {
              if (vals[title.subjoin].indexOf(":") > -1) {
                vals[title.subjoin] = narrowSpace + ": ";
              }
              if (vals[title.subjoin].indexOf("-") > -1 || vals[title.subjoin].indexOf("\u2014") > -1) {
                vals[title.subjoin] = "\u2014";
              }
            }
            if (lang) {
              for (var key in vals) {
                if (!Item.multi._keys[key]) {
                  Item.multi._keys[key] = {};
                }
                Item.multi._keys[key][lang] = vals[key];
              }
            } else {
              for (var key in vals) {
                Item[key] = vals[key];
              }
            }
          }
        }
      },
      titlecaseSentenceOrNormal: function(state, Item, seg, lang, sentenceCase) {
        var title = CSL2.TITLE_FIELD_SPLITS(seg);
        var vals = {};
        if (lang && Item.multi) {
          if (Item.multi._keys[title.title]) {
            vals[title.title] = Item.multi._keys[title.title][lang];
          }
          if (Item.multi._keys[title.main]) {
            vals[title.main] = Item.multi._keys[title.main][lang];
          }
          if (Item.multi._keys[title.sub]) {
            vals[title.sub] = Item.multi._keys[title.sub][lang];
          }
          if (Item.multi._keys[title.subjoin]) {
            vals[title.subjoin] = Item.multi._keys[title.subjoin][lang];
          }
        } else {
          vals[title.title] = Item[title.title];
          vals[title.main] = Item[title.main];
          vals[title.sub] = Item[title.sub];
          vals[title.subjoin] = Item[title.subjoin];
        }
        if (vals[title.main] && vals[title.sub]) {
          var mainTitle = vals[title.main];
          var subJoin = vals[title.subjoin];
          var subTitle = vals[title.sub];
          if (sentenceCase) {
            mainTitle = CSL2.Output.Formatters.sentence(state, mainTitle);
            subTitle = CSL2.Output.Formatters.sentence(state, subTitle);
          } else if (state.opt.development_extensions.uppercase_subtitles) {
            subTitle = CSL2.Output.Formatters["capitalize-first"](state, subTitle);
          }
          return [mainTitle, subJoin, subTitle].join("");
        } else if (vals[title.title]) {
          if (sentenceCase) {
            return CSL2.Output.Formatters.sentence(state, vals[title.title]);
          } else if (state.opt.development_extensions.uppercase_subtitles) {
            var splits = CSL2.TITLE_SPLIT(vals[title.title]);
            for (var i = 0, ilen = splits.length; i < ilen; i += 2) {
              splits[i] = CSL2.Output.Formatters["capitalize-first"](state, splits[i]);
            }
            for (var i = 1, ilen = splits.length - 1; i < ilen; i += 2) {
              var m2 = splits[i].match(/([:\?\!] )/);
              if (m2) {
                var narrowSpace = state.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr" ? "\u202F" : "";
                splits[i] = narrowSpace + m2[1];
              }
              if (splits[i].indexOf("-") > -1 || splits[i].indexOf("\u2014") > -1) {
                splits[i] = "\u2014";
              }
            }
            vals[title.title] = splits.join("");
            return vals[title.title];
          } else {
            return vals[title.title];
          }
        } else {
          return "";
        }
      },
      getSafeEscape: function(state) {
        if (["bibliography", "citation"].indexOf(state.tmp.area) > -1) {
          var callbacks = [];
          if (state.opt.development_extensions.thin_non_breaking_space_html_hack && state.opt.mode === "html") {
            callbacks.push(function(txt) {
              return txt.replace(/\u202f/g, '<span style="white-space:nowrap">&thinsp;</span>');
            });
          }
          if (callbacks.length) {
            return function(txt) {
              for (var i = 0, ilen = callbacks.length; i < ilen; i += 1) {
                txt = callbacks[i](txt);
              }
              return CSL2.Output.Formats[state.opt.mode].text_escape(txt);
            };
          } else {
            return CSL2.Output.Formats[state.opt.mode].text_escape;
          }
        } else {
          return function(txt) {
            return txt;
          };
        }
      },
      SKIP_WORDS: ["about", "above", "across", "afore", "after", "against", "al", "along", "alongside", "amid", "amidst", "among", "amongst", "anenst", "apropos", "apud", "around", "as", "aside", "astride", "at", "athwart", "atop", "barring", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "but", "by", "circa", "despite", "down", "during", "et", "except", "for", "forenenst", "from", "given", "in", "inside", "into", "lest", "like", "modulo", "near", "next", "notwithstanding", "of", "off", "on", "onto", "out", "over", "per", "plus", "pro", "qua", "sans", "since", "than", "through", " thru", "throughout", "thruout", "till", "to", "toward", "towards", "under", "underneath", "until", "unto", "up", "upon", "versus", "vs.", "v.", "vs", "v", "via", "vis-\xE0-vis", "with", "within", "without", "according to", "ahead of", "apart from", "as for", "as of", "as per", "as regards", "aside from", "back to", "because of", "close to", "due to", "except for", "far from", "inside of", "instead of", "near to", "next to", "on to", "out from", "out of", "outside of", "prior to", "pursuant to", "rather than", "regardless of", "such as", "that of", "up to", "where as", "or", "yet", "so", "for", "and", "nor", "a", "an", "the", "de", "d'", "von", "van", "c", "ca"],
      FORMAT_KEY_SEQUENCE: [
        "@strip-periods",
        "@font-style",
        "@font-variant",
        "@font-weight",
        "@text-decoration",
        "@vertical-align",
        "@quotes"
      ],
      INSTITUTION_KEYS: [
        "font-style",
        "font-variant",
        "font-weight",
        "text-decoration",
        "text-case"
      ],
      SUFFIX_CHARS: "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z",
      ROMAN_NUMERALS: [
        ["", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"],
        ["", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"],
        ["", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"],
        ["", "m", "mm", "mmm", "mmmm", "mmmmm"]
      ],
      LANGS: {
        "af-ZA": "Afrikaans",
        "ar": "Arabic",
        "bg-BG": "Bulgarian",
        "ca-AD": "Catalan",
        "cs-CZ": "Czech",
        "da-DK": "Danish",
        "de-AT": "Austrian",
        "de-CH": "German (CH)",
        "de-DE": "German (DE)",
        "el-GR": "Greek",
        "en-GB": "English (GB)",
        "en-US": "English (US)",
        "es-ES": "Spanish",
        "et-EE": "Estonian",
        "eu": "European",
        "fa-IR": "Persian",
        "fi-FI": "Finnish",
        "fr-CA": "French (CA)",
        "fr-FR": "French (FR)",
        "he-IL": "Hebrew",
        "hr-HR": "Croatian",
        "hu-HU": "Hungarian",
        "is-IS": "Icelandic",
        "it-IT": "Italian",
        "ja-JP": "Japanese",
        "km-KH": "Khmer",
        "ko-KR": "Korean",
        "lt-LT": "Lithuanian",
        "lv-LV": "Latvian",
        "mn-MN": "Mongolian",
        "nb-NO": "Norwegian (Bokm\xE5l)",
        "nl-NL": "Dutch",
        "nn-NO": "Norwegian (Nynorsk)",
        "pl-PL": "Polish",
        "pt-BR": "Portuguese (BR)",
        "pt-PT": "Portuguese (PT)",
        "ro-RO": "Romanian",
        "ru-RU": "Russian",
        "sk-SK": "Slovak",
        "sl-SI": "Slovenian",
        "sr-RS": "Serbian",
        "sv-SE": "Swedish",
        "th-TH": "Thai",
        "tr-TR": "Turkish",
        "uk-UA": "Ukrainian",
        "vi-VN": "Vietnamese",
        "zh-CN": "Chinese (CN)",
        "zh-TW": "Chinese (TW)"
      },
      LANG_BASES: {
        af: "af_ZA",
        ar: "ar",
        bg: "bg_BG",
        ca: "ca_AD",
        cs: "cs_CZ",
        da: "da_DK",
        de: "de_DE",
        el: "el_GR",
        en: "en_US",
        es: "es_ES",
        et: "et_EE",
        eu: "eu",
        fa: "fa_IR",
        fi: "fi_FI",
        fr: "fr_FR",
        he: "he_IL",
        hr: "hr-HR",
        hu: "hu_HU",
        is: "is_IS",
        it: "it_IT",
        ja: "ja_JP",
        km: "km_KH",
        ko: "ko_KR",
        lt: "lt_LT",
        lv: "lv-LV",
        mn: "mn_MN",
        nb: "nb_NO",
        nl: "nl_NL",
        nn: "nn-NO",
        pl: "pl_PL",
        pt: "pt_PT",
        ro: "ro_RO",
        ru: "ru_RU",
        sk: "sk_SK",
        sl: "sl_SI",
        sr: "sr_RS",
        sv: "sv_SE",
        th: "th_TH",
        tr: "tr_TR",
        uk: "uk_UA",
        vi: "vi_VN",
        zh: "zh_CN"
      },
      SUPERSCRIPTS: {
        "\xAA": "a",
        "\xB2": "2",
        "\xB3": "3",
        "\xB9": "1",
        "\xBA": "o",
        "\u02B0": "h",
        "\u02B1": "\u0266",
        "\u02B2": "j",
        "\u02B3": "r",
        "\u02B4": "\u0279",
        "\u02B5": "\u027B",
        "\u02B6": "\u0281",
        "\u02B7": "w",
        "\u02B8": "y",
        "\u02E0": "\u0263",
        "\u02E1": "l",
        "\u02E2": "s",
        "\u02E3": "x",
        "\u02E4": "\u0295",
        "\u1D2C": "A",
        "\u1D2D": "\xC6",
        "\u1D2E": "B",
        "\u1D30": "D",
        "\u1D31": "E",
        "\u1D32": "\u018E",
        "\u1D33": "G",
        "\u1D34": "H",
        "\u1D35": "I",
        "\u1D36": "J",
        "\u1D37": "K",
        "\u1D38": "L",
        "\u1D39": "M",
        "\u1D3A": "N",
        "\u1D3C": "O",
        "\u1D3D": "\u0222",
        "\u1D3E": "P",
        "\u1D3F": "R",
        "\u1D40": "T",
        "\u1D41": "U",
        "\u1D42": "W",
        "\u1D43": "a",
        "\u1D44": "\u0250",
        "\u1D45": "\u0251",
        "\u1D46": "\u1D02",
        "\u1D47": "b",
        "\u1D48": "d",
        "\u1D49": "e",
        "\u1D4A": "\u0259",
        "\u1D4B": "\u025B",
        "\u1D4C": "\u025C",
        "\u1D4D": "g",
        "\u1D4F": "k",
        "\u1D50": "m",
        "\u1D51": "\u014B",
        "\u1D52": "o",
        "\u1D53": "\u0254",
        "\u1D54": "\u1D16",
        "\u1D55": "\u1D17",
        "\u1D56": "p",
        "\u1D57": "t",
        "\u1D58": "u",
        "\u1D59": "\u1D1D",
        "\u1D5A": "\u026F",
        "\u1D5B": "v",
        "\u1D5C": "\u1D25",
        "\u1D5D": "\u03B2",
        "\u1D5E": "\u03B3",
        "\u1D5F": "\u03B4",
        "\u1D60": "\u03C6",
        "\u1D61": "\u03C7",
        "\u2070": "0",
        "\u2071": "i",
        "\u2074": "4",
        "\u2075": "5",
        "\u2076": "6",
        "\u2077": "7",
        "\u2078": "8",
        "\u2079": "9",
        "\u207A": "+",
        "\u207B": "\u2212",
        "\u207C": "=",
        "\u207D": "(",
        "\u207E": ")",
        "\u207F": "n",
        "\u2120": "SM",
        "\u2122": "TM",
        "\u3192": "\u4E00",
        "\u3193": "\u4E8C",
        "\u3194": "\u4E09",
        "\u3195": "\u56DB",
        "\u3196": "\u4E0A",
        "\u3197": "\u4E2D",
        "\u3198": "\u4E0B",
        "\u3199": "\u7532",
        "\u319A": "\u4E59",
        "\u319B": "\u4E19",
        "\u319C": "\u4E01",
        "\u319D": "\u5929",
        "\u319E": "\u5730",
        "\u319F": "\u4EBA",
        "\u02C0": "\u0294",
        "\u02C1": "\u0295",
        "\u06E5": "\u0648",
        "\u06E6": "\u064A"
      },
      SUPERSCRIPTS_REGEXP: new RegExp("[\xAA\xB2\xB3\xB9\xBA\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02E0\u02E1\u02E2\u02E3\u02E4\u1D2C\u1D2D\u1D2E\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u2070\u2071\u2074\u2075\u2076\u2077\u2078\u2079\u207A\u207B\u207C\u207D\u207E\u207F\u2120\u2122\u3192\u3193\u3194\u3195\u3196\u3197\u3198\u3199\u319A\u319B\u319C\u319D\u319E\u319F\u02C0\u02C1\u06E5\u06E6]", "g"),
      UPDATE_GROUP_CONTEXT_CONDITION: function(state, str, valueTerm, token, value) {
        if (!state.opt.use_context_condition)
          return;
        var flags = state.tmp.group_context.tip;
        if (flags.condition) {
          if (!flags.condition.termtxt) {
            flags.condition.termtxt = str;
            flags.condition.valueTerm = valueTerm;
          }
          if (!flags.value_seen && flags.condition.test === "comma-safe-numbers-only") {
            if (value) {
              flags.value_seen = true;
              if (!value.match(/^[0-9]/)) {
                state.tmp.just_did_number = false;
              }
            }
          }
        } else {
          if (token && token.decorations.filter((o) => o[0] === "@vertical-align").length > 0) {
            state.tmp.just_did_number = false;
          } else if (token && token.strings.suffix) {
            state.tmp.just_did_number = false;
          } else if (str) {
            if (str.match(/[0-9]$/)) {
              state.tmp.just_did_number = true;
            } else {
              state.tmp.just_did_number = false;
            }
          }
        }
      },
      EVALUATE_GROUP_CONDITION: function(state, flags) {
        if (!state.opt.use_context_condition)
          return;
        var testres;
        var numbersOnly = flags.condition.test === "comma-safe-numbers-only";
        if (flags.condition.test === "empty-label") {
          testres = !flags.condition.termtxt;
        } else if (flags.condition.test === "empty-label-no-decor") {
          testres = !flags.condition.termtxt || flags.condition.termtxt.indexOf("%s") > -1;
        } else if (["comma-safe", "comma-safe-numbers-only"].indexOf(flags.condition.test) > -1) {
          var locale_term = flags.condition.termtxt;
          var termStartAlpha = false;
          if (flags.condition.termtxt) {
            termStartAlpha = flags.condition.termtxt.slice(0, 1).match(CSL2.ALL_ROMANESQUE_REGEXP);
          }
          var num = state.tmp.just_did_number;
          if (num) {
            if (flags.condition.valueTerm) {
              testres = numbersOnly ? false : true;
            } else if (!locale_term) {
              testres = true;
            } else if (termStartAlpha) {
              testres = numbersOnly ? false : true;
            } else if (["always", "after-number"].indexOf(state.opt.require_comma_on_symbol) > -1) {
              testres = true;
            } else {
              testres = false;
            }
          } else {
            if (flags.condition.valueTerm) {
              testres = false;
            } else if (!locale_term) {
              testres = false;
            } else if (termStartAlpha) {
              testres = numbersOnly ? false : true;
            } else if (state.opt.require_comma_on_symbol === "always") {
              testres = true;
            } else {
              testres = false;
            }
          }
        }
        if (testres) {
          var force_suppress = false;
        } else {
          var force_suppress = true;
        }
        if (flags.condition.not) {
          force_suppress = !force_suppress;
        }
        return force_suppress;
      },
      SYS_OPTIONS: [
        "prioritize_disambiguate_condition",
        "csl_reverse_lookup_support",
        "main_title_from_short_title",
        "uppercase_subtitles",
        "force_short_title_casing_alignment",
        "implicit_short_title",
        "split_container_title"
      ],
      TITLE_SPLIT_REGEXP: function() {
        var splits = [
          "\\.\\s+",
          "\\!\\s+",
          "\\?\\s+",
          "\\s*::*\\s+",
          "\\s*\u2014\\s*",
          "\\s+\\-\\s+",
          "\\s*\\-\\-\\-*\\s*"
        ];
        return {
          match: new RegExp("(" + splits.join("|") + ")", "g"),
          matchfirst: new RegExp("^(" + splits.join("|") + ")"),
          split: new RegExp("(?:" + splits.join("|") + ")")
        };
      }(),
      TITLE_SPLIT: function(str) {
        if (!str) {
          return str;
        }
        var m2 = str.match(CSL2.TITLE_SPLIT_REGEXP.match);
        var lst = str.split(CSL2.TITLE_SPLIT_REGEXP.split);
        for (var i = lst.length - 2; i > -1; i--) {
          lst[i] = lst[i].trim();
          if (lst[i] && lst[i].slice(-1).toLowerCase() !== lst[i].slice(-1)) {
            lst[i] = lst[i] + m2[i] + lst[i + 1];
            lst = lst.slice(0, i + 1).concat(lst.slice(i + 2));
          } else {
            lst = lst.slice(0, i + 1).concat([m2[i]]).concat(lst.slice(i + 1));
          }
        }
        return lst;
      },
      GET_COURT_CLASS: function(state, Item, sortKey) {
        var cls = "";
        var authority = null;
        var country = Item.jurisdiction ? Item.jurisdiction.split(":")[0] : null;
        var classType = "court_condition_classes";
        if (sortKey) {
          classType = "court_key_classes";
        }
        if (country && Item.authority) {
          if (typeof Item.authority === "string") {
            authority = Item.authority;
          } else {
            if (Item.authority[0] && Item.authority[0].literal) {
              authority = Item.authority[0].literal;
            }
          }
        }
        if (authority) {
          if (this.lang && state.locale[this.lang].opts[classType] && state.locale[this.lang].opts[classType][country] && state.locale[this.lang].opts[classType][country][authority]) {
            cls = state.locale[this.lang].opts[classType][country][authority];
          } else if (state.locale[state.opt["default-locale"][0]].opts[classType] && state.locale[state.opt["default-locale"][0]].opts[classType][country] && state.locale[state.opt["default-locale"][0]].opts[classType][country][authority]) {
            cls = state.locale[state.opt["default-locale"][0]].opts[classType][country][authority];
          }
        }
        return cls;
      },
      SET_COURT_CLASSES: function(state, lang, myxml, dataObj) {
        var nodes = myxml.getNodesByName(dataObj, "court-class");
        for (var pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          var courtclass = nodes[pos];
          var attributes = myxml.attributes(courtclass);
          var cls = attributes["@name"];
          var country = attributes["@country"];
          var courts = attributes["@courts"];
          var classType = "court_key_classes";
          if (state.registry) {
            classType = "court_condition_classes";
          }
          if (cls && country && courts) {
            courts = courts.trim().split(/\s+/);
            if (!state.locale[lang].opts[classType]) {
              state.locale[lang].opts[classType] = {};
            }
            if (!state.locale[lang].opts[classType][country]) {
              state.locale[lang].opts[classType][country] = {};
            }
            for (var i = 0, ilen = courts.length; i < ilen; i++) {
              state.locale[lang].opts[classType][country][courts[i]] = cls;
            }
          }
        }
      },
      INIT_JURISDICTION_MACROS: function(state, Item, item, macroName) {
        if (Item["best-jurisdiction"]) {
          return true;
        }
        if (!state.sys.retrieveStyleModule || !CSL2.MODULE_MACROS[macroName] || !Item.jurisdiction) {
          return false;
        }
        var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);
        if (!state.opt.jurisdictions_seen[jurisdictionList[0]]) {
          var res = state.retrieveAllStyleModules(jurisdictionList);
          for (var jurisdiction in res) {
            var fallback = state.loadStyleModule(jurisdiction, res[jurisdiction]);
            if (fallback) {
              if (!res[fallback]) {
                Object.assign(res, state.retrieveAllStyleModules([fallback]));
                state.loadStyleModule(fallback, res[fallback], true);
              }
            }
          }
        }
        var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);
        if (state.opt.parallel.enable) {
          if (!state.parallel) {
            state.parallel = new CSL2.Parallel(state);
          }
        }
        for (var i = 0, ilen = jurisdictionList.length; i < ilen; i++) {
          var jurisdiction = jurisdictionList[i];
          if (item) {
            if (state.juris[jurisdiction] && !item["best-jurisdiction"] && state.juris[jurisdiction].types.locator) {
              Item["best-jurisdiction"] = jurisdiction;
            }
          }
          if (state.juris[jurisdiction] && state.juris[jurisdiction].types[Item.type]) {
            Item["best-jurisdiction"] = jurisdiction;
            return true;
          }
        }
        return false;
      }
    };
    CSL2.XmlJSON = function(dataObj) {
      this.dataObj = dataObj;
      this.institution = {
        name: "institution",
        attrs: {
          "institution-parts": "long",
          "delimiter": ", "
        },
        children: [
          {
            name: "institution-part",
            attrs: {
              name: "long"
            },
            children: []
          }
        ]
      };
    };
    CSL2.XmlJSON.prototype.clean = function(json) {
      return json;
    };
    CSL2.XmlJSON.prototype.getStyleId = function(myjson, styleName) {
      var tagName = "id";
      if (styleName) {
        tagName = "title";
      }
      var ret = "";
      var children2 = myjson.children;
      for (var i = 0, ilen = children2.length; i < ilen; i++) {
        if (children2[i].name === "info") {
          var grandkids = children2[i].children;
          for (var j = 0, jlen = grandkids.length; j < jlen; j++) {
            if (grandkids[j].name === tagName) {
              ret = grandkids[j].children[0];
            }
          }
        }
      }
      return ret;
    };
    CSL2.XmlJSON.prototype.children = function(myjson) {
      if (myjson && myjson.children.length) {
        return myjson.children.slice();
      } else {
        return false;
      }
    };
    CSL2.XmlJSON.prototype.nodename = function(myjson) {
      return myjson ? myjson.name : null;
    };
    CSL2.XmlJSON.prototype.attributes = function(myjson) {
      var ret = {};
      for (var attrname in myjson.attrs) {
        ret["@" + attrname] = myjson.attrs[attrname];
      }
      return ret;
    };
    CSL2.XmlJSON.prototype.content = function(myjson) {
      var ret = "";
      if (!myjson || !myjson.children) {
        return ret;
      }
      for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (typeof myjson.children[i] === "string") {
          ret += myjson.children[i];
        }
      }
      return ret;
    };
    CSL2.XmlJSON.prototype.namespace = {};
    CSL2.XmlJSON.prototype.numberofnodes = function(myjson) {
      if (myjson && typeof myjson.length == "number") {
        return myjson.length;
      } else {
        return 0;
      }
    };
    CSL2.XmlJSON.prototype.getAttributeValue = function(myjson, name, namespace) {
      var ret = "";
      if (namespace) {
        name = namespace + ":" + name;
      }
      if (myjson) {
        if (myjson.attrs) {
          if (myjson.attrs[name]) {
            ret = myjson.attrs[name];
          } else {
            ret = "";
          }
        }
      }
      return ret;
    };
    CSL2.XmlJSON.prototype.getNodeValue = function(myjson, name) {
      var ret = "";
      if (name) {
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name === name) {
            if (myjson.children[i].children.length) {
              ret = myjson.children[i];
            } else {
              ret = "";
            }
          }
        }
      } else if (myjson) {
        ret = myjson;
      }
      if (ret && ret.children && ret.children.length == 1 && typeof ret.children[0] === "string") {
        ret = ret.children[0];
      }
      return ret;
    };
    CSL2.XmlJSON.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myjson, nodename, partname, attrname, val) {
      var pos, len, xml, nodes, node;
      if (attrname.slice(0, 1) === "@") {
        attrname = attrname.slice(1);
      }
      for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (myjson.children[i].name === nodename && myjson.children[i].attrs.name === partname) {
          myjson.children[i].attrs[attrname] = val;
        }
      }
    };
    CSL2.XmlJSON.prototype.deleteNodeByNameAttribute = function(myjson, val) {
      var i, ilen;
      for (i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (!myjson.children[i] || typeof myjson.children[i] === "string") {
          continue;
        }
        if (myjson.children[i].attrs.name == val) {
          myjson.children = myjson.children.slice(0, i).concat(myjson.children.slice(i + 1));
        }
      }
    };
    CSL2.XmlJSON.prototype.deleteAttribute = function(myjson, attrname) {
      var i, ilen;
      if (typeof myjson.attrs[attrname] !== "undefined") {
        myjson.attrs.pop(attrname);
      }
    };
    CSL2.XmlJSON.prototype.setAttribute = function(myjson, attr, val) {
      myjson.attrs[attr] = val;
      return false;
    };
    CSL2.XmlJSON.prototype.nodeCopy = function(myjson, clone2) {
      if (!clone2) {
        var clone2 = {};
      }
      if (typeof clone2 === "object" && typeof clone2.length === "undefined") {
        for (var key in myjson) {
          if (typeof myjson[key] === "string") {
            clone2[key] = myjson[key];
          } else if (typeof myjson[key] === "object") {
            if (typeof myjson[key].length === "undefined") {
              clone2[key] = this.nodeCopy(myjson[key], {});
            } else {
              clone2[key] = this.nodeCopy(myjson[key], []);
            }
          }
        }
      } else {
        for (var i = 0, ilen = myjson.length; i < ilen; i += 1) {
          if (typeof myjson[i] === "string") {
            clone2[i] = myjson[i];
          } else {
            clone2[i] = this.nodeCopy(myjson[i], {});
          }
        }
      }
      return clone2;
    };
    CSL2.XmlJSON.prototype.getNodesByName = function(myjson, name, nameattrval, ret) {
      var nodes, node, pos, len;
      if (!ret) {
        var ret = [];
      }
      if (!myjson || !myjson.children) {
        return ret;
      }
      if (name === myjson.name) {
        if (nameattrval) {
          if (nameattrval === myjson.attrs.name) {
            ret.push(myjson);
          }
        } else {
          ret.push(myjson);
        }
      }
      for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (typeof myjson.children[i] !== "object") {
          continue;
        }
        this.getNodesByName(myjson.children[i], name, nameattrval, ret);
      }
      return ret;
    };
    CSL2.XmlJSON.prototype.nodeNameIs = function(myjson, name) {
      if (typeof myjson === "undefined") {
        return false;
      }
      if (name == myjson.name) {
        return true;
      }
      return false;
    };
    CSL2.XmlJSON.prototype.makeXml = function(myjson) {
      if (typeof myjson === "string") {
        if (myjson.slice(0, 1) === "<") {
          myjson = this.jsonStringWalker.walkToObject(myjson);
        } else {
          myjson = JSON.parse(myjson);
        }
      }
      return myjson;
    };
    CSL2.XmlJSON.prototype.insertChildNodeAfter = function(parent, node, pos, datejson) {
      for (var i = 0, ilen = parent.children.length; i < ilen; i += 1) {
        if (node === parent.children[i]) {
          parent.children = parent.children.slice(0, i).concat([datejson]).concat(parent.children.slice(i + 1));
          break;
        }
      }
      return parent;
    };
    CSL2.XmlJSON.prototype.insertPublisherAndPlace = function(myjson) {
      if (myjson.name === "group") {
        var useme = true;
        var mustHaves = ["publisher", "publisher-place"];
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          var haveVarname = mustHaves.indexOf(myjson.children[i].attrs.variable);
          var isText = myjson.children[i].name === "text";
          if (isText && haveVarname > -1 && !myjson.children[i].attrs.prefix && !myjson.children[i].attrs.suffix) {
            mustHaves = mustHaves.slice(0, haveVarname).concat(mustHaves.slice(haveVarname + 1));
          } else {
            useme = false;
            break;
          }
        }
        if (useme && !mustHaves.length) {
          myjson.attrs["has-publisher-and-publisher-place"] = true;
        }
      }
      for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (typeof myjson.children[i] === "object") {
          this.insertPublisherAndPlace(myjson.children[i]);
        }
      }
    };
    CSL2.XmlJSON.prototype.isChildOfSubstitute = function(parents) {
      if (parents.length > 0) {
        var myparents = parents.slice();
        var parent = myparents.pop();
        if (parent === "substitute") {
          return true;
        } else {
          return this.isChildOfSubstitute(myparents);
        }
      }
      return false;
    };
    CSL2.XmlJSON.prototype.addMissingNameNodes = function(myjson, parents) {
      if (!parents) {
        parents = [];
      }
      if (myjson.name === "names") {
        if (!this.isChildOfSubstitute(parents)) {
          var addName = true;
          for (var i = 0, ilen = myjson.children.length; i < ilen; i++) {
            if (myjson.children[i].name === "name") {
              addName = false;
              break;
            }
          }
          if (addName) {
            myjson.children = [{ name: "name", attrs: {}, children: [] }].concat(myjson.children);
          }
        }
      }
      parents.push(myjson.name);
      for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (typeof myjson.children[i] === "object") {
          this.addMissingNameNodes(myjson.children[i], parents);
        }
      }
      parents.pop();
    };
    CSL2.XmlJSON.prototype.addInstitutionNodes = function(myjson) {
      var names2, thenames, institution, theinstitution, name, thename, xml, pos, len;
      if (myjson.name === "names") {
        var attributes = {};
        var insertPos = -1;
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name == "name") {
            for (var key in myjson.children[i].attrs) {
              attributes[key] = myjson.children[i].attrs[key];
            }
            attributes.delimiter = myjson.children[i].attrs.delimiter;
            attributes.and = myjson.children[i].attrs.and;
            insertPos = i;
            for (var k = 0, klen = myjson.children[i].children.length; k < klen; k += 1) {
              if (myjson.children[i].children[k].attrs.name !== "family") {
                continue;
              }
              for (var key in myjson.children[i].children[k].attrs) {
                attributes[key] = myjson.children[i].children[k].attrs[key];
              }
            }
          }
          if (myjson.children[i].name == "institution") {
            insertPos = -1;
            break;
          }
        }
        if (insertPos > -1) {
          var institution = this.nodeCopy(this.institution);
          for (var i = 0, ilen = CSL2.INSTITUTION_KEYS.length; i < ilen; i += 1) {
            var attrname = CSL2.INSTITUTION_KEYS[i];
            if (typeof attributes[attrname] !== "undefined") {
              institution.children[0].attrs[attrname] = attributes[attrname];
            }
            if (attributes.delimiter) {
              institution.attrs.delimiter = attributes.delimiter;
            }
            if (attributes.and) {
              institution.attrs.and = attributes.and;
            }
          }
          myjson.children = myjson.children.slice(0, insertPos + 1).concat([institution]).concat(myjson.children.slice(insertPos + 1));
        }
      }
      for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (typeof myjson.children[i] === "string") {
          continue;
        }
        this.addInstitutionNodes(myjson.children[i]);
      }
    };
    CSL2.XmlJSON.prototype.flagDateMacros = function(myjson) {
      for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
        if (myjson.children[i].name === "macro") {
          if (this.inspectDateMacros(myjson.children[i])) {
            myjson.children[i].attrs["macro-has-date"] = "true";
          }
        }
      }
    };
    CSL2.XmlJSON.prototype.inspectDateMacros = function(myjson) {
      if (!myjson || !myjson.children) {
        return false;
      }
      if (myjson.name === "date") {
        return true;
      } else {
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (this.inspectDateMacros(myjson.children[i])) {
            return true;
          }
        }
      }
      return false;
    };
    CSL2.stripXmlProcessingInstruction = function(xml) {
      if (!xml) {
        return xml;
      }
      xml = xml.replace(/^<\?[^?]+\?>/, "");
      xml = xml.replace(/<!--[^>]+-->/g, "");
      xml = xml.replace(/^\s+/g, "");
      xml = xml.replace(/\s+$/g, "");
      return xml;
    };
    CSL2.parseXml = function(str) {
      var _pos = 0;
      var _obj = { children: [] };
      var _stack = [_obj.children];
      function _listifyString(str2) {
        str2 = str2.split(/(?:\r\n|\n|\r)/).join(" ").replace(/>[	 ]+</g, "><").replace(/<\!--.*?-->/g, "");
        var lst2 = str2.split("><");
        var stylePos = null;
        for (var i2 = 0, ilen2 = lst2.length; i2 < ilen2; i2++) {
          if (i2 > 0) {
            lst2[i2] = "<" + lst2[i2];
          }
          if (i2 < lst2.length - 1) {
            lst2[i2] = lst2[i2] + ">";
          }
          if (typeof stylePos != "number") {
            if (lst2[i2].slice(0, 7) === "<style " || lst2[i2].slice(0, 8) == "<locale ") {
              stylePos = i2;
            }
          }
        }
        lst2 = lst2.slice(stylePos);
        for (var i2 = lst2.length - 2; i2 > -1; i2--) {
          if (lst2[i2].slice(1).indexOf("<") === -1) {
            var stub = lst2[i2].slice(0, 5);
            if (lst2[i2].slice(-2) !== "/>") {
              if (stub === "<term") {
                if (lst2[i2 + 1].slice(0, 6) === "</term") {
                  lst2[i2] = lst2[i2] + lst2[i2 + 1];
                  lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                }
              } else if (["<sing", "<mult"].indexOf(stub) > -1) {
                if (lst2[i2].slice(-2) !== "/>" && lst2[i2 + 1].slice(0, 1) === "<") {
                  lst2[i2] = lst2[i2] + lst2[i2 + 1];
                  lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                }
              }
            }
          }
        }
        return lst2;
      }
      function _decodeHtmlEntities(str2) {
        return str2.split("&amp;").join("&").split("&quot;").join('"').split("&gt;").join(">").split("&lt;").join("<").replace(/&#([0-9]{1,6});/gi, function(match, numStr) {
          var num = parseInt(numStr, 10);
          return String.fromCharCode(num);
        }).replace(/&#x([a-f0-9]{1,6});/gi, function(match, numStr) {
          var num = parseInt(numStr, 16);
          return String.fromCharCode(num);
        });
      }
      function _getAttributes(elem2) {
        var m2 = elem2.match(/([^\'\"=	 ]+)=(?:\"[^\"]*\"|\'[^\']*\')/g);
        if (m2) {
          for (var i2 = 0, ilen2 = m2.length; i2 < ilen2; i2++) {
            m2[i2] = m2[i2].replace(/=.*/, "");
          }
        }
        return m2;
      }
      function _getAttribute(elem2, attr) {
        var rex = RegExp("^.*[	 ]+" + attr + `=("(?:[^"]*)"|'(?:[^']*)').*$`);
        var m2 = elem2.match(rex);
        return m2 ? m2[1].slice(1, -1) : null;
      }
      function _getTagName(elem2) {
        var rex = RegExp("^<([^	 />]+)");
        var m2 = elem2.match(rex);
        return m2 ? m2[1] : null;
      }
      function _castObjectFromOpeningTag(elem2) {
        var obj = {};
        obj.name = _getTagName(elem2);
        obj.attrs = {};
        var attributes = _getAttributes(elem2);
        if (attributes) {
          for (var i2 = 0, ilen2 = attributes.length; i2 < ilen2; i2++) {
            var attr = {
              name: attributes[i2],
              value: _getAttribute(elem2, attributes[i2])
            };
            obj.attrs[attr.name] = _decodeHtmlEntities(attr.value);
          }
        }
        obj.children = [];
        return obj;
      }
      function _extractTextFromCompositeElement(elem2) {
        var m2 = elem2.match(/^.*>([^<]*)<.*$/);
        return _decodeHtmlEntities(m2[1]);
      }
      function _appendToChildren(obj) {
        _stack.slice(-1)[0].push(obj);
      }
      function _extendStackWithNewChildren(obj) {
        _stack.push(obj.children);
      }
      function processElement(elem2) {
        var obj;
        if (elem2.slice(1).indexOf("<") > -1) {
          var tag = elem2.slice(0, elem2.indexOf(">") + 1);
          obj = _castObjectFromOpeningTag(tag);
          obj.children = [_extractTextFromCompositeElement(elem2)];
          _appendToChildren(obj);
        } else if (elem2.slice(-2) === "/>") {
          obj = _castObjectFromOpeningTag(elem2);
          if (_getTagName(elem2) === "term") {
            obj.children.push("");
          }
          _appendToChildren(obj);
        } else if (elem2.slice(0, 2) === "</") {
          _stack.pop();
        } else {
          obj = _castObjectFromOpeningTag(elem2);
          _appendToChildren(obj);
          _extendStackWithNewChildren(obj);
        }
      }
      var lst = _listifyString(str);
      for (var i = 0, ilen = lst.length; i < ilen; i++) {
        var elem = lst[i];
        processElement(elem);
      }
      return _obj.children[0];
    };
    CSL2.XmlDOM = function(dataObj) {
      this.dataObj = dataObj;
      if (typeof DOMParser == "undefined") {
        DOMParser = function() {
        };
        DOMParser.prototype.parseFromString = function(str2, contentType) {
          if (typeof ActiveXObject != "undefined") {
            var xmldata = new ActiveXObject("MSXML.DomDocument");
            xmldata.async = false;
            xmldata.loadXML(str2);
            return xmldata;
          } else if (typeof XMLHttpRequest != "undefined") {
            var xmldata = new XMLHttpRequest();
            if (!contentType) {
              contentType = "text/xml";
            }
            xmldata.open("GET", "data:" + contentType + ";charset=utf-8," + encodeURIComponent(str2), false);
            if (xmldata.overrideMimeType) {
              xmldata.overrideMimeType(contentType);
            }
            xmldata.send(null);
            return xmldata.responseXML;
          } else if (typeof marknote != "undefined") {
            var parser = new marknote.Parser();
            return parser.parse(str2);
          }
        };
        this.hasAttributes = function(node) {
          var ret;
          if (node.attributes && node.attributes.length) {
            ret = true;
          } else {
            ret = false;
          }
          return ret;
        };
      } else {
        this.hasAttributes = function(node) {
          var ret;
          if (node.attributes && node.attributes.length) {
            ret = true;
          } else {
            ret = false;
          }
          return ret;
        };
      }
      this.importNode = function(doc, srcElement) {
        var ret;
        if (typeof doc.importNode == "undefined") {
          ret = this._importNode(doc, srcElement, true);
        } else {
          ret = doc.importNode(srcElement, true);
        }
        return ret;
      };
      this._importNode = function(doc, node, allChildren) {
        switch (node.nodeType) {
          case 1:
            var newNode = doc.createElement(node.nodeName);
            if (node.attributes && node.attributes.length > 0)
              for (var i = 0, il = node.attributes.length; i < il; )
                newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
            if (allChildren && node.childNodes && node.childNodes.length > 0)
              for (var i = 0, il = node.childNodes.length; i < il; )
                newNode.appendChild(this._importNode(doc, node.childNodes[i++], allChildren));
            return newNode;
            break;
          case 3:
          case 4:
          case 8:
        }
      };
      this.parser = new DOMParser();
      var str = '<docco><institution institution-parts="long" delimiter=", " substitute-use-first="1" use-last="1"><institution-part name="long"/></institution></docco>';
      var inst_doc = this.parser.parseFromString(str, "text/xml");
      var inst_node = inst_doc.getElementsByTagName("institution");
      this.institution = inst_node.item(0);
      var inst_part_node = inst_doc.getElementsByTagName("institution-part");
      this.institutionpart = inst_part_node.item(0);
      this.ns = "http://purl.org/net/xbiblio/csl";
    };
    CSL2.XmlDOM.prototype.clean = function(xml) {
      xml = xml.replace(/<\?[^?]+\?>/g, "");
      xml = xml.replace(/<![^>]+>/g, "");
      xml = xml.replace(/^\s+/, "");
      xml = xml.replace(/\s+$/, "");
      xml = xml.replace(/^\n*/, "");
      return xml;
    };
    CSL2.XmlDOM.prototype.getStyleId = function(myxml, styleName) {
      var text = "";
      var tagName = "id";
      if (styleName) {
        tagName = "title";
      }
      var node = myxml.getElementsByTagName(tagName);
      if (node && node.length) {
        node = node.item(0);
      }
      if (node) {
        text = node.textContent;
      }
      if (!text) {
        text = node.innerText;
      }
      if (!text) {
        text = node.innerHTML;
      }
      return text;
    };
    CSL2.XmlDOM.prototype.children = function(myxml) {
      var children2, pos, len, ret;
      if (myxml) {
        ret = [];
        children2 = myxml.childNodes;
        for (pos = 0, len = children2.length; pos < len; pos += 1) {
          if (children2[pos].nodeName != "#text") {
            ret.push(children2[pos]);
          }
        }
        return ret;
      } else {
        return [];
      }
    };
    CSL2.XmlDOM.prototype.nodename = function(myxml) {
      var ret = myxml.nodeName;
      return ret;
    };
    CSL2.XmlDOM.prototype.attributes = function(myxml) {
      var ret, attrs, attr, key, xml, pos, len;
      ret = new Object();
      if (myxml && this.hasAttributes(myxml)) {
        attrs = myxml.attributes;
        for (pos = 0, len = attrs.length; pos < len; pos += 1) {
          attr = attrs[pos];
          ret["@" + attr.name] = attr.value;
        }
      }
      return ret;
    };
    CSL2.XmlDOM.prototype.content = function(myxml) {
      var ret;
      if (typeof myxml.textContent != "undefined") {
        ret = myxml.textContent;
      } else if (typeof myxml.innerText != "undefined") {
        ret = myxml.innerText;
      } else {
        ret = myxml.txt;
      }
      return ret;
    };
    CSL2.XmlDOM.prototype.namespace = {
      "xml": "http://www.w3.org/XML/1998/namespace"
    };
    CSL2.XmlDOM.prototype.numberofnodes = function(myxml) {
      if (myxml) {
        return myxml.length;
      } else {
        return 0;
      }
    };
    CSL2.XmlDOM.prototype.getAttributeName = function(attr) {
      var ret = attr.name;
      return ret;
    };
    CSL2.XmlDOM.prototype.getAttributeValue = function(myxml, name, namespace) {
      var ret = "";
      if (namespace) {
        name = namespace + ":" + name;
      }
      if (myxml && this.hasAttributes(myxml) && myxml.getAttribute(name)) {
        ret = myxml.getAttribute(name);
      }
      return ret;
    };
    CSL2.XmlDOM.prototype.getNodeValue = function(myxml, name) {
      var ret = null;
      if (name) {
        var vals = myxml.getElementsByTagName(name);
        if (vals.length > 0) {
          if (typeof vals[0].textContent != "undefined") {
            ret = vals[0].textContent;
          } else if (typeof vals[0].innerText != "undefined") {
            ret = vals[0].innerText;
          } else {
            ret = vals[0].text;
          }
        }
      }
      if (ret === null && myxml && myxml.childNodes && (myxml.childNodes.length == 0 || myxml.childNodes.length == 1 && myxml.firstChild.nodeName == "#text")) {
        if (typeof myxml.textContent != "undefined") {
          ret = myxml.textContent;
        } else if (typeof myxml.innerText != "undefined") {
          ret = myxml.innerText;
        } else {
          ret = myxml.text;
        }
      }
      if (ret === null) {
        ret = myxml;
      }
      return ret;
    };
    CSL2.XmlDOM.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myxml, nodename, partname, attrname, val) {
      var pos, len, xml, nodes, node;
      if (attrname.slice(0, 1) === "@") {
        attrname = attrname.slice(1);
      }
      nodes = myxml.getElementsByTagName(nodename);
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        node = nodes[pos];
        if (node.getAttribute("name") != partname) {
          continue;
        }
        node.setAttribute(attrname, val);
      }
    };
    CSL2.XmlDOM.prototype.deleteNodeByNameAttribute = function(myxml, val) {
      var pos, len, node, nodes;
      nodes = myxml.childNodes;
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        node = nodes[pos];
        if (!node || node.nodeType == node.TEXT_NODE) {
          continue;
        }
        if (this.hasAttributes(node) && node.getAttribute("name") == val) {
          myxml.removeChild(nodes[pos]);
        }
      }
    };
    CSL2.XmlDOM.prototype.deleteAttribute = function(myxml, attr) {
      myxml.removeAttribute(attr);
    };
    CSL2.XmlDOM.prototype.setAttribute = function(myxml, attr, val) {
      if (!myxml.ownerDocument) {
        myxml = myxml.firstChild;
      }
      if (["function", "unknown"].indexOf(typeof myxml.setAttribute) > -1) {
        myxml.setAttribute(attr, val);
      }
      return false;
    };
    CSL2.XmlDOM.prototype.nodeCopy = function(myxml) {
      var cloned_node = myxml.cloneNode(true);
      return cloned_node;
    };
    CSL2.XmlDOM.prototype.getNodesByName = function(myxml, name, nameattrval) {
      var ret, nodes, node, pos, len;
      ret = [];
      nodes = myxml.getElementsByTagName(name);
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        node = nodes.item(pos);
        if (nameattrval && !(this.hasAttributes(node) && node.getAttribute("name") == nameattrval)) {
          continue;
        }
        ret.push(node);
      }
      return ret;
    };
    CSL2.XmlDOM.prototype.nodeNameIs = function(myxml, name) {
      if (name == myxml.nodeName) {
        return true;
      }
      return false;
    };
    CSL2.XmlDOM.prototype.makeXml = function(myxml) {
      var ret, topnode;
      if (!myxml) {
        myxml = "<docco><bogus/></docco>";
      }
      myxml = myxml.replace(/\s*<\?[^>]*\?>\s*\n*/g, "");
      var nodetree = this.parser.parseFromString(myxml, "application/xml");
      return nodetree.firstChild;
    };
    CSL2.XmlDOM.prototype.insertChildNodeAfter = function(parent, node, pos, datexml) {
      var myxml, xml;
      myxml = this.importNode(node.ownerDocument, datexml);
      parent.replaceChild(myxml, node);
      return parent;
    };
    CSL2.XmlDOM.prototype.insertPublisherAndPlace = function(myxml) {
      var group = myxml.getElementsByTagName("group");
      for (var i = 0, ilen = group.length; i < ilen; i += 1) {
        var node = group.item(i);
        var skippers = [];
        for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
          if (node.childNodes.item(j).nodeType !== 1) {
            skippers.push(j);
          }
        }
        if (node.childNodes.length - skippers.length === 2) {
          var twovars = [];
          for (var j = 0, jlen = 2; j < jlen; j += 1) {
            if (skippers.indexOf(j) > -1) {
              continue;
            }
            var child = node.childNodes.item(j);
            var subskippers = [];
            for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
              if (child.childNodes.item(k).nodeType !== 1) {
                subskippers.push(k);
              }
            }
            if (child.childNodes.length - subskippers.length === 0) {
              twovars.push(child.getAttribute("variable"));
              if (child.getAttribute("suffix") || child.getAttribute("prefix")) {
                twovars = [];
                break;
              }
            }
          }
          if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
            node.setAttribute("has-publisher-and-publisher-place", true);
          }
        }
      }
    };
    CSL2.XmlDOM.prototype.isChildOfSubstitute = function(node) {
      if (node.parentNode) {
        if (node.parentNode.tagName.toLowerCase() === "substitute") {
          return true;
        } else {
          return this.isChildOfSubstitute(node.parentNode);
        }
      }
      return false;
    };
    CSL2.XmlDOM.prototype.addMissingNameNodes = function(myxml) {
      var nameslist = myxml.getElementsByTagName("names");
      for (var i = 0, ilen = nameslist.length; i < ilen; i += 1) {
        var names2 = nameslist.item(i);
        var namelist = names2.getElementsByTagName("name");
        if ((!namelist || namelist.length === 0) && !this.isChildOfSubstitute(names2)) {
          var doc = names2.ownerDocument;
          var name = doc.createElement("name");
          names2.appendChild(name);
        }
      }
    };
    CSL2.XmlDOM.prototype.addInstitutionNodes = function(myxml) {
      var names2, thenames, institution, theinstitution, theinstitutionpart, name, thename, xml, pos, len;
      names2 = myxml.getElementsByTagName("names");
      for (pos = 0, len = names2.length; pos < len; pos += 1) {
        thenames = names2.item(pos);
        name = thenames.getElementsByTagName("name");
        if (name.length == 0) {
          continue;
        }
        institution = thenames.getElementsByTagName("institution");
        if (institution.length == 0) {
          theinstitution = this.importNode(myxml.ownerDocument, this.institution);
          theinstitutionpart = theinstitution.getElementsByTagName("institution-part").item(0);
          thename = name.item(0);
          thenames.insertBefore(theinstitution, thename.nextSibling);
          for (var j = 0, jlen = CSL2.INSTITUTION_KEYS.length; j < jlen; j += 1) {
            var attrname = CSL2.INSTITUTION_KEYS[j];
            var attrval = thename.getAttribute(attrname);
            if (attrval) {
              theinstitutionpart.setAttribute(attrname, attrval);
            }
          }
          var nameparts = thename.getElementsByTagName("name-part");
          for (var j = 0, jlen = nameparts.length; j < jlen; j += 1) {
            if (nameparts[j].getAttribute("name") === "family") {
              for (var k = 0, klen = CSL2.INSTITUTION_KEYS.length; k < klen; k += 1) {
                var attrname = CSL2.INSTITUTION_KEYS[k];
                var attrval = nameparts[j].getAttribute(attrname);
                if (attrval) {
                  theinstitutionpart.setAttribute(attrname, attrval);
                }
              }
            }
          }
        }
      }
    };
    CSL2.XmlDOM.prototype.flagDateMacros = function(myxml) {
      var pos, len, thenode, thedate;
      var nodes = myxml.getElementsByTagName("macro");
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
        thenode = nodes.item(pos);
        thedate = thenode.getElementsByTagName("date");
        if (thedate.length) {
          thenode.setAttribute("macro-has-date", "true");
        }
      }
    };
    CSL2.setupXml = function(xmlObject) {
      var dataObj = {};
      var parser = null;
      if (typeof xmlObject !== "undefined") {
        if (typeof xmlObject === "string") {
          xmlObject = xmlObject.replace("^\uFEFF", "").replace(/^\s+/, "");
          if (xmlObject.slice(0, 1) === "<") {
            dataObj = CSL2.parseXml(xmlObject);
          } else {
            dataObj = JSON.parse(xmlObject);
          }
          parser = new CSL2.XmlJSON(dataObj);
        } else if (typeof xmlObject.getAttribute !== "undefined") {
          parser = new CSL2.XmlDOM(xmlObject);
        } else if (typeof xmlObject.toXMLString !== "undefined") {
          parser = new CSL2.XmlE4X(xmlObject);
        } else {
          parser = new CSL2.XmlJSON(xmlObject);
        }
      } else {
        CSL2.error("unable to parse XML input");
      }
      if (!parser) {
        CSL2.error("citeproc-js error: unable to parse CSL style or locale object");
      }
      return parser;
    };
    CSL2.getSortCompare = function(default_locale) {
      if (CSL2.stringCompare) {
        return CSL2.stringCompare;
      }
      var me = this;
      var strcmp;
      var strcmp_opts = {
        sensitivity: "base",
        ignorePunctuation: true,
        numeric: true
      };
      if (!default_locale) {
        default_locale = "en-US";
      }
      strcmp = function(a2, b) {
        return CSL2.toLocaleLowerCase.call(me, a2).localeCompare(CSL2.toLocaleLowerCase.call(me, b), default_locale, strcmp_opts);
      };
      var stripPunct = function(str) {
        return str.replace(/^[\[\]\'\"]*/g, "");
      };
      var getBracketPreSort = function() {
        if (!strcmp("[x", "x")) {
          return false;
        } else {
          return function(a2, b) {
            return strcmp(stripPunct(a2), stripPunct(b));
          };
        }
      };
      var bracketPreSort = getBracketPreSort();
      var sortCompare = function(a2, b) {
        if (bracketPreSort) {
          return bracketPreSort(a2, b);
        } else {
          return strcmp(a2, b);
        }
      };
      return sortCompare;
    };
    CSL2.ambigConfigDiff = function(a2, b) {
      var pos, len, ppos, llen;
      if (a2.names.length !== b.names.length) {
        return 1;
      } else {
        for (pos = 0, len = a2.names.length; pos < len; pos += 1) {
          if (a2.names[pos] !== b.names[pos]) {
            return 1;
          } else {
            for (ppos = 0, llen = a2.givens[pos]; ppos < llen; ppos += 1) {
              if (a2.givens[pos][ppos] !== b.givens[pos][ppos]) {
                return 1;
              }
            }
          }
        }
      }
      if (a2.disambiguate != b.disambiguate) {
        return 1;
      }
      if (a2.year_suffix !== b.year_suffix) {
        return 1;
      }
      return 0;
    };
    CSL2.cloneAmbigConfig = function(config, oldconfig) {
      var i, ilen, j, jlen, param;
      var ret = {};
      ret.names = [];
      ret.givens = [];
      ret.year_suffix = false;
      ret.disambiguate = false;
      for (i = 0, ilen = config.names.length; i < ilen; i += 1) {
        param = config.names[i];
        ret.names[i] = param;
      }
      for (i = 0, ilen = config.givens.length; i < ilen; i += 1) {
        param = [];
        for (j = 0, jlen = config.givens[i].length; j < jlen; j += 1) {
          param.push(config.givens[i][j]);
        }
        ret.givens.push(param);
      }
      if (oldconfig) {
        ret.year_suffix = oldconfig.year_suffix;
        ret.disambiguate = oldconfig.disambiguate;
      } else {
        ret.year_suffix = config.year_suffix;
        ret.disambiguate = config.disambiguate;
      }
      return ret;
    };
    CSL2.getAmbigConfig = function() {
      var config, ret;
      config = this.tmp.disambig_request;
      if (!config) {
        config = this.tmp.disambig_settings;
      }
      var ret = CSL2.cloneAmbigConfig(config);
      return ret;
    };
    CSL2.getMaxVals = function() {
      return this.tmp.names_max.mystack.slice();
    };
    CSL2.getMinVal = function() {
      return this.tmp["et-al-min"];
    };
    CSL2.tokenExec = function(token, Item, item) {
      var next, maybenext, exec, debug;
      debug = false;
      next = token.next;
      maybenext = false;
      var record = function(result) {
        if (result) {
          this.tmp.jump.replace("succeed");
          return token.succeed;
        } else {
          this.tmp.jump.replace("fail");
          return token.fail;
        }
      };
      if (token.test) {
        next = record.call(this, token.test(Item, item));
      }
      for (var i = 0, ilen = token.execs.length; i < ilen; i++) {
        exec = token.execs[i];
        maybenext = exec.call(token, this, Item, item);
        if (maybenext) {
          next = maybenext;
        }
      }
      if (debug) {
        CSL2.debug(token.name + " (" + token.tokentype + ") ---> done");
      }
      return next;
    };
    CSL2.expandMacro = function(macro_key_token, target) {
      var mkey, macro_nodes, end_of_macro, func;
      mkey = macro_key_token.postponed_macro;
      var sort_direction = macro_key_token.strings.sort_direction;
      macro_key_token = new CSL2.Token("group", CSL2.START);
      var hasDate = false;
      var macroid = false;
      macro_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, "macro", mkey);
      if (macro_nodes.length) {
        macroid = this.cslXml.getAttributeValue(macro_nodes[0], "cslid");
        hasDate = this.cslXml.getAttributeValue(macro_nodes[0], "macro-has-date");
      }
      if (hasDate) {
        mkey = mkey + "@" + this.build.current_default_locale;
        func = function(state) {
          if (state.tmp.extension) {
            state.tmp["doing-macro-with-date"] = true;
          }
        };
        macro_key_token.execs.push(func);
      }
      if (this.build.macro_stack.indexOf(mkey) > -1) {
        CSL2.error('CSL processor error: call to macro "' + mkey + '" would cause an infinite loop');
      } else {
        this.build.macro_stack.push(mkey);
      }
      macro_key_token.cslid = macroid;
      if (CSL2.MODULE_MACROS[mkey]) {
        macro_key_token.juris = mkey;
        this.opt.update_mode = CSL2.POSITION;
      }
      CSL2.Node.group.build.call(macro_key_token, this, target, true);
      if (!this.cslXml.getNodeValue(macro_nodes)) {
        CSL2.error('CSL style error: undefined macro "' + mkey + '"');
      }
      var mytarget = CSL2.getMacroTarget.call(this, mkey);
      if (mytarget) {
        CSL2.buildMacro.call(this, mytarget, macro_nodes);
        CSL2.configureMacro.call(this, mytarget);
      }
      if (!this.build.extension) {
        var func = function(macro_name) {
          return function(state, Item, item) {
            var next = 0;
            while (next < state.macros[macro_name].length) {
              next = CSL2.tokenExec.call(state, state.macros[macro_name][next], Item, item);
            }
          };
        }(mkey);
        var text_node = new CSL2.Token("text", CSL2.SINGLETON);
        text_node.execs.push(func);
        target.push(text_node);
      }
      end_of_macro = new CSL2.Token("group", CSL2.END);
      end_of_macro.strings.sort_direction = sort_direction;
      if (hasDate) {
        func = function(state) {
          if (state.tmp.extension) {
            state.tmp["doing-macro-with-date"] = false;
          }
        };
        end_of_macro.execs.push(func);
      }
      if (macro_key_token.juris) {
        end_of_macro.juris = mkey;
      }
      CSL2.Node.group.build.call(end_of_macro, this, target, true);
      this.build.macro_stack.pop();
    };
    CSL2.getMacroTarget = function(mkey) {
      var mytarget = false;
      if (this.build.extension) {
        mytarget = this[this.build.root + this.build.extension].tokens;
      } else if (!this.macros[mkey]) {
        mytarget = [];
        this.macros[mkey] = mytarget;
      }
      return mytarget;
    };
    CSL2.buildMacro = function(mytarget, macro_nodes) {
      var builder = CSL2.makeBuilder(this, mytarget);
      var mynode;
      if (typeof macro_nodes.length === "undefined") {
        mynode = macro_nodes;
      } else {
        mynode = macro_nodes[0];
      }
      builder(mynode);
    };
    CSL2.configureMacro = function(mytarget) {
      if (!this.build.extension) {
        this.configureTokenList(mytarget);
      }
    };
    CSL2.XmlToToken = function(state, tokentype, explicitTarget, var_stack) {
      var name, txt, attrfuncs, attributes, decorations, token, key, target;
      name = state.cslXml.nodename(this);
      if (state.build.skip && state.build.skip !== name) {
        return;
      }
      if (!name) {
        txt = state.cslXml.content(this);
        if (txt) {
          state.build.text = txt;
        }
        return;
      }
      if (!CSL2.Node[state.cslXml.nodename(this)]) {
        CSL2.error('Undefined node name "' + name + '".');
      }
      attrfuncs = [];
      attributes = state.cslXml.attributes(this);
      decorations = CSL2.setDecorations.call(this, state, attributes);
      token = new CSL2.Token(name, tokentype);
      if (tokentype !== CSL2.END || name === "if" || name === "else-if" || name === "layout") {
        for (var key in attributes) {
          if (attributes.hasOwnProperty(key)) {
            if (tokentype === CSL2.END && key !== "@language" && key !== "@locale") {
              continue;
            }
            if (attributes.hasOwnProperty(key)) {
              if (CSL2.Attributes[key]) {
                try {
                  CSL2.Attributes[key].call(token, state, "" + attributes[key]);
                } catch (e) {
                  CSL2.error(key + " attribute: " + e);
                }
              } else {
                CSL2.debug('warning: undefined attribute "' + key + '" in style');
              }
            }
          }
        }
        token.decorations = decorations;
        if (CSL2.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
          var_stack.push(token.variables);
        }
      } else if (tokentype === CSL2.END && attributes["@variable"]) {
        token.hasVariable = true;
        if (CSL2.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
          token.variables = var_stack.pop();
        }
      }
      if (explicitTarget) {
        target = explicitTarget;
      } else {
        target = state[state.build.area].tokens;
      }
      CSL2.Node[name].build.call(token, state, target, true);
    };
    CSL2.DateParser = function() {
      var epochPairs = [
        ["\u660E\u6CBB", 1867],
        ["\u5927\u6B63", 1911],
        ["\u662D\u548C", 1925],
        ["\u5E73\u6210", 1988]
      ];
      var epochYearByName = {};
      for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
        var key = epochPairs[i][0];
        var val = epochPairs[i][1];
        epochYearByName[key] = val;
      }
      var epochMatchStrings = [];
      var epochMap = {};
      for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
        var pair = epochPairs[i];
        var val = pair[0];
        epochMatchStrings.push(val);
        epochMap[pair[0]] = pair[1];
      }
      var epochMatchString = epochMatchStrings.join("|");
      var epochSplitter = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)");
      var epochMatcher = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)", "g");
      var kanjiMonthDay = /(\u6708|\u5E74)/g;
      var kanjiYear = /\u65E5/g;
      var kanjiRange = /\u301c/g;
      var yearLast = "(?:[?0-9]{1,2}%%NUMD%%){0,2}[?0-9]{4}(?![0-9])";
      var yearFirst = "[?0-9]{4}(?:%%NUMD%%[?0-9]{1,2}){0,2}(?![0-9])";
      var numberVal = "[?0-9]{1,3}";
      var rangeSeparator = "[%%DATED%%]";
      var fuzzyChar = "[?~]";
      var chars = "[^-/~?0-9]+";
      var rexString = "(" + yearFirst + "|" + yearLast + "|" + numberVal + "|" + rangeSeparator + "|" + fuzzyChar + "|" + chars + ")";
      var rexDash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "-"));
      var rexDashSlash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "/"));
      var rexSlashDash = new RegExp(rexString.replace(/%%NUMD%%/g, "/").replace(/%%DATED%%/g, "-"));
      var monthString = "january february march april may june july august september october november december spring summer fall winter spring summer";
      this.monthStrings = monthString.split(" ");
      this.setOrderDayMonth = function() {
        this.monthGuess = 1;
        this.dayGuess = 0;
      };
      this.setOrderMonthDay = function() {
        this.monthGuess = 0;
        this.dayGuess = 1;
      };
      this.resetDateParserMonths = function() {
        this.monthSets = [];
        for (var i2 = 0, ilen2 = this.monthStrings.length; i2 < ilen2; i2++) {
          this.monthSets.push([this.monthStrings[i2]]);
        }
        this.monthAbbrevs = [];
        for (var i2 = 0, ilen2 = this.monthSets.length; i2 < ilen2; i2++) {
          this.monthAbbrevs.push([]);
          for (var j = 0, jlen = this.monthSets[i2].length; j < jlen; j++) {
            this.monthAbbrevs[i2].push(this.monthSets[i2][0].slice(0, 3));
          }
        }
        this.monthRexes = [];
        for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
          this.monthRexes.push(new RegExp("(?:" + this.monthAbbrevs[i2].join("|") + ")"));
        }
      };
      this.addDateParserMonths = function(lst) {
        if (typeof lst === "string") {
          lst = lst.split(/\s+/);
        }
        if (lst.length !== 12 && lst.length !== 16) {
          CSL2.debug("month [+season] list of " + lst.length + ", expected 12 or 16. Ignoring.");
          return;
        }
        for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
          var abbrevLength = null;
          var skip = false;
          var insert = 3;
          var extendedSets = {};
          for (var j = 0, jlen = this.monthAbbrevs.length; j < jlen; j++) {
            extendedSets[j] = {};
            if (j === i2) {
              for (var k = 0, klen = this.monthAbbrevs[i2].length; k < klen; k++) {
                if (this.monthAbbrevs[i2][k] === lst[i2].slice(0, this.monthAbbrevs[i2][k].length)) {
                  skip = true;
                  break;
                }
              }
            } else {
              for (var k = 0, klen = this.monthAbbrevs[j].length; k < klen; k++) {
                abbrevLength = this.monthAbbrevs[j][k].length;
                if (this.monthAbbrevs[j][k] === lst[i2].slice(0, abbrevLength)) {
                  while (this.monthSets[j][k].slice(0, abbrevLength) === lst[i2].slice(0, abbrevLength)) {
                    if (abbrevLength > lst[i2].length || abbrevLength > this.monthSets[j][k].length) {
                      CSL2.debug("unable to disambiguate month string in date parser: " + lst[i2]);
                      break;
                    } else {
                      abbrevLength += 1;
                    }
                  }
                  insert = abbrevLength;
                  extendedSets[j][k] = abbrevLength;
                }
              }
            }
            for (var jKey in extendedSets) {
              for (var kKey in extendedSets[jKey]) {
                abbrevLength = extendedSets[jKey][kKey];
                jKey = parseInt(jKey, 10);
                kKey = parseInt(kKey, 10);
                this.monthAbbrevs[jKey][kKey] = this.monthSets[jKey][kKey].slice(0, abbrevLength);
              }
            }
          }
          if (!skip) {
            this.monthSets[i2].push(lst[i2]);
            this.monthAbbrevs[i2].push(lst[i2].slice(0, insert));
          }
        }
        this.monthRexes = [];
        this.monthRexStrs = [];
        for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
          this.monthRexes.push(new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")"));
          this.monthRexStrs.push("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
        }
        if (this.monthAbbrevs.length === 18) {
          for (var i2 = 12, ilen2 = 14; i2 < ilen2; i2++) {
            this.monthRexes[i2 + 4] = new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
            this.monthRexStrs[i2 + 4] = "^(?:" + this.monthAbbrevs[i2].join("|") + ")";
          }
        }
      };
      this.convertDateObjectToArray = function(thedate) {
        thedate["date-parts"] = [];
        thedate["date-parts"].push([]);
        var slicelen = 0;
        var part;
        for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2++) {
          part = ["year", "month", "day"][i2];
          if (!thedate[part]) {
            break;
          }
          slicelen += 1;
          thedate["date-parts"][0].push(thedate[part]);
          delete thedate[part];
        }
        thedate["date-parts"].push([]);
        for (var i2 = 0, ilen2 = slicelen; i2 < ilen2; i2++) {
          part = ["year_end", "month_end", "day_end"][i2];
          if (!thedate[part]) {
            break;
          }
          thedate["date-parts"][1].push(thedate[part]);
          delete thedate[part];
        }
        if (thedate["date-parts"][0].length !== thedate["date-parts"][1].length) {
          thedate["date-parts"].pop();
        }
        return thedate;
      };
      this.convertDateObjectToString = function(thedate) {
        var ret = [];
        for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
          if (thedate[CSL2.DATE_PARTS_ALL[i2]]) {
            ret.push(thedate[CSL2.DATE_PARTS_ALL[i2]]);
          } else {
            break;
          }
        }
        return ret.join("-");
      };
      this._parseNumericDate = function(ret, delim, suff, txt) {
        if (!suff) {
          suff = "";
        }
        var lst = txt.split(delim);
        for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
          if (lst[i2].length === 4) {
            ret["year" + suff] = lst[i2].replace(/^0*/, "");
            if (!i2) {
              lst = lst.slice(1);
            } else {
              lst = lst.slice(0, i2);
            }
            break;
          }
        }
        for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
          lst[i2] = parseInt(lst[i2], 10);
        }
        if (lst.length === 1 || lst.length === 2 && !lst[1]) {
          var month = lst[0];
          if (month) {
            ret["month" + suff] = "" + lst[0];
          }
        } else if (lst.length === 2) {
          if (lst[this.monthGuess] > 12) {
            var month = lst[this.dayGuess];
            var day = lst[this.monthGuess];
            if (month) {
              ret["month" + suff] = "" + month;
              if (day) {
                ret["day" + suff] = "" + day;
              }
            }
          } else {
            var month = lst[this.monthGuess];
            var day = lst[this.dayGuess];
            if (month) {
              ret["month" + suff] = "" + month;
              if (day) {
                ret["day" + suff] = "" + day;
              }
            }
          }
        }
      };
      this.parseDateToObject = function(txt) {
        var orig = txt;
        var slashPos = -1;
        var dashPos = -1;
        var yearIsNegative = false;
        var lst;
        if (txt) {
          txt = txt.replace(/^(.*[0-9])T[0-9].*/, "$1");
          if (txt.slice(0, 1) === "-") {
            yearIsNegative = true;
            txt = txt.slice(1);
          }
          if (txt.match(/^[0-9]{1,3}$/)) {
            while (txt.length < 4) {
              txt = "0" + txt;
            }
          }
          txt = "" + txt;
          txt = txt.replace(/\s*[0-9]{2}:[0-9]{2}(?::[0-9]+)/, "");
          var m2 = txt.match(kanjiMonthDay);
          if (m2) {
            txt = txt.replace(/\s+/g, "");
            txt = txt.replace(kanjiYear, "");
            txt = txt.replace(kanjiMonthDay, "-");
            txt = txt.replace(kanjiRange, "/");
            txt = txt.replace(/\-\//g, "/");
            txt = txt.replace(/-$/g, "");
            var slst = txt.split(epochSplitter);
            lst = [];
            var mm = txt.match(epochMatcher);
            if (mm) {
              var mmx = [];
              for (var i2 = 0, ilen2 = mm.length; i2 < ilen2; i2++) {
                mmx = mmx.concat(mm[i2].match(/([^0-9]+)([0-9]+)/).slice(1));
              }
              for (var i2 = 0, ilen2 = slst.length; i2 < ilen2; i2++) {
                lst.push(slst[i2]);
                if (i2 !== ilen2 - 1) {
                  var mmpos = i2 * 2;
                  lst.push(mmx[mmpos]);
                  lst.push(mmx[mmpos + 1]);
                }
              }
            } else {
              lst = slst;
            }
            for (var i2 = 1, ilen2 = lst.length; i2 < ilen2; i2 += 3) {
              lst[i2 + 1] = epochMap[lst[i2]] + parseInt(lst[i2 + 1], 10);
              lst[i2] = "";
            }
            txt = lst.join("");
            txt = txt.replace(/\s*-\s*$/, "").replace(/\s*-\s*\//, "/");
            txt = txt.replace(/\.\s*$/, "");
            txt = txt.replace(/\.(?! )/, "");
            slashPos = txt.indexOf("/");
            dashPos = txt.indexOf("-");
          }
        }
        txt = txt.replace(/([A-Za-z])\./g, "$1");
        var number = "";
        var note = "";
        var thedate = {};
        var rangeDelim;
        var dateDelim;
        if (txt.slice(0, 1) === '"' && txt.slice(-1) === '"') {
          thedate.literal = txt.slice(1, -1);
          return thedate;
        }
        if (slashPos > -1 && dashPos > -1) {
          var slashCount = txt.split("/");
          if (slashCount.length > 3) {
            rangeDelim = "-";
            txt = txt.replace(/\_/g, "-");
            dateDelim = "/";
            lst = txt.split(rexSlashDash);
          } else {
            rangeDelim = "/";
            txt = txt.replace(/\_/g, "/");
            dateDelim = "-";
            lst = txt.split(rexDashSlash);
          }
        } else {
          txt = txt.replace(/\//g, "-");
          txt = txt.replace(/\_/g, "-");
          rangeDelim = "-";
          dateDelim = "-";
          lst = txt.split(rexDash);
        }
        var ret = [];
        for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
          var m2 = lst[i2].match(/^\s*([\-\/]|[^\-\/\~\?0-9]+|[\-~?0-9]+)\s*$/);
          if (m2) {
            ret.push(m2[1]);
          }
        }
        var delimPos = ret.indexOf(rangeDelim);
        var delims = [];
        var isRange = false;
        if (delimPos > -1) {
          delims.push([0, delimPos]);
          delims.push([delimPos + 1, ret.length]);
          isRange = true;
        } else {
          delims.push([0, ret.length]);
        }
        var suff = "";
        for (var i2 = 0, ilen2 = delims.length; i2 < ilen2; i2++) {
          var delim = delims[i2];
          var date = ret.slice(delim[0], delim[1]);
          outer:
            for (var j = 0, jlen = date.length; j < jlen; j++) {
              var element = date[j];
              if (element.indexOf(dateDelim) > -1) {
                this._parseNumericDate(thedate, dateDelim, suff, element);
                continue;
              }
              if (element.match(/[0-9]{4}/)) {
                thedate["year" + suff] = element.replace(/^0*/, "");
                continue;
              }
              if (element === "~" || element === "?" || element === "c" || element.match(/^cir/)) {
                thedate.circa = true;
              }
              for (var k = 0, klen = this.monthRexes.length; k < klen; k++) {
                if (element.toLocaleLowerCase().match(this.monthRexes[k])) {
                  thedate["month" + suff] = "" + (parseInt(k, 10) + 1);
                  continue outer;
                }
              }
              if (element.match(/^[0-9]+$/)) {
                number = element;
              }
              if (element.toLocaleLowerCase().match(/^bc/) && number) {
                thedate["year" + suff] = "" + number * -1;
                number = "";
                continue;
              }
              if (element.toLocaleLowerCase().match(/^ad/) && number) {
                thedate["year" + suff] = "" + number;
                number = "";
                continue;
              }
              if (element.toLocaleLowerCase().match(/(?:mic|tri|hil|eas)/) && !thedate["season" + suff]) {
                note = element;
                continue;
              }
            }
          if (number) {
            thedate["day" + suff] = number;
            number = "";
          }
          if (note && !thedate["season" + suff]) {
            thedate["season" + suff] = note.trim();
            note = "";
          }
          suff = "_end";
        }
        if (isRange) {
          for (var j = 0, jlen = CSL2.DATE_PARTS_ALL.length; j < jlen; j++) {
            var item = CSL2.DATE_PARTS_ALL[j];
            if (thedate[item] && !thedate[item + "_end"]) {
              thedate[item + "_end"] = thedate[item];
            } else if (!thedate[item] && thedate[item + "_end"]) {
              thedate[item] = thedate[item + "_end"];
            }
          }
        }
        if (!thedate.year || thedate.year && thedate.day && !thedate.month) {
          thedate = { "literal": orig };
        }
        var parts = ["year", "month", "day", "year_end", "month_end", "day_end"];
        for (var i2 = 0, ilen2 = parts.length; i2 < ilen2; i2++) {
          var part = parts[i2];
          if (typeof thedate[part] === "string" && thedate[part].match(/^[0-9]+$/)) {
            thedate[part] = parseInt(thedate[part], 10);
          }
        }
        if (yearIsNegative && Object.keys(thedate).indexOf("year") > -1) {
          thedate.year = thedate.year * -1;
        }
        return thedate;
      };
      this.parseDateToArray = function(txt) {
        return this.convertDateObjectToArray(this.parseDateToObject(txt));
      };
      this.parseDateToString = function(txt) {
        return this.convertDateObjectToString(this.parseDateToObject(txt));
      };
      this.parse = function(txt) {
        return this.parseDateToObject(txt);
      };
      this.setOrderMonthDay();
      this.resetDateParserMonths();
    };
    CSL2.DateParser = new CSL2.DateParser();
    CSL2.Engine = function(sys, style, lang, forceLang) {
      var attrs, langspec;
      this.processor_version = CSL2.PROCESSOR_VERSION;
      this.csl_version = "1.0";
      this.sys = sys;
      if (typeof Object.assign != "function") {
        Object.defineProperty(Object, "assign", {
          value: function assign(target) {
            "use strict";
            if (target == null) {
              throw new TypeError("Cannot convert undefined or null to object");
            }
            var to = Object(target);
            for (var index6 = 1; index6 < arguments.length; index6++) {
              var nextSource = arguments[index6];
              if (nextSource != null) {
                for (var nextKey in nextSource) {
                  if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                    to[nextKey] = nextSource[nextKey];
                  }
                }
              }
            }
            return to;
          },
          writable: true,
          configurable: true
        });
      }
      if (sys.variableWrapper) {
        CSL2.VARIABLE_WRAPPER_PREPUNCT_REX = new RegExp("^([" + [" "].concat(CSL2.SWAPPING_PUNCTUATION).join("") + "]*)(.*)");
      }
      if (CSL2.retrieveStyleModule) {
        this.sys.retrieveStyleModule = CSL2.retrieveStyleModule;
      }
      if (CSL2.getAbbreviation) {
        this.sys.getAbbreviation = CSL2.getAbbreviation;
      }
      if (this.sys.stringCompare) {
        CSL2.stringCompare = this.sys.stringCompare;
      }
      this.sys.AbbreviationSegments = CSL2.AbbreviationSegments;
      this.transform = new CSL2.Transform(this);
      this.setParseNames = function(val) {
        this.opt["parse-names"] = val;
      };
      this.opt = new CSL2.Engine.Opt();
      this.tmp = new CSL2.Engine.Tmp();
      this.build = new CSL2.Engine.Build();
      this.fun = new CSL2.Engine.Fun(this);
      this.configure = new CSL2.Engine.Configure();
      this.citation_sort = new CSL2.Engine.CitationSort();
      this.bibliography_sort = new CSL2.Engine.BibliographySort();
      this.citation = new CSL2.Engine.Citation(this);
      this.bibliography = new CSL2.Engine.Bibliography();
      this.intext = new CSL2.Engine.InText();
      this.output = new CSL2.Output.Queue(this);
      this.dateput = new CSL2.Output.Queue(this);
      this.cslXml = CSL2.setupXml(style);
      for (var i in CSL2.SYS_OPTIONS) {
        var option = CSL2.SYS_OPTIONS[i];
        if (typeof this.sys[option] === "boolean") {
          this.opt.development_extensions[option] = this.sys[option];
        }
      }
      if (this.opt.development_extensions.uppercase_subtitles || this.opt.development_extensions.implicit_short_title) {
        this.opt.development_extensions.main_title_from_short_title = true;
      }
      if (this.opt.development_extensions.csl_reverse_lookup_support) {
        this.build.cslNodeId = 0;
        this.setCslNodeIds = function(myxml, nodename) {
          var children2 = this.cslXml.children(myxml);
          this.cslXml.setAttribute(myxml, "cslid", this.build.cslNodeId);
          this.opt.nodenames.push(nodename);
          this.build.cslNodeId += 1;
          for (var i2 = 0, ilen = this.cslXml.numberofnodes(children2); i2 < ilen; i2 += 1) {
            nodename = this.cslXml.nodename(children2[i2]);
            if (nodename) {
              this.setCslNodeIds(children2[i2], nodename);
            }
          }
        };
        this.setCslNodeIds(this.cslXml.dataObj, "style");
      }
      this.cslXml.addMissingNameNodes(this.cslXml.dataObj);
      this.cslXml.addInstitutionNodes(this.cslXml.dataObj);
      this.cslXml.insertPublisherAndPlace(this.cslXml.dataObj);
      this.cslXml.flagDateMacros(this.cslXml.dataObj);
      attrs = this.cslXml.attributes(this.cslXml.dataObj);
      if (typeof attrs["@sort-separator"] === "undefined") {
        this.cslXml.setAttribute(this.cslXml.dataObj, "sort-separator", ", ");
      }
      this.opt["initialize-with-hyphen"] = true;
      this.setStyleAttributes();
      this.opt.xclass = this.cslXml.getAttributeValue(this.cslXml.dataObj, "class");
      this.opt["class"] = this.opt.xclass;
      this.opt.styleID = this.cslXml.getStyleId(this.cslXml.dataObj);
      this.opt.styleName = this.cslXml.getStyleId(this.cslXml.dataObj, true);
      if (this.opt.version.slice(0, 4) === "1.1m") {
        this.opt.development_extensions.consolidate_legal_items = true;
        this.opt.development_extensions.consolidate_container_items = true;
        this.opt.development_extensions.main_title_from_short_title = true;
        this.opt.development_extensions.expect_and_symbol_form = true;
        this.opt.development_extensions.require_explicit_legal_case_title_short = true;
        this.opt.development_extensions.force_jurisdiction = true;
        this.opt.development_extensions.force_title_abbrev_fallback = true;
      }
      if (lang) {
        lang = lang.replace("_", "-");
        lang = CSL2.normalizeLocaleStr(lang);
      }
      if (this.opt["default-locale"][0]) {
        this.opt["default-locale"][0] = this.opt["default-locale"][0].replace("_", "-");
        this.opt["default-locale"][0] = CSL2.normalizeLocaleStr(this.opt["default-locale"][0]);
      }
      if (lang && forceLang) {
        this.opt["default-locale"] = [lang];
      }
      if (lang && !forceLang && this.opt["default-locale"][0]) {
        lang = this.opt["default-locale"][0];
      }
      if (this.opt["default-locale"].length === 0) {
        if (!lang) {
          lang = "en-US";
        }
        this.opt["default-locale"].push("en-US");
      }
      if (!lang) {
        lang = this.opt["default-locale"][0];
      }
      langspec = CSL2.localeResolve(lang);
      this.opt.lang = langspec.best;
      this.opt["default-locale"][0] = langspec.best;
      this.locale = {};
      if (!this.opt["default-locale-sort"]) {
        this.opt["default-locale-sort"] = this.opt["default-locale"][0];
      }
      if ("dale|".localeCompare("daleb", this.opt["default-locale-sort"]) > -1) {
        this.opt.sort_sep = "@";
      } else {
        this.opt.sort_sep = "|";
      }
      this.localeConfigure(langspec);
      function makeRegExp(lst) {
        var lst = lst.slice();
        var ret = new RegExp("(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
        return ret;
      }
      this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp(this.locale[this.opt.lang].opts["skip-words"]);
      this.output.adjust = new CSL2.Output.Queue.adjust(this.getOpt("punctuation-in-quote"));
      this.registry = new CSL2.Registry(this);
      this.macros = {};
      this.build.area = "citation";
      var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
      this.buildTokenLists(area_nodes, this[this.build.area].tokens);
      this.build.area = "bibliography";
      var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
      this.buildTokenLists(area_nodes, this[this.build.area].tokens);
      this.build.area = "intext";
      var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
      this.buildTokenLists(area_nodes, this[this.build.area].tokens);
      if (this.opt.parallel.enable) {
        this.parallel = new CSL2.Parallel(this);
      }
      this.juris = {};
      this.configureTokenLists();
      this.disambiguate = new CSL2.Disambiguation(this);
      this.splice_delimiter = false;
      this.fun.dateparser = CSL2.DateParser;
      this.fun.flipflopper = new CSL2.Util.FlipFlopper(this);
      this.setCloseQuotesArray();
      this.fun.ordinalizer.init(this);
      this.fun.long_ordinalizer.init(this);
      this.fun.page_mangler = CSL2.Util.PageRangeMangler.getFunction(this, "page");
      this.fun.year_mangler = CSL2.Util.PageRangeMangler.getFunction(this, "year");
      this.setOutputFormat("html");
    };
    CSL2.Engine.prototype.setCloseQuotesArray = function() {
      var ret;
      ret = [];
      ret.push(this.getTerm("close-quote"));
      ret.push(this.getTerm("close-inner-quote"));
      ret.push('"');
      ret.push("'");
      this.opt.close_quotes_array = ret;
    };
    CSL2.makeBuilder = function(me, target) {
      var var_stack = [];
      var node_stack = [];
      function runStart(node) {
        node_stack.push(node);
        CSL2.XmlToToken.call(node, me, CSL2.START, target, var_stack);
      }
      function runEnd() {
        var node = node_stack.pop();
        CSL2.XmlToToken.call(node, me, CSL2.END, target, var_stack);
      }
      function runSingle(node) {
        CSL2.XmlToToken.call(node, me, CSL2.SINGLETON, target, var_stack);
      }
      function buildStyle(nodes, parent, node_stack2) {
        if (!node_stack2) {
          node_stack2 = [];
        }
        if (!nodes) {
          nodes = [];
        }
        if (typeof nodes.length === "undefined") {
          nodes = [nodes];
        }
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          if (me.cslXml.nodename(node) === null) {
            continue;
          }
          if (parent && me.cslXml.nodename(node) === "date") {
            CSL2.Util.fixDateNode.call(me, parent, i, node);
            node = me.cslXml.children(parent)[i];
          }
          if (me.cslXml.numberofnodes(me.cslXml.children(node))) {
            runStart(node);
            buildStyle(me.cslXml.children(node), node, node_stack2);
            runEnd();
          } else {
            runSingle(node);
          }
        }
      }
      return buildStyle;
    };
    CSL2.Engine.prototype.buildTokenLists = function(area_nodes, target) {
      if (!this.cslXml.getNodeValue(area_nodes)) {
        return;
      }
      var builder = CSL2.makeBuilder(this, target);
      var mynode;
      if (typeof area_nodes.length === "undefined") {
        mynode = area_nodes;
      } else {
        mynode = area_nodes[0];
      }
      builder(mynode);
    };
    CSL2.Engine.prototype.setStyleAttributes = function() {
      var dummy, attributes, attrname;
      var dummy = {};
      dummy.name = this.cslXml.nodename(this.cslXml.dataObj);
      attributes = this.cslXml.attributes(this.cslXml.dataObj);
      for (attrname in attributes) {
        if (attributes.hasOwnProperty(attrname)) {
          CSL2.Attributes[attrname].call(dummy, this, attributes[attrname]);
        }
      }
    };
    CSL2.Engine.prototype.getTerm = function(term, form, plural, gender, mode, forceDefaultLocale) {
      if (term && term.match(/[A-Z]/) && term === term.toUpperCase()) {
        CSL2.debug("Warning: term key is in uppercase form: " + term);
        term = term.toLowerCase();
      }
      var lang;
      if (forceDefaultLocale) {
        lang = this.opt["default-locale"][0];
      } else {
        lang = this.opt.lang;
      }
      var ret = CSL2.Engine.getField(CSL2.LOOSE, this.locale[lang].terms, term, form, plural, gender);
      if (!ret && term === "range-delimiter") {
        ret = "\u2013";
      }
      if (typeof ret === "undefined") {
        if (mode === CSL2.STRICT) {
          CSL2.error('Error in getTerm: term "' + term + '" does not exist.');
        } else if (mode === CSL2.TOLERANT) {
          ret = "";
        }
      }
      if (ret) {
        this.tmp.cite_renders_content = true;
      }
      return ret;
    };
    CSL2.Engine.prototype.getDate = function(form, forceDefaultLocale) {
      var lang;
      if (forceDefaultLocale) {
        lang = this.opt["default-locale"];
      } else {
        lang = this.opt.lang;
      }
      if (this.locale[lang].dates[form]) {
        return this.locale[lang].dates[form];
      } else {
        return false;
      }
    };
    CSL2.Engine.prototype.getOpt = function(arg) {
      if (typeof this.locale[this.opt.lang].opts[arg] !== "undefined") {
        return this.locale[this.opt.lang].opts[arg];
      } else {
        return false;
      }
    };
    CSL2.Engine.prototype.getVariable = function(Item, varname, form, plural) {
      return CSL2.Engine.getField(CSL2.LOOSE, Item, varname, form, plural);
    };
    CSL2.Engine.prototype.getDateNum = function(ItemField, partname) {
      if (typeof ItemField === "undefined") {
        return 0;
      } else {
        return ItemField[partname];
      }
    };
    CSL2.Engine.getField = function(mode, hash3, term, form, plural, gender) {
      var ret, forms, f, pos, len, hashterm;
      ret = "";
      if (typeof hash3[term] === "undefined") {
        if (mode === CSL2.STRICT) {
          CSL2.error('Error in getField: term "' + term + '" does not exist.');
        } else {
          return void 0;
        }
      }
      if (gender && hash3[term][gender]) {
        hashterm = hash3[term][gender];
      } else {
        hashterm = hash3[term];
      }
      forms = [];
      if (form === "symbol") {
        forms = ["symbol", "short"];
      } else if (form === "verb-short") {
        forms = ["verb-short", "verb"];
      } else if (form !== "long") {
        forms = [form];
      }
      forms = forms.concat(["long"]);
      len = forms.length;
      for (pos = 0; pos < len; pos += 1) {
        f = forms[pos];
        if (typeof hashterm === "string" || typeof hashterm === "number") {
          ret = hashterm;
        } else if (typeof hashterm[f] !== "undefined") {
          if (typeof hashterm[f] === "string" || typeof hashterm[f] === "number") {
            ret = hashterm[f];
          } else {
            if (typeof plural === "number") {
              ret = hashterm[f][plural];
            } else {
              ret = hashterm[f][0];
            }
          }
          break;
        }
      }
      return ret;
    };
    CSL2.Engine.prototype.configureTokenLists = function() {
      var area, pos, len;
      len = CSL2.AREAS.length;
      for (pos = 0; pos < len; pos += 1) {
        area = CSL2.AREAS[pos];
        var tokens = this[area].tokens;
        this.configureTokenList(tokens);
      }
      this.version = CSL2.version;
      return this.state;
    };
    CSL2.Engine.prototype.configureTokenList = function(tokens) {
      var dateparts_master, token, dateparts, part, ppos, pppos, llen, lllen;
      dateparts_master = ["year", "month", "day"];
      llen = tokens.length - 1;
      for (ppos = llen; ppos > -1; ppos += -1) {
        token = tokens[ppos];
        if (token.name === "date" && CSL2.END === token.tokentype) {
          dateparts = [];
        }
        if (token.name === "date-part" && token.strings.name) {
          lllen = dateparts_master.length;
          for (pppos = 0; pppos < lllen; pppos += 1) {
            part = dateparts_master[pppos];
            if (part === token.strings.name) {
              dateparts.push(token.strings.name);
            }
          }
        }
        if (token.name === "date" && CSL2.START === token.tokentype) {
          dateparts.reverse();
          token.dateparts = dateparts;
        }
        token.next = ppos + 1;
        if (token.name && CSL2.Node[token.name].configure) {
          CSL2.Node[token.name].configure.call(token, this, ppos);
        }
      }
    };
    CSL2.Engine.prototype.refetchItems = function(ids) {
      var ret = [];
      for (var i = 0, ilen = ids.length; i < ilen; i += 1) {
        ret.push(this.refetchItem("" + ids[i]));
      }
      return ret;
    };
    CSL2.ITERATION = 0;
    CSL2.Engine.prototype.retrieveItem = function(id2) {
      var Item, m2, i;
      if (!this.tmp.loadedItemIDs[id2]) {
        this.tmp.loadedItemIDs[id2] = true;
      } else {
        return this.registry.refhash[id2];
      }
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase && typeof this.opt.development_extensions.normalize_lang_keys_to_lowercase === "boolean") {
        for (var i = 0, ilen = this.opt["default-locale"].length; i < ilen; i += 1) {
          this.opt["default-locale"][i] = this.opt["default-locale"][i].toLowerCase();
        }
        for (var i = 0, ilen = this.opt["locale-translit"].length; i < ilen; i += 1) {
          this.opt["locale-translit"][i] = this.opt["locale-translit"][i].toLowerCase();
        }
        for (var i = 0, ilen = this.opt["locale-translat"].length; i < ilen; i += 1) {
          this.opt["locale-translat"][i] = this.opt["locale-translat"][i].toLowerCase();
        }
        this.opt.development_extensions.normalize_lang_keys_to_lowercase = 100;
      }
      CSL2.ITERATION += 1;
      Item = JSON.parse(JSON.stringify(this.sys.retrieveItem("" + id2)));
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
        if (Item.multi) {
          if (Item.multi._keys) {
            for (var field in Item.multi._keys) {
              for (var key in Item.multi._keys[field]) {
                if (key !== key.toLowerCase()) {
                  Item.multi._keys[field][key.toLowerCase()] = Item.multi._keys[field][key];
                  delete Item.multi._keys[field][key];
                }
              }
            }
          }
          if (Item.multi.main) {
            for (var field in Item.multi.main) {
              Item.multi.main[field] = Item.multi.main[field].toLowerCase();
            }
          }
        }
        for (var i = 0, ilen = CSL2.NAME_VARIABLES.length; i > ilen; i += 1) {
          var ctype = CSL2.NAME_VARIABLES[i];
          if (Item[ctype] && Item[ctype].multi) {
            for (var j = 0, jlen = Item[ctype].length; j < jlen; j += 1) {
              var creator = Item[ctype][j];
              if (creator.multi) {
                if (creator.multi._key) {
                  for (var key in creator.multi._key) {
                    if (key !== key.toLowerCase()) {
                      creator.multi._key[key.toLowerCase()] = creator.multi._key[key];
                      delete creator.multi._key[key];
                    }
                  }
                }
                if (creator.multi.main) {
                  creator.multi.main = creator.multi.main.toLowerCase();
                }
              }
            }
          }
        }
      }
      if (Item.language && Item.language.match(/[><]/)) {
        var m2 = Item.language.match(/(.*?)([<>])(.*)/);
        if (m2[2] === "<") {
          Item["language-name"] = m2[1];
          Item["language-name-original"] = m2[3];
        } else {
          Item["language-name"] = m2[3];
          Item["language-name-original"] = m2[1];
        }
        if (this.opt.multi_layout) {
          if (Item["language-name-original"]) {
            Item.language = Item["language-name-original"];
          }
        } else {
          if (Item["language-name"]) {
            Item.language = Item["language-name"];
          }
        }
      }
      if (Item.page) {
        Item["page-first"] = Item.page;
        var num = "" + Item.page;
        var m2 = num.split(/\s*(?:&|, |-|\u2013)\s*/);
        if (m2[0].slice(-1) !== "\\") {
          Item["page-first"] = m2[0];
        }
      }
      if (this.opt.development_extensions.field_hack && Item.note) {
        CSL2.parseNoteFieldHacks(Item, false, this.opt.development_extensions.allow_field_hack_date_override);
      }
      for (var key in Item) {
        if (CSL2.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
          var dateobj = Item[key];
          if (dateobj) {
            if (this.opt.development_extensions.raw_date_parsing) {
              if (dateobj.raw && (!dateobj["date-parts"] || dateobj["date-parts"].length === 0)) {
                dateobj = this.fun.dateparser.parseDateToObject(dateobj.raw);
              }
            }
            Item[key] = this.dateParseArray(dateobj);
          }
        }
      }
      if (this.opt.development_extensions.consolidate_legal_items) {
        if (Item.type && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
          var varname;
          var elements = ["type", "title", "jurisdiction", "genre", "volume", "container-title"];
          var legislation_id = [];
          for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
            varname = elements[i];
            if (Item[varname]) {
              legislation_id.push(Item[varname]);
            }
          }
          elements = ["original-date", "issued"];
          for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
            varname = elements[i];
            if (Item[varname] && Item[varname].year) {
              var value = Item[varname].year;
              legislation_id.push(value);
              break;
            }
          }
          Item.legislation_id = legislation_id.join("::");
        }
      }
      if (this.bibliography.opt.track_container_items) {
        if (this.bibliography.opt.track_container_items.indexOf(Item.type) > -1) {
          var varname;
          var elements = ["type", "container-title", "publisher", "edition"];
          var container_id = [];
          for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
            varname = elements[i];
            if (Item[varname]) {
              container_id.push(Item[varname]);
            }
          }
          Item.container_id = container_id.join("::");
        }
      }
      if (this.opt.development_extensions.force_jurisdiction) {
        if (typeof Item.authority === "string") {
          Item.authority = [
            {
              literal: Item.authority,
              multi: {
                _key: {}
              }
            }
          ];
          if (Item.multi && Item.multi._keys && Item.multi._keys.authority) {
            Item.authority[0].multi._key = {};
            for (var key in Item.multi._keys.authority) {
              Item.authority[0].multi._key[key] = {
                literal: Item.multi._keys.authority[key]
              };
            }
          }
        }
      }
      if (!Item["title-short"]) {
        Item["title-short"] = Item.shortTitle;
      }
      if (this.opt.development_extensions.main_title_from_short_title) {
        var narrowSpaceLocale = this.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr";
        CSL2.extractTitleAndSubtitle.call(this, Item, narrowSpaceLocale);
      }
      var isLegalType = ["bill", "legal_case", "legislation", "gazette", "regulation"].indexOf(Item.type) > -1;
      if (this.opt.development_extensions.force_jurisdiction && isLegalType) {
        if (!Item.jurisdiction) {
          Item.jurisdiction = "us";
        }
      }
      var normalizedKey;
      if (!isLegalType && Item.title && this.sys.getAbbreviation) {
        var noHints = false;
        if (!Item.jurisdiction) {
          noHints = true;
        }
        if (this.sys.normalizeAbbrevsKey) {
          normalizedKey = this.sys.normalizeAbbrevsKey("title", Item.title);
        } else {
          normalizedKey = Item.title;
        }
        var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, "title", normalizedKey, Item.language);
        if (this.transform.abbrevs[jurisdiction].title) {
          if (this.transform.abbrevs[jurisdiction].title[normalizedKey]) {
            Item["title-short"] = this.transform.abbrevs[jurisdiction].title[normalizedKey];
          }
        }
      }
      if (!Item["container-title-short"]) {
        Item["container-title-short"] = Item.journalAbbreviation;
      }
      if (Item["container-title"] && this.sys.getAbbreviation) {
        if (this.sys.normalizeAbbrevsKey) {
          normalizedKey = this.sys.normalizeAbbrevsKey(Item["container-title"]);
        } else {
          normalizedKey = Item["container-title"];
        }
        var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, "container-title", normalizedKey, Item.language);
        if (this.transform.abbrevs[jurisdiction]["container-title"]) {
          if (this.transform.abbrevs[jurisdiction]["container-title"][normalizedKey]) {
            Item["container-title-short"] = this.transform.abbrevs[jurisdiction]["container-title"][normalizedKey];
          }
        }
      }
      if (Item.jurisdiction) {
        Item.country = Item.jurisdiction.split(":")[0];
      }
      if (this.registry.refhash[id2]) {
        if (JSON.stringify(this.registry.refhash[id2]) != JSON.stringify(Item)) {
          for (var key in this.registry.refhash[id2]) {
            delete this.registry.refhash[id2][key];
          }
          this.tmp.taintedItemIDs[Item.id] = true;
          Object.assign(this.registry.refhash[id2], Item);
        }
      } else {
        this.registry.refhash[id2] = Item;
      }
      return this.registry.refhash[id2];
    };
    CSL2.Engine.prototype.refetchItem = function(id2) {
      return this.registry.refhash[id2];
    };
    CSL2.Engine.prototype.setOpt = function(token, name, value) {
      if (token.name === "style" || token.name === "cslstyle") {
        this.opt.inheritedAttributes[name] = value;
        this.citation.opt.inheritedAttributes[name] = value;
        this.bibliography.opt.inheritedAttributes[name] = value;
      } else if (["citation", "bibliography"].indexOf(token.name) > -1) {
        this[token.name].opt.inheritedAttributes[name] = value;
      } else {
        token.strings[name] = value;
      }
    };
    CSL2.Engine.prototype.inheritOpt = function(token, attrname, parentname, defaultValue) {
      if (typeof token.strings[attrname] !== "undefined") {
        return token.strings[attrname];
      } else {
        var parentValue = this[this.tmp.root].opt.inheritedAttributes[parentname ? parentname : attrname];
        if (typeof parentValue !== "undefined") {
          return parentValue;
        } else {
          return defaultValue;
        }
      }
    };
    CSL2.Engine.prototype.remapSectionVariable = function(inputList) {
      for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
        var Item = inputList[i][0];
        var item = inputList[i][1];
        if (["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
          if (item.locator) {
            item.locator = item.locator.trim();
            var m2 = item.locator.match(CSL2.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
            if (!m2) {
              if (item.label) {
                item.locator = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[item.label] + " " + item.locator;
              } else {
                item.locator = "p. " + item.locator;
              }
            }
          }
          var sectionMasterLabel = null;
          if (Item.section) {
            Item.section = Item.section.trim();
            var m2 = Item.section.match(CSL2.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
            if (!m2) {
              Item.section = "sec. " + Item.section;
              sectionMasterLabel = "sec.";
            } else {
              sectionMasterLabel = m2[0].trim();
            }
          }
          if (Item.section) {
            if (!item.locator) {
              item.locator = Item.section;
            } else {
              var m2 = item.locator.match(/^([^ ]*)\s*(.*)/);
              var space = " ";
              if (m2) {
                if (m2[1] === "p." && sectionMasterLabel !== "p.") {
                  item.locator = m2[2];
                }
                if (["[", "(", ".", ",", ";", ":", "?"].indexOf(item.locator.slice(0, 1)) > -1) {
                  space = "";
                }
              } else {
                space = "";
              }
              item.locator = Item.section + space + item.locator;
            }
          }
          item.label = "";
        }
      }
    };
    CSL2.Engine.prototype.setNumberLabels = function(Item) {
      if (Item.number && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1 && this.opt.development_extensions.consolidate_legal_items && !this.tmp.shadow_numbers["number"]) {
        this.tmp.shadow_numbers["number"] = {};
        this.tmp.shadow_numbers["number"].values = [];
        this.tmp.shadow_numbers["number"].plural = 0;
        this.tmp.shadow_numbers["number"].numeric = false;
        this.tmp.shadow_numbers["number"].label = false;
        var value = "" + Item.number;
        value = value.split("\\").join("");
        var firstword = value.split(/\s+/)[0];
        var firstlabel = CSL2.STATUTE_SUBDIV_STRINGS[firstword];
        if (firstlabel) {
          var splt = value.split(CSL2.STATUTE_SUBDIV_PLAIN_REGEX);
          if (splt.length > 1) {
            var lst = [];
            for (var j = 1, jlen = splt.length; j < jlen; j += 1) {
              lst.push(splt[j].replace(/\s*$/, "").replace(/^\s*/, ""));
            }
            value = lst.join(" ");
          } else {
            value = splt[0];
          }
          this.tmp.shadow_numbers["number"].label = firstlabel;
          this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
          this.tmp.shadow_numbers["number"].numeric = false;
        } else {
          this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
          this.tmp.shadow_numbers["number"].numeric = true;
        }
      }
    };
    CSL2.substituteOne = function(template) {
      return function(state, list) {
        if (!list) {
          return "";
        } else {
          return template.replace("%%STRING%%", list);
        }
      };
    };
    CSL2.substituteTwo = function(template) {
      return function(param) {
        var template2 = template.replace("%%PARAM%%", param);
        return function(state, list) {
          if (!list) {
            return "";
          } else {
            return template2.replace("%%STRING%%", list);
          }
        };
      };
    };
    CSL2.Mode = function(mode) {
      var decorations, params, param, func, val, args;
      decorations = {};
      params = CSL2.Output.Formats[mode];
      for (param in params) {
        if (true) {
          if (param.slice(0, 1) !== "@") {
            decorations[param] = params[param];
            continue;
          }
          func = false;
          val = params[param];
          args = param.split("/");
          if (typeof val === "string" && val.indexOf("%%STRING%%") > -1) {
            if (val.indexOf("%%PARAM%%") > -1) {
              func = CSL2.substituteTwo(val);
            } else {
              func = CSL2.substituteOne(val);
            }
          } else if (typeof val === "boolean" && !val) {
            func = CSL2.Output.Formatters.passthrough;
          } else if (typeof val === "function") {
            func = val;
          } else {
            CSL2.error("Bad " + mode + " config entry for " + param + ": " + val);
          }
          if (args.length === 1) {
            decorations[args[0]] = func;
          } else if (args.length === 2) {
            if (!decorations[args[0]]) {
              decorations[args[0]] = {};
            }
            decorations[args[0]][args[1]] = func;
          }
        }
      }
      return decorations;
    };
    CSL2.setDecorations = function(state, attributes) {
      var ret, key, pos;
      ret = [];
      for (pos in CSL2.FORMAT_KEY_SEQUENCE) {
        if (true) {
          var key = CSL2.FORMAT_KEY_SEQUENCE[pos];
          if (attributes[key]) {
            ret.push([key, attributes[key]]);
            delete attributes[key];
          }
        }
      }
      return ret;
    };
    CSL2.Doppeler = function(rexStr, stringMangler) {
      var matchRex = new RegExp("(" + rexStr + ")", "g");
      var splitRex = new RegExp(rexStr, "g");
      this.split = function(str) {
        if (stringMangler) {
          str = stringMangler(str);
        }
        var match = str.match(matchRex);
        if (!match) {
          return {
            tags: [],
            strings: [str]
          };
        }
        var split = str.split(splitRex);
        for (var i = match.length - 1; i > -1; i--) {
          if (typeof match[i] === "number") {
            match[i] = "";
          }
          var tag = match[i];
          if (tag === "'" && split[i + 1].length > 0) {
            split[i + 1] = match[i] + split[i + 1];
            match[i] = "";
          }
        }
        return {
          tags: match,
          strings: split,
          origStrings: split.slice()
        };
      };
      this.join = function(obj) {
        var lst = obj.strings.slice(-1);
        for (var i = obj.tags.length - 1; i > -1; i--) {
          lst.push(obj.tags[i]);
          lst.push(obj.strings[i]);
        }
        lst.reverse();
        return lst.join("");
      };
    };
    CSL2.Engine.prototype.normalDecorIsOrphan = function(blob, params) {
      if (params[1] === "normal") {
        var use_param = false;
        var all_the_decor;
        if (this.tmp.area === "citation") {
          all_the_decor = [this.citation.opt.layout_decorations].concat(blob.alldecor);
        } else {
          all_the_decor = blob.alldecor;
        }
        for (var k = all_the_decor.length - 1; k > -1; k += -1) {
          for (var n = all_the_decor[k].length - 1; n > -1; n += -1) {
            if (all_the_decor[k][n][0] === params[0]) {
              if (all_the_decor[k][n][1] !== "normal") {
                use_param = true;
              }
            }
          }
        }
        if (!use_param) {
          return true;
        }
      }
      return false;
    };
    CSL2.Engine.prototype.getCitationLabel = function(Item) {
      var label = "";
      var params = this.getTrigraphParams();
      var config = params[0];
      var myname = this.getTerm("reference", "short", 0);
      if (typeof myname === "undefined") {
        myname = "reference";
      }
      myname = myname.replace(".", "");
      myname = myname.slice(0, 1).toUpperCase() + myname.slice(1);
      for (var i = 0, ilen = CSL2.NAME_VARIABLES.length; i < ilen; i += 1) {
        var n = CSL2.NAME_VARIABLES[i];
        if (Item[n]) {
          var names2 = Item[n];
          if (names2.length > params.length) {
            config = params[params.length - 1];
          } else {
            config = params[names2.length - 1];
          }
          for (var j = 0, jlen = names2.length; j < jlen; j += 1) {
            if (j === config.authors.length) {
              break;
            }
            var res = this.nameOutput.getName(names2[j], "locale-translit", true);
            var name = res.name;
            if (name && name.family) {
              myname = name.family;
              myname = myname.replace(/^([ \'\u2019a-z]+\s+)/, "");
            } else if (name && name.literal) {
              myname = name.literal;
            }
            var m2 = myname.toLowerCase().match(/^(a\s+|the\s+|an\s+)/);
            if (m2) {
              myname = myname.slice(m2[1].length);
            }
            myname = myname.replace(CSL2.ROMANESQUE_NOT_REGEXP, "");
            if (!myname) {
              break;
            }
            myname = myname.slice(0, config.authors[j]);
            if (myname.length > 1) {
              myname = myname.slice(0, 1).toUpperCase() + myname.slice(1).toLowerCase();
            } else if (myname.length === 1) {
              myname = myname.toUpperCase();
            }
            label += myname;
          }
          break;
        }
      }
      if (!label) {
        if (Item.title) {
          var skipWords = this.locale[this.opt.lang].opts["skip-words"];
          var lst = Item.title.split(/\s+/);
          for (var i = lst.length - 1; i > -1; i--) {
            if (skipWords.indexOf(lst[i]) > -1) {
              lst = lst.slice(0, i).concat(lst.slice(i + 1));
            }
          }
          var str = lst.join("");
          str = str.slice(0, params[0].authors[0]);
          if (str.length > 1) {
            str = str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();
          } else if (str.length === 1) {
            str = str.toUpperCase();
          }
          label = str;
        }
      }
      var year = "0000";
      if (Item.issued) {
        if (Item.issued.year) {
          year = "" + Item.issued.year;
        }
      }
      year = year.slice(config.year * -1);
      label = label + year;
      return label;
    };
    CSL2.Engine.prototype.getTrigraphParams = function() {
      var params = [];
      var ilst = this.opt.trigraph.split(":");
      if (!this.opt.trigraph || this.opt.trigraph.slice(0, 1) !== "A") {
        CSL2.error("Bad trigraph definition: " + this.opt.trigraph);
      }
      for (var i = 0, ilen = ilst.length; i < ilen; i += 1) {
        var str = ilst[i];
        var config = { authors: [], year: 0 };
        for (var j = 0, jlen = str.length; j < jlen; j += 1) {
          switch (str.slice(j, j + 1)) {
            case "A":
              config.authors.push(1);
              break;
            case "a":
              config.authors[config.authors.length - 1] += 1;
              break;
            case "0":
              config.year += 1;
              break;
            default:
              CSL2.error("Invalid character in trigraph definition: " + this.opt.trigraph);
          }
        }
        params.push(config);
      }
      return params;
    };
    CSL2.Engine.prototype.setOutputFormat = function(mode) {
      this.opt.mode = mode;
      this.fun.decorate = CSL2.Mode(mode);
      if (!this.output[mode]) {
        this.output[mode] = {};
        this.output[mode].tmp = {};
      }
    };
    CSL2.Engine.prototype.getSortFunc = function() {
      return function(a2, b) {
        a2 = a2.split("-");
        b = b.split("-");
        if (a2.length < b.length) {
          return 1;
        } else if (a2.length > b.length) {
          return -1;
        } else {
          a2 = a2.slice(-1)[0];
          b = b.slice(-1)[0];
          if (a2.length < b.length) {
            return 1;
          } else if (a2.length > b.length) {
            return -1;
          } else {
            return 0;
          }
        }
      };
    };
    CSL2.Engine.prototype.setLangTagsForCslSort = function(tags) {
      var i, ilen;
      if (tags) {
        this.opt["locale-sort"] = [];
        for (i = 0, ilen = tags.length; i < ilen; i += 1) {
          this.opt["locale-sort"].push(tags[i]);
        }
      }
      this.opt["locale-sort"].sort(this.getSortFunc());
    };
    CSL2.Engine.prototype.setLangTagsForCslTransliteration = function(tags) {
      var i, ilen;
      this.opt["locale-translit"] = [];
      if (tags) {
        for (i = 0, ilen = tags.length; i < ilen; i += 1) {
          this.opt["locale-translit"].push(tags[i]);
        }
      }
      this.opt["locale-translit"].sort(this.getSortFunc());
    };
    CSL2.Engine.prototype.setLangTagsForCslTranslation = function(tags) {
      var i, ilen;
      this.opt["locale-translat"] = [];
      if (tags) {
        for (i = 0, ilen = tags.length; i < ilen; i += 1) {
          this.opt["locale-translat"].push(tags[i]);
        }
      }
      this.opt["locale-translat"].sort(this.getSortFunc());
    };
    CSL2.Engine.prototype.setLangPrefsForCites = function(obj, conv) {
      var opt = this.opt["cite-lang-prefs"];
      if (!conv) {
        conv = function(key) {
          return key.toLowerCase();
        };
      }
      var segments = ["Persons", "Institutions", "Titles", "Journals", "Publishers", "Places"];
      for (var i = 0, ilen = segments.length; i < ilen; i += 1) {
        var clientSegment = conv(segments[i]);
        var citeprocSegment = segments[i].toLowerCase();
        if (!obj[clientSegment]) {
          continue;
        }
        var supplements = [];
        while (obj[clientSegment].length > 1) {
          supplements.push(obj[clientSegment].pop());
        }
        var sortval = { orig: 1, translit: 2, translat: 3 };
        if (supplements.length === 2 && sortval[supplements[0]] < sortval[supplements[1]]) {
          supplements.reverse();
        }
        while (supplements.length) {
          obj[clientSegment].push(supplements.pop());
        }
        var lst = opt[citeprocSegment];
        while (lst.length) {
          lst.pop();
        }
        for (var j = 0, jlen = obj[clientSegment].length; j < jlen; j += 1) {
          lst.push(obj[clientSegment][j]);
        }
      }
    };
    CSL2.Engine.prototype.setLangPrefsForCiteAffixes = function(affixList) {
      if (affixList && affixList.length === 48) {
        var affixes = this.opt.citeAffixes;
        var count = 0;
        var settings = ["persons", "institutions", "titles", "journals", "publishers", "places"];
        var forms = ["translit", "orig", "translit", "translat"];
        var value;
        for (var i = 0, ilen = settings.length; i < ilen; i += 1) {
          for (var j = 0, jlen = forms.length; j < jlen; j += 1) {
            value = "";
            if (count % 8 === 4) {
              if (!affixes[settings[i]]["locale-" + forms[j]].prefix && !affixes[settings[i]]["locale-" + forms[j]].suffix) {
                value = affixList[count] ? affixList[count] : "";
                affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                value = affixList[count] ? affixList[count + 1] : "";
                affixes[settings[i]]["locale-" + forms[j]].suffix = value;
              }
            } else {
              value = affixList[count] ? affixList[count] : "";
              affixes[settings[i]]["locale-" + forms[j]].prefix = value;
              value = affixList[count] ? affixList[count + 1] : "";
              affixes[settings[i]]["locale-" + forms[j]].suffix = value;
            }
            count += 2;
          }
        }
        this.opt.citeAffixes = affixes;
      }
    };
    CSL2.Engine.prototype.setAutoVietnameseNamesOption = function(arg) {
      if (arg) {
        this.opt["auto-vietnamese-names"] = true;
      } else {
        this.opt["auto-vietnamese-names"] = false;
      }
    };
    CSL2.Engine.prototype.setAbbreviations = function(arg) {
      if (this.sys.setAbbreviations) {
        this.sys.setAbbreviations(arg);
      }
    };
    CSL2.Engine.prototype.setSuppressTrailingPunctuation = function(arg) {
      this.citation.opt.suppressTrailingPunctuation = !!arg;
    };
    CSL2.Output = {};
    CSL2.Output.Queue = function(state) {
      this.levelname = ["top"];
      this.state = state;
      this.queue = [];
      this.empty = new CSL2.Token("empty");
      var tokenstore = {};
      tokenstore.empty = this.empty;
      this.formats = new CSL2.Stack(tokenstore);
      this.current = new CSL2.Stack(this.queue);
    };
    CSL2.Output.Queue.prototype.pop = function() {
      var drip = this.current.value();
      if (drip.length) {
        return drip.pop();
      } else {
        return drip.blobs.pop();
      }
    };
    CSL2.Output.Queue.prototype.getToken = function(name) {
      var ret = this.formats.value()[name];
      return ret;
    };
    CSL2.Output.Queue.prototype.mergeTokenStrings = function(base, modifier) {
      var base_token, modifier_token, ret, key;
      base_token = this.formats.value()[base];
      modifier_token = this.formats.value()[modifier];
      ret = base_token;
      if (modifier_token) {
        if (!base_token) {
          base_token = new CSL2.Token(base, CSL2.SINGLETON);
          base_token.decorations = [];
        }
        ret = new CSL2.Token(base, CSL2.SINGLETON);
        var key = "";
        for (var key in base_token.strings) {
          if (base_token.strings.hasOwnProperty(key)) {
            ret.strings[key] = base_token.strings[key];
          }
        }
        for (var key in modifier_token.strings) {
          if (modifier_token.strings.hasOwnProperty(key)) {
            ret.strings[key] = modifier_token.strings[key];
          }
        }
        ret.decorations = base_token.decorations.concat(modifier_token.decorations);
      }
      return ret;
    };
    CSL2.Output.Queue.prototype.addToken = function(name, modifier, token) {
      var newtok, attr;
      newtok = new CSL2.Token("output");
      if (typeof token === "string") {
        token = this.formats.value()[token];
      }
      if (token && token.strings) {
        for (attr in token.strings) {
          if (token.strings.hasOwnProperty(attr)) {
            newtok.strings[attr] = token.strings[attr];
          }
        }
        newtok.decorations = token.decorations;
      }
      if (typeof modifier === "string") {
        newtok.strings.delimiter = modifier;
      }
      this.formats.value()[name] = newtok;
    };
    CSL2.Output.Queue.prototype.pushFormats = function(tokenstore) {
      if (!tokenstore) {
        tokenstore = {};
      }
      tokenstore.empty = this.empty;
      this.formats.push(tokenstore);
    };
    CSL2.Output.Queue.prototype.popFormats = function() {
      this.formats.pop();
    };
    CSL2.Output.Queue.prototype.startTag = function(name, token) {
      var tokenstore = {};
      if (this.state.tmp["doing-macro-with-date"] && this.state.tmp.extension) {
        token = this.empty;
        name = "empty";
      }
      tokenstore[name] = token;
      this.pushFormats(tokenstore);
      this.openLevel(name);
    };
    CSL2.Output.Queue.prototype.endTag = function(name) {
      this.closeLevel(name);
      this.popFormats();
    };
    CSL2.Output.Queue.prototype.openLevel = function(token) {
      var blob, curr;
      if (typeof token === "object") {
        blob = new CSL2.Blob(void 0, token);
      } else if (typeof token === "undefined") {
        blob = new CSL2.Blob(void 0, this.formats.value().empty, "empty");
      } else {
        if (!this.formats.value() || !this.formats.value()[token]) {
          CSL2.error('CSL processor error: call to nonexistent format token "' + token + '"');
        }
        blob = new CSL2.Blob(void 0, this.formats.value()[token], token);
      }
      curr = this.current.value();
      if (!this.state.tmp.just_looking && this.checkNestedBrace) {
        blob.strings.prefix = this.checkNestedBrace.update(blob.strings.prefix);
      }
      curr.push(blob);
      this.current.push(blob);
    };
    CSL2.Output.Queue.prototype.closeLevel = function(name) {
      if (name && name !== this.current.value().levelname) {
        CSL2.error("Level mismatch error:  wanted " + name + " but found " + this.current.value().levelname);
      }
      var blob = this.current.pop();
      if (!this.state.tmp.just_looking && this.checkNestedBrace) {
        blob.strings.suffix = this.checkNestedBrace.update(blob.strings.suffix);
      }
    };
    CSL2.Output.Queue.prototype.append = function(str, tokname, notSerious, ignorePredecessor, noStripPeriods) {
      var token, blob, curr;
      var useblob = true;
      if (notSerious) {
        ignorePredecessor = true;
      }
      if (this.state.tmp["doing-macro-with-date"] && !notSerious) {
        if (tokname !== "macro-with-date") {
          return false;
        }
        if (tokname === "macro-with-date") {
          tokname = "empty";
        }
      }
      if (typeof str === "undefined") {
        return false;
      }
      if (typeof str === "number") {
        str = "" + str;
      }
      if (!notSerious && this.state.tmp.element_trace && this.state.tmp.element_trace.value() === "suppress-me") {
        return false;
      }
      blob = false;
      if (!tokname) {
        token = this.formats.value().empty;
      } else if (tokname === "literal") {
        token = true;
        useblob = false;
      } else if (typeof tokname === "string") {
        token = this.formats.value()[tokname];
      } else {
        token = tokname;
      }
      if (!token) {
        CSL2.error("CSL processor error: unknown format token name: " + tokname);
      }
      if (token.strings && typeof token.strings.delimiter === "undefined") {
        token.strings.delimiter = "";
      }
      if (typeof str === "string" && str.length) {
        str = str.replace(/ ([:;?!\u00bb])/g, "\u202F$1").replace(/\u00ab /g, "\xAB\u202F");
        this.last_char_rendered = str.slice(-1);
        str = str.replace(/\s+'/g, " '");
        if (!notSerious) {
          str = str.replace(/^'/g, " '");
        }
        if (!ignorePredecessor) {
          this.state.tmp.term_predecessor = true;
          this.state.tmp.in_cite_predecessor = true;
        } else if (notSerious) {
          this.state.tmp.term_predecessor_name = true;
        }
      }
      blob = new CSL2.Blob(str, token);
      curr = this.current.value();
      if (typeof curr === "undefined" && this.current.mystack.length === 0) {
        this.current.mystack.push([]);
        curr = this.current.value();
      }
      if (typeof blob.blobs === "string") {
        if (!ignorePredecessor) {
          this.state.tmp.term_predecessor = true;
          this.state.tmp.in_cite_predecessor = true;
        } else if (notSerious) {
          this.state.tmp.term_predecessor_name = true;
        }
      }
      if (typeof str === "string") {
        if (typeof blob.blobs === "string") {
          if (blob.blobs.slice(0, 1) !== " ") {
            var blobPrefix = "";
            var blobBlobs = blob.blobs;
            while (CSL2.TERMINAL_PUNCTUATION.indexOf(blobBlobs.slice(0, 1)) > -1) {
              blobPrefix = blobPrefix + blobBlobs.slice(0, 1);
              blobBlobs = blobBlobs.slice(1);
            }
            if (blobBlobs && blobPrefix) {
              blob.strings.prefix = blob.strings.prefix + blobPrefix;
              blob.blobs = blobBlobs;
            }
          }
        }
        if (blob.strings["text-case"]) {
          blob.blobs = CSL2.Output.Formatters[blob.strings["text-case"]](this.state, str);
        }
        if (this.state.tmp.strip_periods && !noStripPeriods) {
          blob.blobs = blob.blobs.replace(/\.([^a-z]|$)/g, "$1");
        }
        for (var i = blob.decorations.length - 1; i > -1; i += -1) {
          if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
            blob.punctuation_in_quote = this.state.getOpt("punctuation-in-quote");
          }
          if (!blob.blobs.match(CSL2.ROMANESQUE_REGEXP)) {
            if (blob.decorations[i][0] === "@font-style") {
              blob.decorations = blob.decorations.slice(0, i).concat(blob.decorations.slice(i + 1));
            }
          }
        }
        curr.push(blob);
        this.state.fun.flipflopper.processTags(blob);
      } else if (useblob) {
        curr.push(blob);
      } else {
        curr.push(str);
      }
      return true;
    };
    CSL2.Output.Queue.prototype.string = function(state, myblobs, blob) {
      var i, ilen, j, jlen, b;
      var txt_esc = CSL2.getSafeEscape(this.state);
      var blobs = myblobs.slice();
      var ret = [];
      if (blobs.length === 0) {
        return ret;
      }
      var blob_delimiter = "";
      if (blob) {
        blob_delimiter = blob.strings.delimiter;
      } else {
        state.tmp.count_offset_characters = false;
        state.tmp.offset_characters = 0;
      }
      if (blob && blob.new_locale) {
        blob.old_locale = state.opt.lang;
        state.opt.lang = blob.new_locale;
      }
      var blobjr, use_suffix, use_prefix, params;
      for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
        blobjr = blobs[i];
        if (blobjr.strings.first_blob) {
          state.tmp.count_offset_characters = blobjr.strings.first_blob;
        }
        if (typeof blobjr.blobs === "string") {
          if (typeof blobjr.num === "number") {
            ret.push(blobjr);
          } else if (blobjr.blobs) {
            if (blobjr.particle) {
              blobjr.blobs = blobjr.particle + blobjr.blobs;
              blobjr.particle = "";
            }
            b = txt_esc(blobjr.blobs);
            var blen = b.length;
            if (!state.tmp.suppress_decorations) {
              for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                params = blobjr.decorations[j];
                if (params[0] === "@showid") {
                  continue;
                }
                if (state.normalDecorIsOrphan(blobjr, params)) {
                  continue;
                }
                b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
              }
            }
            if (b && b.length) {
              b = txt_esc(blobjr.strings.prefix) + b + txt_esc(blobjr.strings.suffix);
              if (state.opt.development_extensions.csl_reverse_lookup_support && !state.tmp.suppress_decorations) {
                for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                  params = blobjr.decorations[j];
                  if (params[0] === "@showid") {
                    b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                  }
                }
              }
              ret.push(b);
              if (state.tmp.count_offset_characters) {
                state.tmp.offset_characters += blen + blobjr.strings.suffix.length + blobjr.strings.prefix.length;
              }
            }
          }
        } else if (blobjr.blobs.length) {
          var addtoret = state.output.string(state, blobjr.blobs, blobjr);
          if (blob) {
            if (addtoret !== "string" && addtoret.length > 1 && blobjr.strings.delimiter) {
              var numberSeen = false;
              for (var j = 0, jlen = addtoret.length; j < jlen; j++) {
                if (typeof addtoret[j] !== "string") {
                  numberSeen = true;
                } else if (numberSeen) {
                  addtoret[j] = blobjr.strings.delimiter + addtoret[j];
                }
              }
            }
          }
          ret = ret.concat(addtoret);
        }
        if (blobjr.strings.first_blob && state.registry.registry[blobjr.strings.first_blob]) {
          state.registry.registry[blobjr.strings.first_blob].offset = state.tmp.offset_characters;
          state.tmp.count_offset_characters = false;
        }
      }
      for (i = 0, ilen = ret.length - 1; i < ilen; i += 1) {
        if (typeof ret[i].num === "number" && typeof ret[i + 1].num === "number" && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
          ret[i].strings.suffix = ret[i].strings.suffix + (blob_delimiter ? blob_delimiter : "");
          ret[i + 1].successor_prefix = "";
          ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
        }
      }
      var span_split = 0;
      for (var i = 0, ilen = ret.length; i < ilen; i += 1) {
        if (typeof ret[i] === "string") {
          span_split = parseInt(i, 10) + 1;
          if (i < ret.length - 1 && typeof ret[i + 1] === "object") {
            if (blob_delimiter && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
              ret[i] += txt_esc(blob_delimiter);
            }
            ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
          }
        }
      }
      if (blob && (blob.decorations.length || blob.strings.suffix)) {
        span_split = ret.length;
      } else if (blob && blob.strings.prefix) {
        for (var i = 0, ilen = ret.length; i < ilen; i++) {
          if (typeof ret[i].num !== "undefined") {
            span_split = i;
            if (i === 0) {
              ret[i].strings.prefix = blob.strings.prefix + ret[i].strings.prefix;
            }
            break;
          }
        }
      }
      var blobs_start = state.output.renderBlobs(ret.slice(0, span_split), blob_delimiter, false, blob);
      if (blobs_start && blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
        if (!state.tmp.suppress_decorations) {
          for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
            params = blob.decorations[i];
            if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) > -1) {
              continue;
            }
            if (state.normalDecorIsOrphan(blobjr, params)) {
              continue;
            }
            if (!params[0])
              continue;
            if (typeof blobs_start === "string") {
              blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
            }
          }
        }
        b = blobs_start;
        use_suffix = blob.strings.suffix;
        if (b && b.length) {
          use_prefix = blob.strings.prefix;
          b = txt_esc(use_prefix) + b + txt_esc(use_suffix);
          if (state.tmp.count_offset_characters) {
            state.tmp.offset_characters += use_prefix.length + use_suffix.length;
          }
        }
        blobs_start = b;
        if (!state.tmp.suppress_decorations) {
          for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
            params = blob.decorations[i];
            if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) === -1) {
              continue;
            }
            if (typeof blobs_start === "string") {
              blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
            }
          }
        }
      }
      var blobs_end = ret.slice(span_split, ret.length);
      if (!blobs_end.length && blobs_start) {
        ret = [blobs_start];
      } else if (blobs_end.length && !blobs_start) {
        ret = blobs_end;
      } else if (blobs_start && blobs_end.length) {
        ret = [blobs_start].concat(blobs_end);
      }
      if (typeof blob === "undefined") {
        this.queue = [];
        this.current.mystack = [];
        this.current.mystack.push(this.queue);
        if (state.tmp.suppress_decorations) {
          ret = state.output.renderBlobs(ret, void 0, false);
        }
      } else if (typeof blob === "boolean") {
        ret = state.output.renderBlobs(ret, void 0, true);
      }
      if (blob && blob.new_locale) {
        state.opt.lang = blob.old_locale;
      }
      return ret;
    };
    CSL2.Output.Queue.prototype.clearlevel = function() {
      var blob, pos, len;
      blob = this.current.value();
      len = blob.blobs.length;
      for (pos = 0; pos < len; pos += 1) {
        blob.blobs.pop();
      }
    };
    CSL2.Output.Queue.prototype.renderBlobs = function(blobs, delim, in_cite, parent) {
      var state, ret, ret_last_char, use_delim, blob, pos, len, ppos, llen, str, params, txt_esc;
      txt_esc = CSL2.getSafeEscape(this.state);
      if (!delim) {
        delim = "";
      }
      state = this.state;
      ret = "";
      ret_last_char = [];
      use_delim = "";
      len = blobs.length;
      if (this.state.tmp.area === "citation" && !this.state.tmp.just_looking && len === 1 && typeof blobs[0] === "object" && parent) {
        blobs[0].strings.prefix = parent.strings.prefix + blobs[0].strings.prefix;
        blobs[0].strings.suffix = blobs[0].strings.suffix + parent.strings.suffix;
        blobs[0].decorations = blobs[0].decorations.concat(parent.decorations);
        blobs[0].params = parent.params;
        return blobs[0];
      }
      var start3 = true;
      for (pos = 0; pos < len; pos += 1) {
        if (blobs[pos].checkNext) {
          blobs[pos].checkNext(blobs[pos + 1], start3);
          start3 = false;
        } else if (blobs[pos + 1] && blobs[pos + 1].splice_prefix) {
          start3 = false;
        } else {
          start3 = true;
        }
      }
      var doit = true;
      for (pos = blobs.length - 1; pos > 0; pos += -1) {
        if (blobs[pos].checkLast) {
          if (doit && blobs[pos].checkLast(blobs[pos - 1])) {
            doit = false;
          }
        } else {
          doit = true;
        }
      }
      len = blobs.length;
      for (pos = 0; pos < len; pos += 1) {
        blob = blobs[pos];
        if (ret) {
          use_delim = delim;
        }
        if (typeof blob === "string") {
          ret += txt_esc(use_delim);
          ret += blob;
          if (state.tmp.count_offset_characters) {
            state.tmp.offset_characters += use_delim.length;
          }
        } else if (in_cite) {
          if (ret) {
            ret = [ret, blob];
          } else {
            ret = [blob];
          }
        } else if (blob.status !== CSL2.SUPPRESS) {
          if (blob.particle) {
            str = blob.particle + blob.num;
          } else {
            str = blob.formatter.format(blob.num, blob.gender);
          }
          var strlen = str.replace(/<[^>]*>/g, "").length;
          this.append(str, "empty", true);
          var str_blob = this.pop();
          var count_offset_characters = state.tmp.count_offset_characters;
          str = this.string(state, [str_blob], false);
          state.tmp.count_offset_characters = count_offset_characters;
          if (blob.strings["text-case"]) {
            str = CSL2.Output.Formatters[blob.strings["text-case"]](this.state, str);
          }
          if (str && this.state.tmp.strip_periods) {
            str = str.replace(/\.([^a-z]|$)/g, "$1");
          }
          if (!state.tmp.suppress_decorations) {
            llen = blob.decorations.length;
            for (ppos = 0; ppos < llen; ppos += 1) {
              params = blob.decorations[ppos];
              if (state.normalDecorIsOrphan(blob, params)) {
                continue;
              }
              str = state.fun.decorate[params[0]][params[1]].call(blob, state, str, params[2]);
            }
          }
          str = txt_esc(blob.strings.prefix) + str + txt_esc(blob.strings.suffix);
          var addme = "";
          if (blob.status === CSL2.END) {
            addme = txt_esc(blob.range_prefix);
          } else if (blob.status === CSL2.SUCCESSOR) {
            addme = txt_esc(blob.successor_prefix);
          } else if (blob.status === CSL2.START) {
            if (pos > 0 && !blob.suppress_splice_prefix) {
              addme = txt_esc(blob.splice_prefix);
            } else {
              addme = "";
            }
          } else if (blob.status === CSL2.SEEN) {
            addme = txt_esc(blob.splice_prefix);
          }
          ret += addme;
          ret += str;
          if (state.tmp.count_offset_characters) {
            state.tmp.offset_characters += addme.length + blob.strings.prefix.length + strlen + blob.strings.suffix.length;
          }
        }
      }
      return ret;
    };
    CSL2.Output.Queue.purgeEmptyBlobs = function(parent) {
      if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
        return;
      }
      for (var i = parent.blobs.length - 1; i > -1; i--) {
        CSL2.Output.Queue.purgeEmptyBlobs(parent.blobs[i]);
        var child = parent.blobs[i];
        if (!child || !child.blobs || !child.blobs.length) {
          var buf = [];
          while (parent.blobs.length - 1 > i) {
            buf.push(parent.blobs.pop());
          }
          parent.blobs.pop();
          while (buf.length) {
            parent.blobs.push(buf.pop());
          }
        }
      }
    };
    CSL2.Output.Queue.adjust = function(punctInQuote) {
      var NO_SWAP_IN = {
        ";": true,
        ":": true
      };
      var NO_SWAP_OUT = {
        ".": true,
        "!": true,
        "?": true
      };
      var LtoR_MAP = {
        "!": {
          ".": "!",
          "?": "!?",
          ":": "!",
          ",": "!,",
          ";": "!;"
        },
        "?": {
          "!": "?!",
          ".": "?",
          ":": "?",
          ",": "?,",
          ";": "?;"
        },
        ".": {
          "!": ".!",
          "?": ".?",
          ":": ".:",
          ",": ".,",
          ";": ".;"
        },
        ":": {
          "!": "!",
          "?": "?",
          ".": ":",
          ",": ":,",
          ";": ":;"
        },
        ",": {
          "!": ",!",
          "?": ",?",
          ":": ",:",
          ".": ",.",
          ";": ",;"
        },
        ";": {
          "!": "!",
          "?": "?",
          ":": ";",
          ",": ";,",
          ".": ";"
        }
      };
      var SWAP_IN = {};
      var SWAP_OUT = {};
      var PUNCT = {};
      var PUNCT_OR_SPACE = {};
      for (var key in LtoR_MAP) {
        PUNCT[key] = true;
        PUNCT_OR_SPACE[key] = true;
        if (!NO_SWAP_IN[key]) {
          SWAP_IN[key] = true;
        }
        if (!NO_SWAP_OUT[key]) {
          SWAP_OUT[key] = true;
        }
      }
      PUNCT_OR_SPACE[" "] = true;
      PUNCT_OR_SPACE["\xA0"] = true;
      var RtoL_MAP = {};
      for (var key in LtoR_MAP) {
        for (var subkey in LtoR_MAP[key]) {
          if (!RtoL_MAP[subkey]) {
            RtoL_MAP[subkey] = {};
          }
          RtoL_MAP[subkey][key] = LtoR_MAP[key][subkey];
        }
      }
      function blobIsNumber(blob) {
        return typeof blob.num === "number" || blob.blobs && blob.blobs.length === 1 && typeof blob.blobs[0].num === "number";
      }
      function blobEndsInNumber(blob) {
        if (typeof blob.num === "number") {
          return true;
        }
        if (!blob.blobs || typeof blob.blobs !== "object") {
          return false;
        }
        if (blobEndsInNumber(blob.blobs[blob.blobs.length - 1])) {
          return true;
        }
      }
      function blobHasDecorations(blob, includeQuotes) {
        var ret = false;
        var decorlist = ["@font-style", "@font-variant", "@font-weight", "@text-decoration", "@vertical-align"];
        if (includeQuotes) {
          decorlist.push("@quotes");
        }
        if (blob.decorations) {
          for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
            if (decorlist.indexOf(blob.decorations[i][0]) > -1) {
              ret = true;
              break;
            }
          }
        }
        return ret;
      }
      function blobHasDescendantQuotes(blob) {
        if (blob.decorations) {
          for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
            if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
              return true;
            }
          }
        }
        if (typeof blob.blobs !== "object") {
          return false;
        }
        return blobHasDescendantQuotes(blob.blobs[blob.blobs.length - 1]);
      }
      function blobHasDescendantMergingPunctuation(parentChar, blob) {
        var childChar = blob.strings.suffix.slice(-1);
        if (!childChar && typeof blob.blobs === "string") {
          childChar = blob.blobs.slice(-1);
        }
        var mergedChars = RtoL_MAP[parentChar][childChar];
        if (mergedChars && mergedChars.length === 1) {
          return true;
        }
        if (typeof blob.blobs !== "object") {
          return false;
        }
        if (blobHasDescendantMergingPunctuation(parentChar, blob.blobs[blob.blobs.length - 1])) {
          return true;
        }
        return false;
      }
      function matchLastChar(blob, chr) {
        if (!PUNCT[chr]) {
          return false;
        }
        if (typeof blob.blobs === "string") {
          if (blob.blobs.slice(-1) === chr) {
            return true;
          } else {
            return false;
          }
        } else {
          var child = blob.blobs[blob.blobs.length - 1];
          if (child) {
            var childChar = child.strings.suffix.slice(-1);
            if (!childChar) {
              return matchLastChar(child, chr);
            } else if (child.strings.suffix.slice(-1) == chr) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }
      }
      function mergeChars(First, first, Second, second, merge_right) {
        var FirstStrings = first === "blobs" ? First : First.strings;
        var SecondStrings = second === "blobs" ? Second : Second.strings;
        var firstChar = FirstStrings[first].slice(-1);
        var secondChar = SecondStrings[second].slice(0, 1);
        function cullRight() {
          SecondStrings[second] = SecondStrings[second].slice(1);
        }
        function cullLeft() {
          FirstStrings[first] = FirstStrings[first].slice(0, -1);
        }
        function addRight(chr) {
          SecondStrings[second] = chr + SecondStrings[second];
        }
        function addLeft(chr) {
          FirstStrings[first] += chr;
        }
        var cull = merge_right ? cullLeft : cullRight;
        function matchOnRight() {
          return RtoL_MAP[secondChar];
        }
        function matchOnLeft() {
          return LtoR_MAP[firstChar];
        }
        var match = merge_right ? matchOnLeft : matchOnRight;
        function mergeToRight() {
          var chr = LtoR_MAP[firstChar][secondChar];
          if (typeof chr === "string") {
            cullLeft();
            cullRight();
            addRight(chr);
          } else {
            addRight(firstChar);
            cullLeft();
          }
        }
        function mergeToLeft() {
          var chr = RtoL_MAP[secondChar][firstChar];
          if (typeof chr === "string") {
            cullLeft();
            cullRight();
            addLeft(chr);
          } else {
            addLeft(secondChar);
            cullRight();
          }
        }
        var merge = merge_right ? mergeToRight : mergeToLeft;
        var isDuplicate = firstChar === secondChar;
        if (isDuplicate) {
          cull();
        } else {
          if (match()) {
            merge();
          }
        }
      }
      function upward(parent) {
        if (parent.blobs && typeof parent.blobs == "string") {
          if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
            parent.strings.suffix = parent.strings.suffix.slice(1);
          }
          return;
        } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
          return;
        }
        var parentDecorations = blobHasDecorations(parent, true);
        for (var i = parent.blobs.length - 1; i > -1; i--) {
          this.upward(parent.blobs[i]);
          var parentStrings = parent.strings;
          var childStrings = parent.blobs[i].strings;
          if (i === 0) {
            if (parentStrings.prefix.slice(-1) === " " && childStrings.prefix.slice(0, 1) === " ") {
              childStrings.prefix = childStrings.prefix.slice(1);
            }
            var childChar = childStrings.prefix.slice(0, 1);
            if (!parentDecorations && PUNCT_OR_SPACE[childChar] && !parentStrings.prefix) {
              parentStrings.prefix += childChar;
              childStrings.prefix = childStrings.prefix.slice(1);
            }
          }
          if (i === parent.blobs.length - 1) {
            var childChar = childStrings.suffix.slice(-1);
            if (!parentDecorations && [" "].indexOf(childChar) > -1) {
              if (parentStrings.suffix.slice(0, 1) !== childChar) {
                parentStrings.suffix = childChar + parentStrings.suffix;
              }
              childStrings.suffix = childStrings.suffix.slice(0, -1);
            }
          }
          if (parentStrings.delimiter && i > 0) {
            if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(-1)] && parentStrings.delimiter.slice(-1) === childStrings.prefix.slice(0, 1)) {
              childStrings.prefix = childStrings.prefix.slice(1);
            }
          }
        }
      }
      function leftward(parent) {
        if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
          return;
        }
        for (var i = parent.blobs.length - 1; i > -1; i--) {
          this.leftward(parent.blobs[i]);
          if (i < parent.blobs.length - 1 && !parent.strings.delimiter) {
            var child = parent.blobs[i];
            var childChar = child.strings.suffix.slice(-1);
            var sibling = parent.blobs[i + 1];
            var siblingChar = sibling.strings.prefix.slice(0, 1);
            var hasDecorations = blobHasDecorations(child) || blobHasDecorations(sibling);
            var hasNumber = typeof childChar === "number" || typeof siblingChar === "number";
            if (!hasDecorations && !hasNumber && PUNCT[siblingChar] && !hasNumber) {
              var suffixAndPrefixMatch = siblingChar === child.strings.suffix.slice(-1);
              var suffixAndFieldMatch = !child.strings.suffix && typeof child.blobs === "string" && child.blobs.slice(-1) === siblingChar;
              if (!suffixAndPrefixMatch && !suffixAndFieldMatch) {
                mergeChars(child, "suffix", sibling, "prefix");
              } else {
                sibling.strings.prefix = sibling.strings.prefix.slice(1);
              }
            }
          }
        }
      }
      function downward(parent) {
        if (parent.blobs && typeof parent.blobs == "string") {
          if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
            parent.strings.suffix = parent.strings.suffix.slice(1);
          }
          return;
        } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
          return;
        }
        var parentStrings = parent.strings;
        var someChildrenAreNumbers = false;
        for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
          if (blobIsNumber(parent.blobs[i])) {
            someChildrenAreNumbers = true;
            break;
          }
        }
        if (true) {
          if (parentStrings.delimiter && PUNCT[parentStrings.delimiter.slice(0, 1)]) {
            var delimChar = parentStrings.delimiter.slice(0, 1);
            for (var i = parent.blobs.length - 2; i > -1; i--) {
              var childStrings = parent.blobs[i].strings;
              if (childStrings.suffix.slice(-1) !== delimChar) {
                childStrings.suffix += delimChar;
              }
            }
            parentStrings.delimiter = parentStrings.delimiter.slice(1);
          }
        }
        for (var i = parent.blobs.length - 1; i > -1; i--) {
          var child = parent.blobs[i];
          var childStrings = parent.blobs[i].strings;
          var childDecorations = blobHasDecorations(child, true);
          var childIsNumber = blobIsNumber(child);
          if (i === parent.blobs.length - 1) {
            if (true) {
              var parentChar = parentStrings.suffix.slice(0, 1);
              var allowMigration = false;
              if (PUNCT[parentChar]) {
                allowMigration = blobHasDescendantMergingPunctuation(parentChar, child);
                if (!allowMigration && punctInQuote) {
                  allowMigration = blobHasDescendantQuotes(child);
                }
              }
              if (allowMigration) {
                if (PUNCT[parentChar]) {
                  if (!blobEndsInNumber(child)) {
                    if (typeof child.blobs === "string") {
                      mergeChars(child, "blobs", parent, "suffix");
                    } else {
                      mergeChars(child, "suffix", parent, "suffix");
                    }
                    if (parentStrings.suffix.slice(0, 1) === ".") {
                      childStrings.suffix += parentStrings.suffix.slice(0, 1);
                      parentStrings.suffix = parentStrings.suffix.slice(1);
                    }
                  }
                }
              }
              if (childStrings.suffix.slice(-1) === "\xA0" && parentStrings.suffix.slice(0, 1) === " ") {
                parentStrings.suffix = parentStrings.suffix.slice(1);
              }
              if (PUNCT_OR_SPACE[childStrings.suffix.slice(0, 1)]) {
                if (typeof child.blobs === "string" && child.blobs.slice(-1) === childStrings.suffix.slice(0, 1)) {
                  childStrings.suffix = childStrings.suffix.slice(1);
                }
                if (childStrings.suffix.slice(-1) === parentStrings.suffix.slice(0, 1)) {
                  parentStrings.suffix = parentStrings.suffix.slice(0, -1);
                }
              }
            }
            if (matchLastChar(parent, parent.strings.suffix.slice(0, 1))) {
              parent.strings.suffix = parent.strings.suffix.slice(1);
            }
          } else if (parentStrings.delimiter) {
            if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(0, 1)] && parentStrings.delimiter.slice(0, 1) === childStrings.suffix.slice(-1)) {
              parent.blobs[i].strings.suffix = parent.blobs[i].strings.suffix.slice(0, -1);
            }
          } else {
            var siblingStrings = parent.blobs[i + 1].strings;
            if (!blobIsNumber(child) && !childDecorations && PUNCT_OR_SPACE[childStrings.suffix.slice(-1)] && childStrings.suffix.slice(-1) === siblingStrings.prefix.slice(0, 1)) {
              siblingStrings.prefix = siblingStrings.prefix.slice(1);
            }
          }
          if (!childIsNumber && !childDecorations && PUNCT[childStrings.suffix.slice(0, 1)] && typeof child.blobs === "string") {
            mergeChars(child, "blobs", child, "suffix");
          }
          this.downward(parent.blobs[i]);
        }
      }
      function swapToTheLeft(child) {
        var childChar = child.strings.suffix.slice(0, 1);
        if (typeof child.blobs === "string") {
          while (SWAP_IN[childChar]) {
            mergeChars(child, "blobs", child, "suffix");
            childChar = child.strings.suffix.slice(0, 1);
          }
        } else {
          while (SWAP_IN[childChar]) {
            mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix");
            childChar = child.strings.suffix.slice(0, 1);
          }
        }
      }
      function swapToTheRight(child) {
        if (typeof child.blobs === "string") {
          var childChar = child.blobs.slice(-1);
          while (SWAP_OUT[childChar]) {
            mergeChars(child, "blobs", child, "suffix", true);
            childChar = child.blobs.slice(-1);
          }
        } else {
          var childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
          while (SWAP_OUT[childChar]) {
            mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix", true);
            childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
          }
        }
      }
      function fix(parent) {
        if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
          return;
        }
        var lastChar;
        for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
          var child = parent.blobs[i];
          var quoteSwap = false;
          for (var j = 0, jlen = child.decorations.length; j < jlen; j++) {
            var decoration = child.decorations[j];
            if (decoration[0] === "@quotes" && decoration[1] !== "false") {
              quoteSwap = true;
            }
          }
          if (quoteSwap) {
            if (punctInQuote) {
              swapToTheLeft(child);
            } else {
              swapToTheRight(child);
            }
          }
          lastChar = this.fix(parent.blobs[i]);
          if (child.blobs && typeof child.blobs === "string") {
            lastChar = child.blobs.slice(-1);
          }
        }
        return lastChar;
      }
      this.upward = upward;
      this.leftward = leftward;
      this.downward = downward;
      this.fix = fix;
    };
    CSL2.Engine.Opt = function() {
      this.parallel = {
        enable: false
      }, this.has_disambiguate = false;
      this.mode = "html";
      this.dates = {};
      this.jurisdictions_seen = {};
      this.suppressedJurisdictions = {};
      this.inheritedAttributes = {};
      this["locale-sort"] = [];
      this["locale-translit"] = [];
      this["locale-translat"] = [];
      this.citeAffixes = {
        persons: {
          "locale-orig": {
            prefix: "",
            suffix: ""
          },
          "locale-translit": {
            prefix: "",
            suffix: ""
          },
          "locale-translat": {
            prefix: "",
            suffix: ""
          }
        },
        institutions: {
          "locale-orig": {
            prefix: "",
            suffix: ""
          },
          "locale-translit": {
            prefix: "",
            suffix: ""
          },
          "locale-translat": {
            prefix: "",
            suffix: ""
          }
        },
        titles: {
          "locale-orig": {
            prefix: "",
            suffix: ""
          },
          "locale-translit": {
            prefix: "",
            suffix: ""
          },
          "locale-translat": {
            prefix: "",
            suffix: ""
          }
        },
        journals: {
          "locale-orig": {
            prefix: "",
            suffix: ""
          },
          "locale-translit": {
            prefix: "",
            suffix: ""
          },
          "locale-translat": {
            prefix: "",
            suffix: ""
          }
        },
        publishers: {
          "locale-orig": {
            prefix: "",
            suffix: ""
          },
          "locale-translit": {
            prefix: "",
            suffix: ""
          },
          "locale-translat": {
            prefix: "",
            suffix: ""
          }
        },
        places: {
          "locale-orig": {
            prefix: "",
            suffix: ""
          },
          "locale-translit": {
            prefix: "",
            suffix: ""
          },
          "locale-translat": {
            prefix: "",
            suffix: ""
          }
        }
      };
      this["default-locale"] = [];
      this.update_mode = CSL2.NONE;
      this.bib_mode = CSL2.NONE;
      this.sort_citations = false;
      this["et-al-min"] = 0;
      this["et-al-use-first"] = 1;
      this["et-al-use-last"] = false;
      this["et-al-subsequent-min"] = false;
      this["et-al-subsequent-use-first"] = false;
      this["demote-non-dropping-particle"] = "display-and-sort";
      this["parse-names"] = true;
      this.citation_number_slug = false;
      this.trigraph = "Aaaa00:AaAa00:AaAA00:AAAA00";
      this.nodenames = [];
      this.gender = {};
      this["cite-lang-prefs"] = {
        persons: ["orig"],
        institutions: ["orig"],
        titles: ["orig"],
        journals: ["orig"],
        publishers: ["orig"],
        places: ["orig"],
        number: ["orig"]
      };
      this.has_layout_locale = false;
      this.disable_duplicate_year_suppression = [];
      this.use_context_condition = false;
      this.jurisdiction_fallbacks = {};
      this.development_extensions = {};
      this.development_extensions.field_hack = true;
      this.development_extensions.allow_field_hack_date_override = true;
      this.development_extensions.locator_date_and_revision = true;
      this.development_extensions.locator_label_parse = true;
      this.development_extensions.raw_date_parsing = true;
      this.development_extensions.clean_up_csl_flaws = true;
      this.development_extensions.consolidate_legal_items = false;
      this.development_extensions.csl_reverse_lookup_support = false;
      this.development_extensions.wrap_url_and_doi = false;
      this.development_extensions.thin_non_breaking_space_html_hack = false;
      this.development_extensions.apply_citation_wrapper = false;
      this.development_extensions.main_title_from_short_title = false;
      this.development_extensions.uppercase_subtitles = false;
      this.development_extensions.normalize_lang_keys_to_lowercase = false;
      this.development_extensions.strict_text_case_locales = false;
      this.development_extensions.expect_and_symbol_form = false;
      this.development_extensions.require_explicit_legal_case_title_short = false;
      this.development_extensions.spoof_institutional_affiliations = false;
      this.development_extensions.force_jurisdiction = false;
      this.development_extensions.parse_names = true;
      this.development_extensions.hanging_indent_legacy_number = false;
      this.development_extensions.throw_on_empty = false;
      this.development_extensions.strict_inputs = true;
      this.development_extensions.prioritize_disambiguate_condition = false;
      this.development_extensions.force_short_title_casing_alignment = true;
      this.development_extensions.implicit_short_title = false;
      this.development_extensions.force_title_abbrev_fallback = false;
      this.development_extensions.split_container_title = false;
      this.development_extensions.legacy_institution_name_ordering = false;
      this.development_extensions.etal_min_etal_usefirst_hack = false;
    };
    CSL2.Engine.Tmp = function() {
      this.names_max = new CSL2.Stack();
      this.names_base = new CSL2.Stack();
      this.givens_base = new CSL2.Stack();
      this.value = [];
      this.namepart_decorations = {};
      this.namepart_type = false;
      this.area = "citation";
      this.root = "citation";
      this.extension = "";
      this.can_substitute = new CSL2.Stack(0, CSL2.LITERAL);
      this.element_rendered_ok = false;
      this.element_trace = new CSL2.Stack("style");
      this.nameset_counter = 0;
      this.group_context = new CSL2.Stack({
        term_intended: false,
        variable_attempt: false,
        variable_success: false,
        output_tip: void 0,
        label_form: void 0,
        parallel_first: void 0,
        parallel_last: void 0,
        parallel_delimiter_override: void 0,
        condition: false,
        force_suppress: false,
        done_vars: []
      });
      this.term_predecessor = false;
      this.in_cite_predecessor = false;
      this.jump = new CSL2.Stack(0, CSL2.LITERAL);
      this.decorations = new CSL2.Stack();
      this.tokenstore_stack = new CSL2.Stack();
      this.last_suffix_used = "";
      this.last_names_used = [];
      this.last_years_used = [];
      this.years_used = [];
      this.names_used = [];
      this.taintedItemIDs = {};
      this.taintedCitationIDs = {};
      this.initialize_with = new CSL2.Stack();
      this.disambig_request = false;
      this["name-as-sort-order"] = false;
      this.suppress_decorations = false;
      this.disambig_settings = new CSL2.AmbigConfig();
      this.bib_sort_keys = [];
      this.prefix = new CSL2.Stack("", CSL2.LITERAL);
      this.suffix = new CSL2.Stack("", CSL2.LITERAL);
      this.delimiter = new CSL2.Stack("", CSL2.LITERAL);
      this.cite_locales = [];
      this.cite_affixes = {
        citation: false,
        bibliography: false,
        citation_sort: false,
        bibliography_sort: false
      };
      this.strip_periods = 0;
      this.shadow_numbers = {};
      this.authority_stop_last = 0;
      this.loadedItemIDs = {};
      this.condition_counter = 0;
      this.condition_lang_val_arr = [];
      this.condition_lang_counter_arr = [];
    };
    CSL2.Engine.Fun = function(state) {
      this.match = new CSL2.Util.Match();
      this.suffixator = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
      this.romanizer = new CSL2.Util.Romanizer();
      this.ordinalizer = new CSL2.Util.Ordinalizer(state);
      this.long_ordinalizer = new CSL2.Util.LongOrdinalizer();
    };
    CSL2.Engine.Build = function() {
      this["alternate-term"] = false;
      this.in_bibliography = false;
      this.in_style = false;
      this.skip = false;
      this.postponed_macro = false;
      this.layout_flag = false;
      this.name = false;
      this.names_variables = [[]];
      this.name_label = [{}];
      this.form = false;
      this.term = false;
      this.macro = {};
      this.macro_stack = [];
      this.text = false;
      this.lang = false;
      this.area = "citation";
      this.root = "citation";
      this.extension = "";
      this.substitute_level = new CSL2.Stack(0, CSL2.LITERAL);
      this.names_level = 0;
      this.render_nesting_level = 0;
      this.render_seen = false;
      this.bibliography_key_pos = 0;
    };
    CSL2.Engine.Configure = function() {
      this.tests = [];
      this.fail = [];
      this.succeed = [];
    };
    CSL2.Engine.Citation = function(state) {
      this.opt = {
        inheritedAttributes: {}
      };
      this.tokens = [];
      this.srt = new CSL2.Registry.Comparifier(state, "citation_sort");
      this.opt.collapse = [];
      this.opt["disambiguate-add-names"] = false;
      this.opt["disambiguate-add-givenname"] = false;
      this.opt["disambiguate-add-year-suffix"] = false;
      this.opt["givenname-disambiguation-rule"] = "by-cite";
      this.opt["near-note-distance"] = 5;
      this.opt.topdecor = [];
      this.opt.layout_decorations = [];
      this.opt.layout_prefix = "";
      this.opt.layout_suffix = "";
      this.opt.layout_delimiter = "";
      this.opt.sort_locales = [];
      this.opt.max_number_of_names = 0;
      this.root = "citation";
    };
    CSL2.Engine.Bibliography = function() {
      this.opt = {
        inheritedAttributes: {}
      };
      this.tokens = [];
      this.opt.collapse = [];
      this.opt.topdecor = [];
      this.opt.layout_decorations = [];
      this.opt.layout_prefix = "";
      this.opt.layout_suffix = "";
      this.opt.layout_delimiter = "";
      this.opt["line-spacing"] = 1;
      this.opt["entry-spacing"] = 1;
      this.opt.sort_locales = [];
      this.opt.max_number_of_names = 0;
      this.root = "bibliography";
    };
    CSL2.Engine.BibliographySort = function() {
      this.tokens = [];
      this.opt = {};
      this.opt.sort_directions = [];
      this.opt.topdecor = [];
      this.opt.citation_number_sort_direction = CSL2.ASCENDING;
      this.opt.citation_number_secondary = false;
      this.tmp = {};
      this.keys = [];
      this.root = "bibliography";
    };
    CSL2.Engine.CitationSort = function() {
      this.tokens = [];
      this.opt = {};
      this.opt.sort_directions = [];
      this.keys = [];
      this.opt.topdecor = [];
      this.root = "citation";
    };
    CSL2.Engine.InText = function() {
      this.opt = {
        inheritedAttributes: {}
      };
      this.tokens = [];
      this.opt.collapse = [];
      this.opt["disambiguate-add-names"] = false;
      this.opt["disambiguate-add-givenname"] = false;
      this.opt["disambiguate-add-year-suffix"] = false;
      this.opt["givenname-disambiguation-rule"] = "by-cite";
      this.opt["near-note-distance"] = 5;
      this.opt.topdecor = [];
      this.opt.layout_decorations = [];
      this.opt.layout_prefix = "";
      this.opt.layout_suffix = "";
      this.opt.layout_delimiter = "";
      this.opt.sort_locales = [];
      this.opt.max_number_of_names = 0;
      this.root = "intext";
    };
    CSL2.Engine.prototype.previewCitationCluster = function(citation, citationsPre, citationsPost, newMode) {
      var oldMode = this.opt.mode;
      this.setOutputFormat(newMode);
      if (citation.citationID) {
        delete citation.citationID;
      }
      var ret = this.processCitationCluster(citation, citationsPre, citationsPost, CSL2.PREVIEW);
      this.setOutputFormat(oldMode);
      return ret[1];
    };
    CSL2.Engine.prototype.appendCitationCluster = function(citation) {
      var citationsPre = [];
      var len = this.registry.citationreg.citationByIndex.length;
      for (var pos = 0; pos < len; pos += 1) {
        var c2 = this.registry.citationreg.citationByIndex[pos];
        citationsPre.push(["" + c2.citationID, c2.properties.noteIndex]);
      }
      return this.processCitationCluster(citation, citationsPre, [])[1];
    };
    CSL2.Engine.prototype.processCitationCluster = function(citation, citationsPre, citationsPost, flag) {
      var c2, preCitation, postCitation, i, ilen, j, jlen, k, klen, n, nlen, key, Item, item, noteCitations, textCitations, m2, citationsInNote;
      this.debug = false;
      this.tmp.loadedItemIDs = {};
      this.tmp.citation_errors = [];
      this.registry.return_data = { "bibchange": false };
      this.setCitationId(citation);
      var oldCitationList;
      var oldItemList;
      var oldAmbigs;
      if (flag === CSL2.PREVIEW) {
        if (this.debug) {
          CSL2.debug("****** start state save *********");
        }
        oldCitationList = this.registry.citationreg.citationByIndex.slice();
        oldItemList = this.registry.reflist.slice();
        var newCitationList = citationsPre.concat(citationsPost);
        var newItemIds = {};
        var newItemIdsList = [];
        for (var i = 0, ilen = newCitationList.length; i < ilen; i += 1) {
          c2 = this.registry.citationreg.citationById[newCitationList[i][0]];
          for (j = 0, jlen = c2.citationItems.length; j < jlen; j += 1) {
            newItemIds[c2.citationItems[j].id] = true;
            newItemIdsList.push("" + c2.citationItems[j].id);
          }
        }
        for (j = 0, jlen = citation.citationItems.length; j < jlen; j += 1) {
          newItemIds[citation.citationItems[j].id] = true;
          newItemIdsList.push("" + citation.citationItems[j].id);
        }
        oldAmbigs = {};
        for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
          if (!newItemIds[oldItemList[i].id]) {
            var oldAkey = this.registry.registry[oldItemList[i].id].ambig;
            var ids = this.registry.ambigcites[oldAkey];
            if (ids) {
              for (j = 0, jlen = ids.length; j < jlen; j += 1) {
                oldAmbigs[ids[j]] = CSL2.cloneAmbigConfig(this.registry.registry[ids[j]].disambig);
              }
            }
          }
        }
        if (this.debug) {
          CSL2.debug("****** end state save *********");
        }
      }
      this.tmp.taintedCitationIDs = {};
      var sortedItems = [];
      var rerunAkeys = {};
      for (var i = 0, ilen = citation.citationItems.length; i < ilen; i += 1) {
        item = {};
        for (var key in citation.citationItems[i]) {
          item[key] = citation.citationItems[i][key];
        }
        Item = this.retrieveItem("" + item.id);
        if (Item.id) {
          this.transform.loadAbbreviation("default", "hereinafter", Item.id, Item.language);
        }
        item = CSL2.parseLocator.call(this, item);
        if (this.opt.development_extensions.consolidate_legal_items) {
          this.remapSectionVariable([[Item, item]]);
        }
        if (this.opt.development_extensions.locator_label_parse) {
          if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
            var m2 = CSL2.LOCATOR_LABELS_REGEXP.exec(item.locator);
            if (m2) {
              var tryLabel = CSL2.LOCATOR_LABELS_MAP[m2[2]];
              if (this.getTerm(tryLabel)) {
                item.label = tryLabel;
                item.locator = m2[3];
              }
            }
          }
        }
        var newitem = [Item, item];
        sortedItems.push(newitem);
        citation.citationItems[i].item = Item;
      }
      citation.sortedItems = sortedItems;
      var citationByIndex = [];
      var citationById = {};
      var lastNotePos;
      for (i = 0, ilen = citationsPre.length; i < ilen; i += 1) {
        preCitation = citationsPre[i];
        if (this.opt.development_extensions.strict_inputs) {
          if (citationById[preCitation[0]]) {
            CSL2.error("Previously referenced citationID " + preCitation[0] + " encountered in citationsPre");
          }
          if (preCitation[1]) {
            if (lastNotePos > preCitation[1]) {
              CSL2.debug("Note index sequence is not sane at citationsPre[" + i + "]");
            }
            lastNotePos = preCitation[1];
          }
        }
        this.registry.citationreg.citationById[preCitation[0]].properties.noteIndex = preCitation[1];
        citationByIndex.push(this.registry.citationreg.citationById[preCitation[0]]);
        citationById[preCitation[0]] = this.registry.citationreg.citationById[preCitation[0]];
      }
      if (!citation.properties) {
        citation.properties = {
          noteIndex: 0
        };
      }
      if (this.opt.development_extensions.strict_inputs) {
        if (citationById[citation.citationID]) {
          CSL2.error("Citation with previously referenced citationID " + citation.citationID);
        }
        if (citation.properties.noteIndex) {
          if (lastNotePos > citation.properties.noteIndex) {
            CSL2.debug("Note index sequence is not sane for citation " + citation.citationID);
          }
          lastNotePos = citation.properties.noteIndex;
        }
      }
      citationByIndex.push(citation);
      citationById[citation.citationID] = citation;
      for (i = 0, ilen = citationsPost.length; i < ilen; i += 1) {
        postCitation = citationsPost[i];
        if (this.opt.development_extensions.strict_inputs) {
          if (citationById[postCitation[0]]) {
            CSL2.error("Previously referenced citationID " + postCitation[0] + " encountered in citationsPost");
          }
          if (postCitation[1]) {
            if (lastNotePos > postCitation[1]) {
              CSL2.debug("Note index sequence is not sane at postCitation[" + i + "]");
            }
            lastNotePos = postCitation[1];
          }
        }
        this.registry.citationreg.citationById[postCitation[0]].properties.noteIndex = postCitation[1];
        citationByIndex.push(this.registry.citationreg.citationById[postCitation[0]]);
        citationById[postCitation[0]] = this.registry.citationreg.citationById[postCitation[0]];
      }
      this.registry.citationreg.citationByIndex = citationByIndex;
      this.registry.citationreg.citationById = citationById;
      this.registry.citationreg.citationsByItemId = {};
      if (this.opt.update_mode === CSL2.POSITION) {
        textCitations = [];
        noteCitations = [];
        citationsInNote = {};
      }
      var update_items = [];
      for (var i = 0, ilen = citationByIndex.length; i < ilen; i += 1) {
        citationByIndex[i].properties.index = i;
        for (j = 0, jlen = citationByIndex[i].sortedItems.length; j < jlen; j += 1) {
          item = citationByIndex[i].sortedItems[j];
          if (!this.registry.citationreg.citationsByItemId[item[1].id]) {
            this.registry.citationreg.citationsByItemId[item[1].id] = [];
            update_items.push("" + item[1].id);
          }
          if (this.registry.citationreg.citationsByItemId[item[1].id].indexOf(citationByIndex[i]) === -1) {
            this.registry.citationreg.citationsByItemId[item[1].id].push(citationByIndex[i]);
          }
        }
        if (this.opt.update_mode === CSL2.POSITION) {
          if (citationByIndex[i].properties.noteIndex) {
            noteCitations.push(citationByIndex[i]);
          } else {
            citationByIndex[i].properties.noteIndex = 0;
            textCitations.push(citationByIndex[i]);
          }
        }
      }
      if (flag !== CSL2.ASSUME_ALL_ITEMS_REGISTERED) {
        if (this.debug) {
          CSL2.debug("****** start update items *********");
        }
        this.updateItems(update_items, null, null, true);
        if (this.debug) {
          CSL2.debug("****** endo update items *********");
        }
      }
      if (!this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
        for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
          sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
        }
        if (this.opt.grouped_sort && !citation.properties.unsorted) {
          for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
            var sortkeys = sortedItems[i][1].sortkeys;
            this.tmp.authorstring_request = true;
            var mydisambig = this.registry.registry[sortedItems[i][0].id].disambig;
            this.tmp.authorstring_request = true;
            CSL2.getAmbiguousCite.call(this, sortedItems[i][0], mydisambig);
            var authorstring = this.registry.authorstrings[sortedItems[i][0].id];
            this.tmp.authorstring_request = false;
            sortedItems[i][1].sortkeys = [authorstring].concat(sortkeys);
          }
          sortedItems.sort(this.citation.srt.compareCompositeKeys);
          var lastauthor = false;
          var thiskey = false;
          var thisauthor = false;
          for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
            if (sortedItems[i][1].sortkeys[0] !== lastauthor) {
              thisauthor = sortedItems[i][1].sortkeys[0];
              thiskey = sortedItems[i][1].sortkeys[1];
            }
            sortedItems[i][1].sortkeys[0] = "" + thiskey + i;
            lastauthor = thisauthor;
          }
        }
        if (!citation.properties.unsorted) {
          sortedItems.sort(this.citation.srt.compareCompositeKeys);
        }
      }
      if (this.opt.parallel.enable) {
        this.parallel.StartCitation(citation.sortedItems);
      }
      var citations;
      if (this.opt.update_mode === CSL2.POSITION) {
        for (var i = 0; i < 2; i += 1) {
          var first_ref = {};
          var last_ref = {};
          var first_container_ref = {};
          citations = [textCitations, noteCitations][i];
          for (j = 0, jlen = citations.length; j < jlen; j += 1) {
            var onecitation = citations[j];
            if (!citations[j].properties.noteIndex) {
              citations[j].properties.noteIndex = 0;
            }
            citations[j].properties.noteIndex = parseInt(citations[j].properties.noteIndex, 10);
            if (j > 0 && onecitation.properties.noteIndex && citations[j - 1].properties.noteIndex > onecitation.properties.noteIndex) {
              citationsInNote = {};
              first_ref = {};
              last_ref = {};
              first_container_ref = {};
            }
            for (k = 0, klen = onecitation.sortedItems.length; k < klen; k += 1) {
              if (onecitation.sortedItems[k][1].parallel && onecitation.sortedItems[k][1].parallel !== "first") {
                continue;
              }
              if (!citationsInNote[onecitation.properties.noteIndex]) {
                citationsInNote[onecitation.properties.noteIndex] = 1;
              } else {
                citationsInNote[onecitation.properties.noteIndex] += 1;
              }
            }
            for (k = 0, klen = citations[j].sortedItems.length; k < klen; k += 1) {
              item = citations[j].sortedItems[k];
              var item_id = item[0].id;
              var first_id = item[0].legislation_id ? item[0].legislation_id : item[0].id;
              var last_id = item[0].legislation_id ? item[0].legislation_id : item[0].container_id ? item[0].container_id : item[0].id;
              var myxloc = item[1]["locator-extra"];
              var mylocator = item[1].locator;
              var mylabel = item[1].label;
              var incitationid;
              var incitationxloc;
              if (k > 0) {
                if (onecitation.sortedItems[k - 1][0].legislation_id) {
                  incitationid = onecitation.sortedItems[k - 1][0].legislation_id;
                } else {
                  incitationid = onecitation.sortedItems[k - 1][1].id;
                  incitationxloc = onecitation.sortedItems[k - 1][1]["locator-extra"];
                  for (var l = k - 2; l > -1; l--) {
                    if (onecitation.sortedItems[l][1].parallel === "first") {
                      incitationid = onecitation.sortedItems[l][1].id;
                      incitationxloc = onecitation.sortedItems[l][1]["locator-extra"];
                    }
                  }
                }
              }
              if (flag === CSL2.PREVIEW) {
                if (onecitation.citationID != citation.citationID) {
                  if (typeof first_ref[item[1].id] === "undefined") {
                    first_ref[first_id] = onecitation.properties.noteIndex;
                    last_ref[last_id] = onecitation.properties.noteIndex;
                  } else {
                    last_ref[last_id] = onecitation.properties.noteIndex;
                  }
                  continue;
                }
              }
              var oldvalue = {};
              oldvalue.position = item[1].position;
              oldvalue["first-reference-note-number"] = item[1]["first-reference-note-number"];
              oldvalue["first-container-reference-note-number"] = item[1]["first-container-reference-note-number"];
              oldvalue["near-note"] = item[1]["near-note"];
              item[1]["first-reference-note-number"] = 0;
              item[1]["first-container-reference-note-number"] = 0;
              item[1]["near-note"] = false;
              if (this.registry.citationreg.citationsByItemId[item_id]) {
                if (this.opt.xclass === "note" && this.opt.has_disambiguate) {
                  var oldCount = this.registry.registry[item[0].id]["citation-count"];
                  var newCount = this.registry.citationreg.citationsByItemId[item_id].length;
                  this.registry.registry[item[0].id]["citation-count"] = this.registry.citationreg.citationsByItemId[item_id].length;
                  if (typeof oldCount === "number") {
                    var oldCountCheck = oldCount < 2;
                    var newCountCheck = newCount < 2;
                    if (oldCountCheck !== newCountCheck) {
                      for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                        rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                        this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                      }
                    }
                  } else {
                    for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                      rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                      this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                    }
                  }
                }
              }
              var oldlastid;
              var oldlastxloc;
              if (typeof last_ref[last_id] === "undefined" && onecitation.properties.mode !== "author-only") {
                first_ref[first_id] = onecitation.properties.noteIndex;
                last_ref[last_id] = onecitation.properties.noteIndex;
                first_container_ref[last_id] = onecitation.properties.noteIndex;
                item[1].position = CSL2.POSITION_FIRST;
              } else {
                var ibidme = false;
                var suprame = false;
                var prevCitation = null;
                if (j > 0) {
                  var prevCitation = citations[j - 1];
                }
                var thisCitation = citations[j];
                if (j > 0) {
                  var old_last_id_offset = 1;
                  if (prevCitation.properties.mode === "author-only" && j > 1) {
                    old_last_id_offset = 2;
                  }
                  var adjusted_offset = j - old_last_id_offset;
                  if (citations[adjusted_offset].sortedItems.length) {
                    oldlastid = citations[adjusted_offset].sortedItems.slice(-1)[0][1].id;
                    oldlastxloc = citations[j - old_last_id_offset].sortedItems.slice(-1)[0][1]["locator-extra"];
                  }
                  if (prevCitation.sortedItems.length) {
                    if (prevCitation.sortedItems[0].slice(-1)[0].legislation_id) {
                      oldlastid = prevCitation.sortedItems[0].slice(-1)[0].legislation_id;
                    }
                  }
                }
                if (j > 0 && k === 0 && prevCitation.properties.noteIndex !== thisCitation.properties.noteIndex) {
                  var useme = false;
                  var oldid = prevCitation.sortedItems[0][0].id;
                  if (prevCitation.sortedItems[0][0].legislation_id) {
                    oldid = prevCitation.sortedItems[0][0].legislation_id;
                  }
                  if (oldid == first_id && prevCitation.properties.noteIndex >= thisCitation.properties.noteIndex - 1) {
                    var prevxloc = prevCitation.sortedItems[0][1]["locator-extra"];
                    var thisxloc = thisCitation.sortedItems[0][1]["locator-extra"];
                    if ((citationsInNote[prevCitation.properties.noteIndex] === 1 || prevCitation.properties.noteIndex === 0) && prevxloc === thisxloc) {
                      useme = true;
                    }
                  }
                  if (useme) {
                    ibidme = true;
                  } else {
                    suprame = true;
                  }
                } else if (k > 0 && incitationid == first_id && incitationxloc == myxloc) {
                  ibidme = true;
                } else if (k === 0 && j > 0 && prevCitation.properties.noteIndex == thisCitation.properties.noteIndex && prevCitation.sortedItems.length && oldlastid == first_id && oldlastxloc == myxloc) {
                  ibidme = true;
                } else {
                  suprame = true;
                }
                var prev, prev_locator, prev_label, curr_locator, curr_label;
                if (ibidme) {
                  if (k > 0) {
                    prev = onecitation.sortedItems[k - 1][1];
                  } else {
                    prev = citations[j - 1].sortedItems[0][1];
                  }
                  if (prev.locator) {
                    if (prev.label) {
                      prev_label = prev.label;
                    } else {
                      prev_label = "";
                    }
                    prev_locator = "" + prev.locator + prev_label;
                  } else {
                    prev_locator = prev.locator;
                  }
                  if (mylocator) {
                    if (mylabel) {
                      curr_label = mylabel;
                    } else {
                      curr_label = "";
                    }
                    curr_locator = "" + mylocator + curr_label;
                  } else {
                    curr_locator = mylocator;
                  }
                }
                if (ibidme && prev_locator && !curr_locator) {
                  ibidme = false;
                  suprame = true;
                }
                if (ibidme) {
                  if (!prev_locator && curr_locator) {
                    item[1].position = CSL2.POSITION_IBID_WITH_LOCATOR;
                  } else if (!prev_locator && !curr_locator) {
                    item[1].position = CSL2.POSITION_IBID;
                  } else if (prev_locator && curr_locator === prev_locator) {
                    item[1].position = CSL2.POSITION_IBID;
                  } else if (prev_locator && curr_locator && curr_locator !== prev_locator) {
                    item[1].position = CSL2.POSITION_IBID_WITH_LOCATOR;
                  } else {
                    ibidme = false;
                    suprame = true;
                  }
                }
                if (suprame) {
                  item[1].position = CSL2.POSITION_CONTAINER_SUBSEQUENT;
                  if (typeof first_ref[first_id] === "undefined") {
                    first_ref[first_id] = onecitation.properties.noteIndex;
                  } else {
                    item[1].position = CSL2.POSITION_SUBSEQUENT;
                  }
                }
                if (suprame || ibidme) {
                  if (onecitation.properties.mode === "author-only") {
                    item[1].position = CSL2.POSITION_FIRST;
                  }
                  if (first_container_ref[last_id] != onecitation.properties.noteIndex) {
                    item[1]["first-container-reference-note-number"] = first_container_ref[last_id];
                    if (this.registry.registry[item[0].id]) {
                      this.registry.registry[item[0].id]["first-container-reference-note-number"] = first_container_ref[last_id];
                    }
                  }
                  if (first_ref[first_id] != onecitation.properties.noteIndex) {
                    item[1]["first-reference-note-number"] = first_ref[first_id];
                    if (this.registry.registry[item[0].id]) {
                      this.registry.registry[item[0].id]["first-reference-note-number"] = first_ref[first_id];
                    }
                  }
                }
              }
              if (onecitation.properties.noteIndex) {
                var note_distance = parseInt(onecitation.properties.noteIndex, 10) - parseInt(last_ref[last_id], 10);
                if (item[1].position !== CSL2.POSITION_FIRST && note_distance <= this.citation.opt["near-note-distance"]) {
                  item[1]["near-note"] = true;
                }
                last_ref[last_id] = onecitation.properties.noteIndex;
              } else if (item[1].position !== CSL2.POSITION_FIRST) {
                item[1]["near-note"] = true;
              }
              if (onecitation.citationID != citation.citationID) {
                for (n = 0, nlen = CSL2.POSITION_TEST_VARS.length; n < nlen; n += 1) {
                  var param = CSL2.POSITION_TEST_VARS[n];
                  if (item[1][param] !== oldvalue[param]) {
                    if (this.registry.registry[item[0].id]) {
                      if (param === "first-reference-note-number") {
                        rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                        this.tmp.taintedItemIDs[item[0].id] = true;
                      }
                    }
                    this.tmp.taintedCitationIDs[onecitation.citationID] = true;
                  }
                }
              }
              if (this.sys.variableWrapper) {
                item[1].index = onecitation.properties.index;
                item[1].noteIndex = onecitation.properties.noteIndex;
              }
            }
          }
        }
      }
      if (this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
        if (!citation.properties.unsorted) {
          for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
            sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
          }
          sortedItems.sort(this.citation.srt.compareCompositeKeys);
        }
      }
      for (var key in this.tmp.taintedItemIDs) {
        if (this.tmp.taintedItemIDs.hasOwnProperty(key)) {
          citations = this.registry.citationreg.citationsByItemId[key];
          if (citations) {
            for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
              this.tmp.taintedCitationIDs[citations[i].citationID] = true;
            }
          }
        }
      }
      var ret = [];
      if (flag === CSL2.PREVIEW) {
        if (this.debug) {
          CSL2.debug("****** start run processor *********");
        }
        try {
          ret = this.process_CitationCluster.call(this, citation.sortedItems, citation);
        } catch (e) {
          CSL2.error("Error running CSL processor for preview: " + e);
        }
        if (this.debug) {
          CSL2.debug("****** end run processor *********");
          CSL2.debug("****** start state restore *********");
        }
        this.registry.citationreg.citationByIndex = oldCitationList;
        this.registry.citationreg.citationById = {};
        for (var i = 0, ilen = oldCitationList.length; i < ilen; i += 1) {
          this.registry.citationreg.citationById[oldCitationList[i].citationID] = oldCitationList[i];
        }
        if (this.debug) {
          CSL2.debug("****** start final update *********");
        }
        var oldItemIds = [];
        for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
          oldItemIds.push("" + oldItemList[i].id);
        }
        this.updateItems(oldItemIds, null, null, true);
        if (this.debug) {
          CSL2.debug("****** end final update *********");
        }
        for (var key in oldAmbigs) {
          if (oldAmbigs.hasOwnProperty(key)) {
            this.registry.registry[key].disambig = oldAmbigs[key];
          }
        }
        if (this.debug) {
          CSL2.debug("****** end state restore *********");
        }
      } else {
        for (var rerunAkey in rerunAkeys) {
          this.disambiguate.run(rerunAkey, citation);
        }
        var obj;
        for (var key in this.tmp.taintedCitationIDs) {
          if (key == citation.citationID) {
            continue;
          }
          var mycitation = this.registry.citationreg.citationById[key];
          if (!mycitation.properties.unsorted) {
            for (var i = 0, ilen = mycitation.sortedItems.length; i < ilen; i += 1) {
              mycitation.sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, mycitation.sortedItems[i][0], "citation_sort");
            }
            mycitation.sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
          this.tmp.citation_pos = mycitation.properties.index;
          this.tmp.citation_note_index = mycitation.properties.noteIndex;
          this.tmp.citation_id = "" + mycitation.citationID;
          obj = [];
          obj.push(mycitation.properties.index);
          obj.push(this.process_CitationCluster.call(this, mycitation.sortedItems, mycitation));
          obj.push(mycitation.citationID);
          ret.push(obj);
        }
        this.tmp.taintedItemIDs = {};
        this.tmp.taintedCitationIDs = {};
        this.tmp.citation_pos = citation.properties.index;
        this.tmp.citation_note_index = citation.properties.noteIndex;
        this.tmp.citation_id = "" + citation.citationID;
        obj = [];
        obj.push(citationsPre.length);
        obj.push(this.process_CitationCluster.call(this, sortedItems, citation));
        obj.push(citation.citationID);
        ret.push(obj);
        ret.sort(function(a2, b) {
          if (a2[0] > b[0]) {
            return 1;
          } else if (a2[0] < b[0]) {
            return -1;
          } else {
            return 0;
          }
        });
      }
      this.registry.return_data.citation_errors = this.tmp.citation_errors.slice();
      return [this.registry.return_data, ret];
    };
    CSL2.Engine.prototype.process_CitationCluster = function(sortedItems, citation) {
      var str = "";
      if (citation && citation.properties && citation.properties.mode === "composite") {
        citation.properties.mode = "author-only";
        var firstChunk = CSL2.getCitationCluster.call(this, sortedItems, citation);
        citation.properties.mode = "suppress-author";
        var secondChunk = "";
        if (citation.properties.infix) {
          this.output.append(citation.properties.infix);
          secondChunk = this.output.string(this, this.output.queue);
          if (typeof secondChunk === "object") {
            secondChunk = secondChunk.join("");
          }
        }
        var thirdChunk = CSL2.getCitationCluster.call(this, sortedItems, citation);
        citation.properties.mode = "composite";
        if (firstChunk && secondChunk && CSL2.SWAPPING_PUNCTUATION.concat(["\u2019", "'"]).indexOf(secondChunk[0]) > -1) {
          firstChunk += secondChunk;
          secondChunk = false;
        }
        str = [firstChunk, secondChunk, thirdChunk].filter(function(obj) {
          return obj;
        }).join(" ");
      } else {
        str = CSL2.getCitationCluster.call(this, sortedItems, citation);
      }
      return str;
    };
    CSL2.Engine.prototype.makeCitationCluster = function(rawList) {
      var inputList, newitem, str, pos, len, item, Item;
      inputList = [];
      len = rawList.length;
      for (pos = 0; pos < len; pos += 1) {
        item = {};
        for (var key in rawList[pos]) {
          item[key] = rawList[pos][key];
        }
        Item = this.retrieveItem("" + item.id);
        if (this.opt.development_extensions.locator_label_parse) {
          if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
            var m2 = CSL2.LOCATOR_LABELS_REGEXP.exec(item.locator);
            if (m2) {
              var tryLabel = CSL2.LOCATOR_LABELS_MAP[m2[2]];
              if (this.getTerm(tryLabel)) {
                item.label = tryLabel;
                item.locator = m2[3];
              }
            }
          }
        }
        if (item.locator) {
          item.locator = ("" + item.locator).replace(/\s+$/, "");
        }
        newitem = [Item, item];
        inputList.push(newitem);
      }
      if (this.opt.development_extensions.consolidate_legal_items) {
        this.remapSectionVariable(inputList);
      }
      if (inputList && inputList.length > 1 && this.citation_sort.tokens.length > 0) {
        len = inputList.length;
        for (pos = 0; pos < len; pos += 1) {
          inputList[pos][1].sortkeys = CSL2.getSortKeys.call(this, inputList[pos][0], "citation_sort");
        }
        inputList.sort(this.citation.srt.compareCompositeKeys);
      }
      this.tmp.citation_errors = [];
      var str = CSL2.getCitationCluster.call(this, inputList);
      return str;
    };
    CSL2.getAmbiguousCite = function(Item, disambig, visualForm, item) {
      var ret;
      var flags = this.tmp.group_context.tip;
      var oldTermSiblingLayer = {
        term_intended: flags.term_intended,
        variable_attempt: flags.variable_attempt,
        variable_success: flags.variable_success,
        output_tip: flags.output_tip,
        label_form: flags.label_form,
        non_parallel: flags.non_parallel,
        parallel_last: flags.parallel_last,
        parallel_first: flags.parallel_first,
        parallel_last_override: flags.parallel_last_override,
        parallel_delimiter_override: flags.parallel_delimiter_override,
        parallel_delimiter_override_on_suppress: flags.parallel_delimiter_override_on_suppress,
        condition: flags.condition,
        force_suppress: flags.force_suppress,
        done_vars: flags.done_vars.slice()
      };
      if (disambig) {
        this.tmp.disambig_request = disambig;
      } else {
        this.tmp.disambig_request = false;
      }
      var itemSupp = {
        position: CSL2.POSITION_SUBSEQUENT,
        "near-note": true
      };
      if (item) {
        itemSupp.locator = item.locator;
        itemSupp.label = item.label;
      }
      if (this.registry.registry[Item.id] && this.registry.citationreg.citationsByItemId && this.registry.citationreg.citationsByItemId[Item.id] && this.registry.citationreg.citationsByItemId[Item.id].length && visualForm) {
        if (this.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
          itemSupp["first-reference-note-number"] = this.registry.registry[Item.id]["first-reference-note-number"];
        }
      }
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      var origSuppressDecorations = this.tmp.suppress_decorations;
      this.tmp.suppress_decorations = true;
      this.tmp.just_looking = true;
      CSL2.getCite.call(this, Item, itemSupp, null, false);
      for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
        CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
      }
      if (this.opt.development_extensions.clean_up_csl_flaws) {
        for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
          this.output.adjust.upward(this.output.queue[j]);
          this.output.adjust.leftward(this.output.queue[j]);
          this.output.adjust.downward(this.output.queue[j]);
          this.output.adjust.fix(this.output.queue[j]);
        }
      }
      var ret = this.output.string(this, this.output.queue);
      this.tmp.just_looking = false;
      this.tmp.suppress_decorations = origSuppressDecorations;
      this.tmp.group_context.replace(oldTermSiblingLayer);
      return ret;
    };
    CSL2.getSpliceDelimiter = function(last_locator, last_collapsed, pos) {
      if (this.citation.opt["after-collapse-delimiter"] !== void 0) {
        if (last_locator) {
          this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
        } else if (last_collapsed && !this.tmp.have_collapsed) {
          this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
        } else if (!last_collapsed && !this.tmp.have_collapsed && this.citation.opt.collapse !== "year-suffix") {
          this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
        } else {
          this.tmp.splice_delimiter = this.citation.opt.layout_delimiter;
        }
      } else if (this.tmp.use_cite_group_delimiter) {
        this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
      } else {
        if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL2.NUMERIC) {
          this.tmp.splice_delimiter = ", ";
        } else if (this.tmp.cite_locales[pos - 1]) {
          var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
          if (alt_affixes && alt_affixes.delimiter) {
            this.tmp.splice_delimiter = alt_affixes.delimiter;
          }
        } else if (!this.tmp.splice_delimiter) {
          this.tmp.splice_delimiter = "";
        }
      }
      return this.tmp.splice_delimiter;
    };
    CSL2.getCitationCluster = function(inputList, citation) {
      var result, objects, myparams, len, pos, item, last_collapsed, params, empties, composite, compie, myblobs, Item, llen, ppos, obj, preceding_item, txt_esc, error_object, citationID, authorOnly, suppressAuthor;
      var citation_prefix = "";
      this.output.checkNestedBrace = new CSL2.checkNestedBrace(this);
      if (citation) {
        citationID = citation.citationID;
        authorOnly = citation.properties.mode === "author-only" ? !!citation.properties.mode : false;
        if (this.opt.xclass !== "note") {
          suppressAuthor = citation.properties.mode === "suppress-author" ? !!citation.properties.mode : false;
        }
        if (citation.properties.prefix) {
          citation_prefix = CSL2.checkPrefixSpaceAppend(this, citation.properties.prefix);
        }
      }
      inputList = inputList ? inputList : [];
      this.tmp.last_primary_names_string = false;
      txt_esc = CSL2.getSafeEscape(this);
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      result = "";
      objects = [];
      this.tmp.last_suffix_used = "";
      this.tmp.last_names_used = [];
      this.tmp.last_years_used = [];
      this.tmp.backref_index = [];
      this.tmp.cite_locales = [];
      if (!this.tmp.just_looking) {
        this.tmp.abbrev_trimmer = {
          QUASHES: {}
        };
      }
      var use_layout_prefix = this.output.checkNestedBrace.update(this.citation.opt.layout_prefix + citation_prefix);
      var suppressTrailingPunctuation = false;
      if (this.citation.opt.suppressTrailingPunctuation) {
        suppressTrailingPunctuation = true;
      }
      if (citationID) {
        if (this.registry.citationreg.citationById[citationID].properties["suppress-trailing-punctuation"]) {
          suppressTrailingPunctuation = true;
        }
      }
      if (this.opt.xclass === "note") {
        var parasets = [];
        var lastTitle = false;
        var lastPosition = false;
        var lastID = false;
        var lst = [];
        for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
          var type2 = inputList[i][0].type;
          var title = inputList[i][0].title;
          var position = inputList[i][1].position;
          var id2 = inputList[i][0].id;
          if (title && type2 === "legal_case" && id2 !== lastID && position) {
            if (title !== lastTitle || parasets.length === 0) {
              lst = [];
              parasets.push(lst);
            }
            lst.push(inputList[i][1]);
          }
          lastTitle = title;
          lastPosition = position;
          lastID = id2;
        }
        for (i = 0, ilen = parasets.length; i < ilen; i += 1) {
          lst = parasets[i];
          if (lst.length < 2) {
            continue;
          }
          var locatorInLastPosition = lst.slice(-1)[0].locator;
          if (locatorInLastPosition) {
            for (var j = 0, jlen = lst.length - 1; j < jlen; j += 1) {
              if (lst[j].locator) {
                locatorInLastPosition = false;
              }
            }
          }
          if (locatorInLastPosition) {
            lst[0].locator = locatorInLastPosition;
            delete lst.slice(-1)[0].locator;
            lst[0].label = lst.slice(-1)[0].label;
            if (lst.slice(-1)[0].label) {
              delete lst.slice(-1)[0].label;
            }
          }
        }
      }
      myparams = [];
      len = inputList.length;
      if (inputList[0] && inputList[0][1]) {
        if (authorOnly) {
          delete inputList[0][1]["suppress-author"];
          inputList[0][1]["author-only"] = true;
        } else if (suppressAuthor) {
          delete inputList[0][1]["author-only"];
          inputList[0][1]["suppress-author"] = true;
        }
      }
      if (this.opt.parallel.enable) {
        this.parallel.StartCitation(inputList);
      }
      for (pos = 0; pos < len; pos += 1) {
        this.tmp.cite_index = pos;
        Item = inputList[pos][0];
        item = inputList[pos][1];
        item = CSL2.parseLocator.call(this, item);
        last_collapsed = this.tmp.have_collapsed;
        var last_locator = false;
        if (pos > 0 && inputList[pos - 1][1]) {
          last_locator = !!inputList[pos - 1][1].locator;
        }
        params = {};
        this.tmp.shadow_numbers = {};
        if (!this.tmp.just_looking && this.opt.hasPlaceholderTerm) {
          var output = this.output;
          this.output = new CSL2.Output.Queue(this);
          this.output.adjust = new CSL2.Output.Queue.adjust();
          CSL2.getAmbiguousCite.call(this, Item, null, false, item);
          this.output = output;
        }
        this.tmp.in_cite_predecessor = false;
        if (pos > 0) {
          CSL2.getCite.call(this, Item, item, "" + inputList[pos - 1][0].id, true);
        } else {
          this.tmp.term_predecessor = false;
          CSL2.getCite.call(this, Item, item, null, true);
        }
        if (!this.tmp.cite_renders_content) {
          error_object = {
            citationID: "" + this.tmp.citation_id,
            index: this.tmp.citation_pos,
            noteIndex: this.tmp.citation_note_index,
            itemID: "" + Item.id,
            citationItems_pos: pos,
            error_code: CSL2.ERROR_NO_RENDERED_FORM
          };
          this.tmp.citation_errors.push(error_object);
        }
        params.splice_delimiter = CSL2.getSpliceDelimiter.call(this, last_locator, last_collapsed, pos);
        if (item && item["author-only"]) {
          this.tmp.suppress_decorations = true;
        }
        if (pos > 0) {
          preceding_item = inputList[pos - 1][1];
          var precedingEndsInPeriodOrComma = preceding_item.suffix && [";", ".", ","].indexOf(preceding_item.suffix.slice(-1)) > -1;
          var currentStartsWithPeriodOrComma = !preceding_item.suffix && item.prefix && [";", ".", ","].indexOf(item.prefix.slice(0, 1)) > -1;
          if (precedingEndsInPeriodOrComma || currentStartsWithPeriodOrComma) {
            var spaceidx = params.splice_delimiter.indexOf(" ");
            if (spaceidx > -1 && !currentStartsWithPeriodOrComma) {
              params.splice_delimiter = params.splice_delimiter.slice(spaceidx);
            } else {
              params.splice_delimiter = "";
            }
          }
        }
        params.suppress_decorations = this.tmp.suppress_decorations;
        params.have_collapsed = this.tmp.have_collapsed;
        myparams.push(params);
        if (item["author-only"]) {
          break;
        }
      }
      empties = 0;
      myblobs = this.output.queue.slice();
      var citation_suffix = "";
      if (citation) {
        citation_suffix = CSL2.checkSuffixSpacePrepend(this, citation.properties.suffix);
      }
      var suffix = this.citation.opt.layout_suffix;
      var last_locale = this.tmp.cite_locales[this.tmp.cite_locales.length - 1];
      if (last_locale && this.tmp.cite_affixes[this.tmp.area][last_locale] && this.tmp.cite_affixes[this.tmp.area][last_locale].suffix) {
        suffix = this.tmp.cite_affixes[this.tmp.area][last_locale].suffix;
      }
      if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(suffix.slice(0, 1)) > -1) {
        suffix = suffix.slice(0, 1);
      }
      suffix = this.output.checkNestedBrace.update(citation_suffix + suffix);
      for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
        CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
      }
      if (!this.tmp.suppress_decorations && this.output.queue.length) {
        if (!(this.opt.development_extensions.apply_citation_wrapper && this.sys.wrapCitationEntry && !this.tmp.just_looking && this.tmp.area === "citation")) {
          if (!suppressTrailingPunctuation) {
            this.output.queue[this.output.queue.length - 1].strings.suffix = suffix;
          }
          this.output.queue[0].strings.prefix = use_layout_prefix;
        }
      }
      if (this.opt.development_extensions.clean_up_csl_flaws) {
        for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
          this.output.adjust.upward(this.output.queue[j]);
          this.output.adjust.leftward(this.output.queue[j]);
          this.output.adjust.downward(this.output.queue[j]);
          this.tmp.last_chr = this.output.adjust.fix(this.output.queue[j]);
        }
      }
      for (pos = 0, len = myblobs.length; pos < len; pos += 1) {
        var buffer = [];
        this.output.queue = [myblobs[pos]];
        this.tmp.suppress_decorations = myparams[pos].suppress_decorations;
        this.tmp.splice_delimiter = myparams[pos].splice_delimiter;
        if (myblobs[pos].parallel_delimiter) {
          this.tmp.splice_delimiter = myblobs[pos].parallel_delimiter;
        }
        this.tmp.have_collapsed = myparams[pos].have_collapsed;
        composite = this.output.string(this, this.output.queue);
        this.tmp.suppress_decorations = false;
        if (typeof composite === "string") {
          this.tmp.suppress_decorations = false;
          if (!composite) {
            if (this.opt.development_extensions.throw_on_empty) {
              CSL2.error("Citation would render no content");
            } else {
              composite = "[NO_PRINTED_FORM]";
            }
          }
          return composite;
        }
        if (typeof composite === "object" && composite.length === 0 && !item["suppress-author"]) {
          if (pos === 0) {
            var errStr = "[CSL STYLE ERROR: reference with no printed form.]";
            var preStr = pos === 0 ? txt_esc(this.citation.opt.layout_prefix) : "";
            var sufStr = pos === myblobs.length - 1 ? txt_esc(this.citation.opt.layout_suffix) : "";
            composite.push(preStr + errStr + sufStr);
          } else if (pos === myblobs.length - 1) {
            var tmpobj = objects[objects.length - 1];
            if (typeof tmpobj === "string") {
              objects[objects.length - 1] += txt_esc(this.citation.opt.layout_suffix);
            } else if (typeof tmpobj === "object") {
              tmpobj.strings.suffix += txt_esc(this.citation.opt.layout_suffix);
            }
          }
        }
        if (buffer.length && typeof composite[0] === "string") {
          composite.reverse();
          var tmpstr = composite.pop();
          if (tmpstr && tmpstr.slice(0, 1) === ",") {
            buffer.push(tmpstr);
          } else if (typeof buffer.slice(-1)[0] == "string" && buffer.slice(-1)[0].slice(-1) === ",") {
            buffer.push(" " + tmpstr);
          } else if (tmpstr) {
            buffer.push(txt_esc(this.tmp.splice_delimiter) + tmpstr);
          }
        } else {
          composite.reverse();
          compie = composite.pop();
          if (typeof compie !== "undefined") {
            if (buffer.length && typeof buffer[buffer.length - 1] === "string") {
              buffer[buffer.length - 1] += compie.successor_prefix;
            }
            buffer.push(compie);
          }
        }
        llen = composite.length;
        for (ppos = 0; ppos < llen; ppos += 1) {
          obj = composite[ppos];
          if (typeof obj === "string") {
            buffer.push(txt_esc(this.tmp.splice_delimiter) + obj);
            continue;
          }
          compie = composite.pop();
          if (typeof compie !== "undefined") {
            buffer.push(compie);
          }
        }
        if (buffer.length === 0 && !inputList[pos][1]["suppress-author"]) {
          empties += 1;
        }
        if (buffer.length > 1 && typeof buffer[0] !== "string") {
          buffer = [this.output.renderBlobs(buffer)];
        }
        if (buffer.length) {
          if (typeof buffer[0] === "string") {
            if (pos > 0) {
              buffer[0] = txt_esc(this.tmp.splice_delimiter) + buffer[0];
            }
          } else {
            if (pos > 0) {
              buffer[0].splice_prefix = this.tmp.splice_delimiter;
            } else {
              buffer[0].splice_prefix = "";
            }
          }
        }
        objects = objects.concat(buffer);
      }
      result += this.output.renderBlobs(objects);
      if (result) {
        if (!this.tmp.suppress_decorations) {
          len = this.citation.opt.layout_decorations.length;
          for (pos = 0; pos < len; pos += 1) {
            params = this.citation.opt.layout_decorations[pos];
            if (params[1] === "normal") {
              continue;
            }
            if (!item || !item["author-only"]) {
              result = this.fun.decorate[params[0]][params[1]](this, result);
            }
          }
        }
      }
      this.tmp.suppress_decorations = false;
      if (!result) {
        if (this.opt.development_extensions.throw_on_empty) {
          CSL2.error("Citation would render no content");
        } else {
          result = "[NO_PRINTED_FORM]";
        }
      }
      return result;
    };
    CSL2.getCite = function(Item, item, prevItemID, blockShadowNumberReset) {
      var next, error_object;
      var areaOrig = this.tmp.area;
      if (item && item["author-only"] && this.intext && this.intext.tokens.length > 0) {
        this.tmp.area = "intext";
      }
      this.tmp.cite_renders_content = false;
      this.tmp.probably_rendered_something = false;
      this.tmp.prevItemID = prevItemID;
      CSL2.citeStart.call(this, Item, item, blockShadowNumberReset);
      next = 0;
      this.tmp.name_node = {};
      this.nameOutput = new CSL2.NameOutput(this, Item, item);
      while (next < this[this.tmp.area].tokens.length) {
        next = CSL2.tokenExec.call(this, this[this.tmp.area].tokens[next], Item, item);
      }
      CSL2.citeEnd.call(this, Item, item);
      if (!this.tmp.cite_renders_content && !this.tmp.just_looking) {
        if (this.tmp.area === "bibliography") {
          error_object = {
            index: this.tmp.bibliography_pos,
            itemID: "" + Item.id,
            error_code: CSL2.ERROR_NO_RENDERED_FORM
          };
          this.tmp.bibliography_errors.push(error_object);
        }
      }
      this.tmp.area = areaOrig;
      return "" + Item.id;
    };
    CSL2.citeStart = function(Item, item, blockShadowNumberReset) {
      this.tmp.lang_array = [];
      if (Item.language) {
        var m2 = Item.language.match(/^([a-zA-Z]+).*/);
        if (m2) {
          this.tmp.lang_array.push(m2[1].toLowerCase());
        }
      }
      this.tmp.lang_array.push(this.opt.lang);
      if (!blockShadowNumberReset) {
        this.tmp.shadow_numbers = {};
      }
      this.tmp.disambiguate_count = 0;
      this.tmp.disambiguate_maxMax = 0;
      this.tmp.same_author_as_previous_cite = false;
      if (!this.tmp.suppress_decorations) {
        this.tmp.subsequent_author_substitute_ok = true;
      } else {
        this.tmp.subsequent_author_substitute_ok = false;
      }
      this.tmp.lastchr = "";
      if (this.tmp.area === "citation" && this.citation.opt.collapse && this.citation.opt.collapse.length) {
        this.tmp.have_collapsed = true;
      } else {
        this.tmp.have_collapsed = false;
      }
      this.tmp.render_seen = false;
      if (this.tmp.disambig_request && !this.tmp.disambig_override) {
        this.tmp.disambig_settings = this.tmp.disambig_request;
      } else if (this.registry.registry[Item.id] && !this.tmp.disambig_override) {
        this.tmp.disambig_request = this.registry.registry[Item.id].disambig;
        this.tmp.disambig_settings = this.registry.registry[Item.id].disambig;
      } else {
        this.tmp.disambig_settings = new CSL2.AmbigConfig();
      }
      if (this.tmp.area !== "citation") {
        if (!this.registry.registry[Item.id]) {
          this.tmp.disambig_restore = new CSL2.AmbigConfig();
        } else {
          this.tmp.disambig_restore = CSL2.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
          if (this.tmp.area === "bibliography" && this.tmp.disambig_settings && this.tmp.disambig_override) {
            if (this.opt["disambiguate-add-names"]) {
              this.tmp.disambig_settings.names = this.registry.registry[Item.id].disambig.names.slice();
              if (this.tmp.disambig_request) {
                this.tmp.disambig_request.names = this.registry.registry[Item.id].disambig.names.slice();
              }
            }
            if (this.opt["disambiguate-add-givenname"]) {
              this.tmp.disambig_request = this.tmp.disambig_settings;
              this.tmp.disambig_settings.givens = this.registry.registry[Item.id].disambig.givens.slice();
              this.tmp.disambig_request.givens = this.registry.registry[Item.id].disambig.givens.slice();
              for (var i = 0, ilen = this.tmp.disambig_settings.givens.length; i < ilen; i += 1) {
                this.tmp.disambig_settings.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
              }
              for (var i = 0, ilen = this.tmp.disambig_request.givens.length; i < ilen; i += 1) {
                this.tmp.disambig_request.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
              }
            }
          }
        }
      }
      this.tmp.names_used = [];
      this.tmp.nameset_counter = 0;
      this.tmp.years_used = [];
      this.tmp.names_max.clear();
      if (!this.tmp.just_looking) {
        if (!item || item.parallel === "first" || !item.parallel) {
          this.tmp.abbrev_trimmer = {
            QUASHES: {}
          };
        }
      }
      this.tmp.splice_delimiter = this[this.tmp.area].opt.layout_delimiter;
      this.bibliography_sort.keys = [];
      this.citation_sort.keys = [];
      this.tmp.has_done_year_suffix = false;
      this.tmp.last_cite_locale = false;
      if (!this.tmp.just_looking && item && !item.position && this.registry.registry[Item.id]) {
        this.tmp.disambig_restore = CSL2.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
      }
      this.tmp.first_name_string = false;
      this.tmp.authority_stop_last = 0;
    };
    CSL2.citeEnd = function(Item, item) {
      if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
        this.registry.registry[Item.id].disambig.names = this.tmp.disambig_restore.names.slice();
        this.registry.registry[Item.id].disambig.givens = this.tmp.disambig_restore.givens.slice();
        for (var i = 0, ilen = this.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
          this.registry.registry[Item.id].disambig.givens[i] = this.tmp.disambig_restore.givens[i].slice();
        }
      }
      this.tmp.disambig_restore = false;
      if (item && item.suffix) {
        this.tmp.last_suffix_used = item.suffix;
      } else {
        this.tmp.last_suffix_used = "";
      }
      this.tmp.last_years_used = this.tmp.years_used.slice();
      this.tmp.last_names_used = this.tmp.names_used.slice();
      this.tmp.cut_var = false;
      this.tmp.disambig_request = false;
      this.tmp.cite_locales.push(this.tmp.last_cite_locale);
      if (this.tmp.issued_date && this.tmp.renders_collection_number) {
        var buf = [];
        for (var i = this.tmp.issued_date.list.length - 1; i > this.tmp.issued_date.pos; i += -1) {
          buf.push(this.tmp.issued_date.list.pop());
        }
        this.tmp.issued_date.list.pop();
        for (i = buf.length - 1; i > -1; i += -1) {
          this.tmp.issued_date.list.push(buf.pop());
        }
      }
      this.tmp.issued_date = false;
      this.tmp.renders_collection_number = false;
    };
    CSL2.Engine.prototype.makeBibliography = function(bibsection) {
      var debug, ret, params, maxoffset, item, len, pos, tok, tokk, tokkk, entry_ids, entry_strings;
      debug = false;
      if (!bibsection && (this.bibliography.opt.exclude_types || this.bibliography.opt.exclude_with_fields)) {
        bibsection = {
          exclude: []
        };
        if (this.bibliography.opt.exclude_types) {
          for (var i in this.bibliography.opt.exclude_types) {
            var val = this.bibliography.opt.exclude_types[i];
            bibsection.exclude.push({
              field: "type",
              value: val
            });
          }
        }
        if (this.bibliography.opt.exclude_with_fields) {
          for (var i in this.bibliography.opt.exclude_with_fields) {
            var field = this.bibliography.opt.exclude_with_fields[i];
            bibsection.exclude.push({
              field,
              value: true
            });
          }
        }
      }
      if (!this.bibliography.tokens.length) {
        return false;
      }
      if (typeof bibsection === "string") {
        this.opt.citation_number_slug = bibsection;
        bibsection = false;
      }
      if (debug) {
        len = this.bibliography.tokens.length;
        for (pos = 0; pos < len; pos += 1) {
          tok = this.bibliography.tokens[pos];
          CSL2.debug("bibtok: " + tok.name);
        }
        CSL2.debug("---");
        len = this.citation.tokens.length;
        for (pos = 0; pos < len; pos += 1) {
          tokk = this.citation.tokens[pos];
          CSL2.debug("cittok: " + tok.name);
        }
        CSL2.debug("---");
        len = this.bibliography_sort.tokens.length;
        for (pos = 0; pos < len; pos += 1) {
          tokkk = this.bibliography_sort.tokens[pos];
          CSL2.debug("bibsorttok: " + tok.name);
        }
      }
      ret = CSL2.getBibliographyEntries.call(this, bibsection);
      entry_ids = ret[0];
      entry_strings = ret[1];
      var done = ret[2];
      params = {
        "maxoffset": 0,
        "entryspacing": this.bibliography.opt["entry-spacing"],
        "linespacing": this.bibliography.opt["line-spacing"],
        "second-field-align": false,
        "entry_ids": entry_ids,
        "bibliography_errors": this.tmp.bibliography_errors.slice(),
        "done": done
      };
      if (this.bibliography.opt["second-field-align"]) {
        params["second-field-align"] = this.bibliography.opt["second-field-align"];
      }
      maxoffset = 0;
      len = this.registry.reflist.length;
      for (pos = 0; pos < len; pos += 1) {
        item = this.registry.reflist[pos];
        if (item.offset > params.maxoffset) {
          params.maxoffset = item.offset;
        }
      }
      if (this.bibliography.opt.hangingindent) {
        params.hangingindent = this.bibliography.opt.hangingindent;
      }
      params.bibstart = this.fun.decorate.bibstart;
      params.bibend = this.fun.decorate.bibend;
      this.opt.citation_number_slug = false;
      return [params, entry_strings];
    };
    CSL2.getBibliographyEntries = function(bibsection) {
      var ret, input, include, anymatch, allmatch, bib_entry, res, item, spec, lllen, pppos, topblobs, entry_item_ids, debug, i, ilen, siblings, skips, sortedItems, eyetem, entry_item_data, j, jlen;
      ret = [];
      entry_item_data = [];
      this.tmp.area = "bibliography";
      this.tmp.root = "bibliography";
      this.tmp.last_rendered_name = false;
      this.tmp.bibliography_errors = [];
      this.tmp.bibliography_pos = 0;
      if (bibsection && bibsection.page_start && bibsection.page_length) {
        input = this.registry.getSortedIds();
      } else {
        input = this.refetchItems(this.registry.getSortedIds());
      }
      this.tmp.disambig_override = true;
      function eval_string(a2, b) {
        if (a2 === b) {
          return true;
        }
        return false;
      }
      function eval_list(a2, lst) {
        lllen = lst.length;
        for (pppos = 0; pppos < lllen; pppos += 1) {
          if (eval_string(a2, lst[pppos])) {
            return true;
          }
        }
        return false;
      }
      function eval_spec(a2, b) {
        if (typeof a2 === "boolean" || !a2) {
          if (a2) {
            return !!b;
          } else {
            return !b;
          }
        } else {
          if (typeof b === "string") {
            return eval_string(a2, b);
          } else if (!b) {
            return false;
          } else {
            return eval_list(a2, b);
          }
        }
      }
      skips = {};
      var page_item_count;
      if (bibsection && bibsection.page_start && bibsection.page_length) {
        page_item_count = 0;
        if (bibsection.page_start !== true) {
          for (i = 0, ilen = input.length; i < ilen; i += 1) {
            skips[input[i]] = true;
            if (bibsection.page_start == input[i]) {
              break;
            }
          }
        }
      }
      var processed_item_ids = [];
      var consolidatedIDs = {};
      this.tmp.container_item_count = {};
      input = input.filter((o) => {
        var ret2 = o;
        if (o.legislation_id) {
          if (consolidatedIDs[o.legislation_id]) {
            ret2 = false;
          } else {
            consolidatedIDs[o.legislation_id] = true;
          }
        } else if (o.container_id) {
          if (!this.tmp.container_item_count[o.container_id]) {
            this.tmp.container_item_count[o.container_id] = 0;
          }
          this.tmp.container_item_count[o.container_id]++;
          if (this.bibliography.opt.consolidate_containers.indexOf(o.type) > -1) {
            if (consolidatedIDs[o.container_id]) {
              ret2 = false;
            } else {
              consolidatedIDs[o.container_id] = true;
            }
          }
        }
        return ret2;
      });
      this.tmp.container_item_pos = {};
      for (i = 0, ilen = input.length; i < ilen; i += 1) {
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          if (skips[input[i]]) {
            continue;
          }
          item = this.refetchItem(input[i]);
          if (page_item_count === bibsection.page_length) {
            break;
          }
        } else {
          item = input[i];
          if (skips[item.id]) {
            continue;
          }
        }
        if (bibsection) {
          include = true;
          if (bibsection.include) {
            include = false;
            for (j = 0, jlen = bibsection.include.length; j < jlen; j += 1) {
              spec = bibsection.include[j];
              if (eval_spec(spec.value, item[spec.field])) {
                include = true;
                break;
              }
            }
          } else if (bibsection.exclude) {
            anymatch = false;
            for (j = 0, jlen = bibsection.exclude.length; j < jlen; j += 1) {
              spec = bibsection.exclude[j];
              if (eval_spec(spec.value, item[spec.field])) {
                anymatch = true;
                break;
              }
            }
            if (anymatch) {
              include = false;
            }
          } else if (bibsection.select) {
            include = false;
            allmatch = true;
            for (j = 0, jlen = bibsection.select.length; j < jlen; j += 1) {
              spec = bibsection.select[j];
              if (!eval_spec(spec.value, item[spec.field])) {
                allmatch = false;
              }
            }
            if (allmatch) {
              include = true;
            }
          }
          if (bibsection.quash) {
            allmatch = true;
            for (j = 0, jlen = bibsection.quash.length; j < jlen; j += 1) {
              spec = bibsection.quash[j];
              if (!eval_spec(spec.value, item[spec.field])) {
                allmatch = false;
              }
            }
            if (allmatch) {
              include = false;
            }
          }
          if (!include) {
            continue;
          }
        }
        if (debug) {
          CSL2.debug("BIB: " + item.id);
        }
        if (item.container_id) {
          if (!this.tmp.container_item_pos[item.container_id]) {
            this.tmp.container_item_pos[item.container_id] = 0;
          }
          this.tmp.container_item_pos[item.container_id]++;
        }
        bib_entry = new CSL2.Token("group", CSL2.START);
        bib_entry.decorations = [["@bibliography", "entry"]].concat(this.bibliography.opt.layout_decorations);
        this.output.startTag("bib_entry", bib_entry);
        if (item.system_id && this.sys.embedBibliographyEntry) {
          this.output.current.value().item_id = item.system_id;
        } else {
          this.output.current.value().system_id = item.id;
        }
        entry_item_ids = [];
        if (this.registry.registry[item.id].master && !(bibsection && bibsection.page_start && bibsection.page_length)) {
          sortedItems = [[item, { id: item.id }]];
          siblings = this.registry.registry[item.id].siblings;
          for (var j = 0, jlen = siblings.length; j < jlen; j++) {
            sortedItems.push([this.refetchItem(siblings[j]), { id: siblings[j] }]);
          }
          this.parallel.StartCitation(sortedItems);
          if (this.registry.registry[item.id].parallel_delimiter_override) {
            this.output.queue[0].strings.delimiter = this.registry.registry[item.id].parallel_delimiter_override;
          } else {
            this.output.queue[0].strings.delimiter = ", ";
          }
          this.tmp.term_predecessor = false;
          this.tmp.cite_index = 0;
          for (j = 0, jlen = sortedItems.length; j < jlen; j += 1) {
            if (j < sortedItems.length - 1) {
              this.tmp.parallel_and_not_last = true;
            } else {
              delete this.tmp.parallel_and_not_last;
            }
            entry_item_ids.push("" + CSL2.getCite.call(this, sortedItems[j][0], sortedItems[j][1]));
            this.tmp.cite_index++;
            skips[sortedItems[j][0].id] = true;
          }
        } else if (!this.registry.registry[item.id].siblings) {
          this.tmp.term_predecessor = false;
          this.tmp.cite_index = 0;
          entry_item_ids.push("" + CSL2.getCite.call(this, item));
          if (bibsection && bibsection.page_start && bibsection.page_length) {
            page_item_count += 1;
          }
        }
        entry_item_data.push("");
        this.tmp.bibliography_pos += 1;
        processed_item_ids.push(entry_item_ids);
        this.output.endTag("bib_entry");
        if (this.output.queue[0].blobs.length && this.output.queue[0].blobs[0].blobs.length) {
          if (!this.output.queue[0].blobs[0].blobs[0].strings) {
            topblobs = this.output.queue[0].blobs;
          } else {
            topblobs = this.output.queue[0].blobs[0].blobs;
          }
          topblobs[0].strings.prefix = this.bibliography.opt.layout_prefix + topblobs[0].strings.prefix;
        }
        for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
          CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[j]);
        }
        for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
          this.output.adjust.upward(this.output.queue[j]);
          this.output.adjust.leftward(this.output.queue[j]);
          this.output.adjust.downward(this.output.queue[j], true);
          this.output.adjust.fix(this.output.queue[j]);
        }
        res = this.output.string(this, this.output.queue)[0];
        if (!res && this.opt.update_mode === CSL2.NUMERIC) {
          var err = ret.length + 1 + ". [CSL STYLE ERROR: reference with no printed form.]";
          res = CSL2.Output.Formats[this.opt.mode]["@bibliography/entry"](this, err);
        }
        if (res) {
          ret.push(res);
        }
      }
      var done = false;
      if (bibsection && bibsection.page_start && bibsection.page_length) {
        var last_expected_id = input.slice(-1)[0];
        var last_seen_id = processed_item_ids.slice(-1)[0];
        if (!last_expected_id || !last_seen_id || last_expected_id == last_seen_id) {
          done = true;
        }
      }
      this.tmp.disambig_override = false;
      return [processed_item_ids, ret, done];
    };
    CSL2.Engine.prototype.setCitationId = function(citation, force) {
      var ret, id2, direction;
      ret = false;
      if (!citation.citationID || force) {
        id2 = Math.floor(Math.random() * 1e14);
        while (true) {
          direction = 0;
          if (!this.registry.citationreg.citationById[id2]) {
            citation.citationID = "a" + id2.toString(32);
            break;
          } else if (!direction && id2 < 5e13) {
            direction = 1;
          } else {
            direction = -1;
          }
          if (direction === 1) {
            id2 += 1;
          } else {
            id2 += -1;
          }
        }
        ret = "" + id2;
      }
      this.registry.citationreg.citationById[citation.citationID] = citation;
      return ret;
    };
    CSL2.Engine.prototype.rebuildProcessorState = function(citations, mode, uncitedItemIDs) {
      if (!citations) {
        citations = [];
      }
      if (!mode) {
        mode = "html";
      }
      var doneIDs = {};
      var itemIDs = [];
      for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
        for (var j = 0, jlen = citations[i].citationItems.length; j < jlen; j += 1) {
          var itemID = "" + citations[i].citationItems[j].id;
          if (!doneIDs[itemID]) {
            itemIDs.push(itemID);
          }
          doneIDs[itemID] = true;
        }
      }
      this.updateItems(itemIDs);
      var pre = [];
      var post = [];
      var ret = [];
      var oldMode = this.opt.mode;
      this.setOutputFormat(mode);
      for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
        var res = this.processCitationCluster(citations[i], pre, post, CSL2.ASSUME_ALL_ITEMS_REGISTERED);
        pre.push([citations[i].citationID, citations[i].properties.noteIndex]);
        for (var j = 0, jlen = res[1].length; j < jlen; j += 1) {
          var index6 = res[1][j][0];
          ret[index6] = [
            pre[index6][0],
            pre[index6][1],
            res[1][j][1]
          ];
        }
      }
      this.updateUncitedItems(uncitedItemIDs);
      this.setOutputFormat(oldMode);
      return ret;
    };
    CSL2.Engine.prototype.restoreProcessorState = function(citations) {
      var i, ilen, j, jlen, item, Item, newitem, citationList, itemList, sortedItems;
      citationList = [];
      itemList = [];
      if (!citations) {
        citations = [];
      }
      var indexNumbers = [];
      var citationIds = {};
      for (i = 0, ilen = citations.length; i < ilen; i += 1) {
        if (citationIds[citations[i].citationID]) {
          this.setCitationId(citations[i], true);
        }
        citationIds[citations[i].citationID] = true;
        indexNumbers.push(citations[i].properties.index);
      }
      var oldCitations = citations.slice();
      oldCitations.sort(function(a2, b) {
        if (a2.properties.index < b.properties.index) {
          return -1;
        } else if (a2.properties.index > b.properties.index) {
          return 1;
        } else {
          return 0;
        }
      });
      for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
        oldCitations[i].properties.index = i;
      }
      for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
        sortedItems = [];
        for (j = 0, jlen = oldCitations[i].citationItems.length; j < jlen; j += 1) {
          item = oldCitations[i].citationItems[j];
          if (typeof item.sortkeys === "undefined") {
            item.sortkeys = [];
          }
          Item = this.retrieveItem("" + item.id);
          newitem = [Item, item];
          sortedItems.push(newitem);
          oldCitations[i].citationItems[j].item = Item;
          itemList.push("" + item.id);
        }
        if (!oldCitations[i].properties.unsorted) {
          sortedItems.sort(this.citation.srt.compareCompositeKeys);
        }
        oldCitations[i].sortedItems = sortedItems;
        this.registry.citationreg.citationById[oldCitations[i].citationID] = oldCitations[i];
      }
      this.updateItems(itemList);
      for (i = 0, ilen = citations.length; i < ilen; i += 1) {
        citationList.push(["" + citations[i].citationID, citations[i].properties.noteIndex]);
      }
      var ret = [];
      if (citations && citations.length) {
        ret = this.processCitationCluster(citations[0], [], citationList.slice(1));
      } else {
        this.registry = new CSL2.Registry(this);
        this.tmp = new CSL2.Engine.Tmp();
        this.disambiguate = new CSL2.Disambiguation(this);
      }
      return ret;
    };
    CSL2.Engine.prototype.updateItems = function(idList, nosort, rerun_ambigs, implicitUpdate) {
      var debug = false;
      var oldArea = this.tmp.area;
      var oldRoot = this.tmp.root;
      var oldExtension = this.tmp.extension;
      if (this.bibliography_sort.tokens.length === 0) {
        nosort = true;
      }
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      this.tmp.extension = "";
      if (!implicitUpdate) {
        this.tmp.loadedItemIDs = {};
      }
      if (debug) {
        CSL2.debug("--> init <--");
      }
      this.registry.init(idList);
      if (rerun_ambigs) {
        for (var ambig in this.registry.ambigcites) {
          this.registry.ambigsTouched[ambig] = true;
        }
      }
      this.registry.dodeletes(this.registry.myhash);
      this.registry.doinserts(this.registry.mylist);
      this.registry.dorefreshes();
      this.registry.rebuildlist(nosort);
      this.registry.setsortkeys();
      this.registry.setdisambigs();
      this.registry.sorttokens(nosort);
      this.registry.renumber();
      this.tmp.extension = oldExtension;
      this.tmp.area = oldArea;
      this.tmp.root = oldRoot;
      return this.registry.getSortedIds();
    };
    CSL2.Engine.prototype.updateUncitedItems = function(idList, nosort) {
      var idHash;
      var oldArea = this.tmp.area;
      var oldRoot = this.tmp.root;
      var oldExtension = this.tmp.extension;
      if (this.bibliography_sort.tokens.length === 0) {
        nosort = true;
      }
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      this.tmp.extension = "";
      this.tmp.loadedItemIDs = {};
      if (!idList) {
        idList = [];
      }
      if (typeof idList == "object") {
        if (typeof idList.length == "undefined") {
          idHash = idList;
          idList = [];
          for (var key in idHash) {
            idList.push(key);
          }
        } else if (typeof idList.length == "number") {
          idHash = {};
          for (var i = 0, ilen = idList.length; i < ilen; i += 1) {
            idHash[idList[i]] = true;
          }
        }
      }
      this.registry.init(idList, true);
      this.registry.dopurge(idHash);
      this.registry.doinserts(this.registry.mylist);
      this.registry.dorefreshes();
      this.registry.rebuildlist(nosort);
      this.registry.setsortkeys();
      this.registry.setdisambigs();
      this.registry.sorttokens(nosort);
      this.registry.renumber();
      this.tmp.extension = oldExtension;
      this.tmp.area = oldArea;
      this.tmp.root = oldRoot;
      return this.registry.getSortedIds();
    };
    CSL2.localeResolve = function(langstr, defaultLocale) {
      var ret, langlst;
      if (!defaultLocale) {
        defaultLocale = "en-US";
      }
      if (!langstr) {
        langstr = defaultLocale;
      }
      ret = {};
      langlst = langstr.split(/[\-_]/);
      ret.base = CSL2.LANG_BASES[langlst[0]];
      if (typeof ret.base === "undefined") {
        return { base: defaultLocale, best: langstr, bare: langlst[0] };
      }
      if (langlst.length === 1) {
        ret.generic = true;
      }
      if (langlst.length === 1 || langlst[1] === "x") {
        ret.best = ret.base.replace("_", "-");
      } else {
        ret.best = langlst.slice(0, 2).join("-");
      }
      ret.base = ret.base.replace("_", "-");
      ret.bare = langlst[0];
      return ret;
    };
    CSL2.Engine.prototype.localeConfigure = function(langspec, beShy) {
      var localexml;
      if (beShy && this.locale[langspec.best]) {
        return;
      }
      if (langspec.best === "en-US") {
        localexml = CSL2.setupXml(this.sys.retrieveLocale("en-US"));
        this.localeSet(localexml, "en-US", langspec.best);
      } else if (langspec.best !== "en-US") {
        if (langspec.base !== langspec.best) {
          localexml = CSL2.setupXml(this.sys.retrieveLocale(langspec.base));
          this.localeSet(localexml, langspec.base, langspec.best);
        }
        localexml = CSL2.setupXml(this.sys.retrieveLocale(langspec.best));
        this.localeSet(localexml, langspec.best, langspec.best);
      }
      this.localeSet(this.cslXml, "", langspec.best);
      this.localeSet(this.cslXml, langspec.bare, langspec.best);
      if (langspec.base !== langspec.best) {
        this.localeSet(this.cslXml, langspec.base, langspec.best);
      }
      this.localeSet(this.cslXml, langspec.best, langspec.best);
      if (typeof this.locale[langspec.best].terms["page-range-delimiter"] === "undefined") {
        if (["fr", "pt"].indexOf(langspec.best.slice(0, 2).toLowerCase()) > -1) {
          this.locale[langspec.best].terms["page-range-delimiter"] = "-";
        } else {
          this.locale[langspec.best].terms["page-range-delimiter"] = "\u2013";
        }
      }
      if (typeof this.locale[langspec.best].terms["year-range-delimiter"] === "undefined") {
        this.locale[langspec.best].terms["year-range-delimiter"] = "\u2013";
      }
      if (typeof this.locale[langspec.best].terms["citation-range-delimiter"] === "undefined") {
        this.locale[langspec.best].terms["citation-range-delimiter"] = "\u2013";
      }
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
        var localeLists = ["default-locale", "locale-sort", "locale-translit", "locale-translat"];
        for (var i = 0, ilen = localeLists.length; i < ilen; i += 1) {
          for (var j = 0, jlen = this.opt[localeLists[i]].length; j < jlen; j += 1) {
            this.opt[localeLists[i]][j] = this.opt[localeLists[i]][j].toLowerCase();
          }
        }
        this.opt.lang = this.opt.lang.toLowerCase();
      }
    };
    CSL2.Engine.prototype.localeSet = function(myxml, lang_in, lang_out) {
      var blob, locale2, nodes, attributes, pos, term, form, termname, styleopts, date, attrname, len, genderform, target, i, ilen;
      lang_in = lang_in.replace("_", "-");
      lang_out = lang_out.replace("_", "-");
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
        lang_in = lang_in.toLowerCase();
        lang_out = lang_out.toLowerCase();
      }
      if (!this.locale[lang_out]) {
        this.locale[lang_out] = {};
        this.locale[lang_out].terms = {};
        this.locale[lang_out].opts = {};
        this.locale[lang_out].opts["skip-words"] = CSL2.SKIP_WORDS;
        if (!this.locale[lang_out].opts["leading-noise-words"]) {
          this.locale[lang_out].opts["leading-noise-words"] = [];
        }
        this.locale[lang_out].dates = {};
        this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
        this.locale[lang_out]["noun-genders"] = {};
      }
      locale2 = myxml.makeXml();
      if (myxml.nodeNameIs(myxml.dataObj, "locale")) {
        locale2 = myxml.dataObj;
      } else {
        nodes = myxml.getNodesByName(myxml.dataObj, "locale");
        var foundLocale = false;
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          blob = nodes[pos];
          if (!foundLocale && myxml.getAttributeValue(blob, "lang", "xml") === lang_in) {
            locale2 = blob;
            foundLocale = true;
          } else {
            var lang = myxml.getAttributeValue(blob, "lang", "xml");
            var style_options = myxml.getNodesByName(blob, "style-options");
            if (lang && style_options && style_options.length) {
              var jurispref = myxml.getAttributeValue(style_options[0], "jurisdiction-preference");
              if (jurispref) {
                if (!this.locale[lang]) {
                  this.locale[lang] = {
                    opts: {}
                  };
                }
                this.locale[lang].opts["jurisdiction-preference"] = jurispref.split(/\s+/);
              }
            }
          }
        }
      }
      nodes = myxml.getNodesByName(locale2, "type");
      for (i = 0, ilen = myxml.numberofnodes(nodes); i < ilen; i += 1) {
        var typenode = nodes[i];
        var type2 = myxml.getAttributeValue(typenode, "name");
        var gender = myxml.getAttributeValue(typenode, "gender");
        this.opt.gender[type2] = gender;
      }
      var hasCslOrdinals101 = myxml.getNodesByName(locale2, "term", "ordinal").length;
      if (hasCslOrdinals101) {
        for (var key in this.locale[lang_out].ord.keys) {
          delete this.locale[lang_out].terms[key];
        }
        this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
      }
      nodes = myxml.getNodesByName(locale2, "term");
      var ordinals101 = { "last-digit": {}, "last-two-digits": {}, "whole-number": {} };
      var ordinals101_toggle = false;
      var genderized_terms = {};
      for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
        term = nodes[pos];
        termname = myxml.getAttributeValue(term, "name");
        if (termname === "sub verbo") {
          termname = "sub-verbo";
        }
        if (termname.slice(0, 7) === "ordinal") {
          if (termname === "ordinal") {
            ordinals101_toggle = true;
          } else {
            var match = myxml.getAttributeValue(term, "match");
            var termstub = termname.slice(8);
            var genderform = myxml.getAttributeValue(term, "gender-form");
            if (!genderform) {
              genderform = "neuter";
            }
            if (!match) {
              match = "last-two-digits";
              if (termstub.slice(0, 1) === "0") {
                match = "last-digit";
              }
            }
            if (termstub.slice(0, 1) === "0") {
              termstub = termstub.slice(1);
            }
            if (!ordinals101[match][termstub]) {
              ordinals101[match][termstub] = {};
            }
            ordinals101[match][termstub][genderform] = termname;
          }
          this.locale[lang_out].ord.keys[termname] = true;
        }
        if (typeof this.locale[lang_out].terms[termname] === "undefined") {
          this.locale[lang_out].terms[termname] = {};
        }
        form = "long";
        genderform = false;
        if (myxml.getAttributeValue(term, "form")) {
          form = myxml.getAttributeValue(term, "form");
        }
        if (myxml.getAttributeValue(term, "gender-form")) {
          genderform = myxml.getAttributeValue(term, "gender-form");
        }
        if (myxml.getAttributeValue(term, "gender")) {
          this.locale[lang_out]["noun-genders"][termname] = myxml.getAttributeValue(term, "gender");
        }
        if (genderform) {
          this.locale[lang_out].terms[termname][genderform] = {};
          this.locale[lang_out].terms[termname][genderform][form] = [];
          target = this.locale[lang_out].terms[termname][genderform];
          genderized_terms[termname] = true;
        } else {
          this.locale[lang_out].terms[termname][form] = [];
          target = this.locale[lang_out].terms[termname];
        }
        if (myxml.numberofnodes(myxml.getNodesByName(term, "multiple"))) {
          target[form][0] = myxml.getNodeValue(term, "single");
          if (target[form][0].indexOf("%s") > -1) {
            this.opt.hasPlaceholderTerm = true;
          }
          target[form][1] = myxml.getNodeValue(term, "multiple");
          if (target[form][1].indexOf("%s") > -1) {
            this.opt.hasPlaceholderTerm = true;
          }
        } else {
          target[form] = myxml.getNodeValue(term);
          if (target[form].indexOf("%s") > -1) {
            this.opt.hasPlaceholderTerm = true;
          }
        }
      }
      if (!this.locale[lang_out].terms.supplement) {
        this.locale[lang_out].terms.supplement = {};
      }
      if (!this.locale[lang_out].terms.supplement["long"]) {
        this.locale[lang_out].terms.supplement["long"] = ["supplement", "supplements"];
      }
      if (ordinals101_toggle) {
        for (var ikey in genderized_terms) {
          var gender_segments = {};
          var form_segments = 0;
          for (var jkey in this.locale[lang_out].terms[ikey]) {
            if (["masculine", "feminine"].indexOf(jkey) > -1) {
              gender_segments[jkey] = this.locale[lang_out].terms[ikey][jkey];
            } else {
              form_segments += 1;
            }
          }
          if (!form_segments) {
            if (gender_segments.feminine) {
              for (var jkey in gender_segments.feminine) {
                this.locale[lang_out].terms[ikey][jkey] = gender_segments.feminine[jkey];
              }
            } else if (gender_segments.masculine) {
              for (var jkey in gender_segments.masculine) {
                this.locale[lang_out].terms[ikey][jkey] = gender_segments.masculine[jkey];
              }
            }
          }
        }
        this.locale[lang_out].ord["1.0.1"] = ordinals101;
      }
      for (termname in this.locale[lang_out].terms) {
        for (i = 0, ilen = 2; i < ilen; i += 1) {
          genderform = CSL2.GENDERS[i];
          if (this.locale[lang_out].terms[termname][genderform]) {
            for (form in this.locale[lang_out].terms[termname]) {
              if (!this.locale[lang_out].terms[termname][genderform][form]) {
                this.locale[lang_out].terms[termname][genderform][form] = this.locale[lang_out].terms[termname][form];
              }
            }
          }
        }
      }
      nodes = myxml.getNodesByName(locale2, "style-options");
      for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
        if (true) {
          styleopts = nodes[pos];
          attributes = myxml.attributes(styleopts);
          for (attrname in attributes) {
            if (attributes.hasOwnProperty(attrname)) {
              if (attrname === "@punctuation-in-quote" || attrname === "@limit-day-ordinals-to-day-1") {
                if (attributes[attrname] === "true") {
                  this.locale[lang_out].opts[attrname.slice(1)] = true;
                } else {
                  this.locale[lang_out].opts[attrname.slice(1)] = false;
                }
              } else if (attrname === "@jurisdiction-preference") {
                var jurisdiction_preference = attributes[attrname].split(/\s+/);
                this.locale[lang_out].opts[attrname.slice(1)] = jurisdiction_preference;
              } else if (attrname === "@skip-words") {
                var skip_words = attributes[attrname].split(/\s*,\s*/);
                this.locale[lang_out].opts[attrname.slice(1)] = skip_words;
              } else if (attrname === "@leading-noise-words") {
                var val = attributes[attrname].split(/\s*,\s*/);
                this.locale[lang_out].opts["leading-noise-words"] = val;
              } else if (attrname === "@name-as-sort-order") {
                this.locale[lang_out].opts["name-as-sort-order"] = {};
                var lst = attributes[attrname].split(/\s+/);
                for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                  this.locale[lang_out].opts["name-as-sort-order"][lst[i]] = true;
                }
              } else if (attrname === "@name-as-reverse-order") {
                this.locale[lang_out].opts["name-as-reverse-order"] = {};
                var lst = attributes[attrname].split(/\s+/);
                for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                  this.locale[lang_out].opts["name-as-reverse-order"][lst[i]] = true;
                }
              } else if (attrname === "@name-never-short") {
                this.locale[lang_out].opts["name-never-short"] = {};
                var lst = attributes[attrname].split(/\s+/);
                for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                  this.locale[lang_out].opts["name-never-short"][lst[i]] = true;
                }
              }
            }
          }
        }
      }
      nodes = myxml.getNodesByName(locale2, "date");
      for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
        if (true) {
          var date = nodes[pos];
          this.locale[lang_out].dates[myxml.getAttributeValue(date, "form")] = date;
        }
      }
      CSL2.SET_COURT_CLASSES(this, lang_out, myxml, locale2);
    };
    CSL2.getLocaleNames = function(myxml, preferredLocale) {
      var stylexml = CSL2.setupXml(myxml);
      function extendLocaleList(localeList, locale2) {
        var forms = ["base", "best"];
        if (locale2) {
          var normalizedLocale = CSL2.localeResolve(locale2);
          for (var i2 = 0, ilen2 = forms.length; i2 < ilen2; i2++) {
            if (normalizedLocale[forms[i2]] && localeList.indexOf(normalizedLocale[forms[i2]]) === -1) {
              localeList.push(normalizedLocale[forms[i2]]);
            }
          }
        }
      }
      var localeIDs = ["en-US"];
      function sniffLocaleOnOneNodeName(nodeName) {
        var nodes = stylexml.getNodesByName(stylexml.dataObj, nodeName);
        for (var i2 = 0, ilen2 = nodes.length; i2 < ilen2; i2++) {
          var nodeLocales = stylexml.getAttributeValue(nodes[i2], "locale");
          if (nodeLocales) {
            nodeLocales = nodeLocales.split(/ +/);
            for (var j = 0, jlen = nodeLocales.length; j < jlen; j++) {
              this.extendLocaleList(localeIDs, nodeLocales[j]);
            }
          }
        }
      }
      extendLocaleList(localeIDs, preferredLocale);
      var styleNode = stylexml.getNodesByName(stylexml.dataObj, "style")[0];
      var defaultLocale = stylexml.getAttributeValue(styleNode, "default-locale");
      extendLocaleList(localeIDs, defaultLocale);
      var nodeNames = ["layout", "if", "else-if", "condition"];
      for (var i = 0, ilen = nodeNames.length; i < ilen; i++) {
        sniffLocaleOnOneNodeName(stylexml, localeIDs, nodeNames[i]);
      }
      return localeIDs;
    };
    CSL2.Node = {};
    CSL2.Node.bibliography = {
      build: function(state, target) {
        if (this.tokentype === CSL2.START) {
          state.build.area = "bibliography";
          state.build.root = "bibliography";
          state.build.extension = "";
          var func = function(state2) {
            state2.tmp.area = "bibliography";
            state2.tmp.root = "bibliography";
            state2.tmp.extension = "";
          };
          this.execs.push(func);
        }
        target.push(this);
      }
    };
    CSL2.Node.choose = {
      build: function(state, target) {
        var func;
        if (this.tokentype === CSL2.START) {
          func = function(state2) {
            state2.tmp.jump.push(void 0, CSL2.LITERAL);
          };
        }
        if (this.tokentype === CSL2.END) {
          func = function(state2) {
            state2.tmp.jump.pop();
          };
        }
        this.execs.push(func);
        target.push(this);
      },
      configure: function(state, pos) {
        if (this.tokentype === CSL2.END) {
          state.configure.fail.push(pos);
          state.configure.succeed.push(pos);
        } else {
          state.configure.fail.pop();
          state.configure.succeed.pop();
        }
      }
    };
    CSL2.Node.citation = {
      build: function(state, target) {
        if (this.tokentype === CSL2.START) {
          state.build.area = "citation";
          state.build.root = "citation";
          state.build.extension = "";
          var func = function(state2) {
            state2.tmp.area = "citation";
            state2.tmp.root = "citation";
            state2.tmp.extension = "";
          };
          this.execs.push(func);
        }
        if (this.tokentype === CSL2.END) {
          state.opt.grouped_sort = state.opt.xclass === "in-text" && (state.citation.opt.collapse && state.citation.opt.collapse.length) || state.citation.opt.cite_group_delimiter && state.citation.opt.cite_group_delimiter.length && state.opt.update_mode !== CSL2.POSITION && state.opt.update_mode !== CSL2.NUMERIC;
          if (state.opt.grouped_sort && state.citation_sort.opt.sort_directions.length) {
            var firstkey = state.citation_sort.opt.sort_directions[0].slice();
            state.citation_sort.opt.sort_directions = [firstkey].concat(state.citation_sort.opt.sort_directions);
          }
          state.citation.srt = new CSL2.Registry.Comparifier(state, "citation_sort");
        }
        target.push(this);
      }
    };
    CSL2.Node["#comment"] = {
      build: function() {
      }
    };
    CSL2.Node.date = {
      build: function(state, target) {
        var func, date_obj, len, pos, part, dpx, parts, mypos, start3, end2;
        if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
          state.dateput.string(state, state.dateput.queue);
          state.tmp.date_token = CSL2.Util.cloneToken(this);
          state.tmp.date_token.strings.prefix = "";
          state.tmp.date_token.strings.suffix = "";
          state.dateput.openLevel(this);
          state.build.date_parts = [];
          state.build.date_variables = this.variables;
          if (!state.build.extension) {
            CSL2.Util.substituteStart.call(this, state, target);
          }
          if (state.build.extension) {
            func = CSL2.dateMacroAsSortKey;
          } else {
            func = function(state2, Item, item) {
              var dp;
              state2.tmp.element_rendered_ok = false;
              state2.tmp.donesies = [];
              state2.tmp.dateparts = [];
              dp = [];
              if (this.variables.length && !(state2.tmp.just_looking && this.variables[0] === "accessed")) {
                date_obj = Item[this.variables[0]];
                if (typeof date_obj === "undefined") {
                  date_obj = { "date-parts": [[0]] };
                  if (state2.opt.development_extensions.locator_date_and_revision) {
                    if (item && this.variables[0] === "locator-date" && item["locator-date"]) {
                      date_obj = item["locator-date"];
                    }
                  }
                }
                state2.tmp.date_object = date_obj;
                len = this.dateparts.length;
                for (pos = 0; pos < len; pos += 1) {
                  part = this.dateparts[pos];
                  if (typeof state2.tmp.date_object[part + "_end"] !== "undefined") {
                    dp.push(part);
                  } else if (part === "month" && typeof state2.tmp.date_object.season_end !== "undefined") {
                    dp.push(part);
                  }
                }
                dpx = [];
                parts = ["year", "month", "day"];
                len = parts.length;
                for (pos = 0; pos < len; pos += 1) {
                  if (dp.indexOf(parts[pos]) > -1) {
                    dpx.push(parts[pos]);
                  }
                }
                dp = dpx.slice();
                mypos = 2;
                len = dp.length;
                for (pos = 0; pos < len; pos += 1) {
                  part = dp[pos];
                  start3 = state2.tmp.date_object[part];
                  end2 = state2.tmp.date_object[part + "_end"];
                  if (start3 !== end2) {
                    mypos = pos;
                    break;
                  }
                }
                state2.tmp.date_collapse_at = dp.slice(mypos);
              } else {
                state2.tmp.date_object = false;
              }
            };
          }
          this.execs.push(func);
          func = function(state2, Item) {
            if (!Item[this.variables[0]]) {
              return;
            }
            state2.output.startTag("date", this);
            if (this.variables[0] === "issued" && (Item.type === "legal_case" || Item.type === "legislation") && state2.opt.disable_duplicate_year_suppression.indexOf(Item.country) === -1 && !state2.tmp.extension && "" + Item["collection-number"] === "" + state2.tmp.date_object.year && this.dateparts.length === 1 && this.dateparts[0] === "year") {
              for (var key in state2.tmp.date_object) {
                if (state2.tmp.date_object.hasOwnProperty(key)) {
                  if (key.slice(0, 4) === "year") {
                    state2.tmp.issued_date = {};
                    var lst = state2.output.current.mystack.slice(-2)[0].blobs;
                    state2.tmp.issued_date.list = lst;
                    state2.tmp.issued_date.pos = lst.length - 1;
                  }
                }
              }
            }
          };
          this.execs.push(func);
        }
        if (!state.build.extension && (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON)) {
          func = function(state2, Item) {
            if (!Item[this.variables[0]]) {
              return;
            }
            state2.output.endTag();
          };
          this.execs.push(func);
        }
        target.push(this);
        if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
          if (!state.build.extension) {
            CSL2.Util.substituteEnd.call(this, state, target);
          }
        }
      }
    };
    CSL2.Node["date-part"] = {
      build: function(state, target) {
        var func, pos, len, first_date, value, value_end, real, have_collapsed, invoked, precondition, known_year, bc, ad, bc_end, ad_end, ready, curr, dcurr, number, num, formatter, item, blob;
        if (!this.strings.form) {
          this.strings.form = "long";
        }
        state.build.date_parts.push(this.strings.name);
        var date_variable = state.build.date_variables[0];
        function formatAndStrip(myform, gender, val) {
          if (!val) {
            return val;
          }
          val = "" + CSL2.Util.Dates[this.strings.name][myform](state, val, gender, this.default_locale);
          if (this.strings.name === "month") {
            if (state.tmp.strip_periods) {
              val = val.replace(/\./g, "");
            } else {
              for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                  val = val.replace(/\./g, "");
                  break;
                }
              }
            }
          }
          return val;
        }
        func = function(state2, Item) {
          if (!state2.tmp.date_object) {
            return;
          } else {
            state2.tmp.probably_rendered_something = true;
          }
          var last_string_output = "";
          first_date = true;
          value = "";
          value_end = "";
          state2.tmp.donesies.push(this.strings.name);
          if (state2.tmp.date_object.literal && this.strings.name === "year") {
            last_string_output = state2.tmp.date_object.literal;
            state2.output.append(state2.tmp.date_object.literal, this);
          }
          if (state2.tmp.date_object) {
            value = state2.tmp.date_object[this.strings.name];
            value_end = state2.tmp.date_object[this.strings.name + "_end"];
          }
          if (this.strings.name === "year" && value === 0 && !state2.tmp.suppress_decorations) {
            value = false;
          }
          real = !state2.tmp.suppress_decorations;
          have_collapsed = state2.tmp.have_collapsed;
          invoked = state2[state2.tmp.area].opt.collapse === "year-suffix" || state2[state2.tmp.area].opt.collapse === "year-suffix-ranged";
          precondition = state2.opt["disambiguate-add-year-suffix"];
          if (real && precondition && invoked) {
            state2.tmp.years_used.push(value);
            known_year = state2.tmp.last_years_used.length >= state2.tmp.years_used.length;
            if (known_year && have_collapsed) {
              if (state2.tmp.last_years_used[state2.tmp.years_used.length - 1] === value) {
                value = false;
              }
            }
          }
          if (typeof value !== "undefined") {
            bc = false;
            ad = false;
            bc_end = false;
            ad_end = false;
            if (this.strings.name === "year") {
              if (parseInt(value, 10) < 500 && parseInt(value, 10) > 0) {
                ad = state2.getTerm("ad");
              }
              if (parseInt(value, 10) < 0) {
                bc = state2.getTerm("bc");
                value = parseInt(value, 10) * -1;
              }
              if (value_end) {
                if (parseInt(value_end, 10) < 500 && parseInt(value_end, 10) > 0) {
                  ad_end = state2.getTerm("ad");
                }
                if (parseInt(value_end, 10) < 0) {
                  bc_end = state2.getTerm("bc");
                  value_end = parseInt(value_end, 10) * -1;
                }
              }
            }
            var monthnameid = "" + state2.tmp.date_object.month;
            while (monthnameid.length < 2) {
              monthnameid = "0" + monthnameid;
            }
            monthnameid = "month-" + monthnameid;
            var gender = state2.locale[state2.opt.lang]["noun-genders"][monthnameid];
            if (this.strings.form) {
              var myform = this.strings.form;
              var myform_end = this.strings.form;
              if (this.strings.name === "day") {
                if (myform === "ordinal" && state2.locale[state2.opt.lang].opts["limit-day-ordinals-to-day-1"]) {
                  if (value != 1) {
                    myform = "numeric";
                  }
                  if (value_end != 1) {
                    myform_end = "numeric";
                  }
                }
              }
              value = formatAndStrip.call(this, myform, gender, value);
              value_end = formatAndStrip.call(this, myform_end, gender, value_end);
            }
            state2.output.openLevel("empty");
            if (state2.tmp.date_collapse_at.length) {
              ready = true;
              len = state2.tmp.date_collapse_at.length;
              for (pos = 0; pos < len; pos += 1) {
                item = state2.tmp.date_collapse_at[pos];
                if (state2.tmp.donesies.indexOf(item) === -1) {
                  ready = false;
                  break;
                }
              }
              if (ready) {
                if ("" + value_end !== "0") {
                  if (state2.dateput.queue.length === 0) {
                    first_date = true;
                  }
                  if (state2.opt["year-range-format"] && state2.opt["year-range-format"] !== "expanded" && !state2.tmp.date_object.day && !state2.tmp.date_object.month && !state2.tmp.date_object.season && this.strings.name === "year" && value && value_end) {
                    value_end = state2.fun.year_mangler(value + "-" + value_end, true);
                    var range_delimiter = state2.getTerm("year-range-delimiter");
                    value_end = value_end.slice(value_end.indexOf(range_delimiter) + 1);
                  }
                  last_string_output = value_end;
                  state2.dateput.append(value_end, this);
                  if (first_date) {
                    blob = state2.dateput.current.value().blobs[0];
                    if (blob) {
                      blob.strings.prefix = "";
                    }
                  }
                }
                last_string_output = value;
                state2.output.append(value, this);
                curr = state2.output.current.value();
                blob = curr.blobs[curr.blobs.length - 1];
                if (blob) {
                  blob.strings.suffix = "";
                }
                if (this.strings["range-delimiter"]) {
                  state2.output.append(this.strings["range-delimiter"]);
                } else {
                  state2.output.append(state2.getTerm("year-range-delimiter"), "empty");
                }
                state2.dateput.closeLevel();
                dcurr = state2.dateput.current.value();
                curr.blobs = curr.blobs.concat(dcurr);
                state2.dateput.string(state2, state2.dateput.queue);
                state2.dateput.openLevel(state2.tmp.date_token);
                state2.tmp.date_collapse_at = [];
              } else {
                last_string_output = value;
                state2.output.append(value, this);
                if (state2.tmp.date_collapse_at.indexOf(this.strings.name) > -1) {
                  if ("" + value_end !== "0") {
                    if (state2.dateput.queue.length === 0) {
                      first_date = true;
                    }
                    state2.dateput.openLevel("empty");
                    last_string_output = value_end;
                    state2.dateput.append(value_end, this);
                    if (first_date) {
                      blob = state2.dateput.current.value().blobs[0];
                      if (blob) {
                        blob.strings.prefix = "";
                      }
                    }
                    if (bc) {
                      last_string_output = bc;
                      state2.dateput.append(bc);
                    }
                    if (ad) {
                      last_string_output = ad;
                      state2.dateput.append(ad);
                    }
                    state2.dateput.closeLevel();
                  }
                }
              }
            } else {
              last_string_output = value;
              state2.output.append(value, this);
            }
            if (bc) {
              last_string_output = bc;
              state2.output.append(bc);
            }
            if (ad) {
              last_string_output = ad;
              state2.output.append(ad);
            }
            state2.output.closeLevel();
          } else if (this.strings.name === "month") {
            if (state2.tmp.date_object.season) {
              value = "" + state2.tmp.date_object.season;
              if (value && value.match(/^[1-4]$/)) {
                state2.tmp.group_context.tip.variable_success = true;
                last_string_output = "winter";
                state2.output.append(state2.getTerm("season-0" + value), this);
              } else if (value) {
                last_string_output = value;
                state2.output.append(value, this);
              }
            }
          }
          state2.tmp.value = [];
          if (Item[date_variable] && (value || state2.tmp.have_collapsed) && !state2.opt.has_year_suffix && this.strings.name === "year" && !state2.tmp.just_looking) {
            if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.has_done_year_suffix) {
              state2.tmp.has_done_year_suffix = true;
              last_string_output = "x";
              num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
              number = new CSL2.NumericBlob(state2, false, num, this, Item.id);
              this.successor_prefix = state2[state2.build.area].opt.layout_delimiter;
              this.splice_prefix = state2[state2.build.area].opt.layout_delimiter;
              formatter = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
              number.setFormatter(formatter);
              if (state2[state2.tmp.area].opt.collapse === "year-suffix-ranged") {
                number.range_prefix = state2.getTerm("citation-range-delimiter");
              }
              if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                number.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
              } else if (state2[state2.tmp.area].opt["year-suffix-delimiter"]) {
                number.successor_prefix = state2[state2.tmp.area].opt["year-suffix-delimiter"];
              } else {
                number.successor_prefix = state2[state2.tmp.area].opt.layout_delimiter;
              }
              number.UGLY_DELIMITER_SUPPRESS_HACK = true;
              state2.output.append(number, "literal");
            }
          }
          if (last_string_output && !state2.tmp.group_context.tip.condition) {
            state2.tmp.just_did_number = last_string_output.match(/[0-9]$/);
            if (state2.output.current.tip.strings.suffix) {
              state2.tmp.just_did_number = false;
            }
          }
        };
        this.execs.push(func);
        target.push(this);
      }
    };
    CSL2.Node["else-if"] = {
      build: function(state, target) {
        CSL2.Conditions.TopNode.call(this, state, target);
        target.push(this);
      },
      configure: function(state, pos) {
        CSL2.Conditions.Configure.call(this, state, pos);
      }
    };
    CSL2.Node["else"] = {
      build: function(state, target) {
        target.push(this);
      },
      configure: function(state, pos) {
        if (this.tokentype === CSL2.START) {
          state.configure.fail[state.configure.fail.length - 1] = pos;
        }
      }
    };
    CSL2.Node["et-al"] = {
      build: function(state, target) {
        if (state.build.area === "citation" || state.build.area === "bibliography") {
          var func = function(state2) {
            state2.tmp.etal_node = this;
            if (typeof this.strings.term === "string") {
              state2.tmp.etal_term = this.strings.term;
            }
          };
          this.execs.push(func);
        }
        target.push(this);
      }
    };
    CSL2.Node.group = {
      build: function(state, target, realGroup) {
        var func, execs;
        this.realGroup = realGroup;
        if (this.tokentype === CSL2.START) {
          CSL2.Util.substituteStart.call(this, state, target);
          if (state.build.substitute_level.value()) {
            state.build.substitute_level.replace(state.build.substitute_level.value() + 1);
          }
          if (!this.juris) {
            target.push(this);
          }
          func = function(state2) {
            state2.output.startTag("group", this);
            if (this.strings.label_form_override) {
              if (!state2.tmp.group_context.tip.label_form) {
                state2.tmp.group_context.tip.label_form = this.strings.label_form_override;
              }
            }
            if (this.strings.label_capitalize_if_first_override) {
              if (!state2.tmp.group_context.tip.label_capitalize_if_first) {
                state2.tmp.group_context.tip.label_capitalize_if_first = this.strings.label_capitalize_if_first_override;
              }
            }
            if (this.realGroup) {
              if (state2.tmp.group_context.tip.condition) {
                CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.prefix, null, this);
              }
              var condition = false;
              var force_suppress = false;
              if (state2.tmp.group_context.mystack.length) {
                state2.output.current.value().parent = state2.tmp.group_context.tip.output_tip;
              }
              var label_form = state2.tmp.group_context.tip.label_form;
              if (!label_form) {
                label_form = this.strings.label_form_override;
              }
              var label_capitalize_if_first = state2.tmp.group_context.tip.label_capitalize_if_first;
              if (!label_capitalize_if_first) {
                label_capitalize_if_first = this.strings.label_capitalize_if_first;
              }
              if (state2.tmp.group_context.tip.condition) {
                condition = state2.tmp.group_context.tip.condition;
                force_suppress = state2.tmp.group_context.tip.force_suppress;
              } else if (this.strings.reject) {
                condition = {
                  test: this.strings.reject,
                  not: true
                };
              } else if (this.strings.require) {
                condition = {
                  test: this.strings.require,
                  not: false
                };
              }
              var context = {
                old_term_predecessor: state2.tmp.term_predecessor,
                term_intended: false,
                variable_attempt: false,
                variable_success: false,
                variable_success_parent: state2.tmp.group_context.tip.variable_success,
                output_tip: state2.output.current.tip,
                label_form,
                label_static: state2.tmp.group_context.tip.label_static,
                label_capitalize_if_first,
                parallel_delimiter_override: this.strings.set_parallel_delimiter_override,
                parallel_delimiter_override_on_suppress: this.strings.set_parallel_delimiter_override_on_suppress,
                condition,
                force_suppress,
                done_vars: state2.tmp.group_context.tip.done_vars.slice()
              };
              if (this.non_parallel) {
                var non_parallel = state2.tmp.group_context.tip.non_parallel;
                if (!non_parallel) {
                  non_parallel = {};
                }
                Object.assign(non_parallel, this.non_parallel);
                context.non_parallel = non_parallel;
              }
              if (this.parallel_first) {
                var parallel_first = state2.tmp.group_context.tip.parallel_first;
                if (!parallel_first) {
                  parallel_first = {};
                }
                Object.assign(parallel_first, this.parallel_first);
                context.parallel_first = parallel_first;
              }
              if (this.parallel_last) {
                var parallel_last = state2.tmp.group_context.tip.parallel_last;
                if (!parallel_last) {
                  parallel_last = {};
                }
                Object.assign(parallel_last, this.parallel_last);
                context.parallel_last = parallel_last;
              }
              if (state2.tmp.abbrev_trimmer && state2.tmp.abbrev_trimmer.LAST_TO_FIRST && context.parallel_last) {
                if (!context.parallel_first) {
                  context.parallel_first = {};
                }
                for (var varname in state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                  if (context.parallel_last[varname]) {
                    context.parallel_first[varname] = true;
                    delete context.parallel_last[varname];
                  }
                }
              }
              state2.tmp.group_context.push(context);
              if (state2.tmp.abbrev_trimmer && this.parallel_last_to_first) {
                if (!state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                  state2.tmp.abbrev_trimmer.LAST_TO_FIRST = {};
                }
                for (var varname in this.parallel_last_to_first) {
                  state2.tmp.abbrev_trimmer.LAST_TO_FIRST[varname] = true;
                }
              }
            }
          };
          execs = [];
          execs.push(func);
          this.execs = execs.concat(this.execs);
          if (this.strings["has-publisher-and-publisher-place"]) {
            state.build["publisher-special"] = true;
            if (this.strings["subgroup-delimiter"]) {
              func = function(state2, Item) {
                if (Item.publisher && Item["publisher-place"]) {
                  var publisher_lst = Item.publisher.split(/;\s*/);
                  var publisher_place_lst = Item["publisher-place"].split(/;\s*/);
                  if (publisher_lst.length > 1 && publisher_lst.length === publisher_place_lst.length) {
                    state2.publisherOutput = new CSL2.PublisherOutput(state2, this);
                    state2.publisherOutput["publisher-list"] = publisher_lst;
                    state2.publisherOutput["publisher-place-list"] = publisher_place_lst;
                  }
                }
              };
              this.execs.push(func);
            }
          }
          if (this.juris) {
            var choose_start = new CSL2.Token("choose", CSL2.START);
            CSL2.Node.choose.build.call(choose_start, state, target);
            var if_start = new CSL2.Token("if", CSL2.START);
            func = function(macroName) {
              return function(Item, item) {
                return CSL2.INIT_JURISDICTION_MACROS(state, Item, item, macroName);
              };
            }(this.juris);
            if_start.tests ? {} : if_start.tests = [];
            if_start.tests.push(func);
            if_start.test = state.fun.match.any(if_start, state, if_start.tests);
            target.push(if_start);
            var text_node = new CSL2.Token("text", CSL2.SINGLETON);
            func = function(state2, Item, item) {
              var itemItem = Item;
              if (item && item["best-jurisdiction"] && this.juris === "juris-locator") {
                itemItem = item;
              }
              var next = 0;
              if (state2.juris[itemItem["best-jurisdiction"]][this.juris]) {
                while (next < state2.juris[itemItem["best-jurisdiction"]][this.juris].length) {
                  next = CSL2.tokenExec.call(state2, state2.juris[itemItem["best-jurisdiction"]][this.juris][next], Item, item);
                }
              }
            };
            text_node.juris = this.juris;
            text_node.execs.push(func);
            target.push(text_node);
            var if_end = new CSL2.Token("if", CSL2.END);
            CSL2.Node["if"].build.call(if_end, state, target);
            var else_start = new CSL2.Token("else", CSL2.START);
            CSL2.Node["else"].build.call(else_start, state, target);
          }
        }
        if (this.tokentype === CSL2.END) {
          if (state.build["publisher-special"]) {
            state.build["publisher-special"] = false;
            func = function(state2) {
              if (state2.publisherOutput) {
                state2.publisherOutput.render();
                state2.publisherOutput = false;
              }
            };
            this.execs.push(func);
          }
          func = function(state2, Item, item) {
            if (!state2.tmp.group_context.tip.condition) {
              if (state2.output.current.tip.strings.suffix) {
                state2.tmp.just_did_number = false;
              }
            }
            state2.output.endTag();
            if (this.realGroup) {
              var flags = state2.tmp.group_context.pop();
              if (flags.parallel_delimiter_override) {
                state2.tmp.group_context.tip.parallel_delimiter_override = flags.parallel_delimiter_override;
                if (!state2.tmp.just_looking && state2.registry.registry[Item.id].master) {
                  state2.registry.registry[Item.id].parallel_delimiter_override = flags.parallel_delimiter_override;
                }
              }
              if (flags.parallel_delimiter_override_on_suppress) {
                state2.tmp.group_context.tip.parallel_delimiter_override_on_suppress = flags.parallel_delimiter_override_on_suppress;
              }
              if (state2.tmp.area === "bibliography_sort") {
                var citationNumberIdx = flags.done_vars.indexOf("citation-number");
                if (this.strings.sort_direction && citationNumberIdx > -1 && state2.tmp.group_context.length() == 1) {
                  if (this.strings.sort_direction === CSL2.DESCENDING) {
                    state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.DESCENDING;
                  } else {
                    state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.ASCENDING;
                  }
                  flags.done_vars = flags.done_vars.slice(0, citationNumberIdx).concat(flags.done_vars.slice(citationNumberIdx + 1));
                }
              }
              if (flags.condition) {
                flags.force_suppress = CSL2.EVALUATE_GROUP_CONDITION(state2, flags);
              }
              if (state2.tmp.group_context.tip.condition) {
                state2.tmp.group_context.tip.force_suppress = flags.force_suppress;
              }
              if (!flags.force_suppress && (flags.variable_success || flags.term_intended && !flags.variable_attempt)) {
                if (!this.isJurisLocatorLabel) {
                  state2.tmp.group_context.tip.variable_success = true;
                }
                var blobs = state2.output.current.value().blobs;
                var pos = state2.output.current.value().blobs.length - 1;
                if (!state2.tmp.just_looking && (flags.non_parallel || flags.parallel_last || flags.parallel_first || flags.parallel_delimiter_override || flags.parallel_delimiter_override_on_suppress)) {
                  var hasRepeat = state2.parallel.checkRepeats(flags);
                  if (hasRepeat) {
                    if (blobs) {
                      blobs.pop();
                    }
                  }
                  if (state2.tmp.cite_index > 0 && (hasRepeat || !flags.parallel_first && !flags.parallel_last && !flags.non_parallel)) {
                    var info = state2.tmp.suppress_repeats[state2.tmp.cite_index - 1];
                    if (hasRepeat && flags.parallel_delimiter_override_on_suppress && (info.SIBLING || info.ORPHAN)) {
                      state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override_on_suppress;
                    } else if (flags.parallel_delimiter_override && info.SIBLING) {
                      state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override;
                    }
                  }
                }
              } else {
                state2.tmp.term_predecessor = flags.old_term_predecessor;
                state2.tmp.group_context.tip.variable_attempt = flags.variable_attempt;
                if (flags.force_suppress && !state2.tmp.group_context.tip.condition) {
                  state2.tmp.group_context.tip.variable_attempt = true;
                  state2.tmp.group_context.tip.variable_success = flags.variable_success_parent;
                }
                if (flags.force_suppress) {
                  for (var i = 0, ilen = flags.done_vars.length; i < ilen; i++) {
                    var doneVar = flags.done_vars[i];
                    for (var j = 0, jlen = state2.tmp.done_vars.length; j < jlen; j++) {
                      if (state2.tmp.done_vars[j] === doneVar) {
                        state2.tmp.done_vars = state2.tmp.done_vars.slice(0, j).concat(state2.tmp.done_vars.slice(j + 1));
                      }
                    }
                  }
                }
                if (state2.output.current.value().blobs) {
                  state2.output.current.value().blobs.pop();
                }
              }
            }
          };
          this.execs.push(func);
          if (this.juris) {
            var else_end = new CSL2.Token("else", CSL2.END);
            CSL2.Node["else"].build.call(else_end, state, target);
            var choose_end = new CSL2.Token("choose", CSL2.END);
            CSL2.Node.choose.build.call(choose_end, state, target);
          }
        }
        if (this.tokentype === CSL2.END) {
          if (!this.juris) {
            target.push(this);
          }
          if (state.build.substitute_level.value()) {
            state.build.substitute_level.replace(state.build.substitute_level.value() - 1);
          }
          CSL2.Util.substituteEnd.call(this, state, target);
        }
      }
    };
    CSL2.Node["if"] = {
      build: function(state, target) {
        CSL2.Conditions.TopNode.call(this, state, target);
        target.push(this);
      },
      configure: function(state, pos) {
        CSL2.Conditions.Configure.call(this, state, pos);
      }
    };
    CSL2.Node["conditions"] = {
      build: function(state) {
        if (this.tokentype === CSL2.START) {
          state.tmp.conditions.addMatch(this.match);
        }
        if (this.tokentype === CSL2.END) {
          state.tmp.conditions.matchCombine();
        }
      }
    };
    CSL2.Node["condition"] = {
      build: function(state) {
        if (this.tokentype === CSL2.SINGLETON) {
          var test = state.fun.match[this.match](this, state, this.tests);
          state.tmp.conditions.addTest(test);
        }
      }
    };
    CSL2.Conditions = {};
    CSL2.Conditions.TopNode = function(state) {
      var func;
      if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
        if (this.locale) {
          state.opt.lang = this.locale;
        }
        if (!this.tests || !this.tests.length) {
          state.tmp.conditions = new CSL2.Conditions.Engine(state, this);
        } else {
          this.test = state.fun.match[this.match](this, state, this.tests);
        }
        if (state.build.substitute_level.value() === 0) {
          func = function(state2) {
            state2.tmp.condition_counter++;
          };
          this.execs.push(func);
        }
      }
      if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
        if (state.build.substitute_level.value() === 0) {
          func = function(state2) {
            state2.tmp.condition_counter--;
            if (state2.tmp.condition_lang_counter_arr.length > 0) {
              var counter = state2.tmp.condition_lang_counter_arr.slice(-1)[0];
              if (counter === state2.tmp.condition_counter) {
                state2.opt.lang = state2.tmp.condition_lang_val_arr.pop();
                state2.tmp.condition_lang_counter_arr.pop();
              }
            }
            if (this.locale_default) {
              state2.output.current.value().old_locale = this.locale_default;
              state2.output.closeLevel("empty");
              state2.opt.lang = this.locale_default;
            }
          };
          this.execs.push(func);
        }
        func = function(state2) {
          var next = this[state2.tmp.jump.value()];
          return next;
        };
        this.execs.push(func);
        if (this.locale_default) {
          state.opt.lang = this.locale_default;
        }
      }
    };
    CSL2.Conditions.Configure = function(state, pos) {
      if (this.tokentype === CSL2.START) {
        this.fail = state.configure.fail.slice(-1)[0];
        this.succeed = this.next;
        state.configure.fail[state.configure.fail.length - 1] = pos;
      } else if (this.tokentype === CSL2.SINGLETON) {
        this.fail = this.next;
        this.succeed = state.configure.succeed.slice(-1)[0];
        state.configure.fail[state.configure.fail.length - 1] = pos;
      } else {
        this.succeed = state.configure.succeed.slice(-1)[0];
        this.fail = this.next;
      }
    };
    CSL2.Conditions.Engine = function(state, token) {
      this.token = token;
      this.state = state;
    };
    CSL2.Conditions.Engine.prototype.addTest = function(test) {
      this.token.tests ? {} : this.token.tests = [];
      this.token.tests.push(test);
    };
    CSL2.Conditions.Engine.prototype.addMatch = function(match) {
      this.token.match = match;
    };
    CSL2.Conditions.Engine.prototype.matchCombine = function() {
      this.token.test = this.state.fun.match[this.token.match](this.token, this.state, this.token.tests);
    };
    CSL2.Node.info = {
      build: function(state) {
        if (this.tokentype === CSL2.START) {
          state.build.skip = "info";
        } else {
          state.build.skip = false;
        }
      }
    };
    CSL2.Node.institution = {
      build: function(state, target) {
        if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
          var func = function(state2) {
            if (typeof this.strings.delimiter === "string") {
              state2.tmp.institution_delimiter = this.strings.delimiter;
            } else {
              state2.tmp.institution_delimiter = state2.tmp.name_delimiter;
            }
            if (state2.inheritOpt(this, "and") === "text") {
              this.and_term = state2.getTerm("and", "long", 0);
            } else if (state2.inheritOpt(this, "and") === "symbol") {
              if (state2.opt.development_extensions.expect_and_symbol_form) {
                this.and_term = state2.getTerm("and", "symbol", 0);
              } else {
                this.and_term = "&";
              }
            } else if (state2.inheritOpt(this, "and") === "none") {
              this.and_term = state2.tmp.institution_delimiter;
            }
            if (typeof this.and_term === "undefined" && state2.tmp.and_term) {
              this.and_term = state2.tmp.and_term;
            }
            if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
              this.and_prefix_single = " ";
              this.and_prefix_multiple = ", ";
              if (typeof state2.tmp.institution_delimiter === "string") {
                this.and_prefix_multiple = state2.tmp.institution_delimiter;
              }
              this.and_suffix = " ";
            } else {
              this.and_prefix_single = "";
              this.and_prefix_multiple = "";
              this.and_suffix = "";
            }
            if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
              this.and_prefix_single = state2.tmp.institution_delimiter;
            } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
              if (this.and_prefix_multiple) {
                this.and_prefix_multiple = " ";
              }
            }
            this.and = {};
            if (typeof this.and_term !== "undefined") {
              state2.output.append(this.and_term, "empty", true);
              this.and.single = state2.output.pop();
              this.and.single.strings.prefix = this.and_prefix_single;
              this.and.single.strings.suffix = this.and_suffix;
              state2.output.append(this.and_term, "empty", true);
              this.and.multiple = state2.output.pop();
              this.and.multiple.strings.prefix = this.and_prefix_multiple;
              this.and.multiple.strings.suffix = this.and_suffix;
            } else if (this.strings.delimiter !== "undefined") {
              this.and.single = new CSL2.Blob(state2.tmp.institution_delimiter);
              this.and.single.strings.prefix = "";
              this.and.single.strings.suffix = "";
              this.and.multiple = new CSL2.Blob(state2.tmp.institution_delimiter);
              this.and.multiple.strings.prefix = "";
              this.and.multiple.strings.suffix = "";
            }
            state2.nameOutput.institution = this;
          };
          this.execs.push(func);
        }
        target.push(this);
      },
      configure: function(state) {
        if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
          state.build.has_institution = true;
        }
      }
    };
    CSL2.Node["institution-part"] = {
      build: function(state, target) {
        var func;
        if (this.strings.name === "long") {
          if (this.strings["if-short"]) {
            func = function(state2) {
              state2.nameOutput.institutionpart["long-with-short"] = this;
            };
          } else {
            func = function(state2) {
              state2.nameOutput.institutionpart["long"] = this;
            };
          }
        } else if (this.strings.name === "short") {
          func = function(state2) {
            state2.nameOutput.institutionpart["short"] = this;
          };
        }
        this.execs.push(func);
        target.push(this);
      }
    };
    CSL2.Node.key = {
      build: function(state, target) {
        target = state[state.build.root + "_sort"].tokens;
        var func;
        var debug = false;
        var start_key = new CSL2.Token("key", CSL2.START);
        state.tmp.root = state.build.root;
        start_key.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
        start_key.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
        start_key.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
        func = function(state2) {
          state2.tmp.done_vars = [];
        };
        start_key.execs.push(func);
        func = function(state2) {
          state2.output.openLevel("empty");
        };
        start_key.execs.push(func);
        var sort_direction = [];
        if (this.strings.sort_direction === CSL2.DESCENDING) {
          sort_direction.push(1);
          sort_direction.push(-1);
        } else {
          sort_direction.push(-1);
          sort_direction.push(1);
        }
        state[state.build.area].opt.sort_directions.push(sort_direction);
        if (CSL2.DATE_VARIABLES.indexOf(this.variables[0]) > -1) {
          state.build.date_key = true;
        }
        func = function(state2) {
          state2.tmp.sort_key_flag = true;
          if (state2.inheritOpt(this, "et-al-min")) {
            state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
          }
          if (state2.inheritOpt(this, "et-al-use-first")) {
            state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
          }
          if (typeof state2.inheritOpt(this, "et-al-use-last") === "boolean") {
            state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
          }
        };
        start_key.execs.push(func);
        target.push(start_key);
        if (this.variables.length) {
          var variable = this.variables[0];
          if (CSL2.NAME_VARIABLES.indexOf(variable) > -1) {
            var names_start_token = new CSL2.Token("names", CSL2.START);
            names_start_token.tokentype = CSL2.START;
            names_start_token.variables = this.variables;
            CSL2.Node.names.build.call(names_start_token, state, target);
            var name_token = new CSL2.Token("name", CSL2.SINGLETON);
            name_token.tokentype = CSL2.SINGLETON;
            name_token.strings["name-as-sort-order"] = "all";
            name_token.strings["sort-separator"] = " ";
            name_token.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
            name_token.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
            name_token.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
            CSL2.Node.name.build.call(name_token, state, target);
            var institution_token = new CSL2.Token("institution", CSL2.SINGLETON);
            institution_token.tokentype = CSL2.SINGLETON;
            CSL2.Node.institution.build.call(institution_token, state, target);
            var names_end_token = new CSL2.Token("names", CSL2.END);
            names_end_token.tokentype = CSL2.END;
            CSL2.Node.names.build.call(names_end_token, state, target);
          } else {
            var single_text = new CSL2.Token("text", CSL2.SINGLETON);
            single_text.strings.sort_direction = this.strings.sort_direction;
            single_text.dateparts = this.dateparts;
            if (CSL2.NUMERIC_VARIABLES.indexOf(variable) > -1) {
              if (variable === "citation-number") {
                func = function(state2, Item) {
                  if (state2.tmp.area === "bibliography_sort") {
                    if (this.strings.sort_direction === CSL2.DESCENDING) {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.DESCENDING;
                    } else {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.ASCENDING;
                    }
                  }
                  if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                    var num = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                  } else {
                    var num = state2.registry.registry[Item.id].seq;
                  }
                  if (num) {
                    num = CSL2.Util.padding("" + num);
                  }
                  state2.output.append(num, this);
                };
              } else {
                func = function(state2, Item) {
                  var num = false;
                  num = Item[variable];
                  if (num) {
                    num = CSL2.Util.padding(num);
                  }
                  state2.output.append(num, this);
                };
              }
            } else if (variable === "citation-label") {
              func = function(state2, Item) {
                var trigraph = state2.getCitationLabel(Item);
                state2.output.append(trigraph, this);
              };
            } else if (CSL2.DATE_VARIABLES.indexOf(variable) > -1) {
              func = CSL2.dateAsSortKey;
              single_text.variables = this.variables;
            } else if (variable === "title") {
              var abbrevfam = "title";
              var abbrfall = false;
              var altvar = false;
              var transfall = true;
              func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
            } else if (variable === "court-class") {
              func = function(state2, Item, item) {
                CSL2.INIT_JURISDICTION_MACROS(state2, Item, item, "juris-main");
                var cls = CSL2.GET_COURT_CLASS(state2, Item, true);
                state2.output.append(cls, "empty");
              };
            } else {
              func = function(state2, Item) {
                var varval = Item[variable];
                state2.output.append(varval, "empty");
              };
            }
            single_text.execs.push(func);
            target.push(single_text);
          }
        } else {
          var token = new CSL2.Token("text", CSL2.SINGLETON);
          token.strings.sort_direction = this.strings.sort_direction;
          token.postponed_macro = this.postponed_macro;
          CSL2.expandMacro.call(state, token, target);
        }
        var end_key = new CSL2.Token("key", CSL2.END);
        func = function(state2) {
          var keystring = state2.output.string(state2, state2.output.queue);
          if (state2.sys.normalizeUnicode) {
            keystring = state2.sys.normalizeUnicode(keystring);
          }
          keystring = keystring ? keystring.split(" ").join(state2.opt.sort_sep) + state2.opt.sort_sep : "";
          if (debug) {
            CSL2.debug("keystring: " + keystring + " " + typeof keystring);
          }
          if (keystring === "") {
            keystring = void 0;
          }
          if (typeof keystring !== "string") {
            keystring = void 0;
          }
          state2[state2[state2.tmp.area].root + "_sort"].keys.push(keystring);
          state2.tmp.value = [];
        };
        end_key.execs.push(func);
        if (state.build.date_key) {
          if (state.build.area === "citation" && state.build.extension === "_sort") {
            state[state.build.area].opt.sort_directions.push([-1, 1]);
            func = function(state2, Item) {
              var year_suffix = state2.registry.registry[Item.id].disambig.year_suffix;
              if (!year_suffix) {
                year_suffix = 0;
              }
              var key = CSL2.Util.padding("" + year_suffix);
              state2[state2.tmp.area].keys.push(key);
            };
            end_key.execs.push(func);
          }
          state.build.date_key = false;
        }
        func = function(state2) {
          state2.tmp["et-al-min"] = void 0;
          state2.tmp["et-al-use-first"] = void 0;
          state2.tmp["et-al-use-last"] = void 0;
          state2.tmp.sort_key_flag = false;
        };
        end_key.execs.push(func);
        target.push(end_key);
      }
    };
    CSL2.Node.label = {
      build: function(state, target) {
        if (this.strings.term) {
          var func = function(state2, Item, item) {
            var termtxt = CSL2.evaluateLabel(this, state2, Item, item);
            if (item && this.strings.term === "locator") {
              item.section_form_override = this.strings.form;
            }
            if (termtxt) {
              state2.tmp.group_context.tip.term_intended = true;
            }
            CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, termtxt, null, this);
            if (termtxt.indexOf("%s") === -1) {
              if (this.strings.capitalize_if_first) {
                if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                  termtxt = CSL2.Output.Formatters["capitalize-first"](state2, termtxt);
                }
              }
              state2.output.append(termtxt, this);
            }
          };
          this.execs.push(func);
        } else {
          if (!this.strings.form) {
            this.strings.form = "long";
          }
          var namevars = state.build.names_variables[state.build.names_variables.length - 1];
          var namelabels = state.build.name_label[state.build.name_label.length - 1];
          for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
            if (!namelabels[namevars[i]]) {
              namelabels[namevars[i]] = {};
            }
          }
          if (!state.build.name_flag) {
            for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
              namelabels[namevars[i]].before = this;
            }
          } else {
            for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
              namelabels[namevars[i]].after = this;
            }
          }
        }
        target.push(this);
      }
    };
    CSL2.Node.layout = {
      build: function(state, target) {
        var func, prefix_token, suffix_token, tok;
        function setSuffix() {
          if (state.build.area === "bibliography") {
            suffix_token = new CSL2.Token("text", CSL2.SINGLETON);
            func = function(state2) {
              if (!state2.tmp.parallel_and_not_last) {
                var suffix;
                if (state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale]) {
                  suffix = state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale].suffix;
                } else {
                  suffix = state2.bibliography.opt.layout_suffix;
                }
                var topblob = state2.output.current.value();
                if (state2.opt.using_display) {
                  topblob.blobs[topblob.blobs.length - 1].strings.suffix = suffix;
                } else {
                  topblob.strings.suffix = suffix;
                }
              }
              if (state2.bibliography.opt["second-field-align"]) {
                state2.output.endTag("bib_other");
              }
            };
            suffix_token.execs.push(func);
            target.push(suffix_token);
          }
        }
        if (this.tokentype === CSL2.START) {
          if (this.locale_raw) {
            state.build.current_default_locale = this.locale_raw;
          } else {
            state.build.current_default_locale = state.opt["default-locale"];
          }
          func = function(state2, Item, item) {
            if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
              var cite_entry = new CSL2.Token("group", CSL2.START);
              cite_entry.decorations = [["@cite", "entry"]];
              state2.output.startTag("cite_entry", cite_entry);
              state2.output.current.value().item_id = Item.system_id;
              if (item) {
                state2.output.current.value().locator_txt = item.locator_txt;
                state2.output.current.value().suffix_txt = item.suffix_txt;
              }
            }
          };
          this.execs.push(func);
        }
        if (this.tokentype === CSL2.START && !state.tmp.cite_affixes[state.build.area]) {
          func = function(state2, Item, item) {
            state2.tmp.done_vars = [];
            if (item && item["author-only"]) {
              state2.tmp.done_vars.push("locator");
            }
            if (state2.opt.suppressedJurisdictions[Item["country"]] && Item["country"] && ["treaty", "patent"].indexOf(Item.type) === -1) {
              state2.tmp.done_vars.push("country");
            }
            if (!state2.tmp.just_looking && state2.registry.registry[Item.id] && state2.registry.registry[Item.id].parallel) {
              state2.tmp.done_vars.push("first-reference-note-number");
            }
            if (!state2.tmp.just_looking && state2.tmp.abbrev_trimmer && Item.jurisdiction) {
              for (var field in state2.tmp.abbrev_trimmer.QUASHES[Item.jurisdiction]) {
                state2.tmp.done_vars.push(field);
              }
            }
            state2.tmp.rendered_name = false;
          };
          this.execs.push(func);
          func = function(state2) {
            state2.tmp.sort_key_flag = false;
          };
          this.execs.push(func);
          func = function(state2) {
            state2.tmp.nameset_counter = 0;
          };
          this.execs.push(func);
          func = function(state2, Item) {
            var tok2 = new CSL2.Token();
            state2.output.openLevel(tok2);
          };
          this.execs.push(func);
          target.push(this);
          if (state.build.area === "citation") {
            prefix_token = new CSL2.Token("text", CSL2.SINGLETON);
            func = function(state2, Item, item) {
              if (item && item.prefix) {
                var prefix = CSL2.checkPrefixSpaceAppend(state2, item.prefix);
                if (!state2.tmp.just_looking) {
                  prefix = state2.output.checkNestedBrace.update(prefix);
                }
                var ignorePredecessor = CSL2.checkIgnorePredecessor(state2, prefix);
                state2.output.append(prefix, this, false, ignorePredecessor);
              }
            };
            prefix_token.execs.push(func);
            target.push(prefix_token);
          }
        }
        var my_tok;
        if (this.locale_raw) {
          my_tok = new CSL2.Token("dummy", CSL2.START);
          my_tok.locale = this.locale_raw;
          my_tok.strings.delimiter = this.strings.delimiter;
          my_tok.strings.suffix = this.strings.suffix;
          if (!state.tmp.cite_affixes[state.build.area]) {
            state.tmp.cite_affixes[state.build.area] = {};
          }
        }
        if (this.tokentype === CSL2.START) {
          state.build.layout_flag = true;
          if (!this.locale_raw) {
            state[state.tmp.area].opt.topdecor = [this.decorations];
            state[state.tmp.area + "_sort"].opt.topdecor = [this.decorations];
            state[state.build.area].opt.layout_prefix = this.strings.prefix;
            state[state.build.area].opt.layout_suffix = this.strings.suffix;
            state[state.build.area].opt.layout_delimiter = this.strings.delimiter;
            state[state.build.area].opt.layout_decorations = this.decorations;
            if (state.tmp.cite_affixes[state.build.area]) {
              tok = new CSL2.Token("else", CSL2.START);
              CSL2.Node["else"].build.call(tok, state, target);
            }
          }
          if (this.locale_raw) {
            if (!state.build.layout_locale_flag) {
              var choose_tok = new CSL2.Token("choose", CSL2.START);
              CSL2.Node.choose.build.call(choose_tok, state, target);
              my_tok.name = "if";
              CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
              CSL2.Node["if"].build.call(my_tok, state, target);
            } else {
              my_tok.name = "else-if";
              CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
              CSL2.Node["else-if"].build.call(my_tok, state, target);
            }
            state.tmp.cite_affixes[state.build.area][my_tok.locale] = {};
            state.tmp.cite_affixes[state.build.area][my_tok.locale].delimiter = this.strings.delimiter;
            state.tmp.cite_affixes[state.build.area][my_tok.locale].suffix = this.strings.suffix;
          }
        }
        if (this.tokentype === CSL2.END) {
          if (this.locale_raw) {
            setSuffix();
            if (!state.build.layout_locale_flag) {
              my_tok.name = "if";
              my_tok.tokentype = CSL2.END;
              CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
              CSL2.Node["if"].build.call(my_tok, state, target);
              state.build.layout_locale_flag = true;
            } else {
              my_tok.name = "else-if";
              my_tok.tokentype = CSL2.END;
              CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
              CSL2.Node["else-if"].build.call(my_tok, state, target);
            }
          }
          if (!this.locale_raw) {
            setSuffix();
            if (state.tmp.cite_affixes[state.build.area]) {
              if (state.build.layout_locale_flag) {
                tok = new CSL2.Token("else", CSL2.END);
                CSL2.Node["else"].build.call(tok, state, target);
                tok = new CSL2.Token("choose", CSL2.END);
                CSL2.Node.choose.build.call(tok, state, target);
              }
            }
            state.build_layout_locale_flag = true;
            if (state.build.area === "citation") {
              suffix_token = new CSL2.Token("text", CSL2.SINGLETON);
              func = function(state2, Item, item) {
                var sp;
                if (item && item.suffix) {
                  var suffix = CSL2.checkSuffixSpacePrepend(state2, item.suffix);
                  if (!state2.tmp.just_looking) {
                    suffix = state2.output.checkNestedBrace.update(suffix);
                  }
                  state2.output.append(suffix, this);
                }
              };
              suffix_token.execs.push(func);
              target.push(suffix_token);
            }
            func = function(state2) {
              state2.output.closeLevel();
            };
            this.execs.push(func);
            func = function(state2, Item) {
              if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
                state2.output.endTag();
              }
            };
            this.execs.push(func);
            target.push(this);
            state.build.layout_flag = false;
            state.build.layout_locale_flag = false;
          }
        }
      }
    };
    CSL2.Node.macro = {
      build: function() {
      }
    };
    CSL2.Node.alternative = {
      build: function(state, target) {
        if (this.tokentype === CSL2.START) {
          var choose_tok = new CSL2.Token("choose", CSL2.START);
          CSL2.Node["choose"].build.call(choose_tok, state, target);
          var if_tok = new CSL2.Token("if", CSL2.START);
          CSL2.Attributes["@alternative-node-internal"].call(if_tok, state);
          CSL2.Node["if"].build.call(if_tok, state, target);
          var func = function(state2, Item) {
            state2.tmp.oldItem = Item;
            state2.tmp.oldLang = state2.opt.lang;
            state2.tmp.abort_alternative = true;
            if (Item["language-name"] && Item["language-name-original"]) {
              var newItem = JSON.parse(JSON.stringify(Item));
              newItem.language = newItem["language-name"];
              var langspec = CSL2.localeResolve(newItem.language, state2.opt["default-locale"][0]);
              if (state2.opt.multi_layout) {
                for (var i in state2.opt.multi_layout) {
                  var locale_list = state2.opt.multi_layout[i];
                  var gotlang = false;
                  for (var j in locale_list) {
                    var tryspec = locale_list[j];
                    if (langspec.best === tryspec.best || langspec.base === tryspec.base || langspec.bare === tryspec.bare) {
                      gotlang = locale_list[0].best;
                      break;
                    }
                  }
                  if (!gotlang) {
                    gotlang = state2.opt["default-locale"][0];
                  }
                  state2.opt.lang = gotlang;
                }
              }
              for (var key in newItem) {
                if (["id", "type", "language", "multi"].indexOf(key) === -1 && key.slice(0, 4) !== "alt-") {
                  if (newItem.multi && newItem.multi._keys[key]) {
                    var deleteme = true;
                    for (var lang in newItem.multi._keys[key]) {
                      if (langspec.bare === lang.replace(/^([a-zA-Z]+).*/, "$1")) {
                        deleteme = false;
                        break;
                      }
                    }
                    if (deleteme) {
                      delete newItem[key];
                    }
                  } else {
                    delete newItem[key];
                  }
                }
              }
              for (var key in newItem) {
                if (key.slice(0, 4) === "alt-") {
                  newItem[key.slice(4)] = newItem[key];
                  state2.tmp.abort_alternative = false;
                } else {
                  if (newItem.multi && newItem.multi._keys) {
                    if (!newItem["alt-" + key] && newItem.multi._keys[key]) {
                      if (newItem.multi._keys[key][langspec.best]) {
                        newItem[key] = newItem.multi._keys[key][langspec.best];
                        state2.tmp.abort_alternative = false;
                      } else if (newItem.multi._keys[key][langspec.base]) {
                        newItem[key] = newItem.multi._keys[key][langspec.base];
                        state2.tmp.abort_alternative = false;
                      } else if (newItem.multi._keys[key][langspec.bare]) {
                        newItem[key] = newItem.multi._keys[key][langspec.bare];
                        state2.tmp.abort_alternative = false;
                      }
                    }
                  }
                }
              }
            }
            state2.output.openLevel(this);
            state2.registry.refhash[Item.id] = newItem;
            state2.nameOutput = new CSL2.NameOutput(state2, newItem);
          };
          this.execs.push(func);
          target.push(this);
          var choose_tok = new CSL2.Token("choose", CSL2.START);
          CSL2.Node["choose"].build.call(choose_tok, state, target);
          var if_tok = new CSL2.Token("if", CSL2.START);
          CSL2.Attributes["@alternative-node-internal"].call(if_tok, state);
          var func = function(state2) {
            state2.tmp.abort_alternative = true;
          };
          if_tok.execs.push(func);
          CSL2.Node["if"].build.call(if_tok, state, target);
        } else if (this.tokentype === CSL2.END) {
          var if_tok = new CSL2.Token("if", CSL2.END);
          CSL2.Node["if"].build.call(if_tok, state, target);
          var choose_tok = new CSL2.Token("choose", CSL2.END);
          CSL2.Node["choose"].build.call(choose_tok, state, target);
          var func = function(state2, Item) {
            state2.output.closeLevel();
            state2.registry.refhash[Item.id] = state2.tmp.oldItem;
            state2.opt.lang = state2.tmp.oldLang;
            state2.nameOutput = new CSL2.NameOutput(state2, state2.tmp.oldItem);
            state2.tmp.abort_alternative = false;
          };
          this.execs.push(func);
          target.push(this);
          var if_tok = new CSL2.Token("if", CSL2.END);
          CSL2.Node["if"].build.call(if_tok, state, target);
          var choose_tok = new CSL2.Token("choose", CSL2.END);
          CSL2.Node["choose"].build.call(choose_tok, state, target);
        }
      }
    };
    CSL2.Node["alternative-text"] = {
      build: function(state, target) {
        if (this.tokentype === CSL2.SINGLETON) {
          var func = function(state2, Item) {
            var Item = state2.refetchItem(Item.id);
            CSL2.getCite.call(state2, Item);
          };
          this.execs.push(func);
        }
        target.push(this);
      }
    };
    CSL2.NameOutput = function(state, Item, item) {
      this.debug = false;
      this.state = state;
      if (this.debug) {
        this.state.sys.print("(1)");
      }
      this.Item = Item;
      this.item = item;
      this.nameset_base = 0;
      this.etal_spec = {};
      this._first_creator_variable = false;
      this._please_chop = false;
    };
    CSL2.NameOutput.prototype.init = function(names2) {
      this.requireMatch = names2.requireMatch;
      if (this.state.tmp.term_predecessor) {
        this.state.tmp.subsequent_author_substitute_ok = false;
      }
      if (this.nameset_offset) {
        this.nameset_base = this.nameset_base + this.nameset_offset;
      }
      this.nameset_offset = 0;
      this.names = names2;
      this.variables = names2.variables;
      this.state.tmp.value = [];
      this.state.tmp.rendered_name = [];
      this.state.tmp.label_blob = false;
      this.state.tmp.etal_node = false;
      this.state.tmp.etal_term = false;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
          this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
        }
      }
      this["et-al"] = void 0;
      this["with"] = void 0;
      this.name = void 0;
      this.institutionpart = {};
      this.state.tmp.group_context.tip.variable_attempt = true;
      this.labelVariable = this.variables[0];
      if (!this.state.tmp.value.length) {
        return;
      }
      var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
      if (checkCommonTerm) {
        this.state.tmp.can_substitute.pop();
        this.state.tmp.can_substitute.push(true);
        for (var i in this.variables) {
          var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
          if (idx > -1) {
            this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
          }
        }
        this.state.tmp.common_term_match_fail = true;
        this.variables = [];
      }
    };
    CSL2.NameOutput.prototype.reinit = function(names2, labelVariable) {
      this.requireMatch = names2.requireMatch;
      this.labelVariable = labelVariable;
      if (this.state.tmp.can_substitute.value()) {
        this.nameset_offset = 0;
        this.variables = names2.variables;
        var oldval = this.state.tmp.value.slice();
        this.state.tmp.value = [];
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
            this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
          }
        }
        if (this.state.tmp.value.length) {
          this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
        }
        this.state.tmp.value = oldval;
      }
      var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
      if (checkCommonTerm) {
        this.state.tmp.can_substitute.pop();
        this.state.tmp.can_substitute.push(true);
        for (var i in this.variables) {
          var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
          if (idx > -1) {
            this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
          }
        }
        this.variables = [];
      }
    };
    CSL2.NameOutput.prototype.outputNames = function() {
      var i, ilen;
      var variables = this.variables;
      if (this.institution.and) {
        if (!this.institution.and.single.blobs || !this.institution.and.single.blobs.length) {
          this.institution.and.single.blobs = this.name.and.single.blobs;
        }
        if (!this.institution.and.multiple.blobs || !this.institution.and.multiple.blobs.length) {
          this.institution.and.multiple.blobs = this.name.and.multiple.blobs;
        }
      }
      this.variable_offset = {};
      if (this.family) {
        this.family_decor = CSL2.Util.cloneToken(this.family);
        this.family_decor.strings.prefix = "";
        this.family_decor.strings.suffix = "";
        for (i = 0, ilen = this.family.execs.length; i < ilen; i += 1) {
          this.family.execs[i].call(this.family_decor, this.state, this.Item);
        }
      } else {
        this.family_decor = false;
      }
      if (this.given) {
        this.given_decor = CSL2.Util.cloneToken(this.given);
        this.given_decor.strings.prefix = "";
        this.given_decor.strings.suffix = "";
        for (i = 0, ilen = this.given.execs.length; i < ilen; i += 1) {
          this.given.execs[i].call(this.given_decor, this.state, this.Item);
        }
      } else {
        this.given_decor = false;
      }
      if (this.debug) {
        this.state.sys.print("(2)");
      }
      this.getEtAlConfig();
      if (this.debug) {
        this.state.sys.print("(3)");
      }
      this.divideAndTransliterateNames();
      if (this.debug) {
        this.state.sys.print("(4)");
      }
      this.truncatePersonalNameLists();
      if (this.debug) {
        this.state.sys.print("(5)");
      }
      if (this.debug) {
        this.state.sys.print("(6)");
      }
      this.disambigNames();
      this.constrainNames();
      if (this.debug) {
        this.state.sys.print("(7)");
      }
      if (this.name.strings.form === "count") {
        if (this.state.tmp.extension || this.names_count != 0) {
          this.state.output.append(this.names_count, "empty");
          this.state.tmp.group_context.tip.variable_success = true;
        }
        return;
      }
      if (this.debug) {
        this.state.sys.print("(8)");
      }
      this.setEtAlParameters();
      if (this.debug) {
        this.state.sys.print("(9)");
      }
      this.setCommonTerm(this.requireMatch);
      if (this.debug) {
        this.state.sys.print("(10)");
      }
      this.renderAllNames();
      if (this.debug) {
        this.state.sys.print("(11)");
      }
      var blob_list = [];
      for (i = 0, ilen = variables.length; i < ilen; i += 1) {
        var v = variables[i];
        var institution_sets = [];
        var institutions = false;
        var varblob = null;
        if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
          varblob = this._join([this.freeters[v]], "");
        } else {
          if (this.debug) {
            this.state.sys.print("(11a)");
          }
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            institution_sets.push(this.joinPersonsAndInstitutions([this.persons[v][j], this.institutions[v][j]]));
          }
          if (this.debug) {
            this.state.sys.print("(11b)");
          }
          if (this.institutions[v].length) {
            var pos = this.nameset_base + this.variable_offset[v];
            if (this.freeters[v].length) {
              pos += 1;
            }
            institutions = this.joinInstitutionSets(institution_sets, pos);
          }
          if (this.debug) {
            this.state.sys.print("(11c)");
          }
          var varblob = this.joinFreetersAndInstitutionSets([this.freeters[v], institutions]);
          if (this.debug) {
            this.state.sys.print("(11d)");
          }
        }
        if (varblob) {
          if (!this.state.tmp.extension) {
            varblob = this._applyLabels(varblob, v);
          }
          blob_list.push(varblob);
        }
        if (this.debug) {
          this.state.sys.print("(11e)");
        }
        if (this.common_term) {
          break;
        }
      }
      if (this.debug) {
        this.state.sys.print("(12)");
      }
      this.state.output.openLevel("empty");
      this.state.output.current.value().strings.delimiter = this.state.inheritOpt(this.names, "delimiter", "names-delimiter");
      if (this.debug) {
        this.state.sys.print("(13)");
      }
      for (i = 0, ilen = blob_list.length; i < ilen; i += 1) {
        this.state.output.append(blob_list[i], "literal", true);
      }
      if (!this.state.tmp.just_looking && blob_list.length > 0) {
        this.state.tmp.probably_rendered_something = true;
      }
      if (this.debug) {
        this.state.sys.print("(14)");
      }
      this.state.output.closeLevel("empty");
      if (this.debug) {
        this.state.sys.print("(15)");
      }
      var blob = this.state.output.pop();
      this.state.tmp.name_node.top = blob;
      if (this.debug) {
        this.state.sys.print("(16)");
      }
      var namesToken = CSL2.Util.cloneToken(this.names);
      if (this.state.tmp.group_context.tip.condition) {
        CSL2.UPDATE_GROUP_CONTEXT_CONDITION(this.state, this.names.strings.prefix, null, this.names);
      }
      this.state.output.append(blob, namesToken);
      if (this.state.tmp.term_predecessor_name) {
        this.state.tmp.term_predecessor = true;
      }
      if (this.debug) {
        this.state.sys.print("(17)");
      }
      if (this.debug) {
        this.state.sys.print("(18)");
      }
      if (variables[0] !== "authority") {
        var name_node_string = [];
        var nameobjs = this.Item[variables[0]];
        if (nameobjs) {
          for (var i = 0, ilen = nameobjs.length; i < ilen; i += 1) {
            var substring = CSL2.Util.Names.getRawName(nameobjs[i]);
            if (substring) {
              name_node_string.push(substring);
            }
          }
        }
        name_node_string = name_node_string.join(", ");
        if (name_node_string) {
          this.state.tmp.name_node.string = name_node_string;
        }
      }
      if (this.state.tmp.name_node.string && !this.state.tmp.first_name_string) {
        this.state.tmp.first_name_string = this.state.tmp.name_node.string;
      }
      if (this.Item.type === "classic") {
        if (this.state.tmp.first_name_string) {
          var author_title = [];
          author_title.push(this.state.tmp.first_name_string);
          if (this.Item.title) {
            author_title.push(this.Item.title);
          }
          author_title = author_title.join(", ");
          if (author_title && this.state.sys.getAbbreviation) {
            if (this.state.sys.normalizeAbbrevsKey) {
              author_title = this.state.sys.normalizeAbbrevsKey("classic", author_title);
            }
            this.state.transform.loadAbbreviation("default", "classic", author_title, this.Item.language);
            if (this.state.transform.abbrevs["default"].classic[author_title]) {
              this.state.tmp.done_vars.push("title");
              this.state.output.append(this.state.transform.abbrevs["default"].classic[author_title], "empty", true);
              blob = this.state.output.pop();
              this.state.tmp.name_node.top.blobs.pop();
              this.state.tmp.name_node.top.blobs.push(blob);
            }
          }
        }
      }
      this._collapseAuthor();
      this.variables = [];
      this.state.tmp.authority_stop_last = 0;
      if (this.debug) {
        this.state.sys.print("(19)");
      }
    };
    CSL2.NameOutput.prototype._applyLabels = function(blob, v) {
      var txt;
      if (!this.label || !this.label[this.labelVariable]) {
        return blob;
      }
      var plural = 0;
      var num = this.freeters_count[v] + this.institutions_count[v];
      if (num > 1) {
        plural = 1;
      } else {
        for (var i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
          num += this.persons_count[v][i];
        }
        if (num > 1) {
          plural = 1;
        }
      }
      if (this.label[this.labelVariable].before) {
        if (typeof this.label[this.labelVariable].before.strings.plural === "number") {
          plural = this.label[this.labelVariable].before.strings.plural;
        }
        txt = this._buildLabel(v, plural, "before", this.labelVariable);
        this.state.output.openLevel("empty");
        this.state.output.append(txt, this.label[this.labelVariable].before, true);
        this.state.output.append(blob, "literal", true);
        this.state.output.closeLevel("empty");
        blob = this.state.output.pop();
      } else if (this.label[this.labelVariable].after) {
        if (typeof this.label[this.labelVariable].after.strings.plural === "number") {
          plural = this.label[this.labelVariable].after.strings.plural;
        }
        txt = this._buildLabel(v, plural, "after", this.labelVariable);
        this.state.output.openLevel("empty");
        this.state.output.append(blob, "literal", true);
        this.state.output.append(txt, this.label[this.labelVariable].after, true);
        this.state.tmp.label_blob = this.state.output.pop();
        this.state.output.append(this.state.tmp.label_blob, "literal", true);
        this.state.output.closeLevel("empty");
        blob = this.state.output.pop();
      }
      return blob;
    };
    CSL2.NameOutput.prototype._buildLabel = function(term, plural, position, v) {
      if (this.common_term) {
        term = this.common_term;
      }
      var ret = false;
      var node = this.label[v][position];
      if (node) {
        ret = CSL2.castLabel(this.state, node, term, plural, CSL2.TOLERANT);
      }
      return ret;
    };
    CSL2.NameOutput.prototype._collapseAuthor = function() {
      var myqueue, mystr, oldchars;
      if (this.state.tmp.name_node.top.blobs.length === 0) {
        return;
      }
      if (this.nameset_base === 0 && this.Item[this.variables[0]] && !this._first_creator_variable) {
        this._first_creator_variable = this.variables[0];
      }
      if (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter.length) {
        if (this.state.tmp.authorstring_request) {
          mystr = "";
          myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
          oldchars = this.state.tmp.offset_characters;
          if (myqueue) {
            mystr = this.state.output.string(this.state, myqueue, false);
          }
          this.state.tmp.offset_characters = oldchars;
          this.state.registry.authorstrings[this.Item.id] = mystr;
        } else if (!this.state.tmp.just_looking && !this.state.tmp.suppress_decorations && (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter)) {
          mystr = "";
          myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
          oldchars = this.state.tmp.offset_characters;
          if (myqueue) {
            mystr = this.state.output.string(this.state, myqueue, false);
          }
          if (mystr === this.state.tmp.last_primary_names_string) {
            if (this.item["suppress-author"] || this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length) {
              this.state.tmp.name_node.top.blobs.pop();
              this.state.tmp.name_node.children = [];
              this.state.tmp.offset_characters = oldchars;
            }
            if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
              this.state.tmp.use_cite_group_delimiter = true;
            }
          } else {
            this.state.tmp.last_primary_names_string = mystr;
            if (this.variables.indexOf(this._first_creator_variable) > -1 && this.item && this.item["suppress-author"] && this.Item.type !== "legal_case") {
              this.state.tmp.name_node.top.blobs.pop();
              this.state.tmp.name_node.children = [];
              this.state.tmp.offset_characters = oldchars;
              this.state.tmp.term_predecessor = false;
            }
            this.state.tmp.have_collapsed = false;
            if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
              this.state.tmp.use_cite_group_delimiter = false;
            }
          }
        }
      }
    };
    CSL2.NameOutput.prototype.isPerson = function(value) {
      if (value.literal || !value.given && value.family && value.isInstitution) {
        return false;
      } else {
        return true;
      }
    };
    CSL2.NameOutput.prototype.truncatePersonalNameLists = function() {
      var v, i, ilen, j, jlen, chopvar, values;
      this.freeters_count = {};
      this.persons_count = {};
      this.institutions_count = {};
      for (v in this.freeters) {
        if (this.freeters.hasOwnProperty(v)) {
          this.freeters_count[v] = this.freeters[v].length;
          this.freeters[v] = this._truncateNameList(this.freeters, v);
        }
      }
      for (v in this.persons) {
        if (this.persons.hasOwnProperty(v)) {
          this.institutions_count[v] = this.institutions[v].length;
          this._truncateNameList(this.institutions, v);
          this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
          this.persons_count[v] = [];
          for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            this.persons_count[v][j] = this.persons[v][j].length;
            this.persons[v][j] = this._truncateNameList(this.persons, v, j);
          }
        }
      }
      if (this.state.opt.development_extensions.etal_min_etal_usefirst_hack && this.etal_min === 1 && this.etal_use_first === 1 && !(this.state.tmp.extension || this.state.tmp.just_looking)) {
        chopvar = v;
      } else {
        chopvar = false;
      }
      if (chopvar || this._please_chop) {
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          v = this.variables[i];
          if (this.freeters[v].length) {
            if (this._please_chop === v) {
              this.freeters[v] = this.freeters[v].slice(1);
              this.freeters_count[v] += -1;
              this._please_chop = false;
            } else if (chopvar && !this._please_chop) {
              this.freeters[v] = this.freeters[v].slice(0, 1);
              this.freeters_count[v] = 1;
              this.institutions[v] = [];
              this.persons[v] = [];
              this._please_chop = chopvar;
            }
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
            if (this.persons[v][j].length) {
              if (this._please_chop === v) {
                this.persons[v][j] = this.persons[v][j].slice(1);
                this.persons_count[v][j] += -1;
                this._please_chop = false;
                break;
              } else if (chopvar && !this._please_chop) {
                this.freeters[v] = this.persons[v][j].slice(0, 1);
                this.freeters_count[v] = 1;
                this.institutions[v] = [];
                this.persons[v] = [];
                values = [];
                this._please_chop = chopvar;
                break;
              }
            }
          }
          if (this.institutions[v].length) {
            if (this._please_chop === v) {
              this.institutions[v] = this.institutions[v].slice(1);
              this.institutions_count[v] += -1;
              this._please_chop = false;
            } else if (chopvar && !this._please_chop) {
              this.institutions[v] = this.institutions[v].slice(0, 1);
              this.institutions_count[v] = 1;
              values = [];
              this._please_chop = chopvar;
            }
          }
        }
      }
      for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        if (this.institutions[v].length) {
          this.nameset_offset += 1;
        }
        for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
          if (this.persons[v][j].length) {
            this.nameset_offset += 1;
          }
        }
      }
    };
    CSL2.NameOutput.prototype._truncateNameList = function(container, variable, index6) {
      var lst;
      if (typeof index6 === "undefined") {
        lst = container[variable];
      } else {
        lst = container[variable][index6];
      }
      if (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names && lst.length > 50 && lst.length > this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names + 2) {
        var limit = this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names;
        lst = lst.slice(0, limit + 1).concat(lst.slice(-1));
      }
      return lst;
    };
    CSL2.NameOutput.prototype.divideAndTransliterateNames = function() {
      var i, ilen, j, jlen;
      var Item = this.Item;
      var variables = this.variables;
      this.varnames = variables.slice();
      this.freeters = {};
      this.persons = {};
      this.institutions = {};
      for (i = 0, ilen = variables.length; i < ilen; i += 1) {
        var v = variables[i];
        this.variable_offset[v] = this.nameset_offset;
        var values = this._normalizeVariableValue(Item, v);
        if (this.name.strings["suppress-min"] && values.length >= this.name.strings["suppress-min"]) {
          values = [];
        }
        if (this.name.strings["suppress-max"] && values.length <= this.name.strings["suppress-max"]) {
          values = [];
        }
        this._getFreeters(v, values);
        this._getPersonsAndInstitutions(v, values);
        if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
          if (this.name.strings["suppress-min"] === 0) {
            this.freeters[v] = [];
            for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              this.persons[v][j] = [];
            }
          } else if (this.institution.strings["suppress-min"] === 0) {
            this.institutions[v] = [];
            this.freeters[v] = this.freeters[v].concat(this.persons[v]);
            for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              for (var k = 0, klen = this.persons[v][j].length; k < klen; k += 1) {
                this.freeters[v].push(this.persons[v][j][k]);
              }
            }
            this.persons[v] = [];
          }
        }
      }
    };
    CSL2.NameOutput.prototype._normalizeVariableValue = function(Item, variable) {
      var names2;
      if (typeof Item[variable] === "string" || typeof Item[variable] === "number") {
        CSL2.debug('name variable "' + variable + '" is string or number, not array. Attempting to fix.');
        names2 = [{ literal: Item[variable] + "" }];
      } else if (!Item[variable]) {
        names2 = [];
      } else if (typeof Item[variable].length !== "number") {
        CSL2.debug('name variable "' + variable + '" is object, not array. Attempting to fix.');
        Item[variable] = [Item[variable]];
        names2 = Item[variable].slice();
      } else {
        names2 = Item[variable].slice();
      }
      return names2;
    };
    CSL2.NameOutput.prototype._getFreeters = function(v, values) {
      this.freeters[v] = [];
      if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
        for (var i = values.length - 1; i > -1; i--) {
          if (this.isPerson(values[i])) {
            var value = this._checkNickname(values.pop());
            if (value) {
              this.freeters[v].push(value);
            }
          } else {
            break;
          }
        }
      } else {
        for (var i = values.length - 1; i > -1; i--) {
          var value = values.pop();
          if (this.isPerson(value)) {
            var value = this._checkNickname(value);
          }
          this.freeters[v].push(value);
        }
      }
      this.freeters[v].reverse();
      if (this.freeters[v].length) {
        this.nameset_offset += 1;
      }
    };
    CSL2.NameOutput.prototype._getPersonsAndInstitutions = function(v, values) {
      this.persons[v] = [];
      this.institutions[v] = [];
      if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
        return;
      }
      var persons = [];
      var has_affiliates = false;
      var first = true;
      for (var i = values.length - 1; i > -1; i += -1) {
        if (this.isPerson(values[i])) {
          var value = this._checkNickname(values[i]);
          if (value) {
            persons.push(value);
          }
        } else {
          has_affiliates = true;
          this.institutions[v].push(values[i]);
          if (!first) {
            persons.reverse();
            this.persons[v].push(persons);
            persons = [];
          }
          first = false;
        }
      }
      if (has_affiliates) {
        persons.reverse();
        this.persons[v].push(persons);
        this.persons[v].reverse();
        this.institutions[v].reverse();
      }
    };
    CSL2.NameOutput.prototype._clearValues = function(values) {
      for (var i = values.length - 1; i > -1; i += -1) {
        values.pop();
      }
    };
    CSL2.NameOutput.prototype._checkNickname = function(name) {
      if (["interview", "personal_communication"].indexOf(this.Item.type) > -1) {
        var author = "";
        author = CSL2.Util.Names.getRawName(name);
        if (author && this.state.sys.getAbbreviation && !(this.item && this.item["suppress-author"])) {
          var normalizedKey = author;
          if (this.state.sys.normalizeAbbrevsKey) {
            normalizedKey = this.state.sys.normalizeAbbrevsKey("author", author);
          }
          this.state.transform.loadAbbreviation("default", "nickname", normalizedKey, this.Item.language);
          var myLocalName = this.state.transform.abbrevs["default"].nickname[normalizedKey];
          if (myLocalName) {
            if (myLocalName === "!here>>>") {
              name = false;
            } else {
              name = { family: myLocalName, given: "" };
            }
          }
        }
      }
      return name;
    };
    CSL2.NameOutput.prototype._purgeEmptyBlobs = function(blobs) {
      for (var i = blobs.length - 1; i > -1; i += -1) {
        if (!blobs[i] || blobs[i].length === 0 || !blobs[i].blobs.length) {
          blobs = blobs.slice(0, i).concat(blobs.slice(i + 1));
        }
      }
      return blobs;
    };
    CSL2.NameOutput.prototype.joinPersons = function(blobs, pos, j, tokenname) {
      var ret;
      blobs = this._purgeEmptyBlobs(blobs);
      if (!tokenname) {
        tokenname = "name";
      }
      if (typeof j === "undefined") {
        if (this.etal_spec[pos].freeters === 1) {
          ret = this._joinEtAl(blobs);
        } else if (this.etal_spec[pos].freeters === 2) {
          ret = this._joinEllipsis(blobs);
        } else if (!this.state.tmp.sort_key_flag) {
          ret = this._joinAnd(blobs);
        } else {
          ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
        }
      } else {
        if (this.etal_spec[pos].persons[j] === 1) {
          ret = this._joinEtAl(blobs);
        } else if (this.etal_spec[pos].persons[j] === 2) {
          ret = this._joinEllipsis(blobs);
        } else if (!this.state.tmp.sort_key_flag) {
          ret = this._joinAnd(blobs);
        } else {
          ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
        }
      }
      return ret;
    };
    CSL2.NameOutput.prototype.joinInstitutionSets = function(blobs, pos) {
      var ret;
      blobs = this._purgeEmptyBlobs(blobs);
      if (this.etal_spec[pos].institutions === 1) {
        ret = this._joinEtAl(blobs, "institution");
      } else if (this.etal_spec[pos].institutions === 2) {
        ret = this._joinEllipsis(blobs, "institution");
      } else {
        ret = this._joinAnd(blobs);
      }
      return ret;
    };
    CSL2.NameOutput.prototype.joinPersonsAndInstitutions = function(blobs) {
      blobs = this._purgeEmptyBlobs(blobs);
      var ret = this._join(blobs, this.state.tmp.name_delimiter);
      ret.isInstitution = true;
      return ret;
    };
    CSL2.NameOutput.prototype.joinFreetersAndInstitutionSets = function(blobs) {
      blobs = this._purgeEmptyBlobs(blobs);
      var ret = this._join(blobs, "[never here]", this["with"].single, this["with"].multiple);
      return ret;
    };
    CSL2.NameOutput.prototype._getAfterInvertedName = function(blobs, delimiter, finalJoin) {
      if (finalJoin && blobs.length > 1) {
        if (this.state.inheritOpt(this.name, "delimiter-precedes-last") === "after-inverted-name") {
          var prevBlob = blobs[blobs.length - 2];
          if (prevBlob.blobs.length > 0 && prevBlob.blobs[0].isInverted) {
            finalJoin.strings.prefix = delimiter;
          }
        }
      }
      return finalJoin;
    };
    CSL2.NameOutput.prototype._getAndJoin = function(blobs, delimiter) {
      var finalJoin = false;
      if (blobs.length > 1) {
        var singleOrMultiple = "single";
        if (blobs.length > 2) {
          singleOrMultiple = "multiple";
        }
        if (blobs[blobs.length - 1].isInstitution) {
          finalJoin = this.institution.and[singleOrMultiple];
        } else {
          finalJoin = this.name.and[singleOrMultiple];
        }
        finalJoin = JSON.parse(JSON.stringify(finalJoin));
        finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
      }
      return finalJoin;
    };
    CSL2.NameOutput.prototype._joinEtAl = function(blobs) {
      var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
      var blob = this._join(blobs, delimiter);
      this.state.output.openLevel(this._getToken("name"));
      this.state.output.current.value().strings.delimiter = "";
      this.state.output.append(blob, "literal", true);
      if (blobs.length > 1) {
        this.state.output.append(this["et-al"].multiple, "literal", true);
      } else if (blobs.length === 1) {
        this.state.output.append(this["et-al"].single, "literal", true);
      }
      this.state.output.closeLevel();
      return this.state.output.pop();
    };
    CSL2.NameOutput.prototype._joinEllipsis = function(blobs) {
      var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
      var finalJoin = false;
      if (blobs.length > 1) {
        var singleOrMultiple = "single";
        if (blobs.length > 2) {
          singleOrMultiple = "multiple";
        }
        finalJoin = JSON.parse(JSON.stringify(this.name.ellipsis[singleOrMultiple]));
        finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
      }
      return this._join(blobs, delimiter, finalJoin);
    };
    CSL2.NameOutput.prototype._joinAnd = function(blobs) {
      var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
      var finalJoin = this._getAndJoin(blobs, delimiter);
      return this._join(blobs, delimiter, finalJoin);
    };
    CSL2.NameOutput.prototype._join = function(blobs, delimiter, finalJoin) {
      var i, ilen;
      if (!blobs) {
        return false;
      }
      blobs = this._purgeEmptyBlobs(blobs);
      if (!blobs.length) {
        return false;
      }
      if (blobs.length > 1) {
        if (blobs.length === 2) {
          if (!finalJoin) {
            blobs[0].strings.suffix += delimiter;
          } else {
            blobs = [blobs[0], finalJoin, blobs[1]];
          }
        } else {
          var offset2;
          if (finalJoin) {
            offset2 = 1;
          } else {
            offset2 = 0;
          }
          var blob = blobs.pop();
          for (var i = 0, ilen = blobs.length - offset2; i < ilen; i++) {
            blobs[i].strings.suffix += delimiter;
          }
          blobs.push(finalJoin);
          blobs.push(blob);
        }
      }
      this.state.output.openLevel();
      for (i = 0, ilen = blobs.length; i < ilen; i += 1) {
        this.state.output.append(blobs[i], false, true);
      }
      this.state.output.closeLevel();
      return this.state.output.pop();
    };
    CSL2.NameOutput.prototype._getToken = function(tokenname) {
      var token = this[tokenname];
      if (tokenname === "institution") {
        var newtoken = new CSL2.Token();
        return newtoken;
      }
      return token;
    };
    CSL2.NameOutput.prototype.checkCommonAuthor = function(requireMatch) {
      if (!requireMatch) {
        return false;
      }
      var common_term = false;
      if (this.variables.length === 2) {
        var variables = this.variables;
        var varnames = variables.slice();
        varnames.sort();
        common_term = varnames.join("");
      }
      if (!common_term) {
        return false;
      }
      var has_term = false;
      if (this.state.locale[this.state.opt.lang].terms[common_term]) {
        has_term = true;
      }
      if (!has_term) {
        this.state.tmp.done_vars.push(this.variables[0]);
        this.state.tmp.done_vars.push(this.variables[1]);
        return false;
      }
      var firstSet = this.Item[this.variables[0]];
      var secondSet = this.Item[this.variables[1]];
      var perfectMatch = this._compareNamesets(firstSet, secondSet);
      if (perfectMatch === true) {
        this.state.tmp.done_vars.push(this.variables[0]);
        this.state.tmp.done_vars.push(this.variables[1]);
      }
      return !perfectMatch;
    };
    CSL2.NameOutput.prototype.setCommonTerm = function() {
      var variables = this.variables;
      var varnames = variables.slice();
      varnames.sort();
      this.common_term = varnames.join("");
      if (!this.common_term) {
        return;
      }
      var has_term = false;
      if (this.label && this.label[this.variables[0]]) {
        if (this.label[this.variables[0]].before) {
          has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].before.strings.form, 0);
        } else if (this.label[this.variables[0]].after) {
          has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].after.strings.form, 0);
        }
      }
      if (!this.state.locale[this.state.opt.lang].terms[this.common_term] || !has_term || this.variables.length < 2) {
        this.common_term = false;
        return;
      }
      var freeters_offset = 0;
      for (var i = 0, ilen = this.variables.length - 1; i < ilen; i += 1) {
        var v = this.variables[i];
        var vv = this.variables[i + 1];
        if (this.freeters[v].length || this.freeters[vv].length) {
          if (this.etal_spec[v].freeters !== this.etal_spec[vv].freeters || !this._compareNamesets(this.freeters[v], this.freeters[vv])) {
            this.common_term = false;
            return;
          }
          freeters_offset += 1;
        }
        if (this.persons[v].length !== this.persons[vv].length) {
          this.common_term = false;
          return;
        }
        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
          if (this.etal_spec[v].persons[j] !== this.etal_spec[vv].persons[j] || !this._compareNamesets(this.persons[v][j], this.persons[vv][j])) {
            this.common_term = false;
            return;
          }
        }
      }
    };
    CSL2.NameOutput.prototype._compareNamesets = function(base_nameset, nameset) {
      if (!base_nameset || !nameset || base_nameset.length !== nameset.length) {
        return false;
      }
      for (var i = 0, ilen = nameset.length; i < ilen; i += 1) {
        for (var j = 0, jlen = CSL2.NAME_PARTS.length; j < jlen; j += 1) {
          var part = CSL2.NAME_PARTS[j];
          if (!base_nameset[i] || base_nameset[i][part] != nameset[i][part]) {
            return false;
          }
        }
      }
      return true;
    };
    CSL2.NameOutput.prototype.constrainNames = function() {
      this.names_count = 0;
      var pos;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        pos = this.nameset_base + i;
        if (this.freeters[v].length) {
          this.state.tmp.names_max.push(this.freeters[v].length, "literal");
          this._imposeNameConstraints(this.freeters, this.freeters_count, v, pos);
          this.names_count += this.freeters[v].length;
        }
        if (this.institutions[v].length) {
          this.state.tmp.names_max.push(this.institutions[v].length, "literal");
          this._imposeNameConstraints(this.institutions, this.institutions_count, v, pos);
          this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
          this.names_count += this.institutions[v].length;
        }
        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
          if (this.persons[v][j].length) {
            this.state.tmp.names_max.push(this.persons[v][j].length, "literal");
            this._imposeNameConstraints(this.persons[v], this.persons_count[v], j, pos);
            this.names_count += this.persons[v][j].length;
          }
        }
      }
    };
    CSL2.NameOutput.prototype._imposeNameConstraints = function(lst, count, key, pos) {
      var display_names = lst[key];
      var discretionary_names_length = this.state.tmp["et-al-min"];
      if (this.state.tmp.suppress_decorations) {
        if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos]) {
          discretionary_names_length = this.state.tmp.disambig_request.names[pos];
        } else if (count[key] >= this.etal_min) {
          discretionary_names_length = this.etal_use_first;
        }
      } else {
        if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos] > this.etal_use_first) {
          if (count[key] < this.etal_min) {
            discretionary_names_length = count[key];
          } else {
            discretionary_names_length = this.state.tmp.disambig_request.names[pos];
          }
        } else if (count[key] >= this.etal_min) {
          discretionary_names_length = this.etal_use_first;
        }
        if (this.etal_use_last && discretionary_names_length > this.etal_min - 2) {
          discretionary_names_length = this.etal_min - 2;
        }
      }
      var sane = this.etal_min >= this.etal_use_first;
      var overlength = count[key] > discretionary_names_length;
      if (discretionary_names_length > count[key]) {
        discretionary_names_length = display_names.length;
      }
      if (sane && overlength) {
        if (this.etal_use_last) {
          lst[key] = display_names.slice(0, discretionary_names_length).concat(display_names.slice(-1));
        } else {
          lst[key] = display_names.slice(0, discretionary_names_length);
        }
      }
      this.state.tmp.disambig_settings.names[pos] = lst[key].length;
      this.state.disambiguate.padBase(this.state.tmp.disambig_settings);
    };
    CSL2.NameOutput.prototype.disambigNames = function() {
      var pos;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        pos = this.nameset_base + i;
        if (this.freeters[v].length) {
          this._runDisambigNames(this.freeters[v], pos);
        }
        if (this.institutions[v].length) {
          if (typeof this.state.tmp.disambig_settings.givens[pos] === "undefined") {
            this.state.tmp.disambig_settings.givens[pos] = [];
          }
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            if (typeof this.state.tmp.disambig_settings.givens[pos][j] === "undefined") {
              this.state.tmp.disambig_settings.givens[pos].push(2);
            }
          }
        }
        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
          if (this.persons[v][j].length) {
            this._runDisambigNames(this.persons[v][j], pos);
          }
        }
      }
    };
    CSL2.NameOutput.prototype._runDisambigNames = function(lst, pos) {
      var chk, myform, myinitials, param, i, ilen, paramx;
      for (i = 0, ilen = lst.length; i < ilen; i += 1) {
        if (!lst[i].given && !lst[i].family) {
          continue;
        }
        myinitials = this.state.inheritOpt(this.name, "initialize-with");
        this.state.registry.namereg.addname("" + this.Item.id, lst[i], i);
        chk = this.state.tmp.disambig_settings.givens[pos];
        if (typeof chk === "undefined") {
          for (var j = 0, jlen = pos + 1; j < jlen; j += 1) {
            if (!this.state.tmp.disambig_settings.givens[j]) {
              this.state.tmp.disambig_settings.givens[j] = [];
            }
          }
        }
        chk = this.state.tmp.disambig_settings.givens[pos][i];
        if (typeof chk === "undefined") {
          myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
          param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
          this.state.tmp.disambig_settings.givens[pos].push(param);
        }
        myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
        paramx = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
        if (this.state.tmp.disambig_request) {
          var val = this.state.tmp.disambig_settings.givens[pos][i];
          if (val === 1 && this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && (typeof this.state.inheritOpt(this.name, "initialize-with") === "undefined" || typeof lst[i].given === "undefined")) {
            val = 2;
          }
          param = val;
          if (this.state.opt["disambiguate-add-givenname"] && lst[i].given) {
            param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, param, this.state.inheritOpt(this.name, "form", "name-form", "long"), this.state.inheritOpt(this.name, "initialize-with"));
          }
        } else {
          param = paramx;
        }
        if (!this.state.tmp.just_looking && this.item && this.item.position === CSL2.POSITION_FIRST) {
          if (paramx > param) {
            param = paramx;
          }
        }
        if (!this.state.tmp.sort_key_flag) {
          this.state.tmp.disambig_settings.givens[pos][i] = param;
          if (typeof myinitials === "string" && (typeof this.name.strings["initialize"] === "undefined" || this.name.strings["initialize"] === true)) {
            this.state.tmp.disambig_settings.use_initials = true;
          }
        }
      }
    };
    CSL2.NameOutput.prototype.getEtAlConfig = function() {
      var item = this.item;
      this["et-al"] = {};
      this.state.output.append(this.etal_term, this.etal_style, true);
      this["et-al"].single = this.state.output.pop();
      this["et-al"].single.strings.suffix = this.etal_suffix;
      this["et-al"].single.strings.prefix = this.etal_prefix_single;
      this.state.output.append(this.etal_term, this.etal_style, true);
      this["et-al"].multiple = this.state.output.pop();
      this["et-al"].multiple.strings.suffix = this.etal_suffix;
      this["et-al"].multiple.strings.prefix = this.etal_prefix_multiple;
      if (typeof item === "undefined") {
        item = {};
      }
      if (item.position) {
        if (this.state.inheritOpt(this.name, "et-al-subsequent-min")) {
          this.etal_min = this.state.inheritOpt(this.name, "et-al-subsequent-min");
        } else {
          this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
        }
        if (this.state.inheritOpt(this.name, "et-al-subsequent-use-first")) {
          this.etal_use_first = this.state.inheritOpt(this.name, "et-al-subsequent-use-first");
        } else {
          this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
        }
      } else {
        if (this.state.tmp["et-al-min"]) {
          this.etal_min = this.state.tmp["et-al-min"];
        } else {
          this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
        }
        if (this.state.tmp["et-al-use-first"]) {
          this.etal_use_first = this.state.tmp["et-al-use-first"];
        } else {
          this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
        }
        if (typeof this.state.tmp["et-al-use-last"] === "boolean") {
          this.etal_use_last = this.state.tmp["et-al-use-last"];
        } else {
          this.etal_use_last = this.state.inheritOpt(this.name, "et-al-use-last");
        }
      }
      if (!this.state.tmp["et-al-min"]) {
        this.state.tmp["et-al-min"] = this.etal_min;
      }
    };
    CSL2.NameOutput.prototype.setEtAlParameters = function() {
      var i, ilen, j, jlen;
      for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        if (typeof this.etal_spec[v] === "undefined") {
          this.etal_spec[v] = { freeters: 0, institutions: 0, persons: [] };
        }
        this.etal_spec[this.nameset_base + i] = this.etal_spec[v];
        if (this.freeters[v].length) {
          this._setEtAlParameter("freeters", v);
        }
        for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
          if (typeof this.etal_spec[v][j] === "undefined") {
            this.etal_spec[v].persons[j] = 0;
          }
          this._setEtAlParameter("persons", v, j);
        }
        if (this.institutions[v].length) {
          this._setEtAlParameter("institutions", v);
        }
      }
    };
    CSL2.NameOutput.prototype._setEtAlParameter = function(type2, v, j) {
      var lst, count;
      if (type2 === "persons") {
        lst = this.persons[v][j];
        count = this.persons_count[v][j];
      } else {
        lst = this[type2][v];
        count = this[type2 + "_count"][v];
      }
      if (lst.length < count && !this.state.tmp.sort_key_flag) {
        if (this.etal_use_last) {
          if (type2 === "persons") {
            this.etal_spec[v].persons[j] = 2;
          } else {
            this.etal_spec[v][type2] = 2;
          }
        } else {
          if (type2 === "persons") {
            this.etal_spec[v].persons[j] = 1;
          } else {
            this.etal_spec[v][type2] = 1;
          }
        }
      } else {
        if (type2 === "persons") {
          this.etal_spec[v].persons[j] = 0;
        } else {
          this.etal_spec[v][type2] = 0;
        }
      }
    };
    CSL2.NameOutput.prototype.renderAllNames = function() {
      var pos;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        if (this.freeters[v].length || this.institutions[v].length) {
          if (!this.state.tmp.group_context.tip.condition) {
            this.state.tmp.just_did_number = false;
          }
        }
        pos = this.nameset_base + i;
        if (this.freeters[v].length) {
          this.freeters[v] = this._renderNames(v, this.freeters[v], pos);
        }
        for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
          this.persons[v][j] = this._renderNames(v, this.persons[v][j], pos, j);
        }
      }
      this.renderInstitutionNames();
    };
    CSL2.NameOutput.prototype.renderInstitutionNames = function() {
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
        var v = this.variables[i];
        for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
          var institution;
          var name = this.institutions[v][j];
          var j, jlen, localesets;
          if (this.state.tmp.extension) {
            localesets = ["sort"];
          } else if (name.isInstitution || name.literal) {
            localesets = this.state.opt["cite-lang-prefs"].institutions;
          } else {
            localesets = this.state.opt["cite-lang-prefs"].persons;
          }
          var slot = { primary: "locale-orig", secondary: false, tertiary: false };
          if (localesets) {
            var slotnames = ["primary", "secondary", "tertiary"];
            for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
              if (localesets.length - 1 < k) {
                break;
              }
              if (localesets[k]) {
                slot[slotnames[k]] = "locale-" + localesets[k];
              }
            }
          } else {
            slot.primary = "locale-translat";
          }
          if (this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
            slot.secondary = false;
            slot.tertiary = false;
          }
          this.setRenderedName(name);
          var institution = this._renderInstitutionName(v, name, slot, j);
          this.institutions[v][j] = institution;
        }
      }
    };
    CSL2.NameOutput.prototype._renderInstitutionName = function(v, name, slot, j) {
      var secondary, tertiary, long_style, short_style, institution, institution_short, institution_long;
      var res = this.getName(name, slot.primary, true);
      var primary = res.name;
      var usedOrig = res.usedOrig;
      if (primary) {
        primary = this.fixupInstitution(primary, v, j);
      }
      secondary = false;
      if (slot.secondary) {
        res = this.getName(name, slot.secondary, false, usedOrig);
        var secondary = res.name;
        usedOrig = res.usedOrig;
        if (secondary) {
          secondary = this.fixupInstitution(secondary, v, j);
        }
      }
      tertiary = false;
      if (slot.tertiary) {
        res = this.getName(name, slot.tertiary, false, usedOrig);
        tertiary = res.name;
        if (tertiary) {
          tertiary = this.fixupInstitution(tertiary, v, j);
        }
      }
      var n = {
        l: {
          pri: false,
          sec: false,
          ter: false
        },
        s: {
          pri: false,
          sec: false,
          ter: false
        }
      };
      if (primary) {
        n.l.pri = primary["long"];
        n.s.pri = primary["short"].length ? primary["short"] : primary["long"];
      }
      if (secondary) {
        n.l.sec = secondary["long"];
        n.s.sec = secondary["short"].length ? secondary["short"] : secondary["long"];
      }
      if (tertiary) {
        n.l.ter = tertiary["long"];
        n.s.ter = tertiary["short"].length ? tertiary["short"] : tertiary["long"];
      }
      switch (this.institution.strings["institution-parts"]) {
        case "short":
          if (primary["short"].length) {
            short_style = this._getShortStyle();
            institution = [this._composeOneInstitutionPart([n.s.pri, n.s.sec, n.s.ter], slot, short_style, v)];
          } else {
            long_style = this._getLongStyle(primary, v, j);
            institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
          }
          break;
        case "short-long":
          long_style = this._getLongStyle(primary, v, j);
          short_style = this._getShortStyle();
          institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
          institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
          institution = [institution_short, institution_long];
          break;
        case "long-short":
          long_style = this._getLongStyle(primary, v, j);
          short_style = this._getShortStyle();
          institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
          institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
          institution = [institution_long, institution_short];
          break;
        default:
          long_style = this._getLongStyle(primary, v, j);
          institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
          break;
      }
      var blob = this._join(institution, " ");
      if (blob) {
        blob.isInstitution = true;
      }
      this.state.tmp.name_node.children.push(blob);
      return blob;
    };
    CSL2.NameOutput.prototype._composeOneInstitutionPart = function(names2, slot, style) {
      var primary = false, secondary = false, tertiary = false, primary_tok, secondary_tok, tertiary_tok;
      if (names2[0]) {
        primary_tok = CSL2.Util.cloneToken(style);
        if (this.state.opt.citeAffixes[slot.primary]) {
          if (this.state.opt.citeAffixes.institutions[slot.primary].prefix === "<i>") {
            var hasItalic = false;
            for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
              if (style.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                hasItalic = true;
              }
            }
            if (!hasItalic) {
              primary_tok.decorations.push(["@font-style", "italic"]);
            }
          }
        }
        primary = this._renderOneInstitutionPart(names2[0], primary_tok);
      }
      if (names2[1]) {
        secondary = this._renderOneInstitutionPart(names2[1], style);
      }
      if (names2[2]) {
        tertiary = this._renderOneInstitutionPart(names2[2], style);
      }
      var institutionblob;
      if (secondary || tertiary) {
        this.state.output.openLevel("empty");
        this.state.output.append(primary);
        secondary_tok = CSL2.Util.cloneToken(style);
        if (slot.secondary) {
          secondary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.secondary].prefix;
          secondary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.secondary].suffix;
          if (!secondary_tok.strings.prefix) {
            secondary_tok.strings.prefix = " ";
          }
        }
        var secondary_outer = new CSL2.Token();
        secondary_outer.decorations.push(["@font-style", "normal"]);
        secondary_outer.decorations.push(["@font-weight", "normal"]);
        this.state.output.openLevel(secondary_outer);
        this.state.output.append(secondary, secondary_tok);
        this.state.output.closeLevel();
        tertiary_tok = CSL2.Util.cloneToken(style);
        if (slot.tertiary) {
          tertiary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.tertiary].prefix;
          tertiary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.tertiary].suffix;
          if (!tertiary_tok.strings.prefix) {
            tertiary_tok.strings.prefix = " ";
          }
        }
        var tertiary_outer = new CSL2.Token();
        tertiary_outer.decorations.push(["@font-style", "normal"]);
        tertiary_outer.decorations.push(["@font-weight", "normal"]);
        this.state.output.openLevel(tertiary_outer);
        this.state.output.append(tertiary, tertiary_tok);
        this.state.output.closeLevel();
        this.state.output.closeLevel();
        institutionblob = this.state.output.pop();
      } else {
        institutionblob = primary;
      }
      return institutionblob;
    };
    CSL2.NameOutput.prototype._renderOneInstitutionPart = function(blobs, style) {
      for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
        if (blobs[i]) {
          var str = blobs[i];
          if (this.state.tmp.strip_periods) {
            str = str.replace(/\./g, "");
          } else {
            for (var j = 0, jlen = style.decorations.length; j < jlen; j += 1) {
              if (style.decorations[j][0] === "@strip-periods" && style.decorations[j][1] === "true") {
                str = str.replace(/\./g, "");
                break;
              }
            }
          }
          this.state.tmp.group_context.tip.variable_success = true;
          this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
          if (str === "!here>>>") {
            blobs[i] = false;
          } else {
            this.state.output.append(str, style, true);
            blobs[i] = this.state.output.pop();
          }
        }
      }
      if (typeof this.institution.strings["part-separator"] === "undefined") {
        this.institution.strings["part-separator"] = this.state.tmp.name_delimiter;
      }
      return this._join(blobs, this.institution.strings["part-separator"]);
    };
    CSL2.NameOutput.prototype._renderNames = function(v, values, pos, j) {
      var ret = false;
      if (values.length) {
        var names2 = [];
        for (var i = 0, ilen = values.length; i < ilen; i += 1) {
          var name = values[i];
          var ret, localesets;
          if (this.state.tmp.extension) {
            localesets = ["sort"];
          } else if (name.isInstitution || name.literal) {
            localesets = this.state.opt["cite-lang-prefs"].institutions;
          } else {
            localesets = this.state.opt["cite-lang-prefs"].persons;
          }
          var slot = { primary: "locale-orig", secondary: false, tertiary: false };
          if (localesets) {
            var slotnames = ["primary", "secondary", "tertiary"];
            for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
              if (localesets.length - 1 < k) {
                break;
              }
              slot[slotnames[k]] = "locale-" + localesets[k];
            }
          } else {
            slot.primary = "locale-translat";
          }
          if (this.state.tmp.sort_key_flag || this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
            slot.secondary = false;
            slot.tertiary = false;
          }
          this.setRenderedName(name);
          if (!name.literal && !name.isInstitution) {
            var nameBlob = this._renderPersonalName(v, name, slot, pos, i, j);
            var nameToken = CSL2.Util.cloneToken(this.name);
            this.state.output.append(nameBlob, nameToken, true);
            names2.push(this.state.output.pop());
          } else {
            names2.push(this._renderInstitutionName(v, name, slot, j));
          }
        }
        ret = this.joinPersons(names2, pos, j);
      }
      return ret;
    };
    CSL2.NameOutput.prototype._renderPersonalName = function(v, name, slot, pos, i, j) {
      var res = this.getName(name, slot.primary, true);
      var primary = this._renderOnePersonalName(res.name, pos, i, j);
      var secondary = false;
      if (slot.secondary) {
        res = this.getName(name, slot.secondary, false, res.usedOrig);
        if (res.name) {
          secondary = this._renderOnePersonalName(res.name, pos, i, j);
        }
      }
      var tertiary = false;
      if (slot.tertiary) {
        res = this.getName(name, slot.tertiary, false, res.usedOrig);
        if (res.name) {
          tertiary = this._renderOnePersonalName(res.name, pos, i, j);
        }
      }
      var personblob;
      if (secondary || tertiary) {
        this.state.output.openLevel("empty");
        this.state.output.append(primary);
        var secondary_tok = new CSL2.Token();
        if (slot.secondary) {
          secondary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.secondary].prefix;
          secondary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.secondary].suffix;
          if (!secondary_tok.strings.prefix) {
            secondary_tok.strings.prefix = " ";
          }
        }
        this.state.output.append(secondary, secondary_tok);
        var tertiary_tok = new CSL2.Token();
        if (slot.tertiary) {
          tertiary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.tertiary].prefix;
          tertiary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.tertiary].suffix;
          if (!tertiary_tok.strings.prefix) {
            tertiary_tok.strings.prefix = " ";
          }
        }
        this.state.output.append(tertiary, tertiary_tok);
        this.state.output.closeLevel();
        personblob = this.state.output.pop();
      } else {
        personblob = primary;
      }
      return personblob;
    };
    CSL2.NameOutput.prototype._isRomanesque = function(name) {
      var ret = 2;
      if (!name.family.replace(/\"/g, "").match(CSL2.ROMANESQUE_REGEXP)) {
        ret = 0;
      }
      if (!ret && name.given && name.given.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP)) {
        ret = 1;
      }
      var top_locale;
      if (ret == 2) {
        if (name.multi && name.multi.main) {
          top_locale = name.multi.main.slice(0, 2);
        } else if (this.Item.language) {
          top_locale = this.Item.language.slice(0, 2);
        }
        if (["ja", "zh"].indexOf(top_locale) > -1) {
          ret = 1;
        }
      }
      return ret;
    };
    CSL2.NameOutput.prototype._renderOnePersonalName = function(value, pos, i, j) {
      var name = value;
      var dropping_particle = this._droppingParticle(name, pos, j);
      var family = this._familyName(name);
      var non_dropping_particle = this._nonDroppingParticle(name);
      var givenInfo = this._givenName(name, pos, i);
      var given = givenInfo.blob;
      var suffix = this._nameSuffix(name);
      if (given === false) {
        dropping_particle = false;
        suffix = false;
      }
      var sort_sep = this.state.inheritOpt(this.name, "sort-separator");
      if (!sort_sep) {
        sort_sep = "";
      }
      var suffix_sep;
      if (name["comma-suffix"]) {
        suffix_sep = ", ";
      } else {
        suffix_sep = " ";
      }
      var romanesque = this._isRomanesque(name);
      function hasJoiningPunctuation(blob2) {
        if (!blob2) {
          return false;
        } else if (typeof blob2.blobs === "string") {
          if (["\u2019", "'", "-", " "].indexOf(blob2.blobs.slice(-1)) > -1) {
            return true;
          } else {
            return false;
          }
        } else {
          return hasJoiningPunctuation(blob2.blobs[blob2.blobs.length - 1]);
        }
      }
      var has_hyphenated_non_dropping_particle = hasJoiningPunctuation(non_dropping_particle);
      var nbspace;
      if (["fr", "ru", "cs"].indexOf(this.state.opt["default-locale"][0].slice(0, 2)) > -1) {
        nbspace = "\xA0";
      } else {
        nbspace = " ";
      }
      var blob, merged, first, second;
      if (romanesque === 0) {
        blob = this._join([non_dropping_particle, family, given], "");
      } else if (romanesque === 1 || name["static-ordering"]) {
        merged = this._join([non_dropping_particle, family], nbspace);
        blob = this._join([merged, given], " ");
      } else if (name["reverse-ordering"]) {
        merged = this._join([non_dropping_particle, family], nbspace);
        blob = this._join([given, merged], " ");
      } else if (this.state.tmp.sort_key_flag) {
        if (this.state.opt["demote-non-dropping-particle"] === "never") {
          merged = this._join([non_dropping_particle, family], nbspace);
          merged = this._join([merged, dropping_particle], " ");
          merged = this._join([merged, given], this.state.opt.sort_sep);
          blob = this._join([merged, suffix], " ");
        } else {
          second = this._join([given, dropping_particle, non_dropping_particle], " ");
          merged = this._join([family, second], this.state.opt.sort_sep);
          blob = this._join([merged, suffix], " ");
        }
      } else if (this.state.inheritOpt(this.name, "name-as-sort-order") === "all" || this.state.inheritOpt(this.name, "name-as-sort-order") === "first" && i === 0 && (j === 0 || typeof j === "undefined")) {
        if (["Lord", "Lady"].indexOf(name.given) > -1) {
          sort_sep = ", ";
        }
        if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1) {
          second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
          second = this._join([second, non_dropping_particle], " ");
          if (second && this.given) {
            second.strings.prefix = this.given.strings.prefix;
            second.strings.suffix = this.given.strings.suffix;
          }
          if (family && this.family) {
            family.strings.prefix = this.family.strings.prefix;
            family.strings.suffix = this.family.strings.suffix;
          }
          merged = this._join([family, second], sort_sep);
          blob = this._join([merged, suffix], sort_sep);
        } else {
          if (has_hyphenated_non_dropping_particle) {
            first = this._join([non_dropping_particle, family], "");
          } else {
            first = this._join([non_dropping_particle, family], nbspace);
          }
          if (first && this.family) {
            first.strings.prefix = this.family.strings.prefix;
            first.strings.suffix = this.family.strings.suffix;
          }
          second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
          if (second && this.given) {
            second.strings.prefix = this.given.strings.prefix;
            second.strings.suffix = this.given.strings.suffix;
          }
          merged = this._join([first, second], sort_sep);
          blob = this._join([merged, suffix], sort_sep);
        }
        blob.isInverted = true;
      } else {
        if (name["dropping-particle"] && name.family && !name["non-dropping-particle"]) {
          var dp = name["dropping-particle"];
          var apostrophes = ["'", "\u02BC", "\u2019", "-"];
          if (apostrophes.indexOf(dp.slice(-1)) > -1 && dp.slice(0, -1) !== "de") {
            family = this._join([dropping_particle, family], "");
            dropping_particle = false;
          }
        }
        if (has_hyphenated_non_dropping_particle) {
          second = this._join([non_dropping_particle, family], "");
          second = this._join([dropping_particle, second], nbspace);
        } else {
          second = this._join([dropping_particle, non_dropping_particle, family], nbspace);
        }
        second = this._join([second, suffix], suffix_sep);
        if (second && this.family) {
          second.strings.prefix = this.family.strings.prefix;
          second.strings.suffix = this.family.strings.suffix;
        }
        if (given && this.given) {
          given.strings.prefix = this.given.strings.prefix;
          given.strings.suffix = this.given.strings.suffix;
        }
        if (second.strings.prefix) {
          name["comma-dropping-particle"] = "";
        }
        var space;
        if (this.state.inheritOpt(this.name, "initialize-with") && this.state.inheritOpt(this.name, "initialize-with").match(/[\u00a0\ufeff]/) && givenInfo.initializationLevel === 1) {
          space = nbspace;
        } else {
          space = " ";
        }
        blob = this._join([given, second], name["comma-dropping-particle"] + space);
      }
      this.state.tmp.group_context.tip.variable_success = true;
      this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
      this.state.tmp.term_predecessor = true;
      this.state.tmp.name_node.children.push(blob);
      return blob;
    };
    CSL2.NameOutput.prototype._normalizeNameInput = function(value) {
      var name = {
        literal: value.literal,
        family: value.family,
        isInstitution: value.isInstitution,
        given: value.given,
        suffix: value.suffix,
        "comma-suffix": value["comma-suffix"],
        "non-dropping-particle": value["non-dropping-particle"],
        "dropping-particle": value["dropping-particle"],
        "static-ordering": value["static-ordering"],
        "static-particles": value["static-particles"],
        "reverse-ordering": value["reverse-ordering"],
        "full-form-always": value["full-form-always"],
        "parse-names": value["parse-names"],
        "comma-dropping-particle": "",
        block_initialize: value.block_initialize,
        multi: value.multi
      };
      this._parseName(name);
      return name;
    };
    CSL2.NameOutput.prototype._stripPeriods = function(tokname, str) {
      var decor_tok = this[tokname + "_decor"];
      if (str) {
        if (this.state.tmp.strip_periods) {
          str = str.replace(/\./g, "");
        } else if (decor_tok) {
          for (var i = 0, ilen = decor_tok.decorations.length; i < ilen; i += 1) {
            if (decor_tok.decorations[i][0] === "@strip-periods" && decor_tok.decorations[i][1] === "true") {
              str = str.replace(/\./g, "");
              break;
            }
          }
        }
      }
      return str;
    };
    CSL2.NameOutput.prototype._nonDroppingParticle = function(name) {
      var ndp = name["non-dropping-particle"];
      if (ndp && this.state.tmp.sort_key_flag) {
        ndp = ndp.replace(/[\'\u2019]/, "");
      }
      var str = this._stripPeriods("family", ndp);
      if (this.state.output.append(str, this.family_decor, true)) {
        return this.state.output.pop();
      }
      return false;
    };
    CSL2.NameOutput.prototype._droppingParticle = function(name, pos, j) {
      var dp = name["dropping-particle"];
      if (dp && this.state.tmp.sort_key_flag) {
        dp = dp.replace(/[\'\u2019]/, "");
      }
      var str = this._stripPeriods("given", dp);
      if (name["dropping-particle"] && name["dropping-particle"].match(/^et.?al[^a-z]$/)) {
        if (this.state.inheritOpt(this.name, "et-al-use-last")) {
          if (typeof j === "undefined") {
            this.etal_spec[pos].freeters = 2;
          } else {
            this.etal_spec[pos].persons = 2;
          }
        } else {
          if (typeof j === "undefined") {
            this.etal_spec[pos].freeters = 1;
          } else {
            this.etal_spec[pos].persons = 1;
          }
        }
        name["comma-dropping-particle"] = "";
      } else if (this.state.output.append(str, this.given_decor, true)) {
        return this.state.output.pop();
      }
      return false;
    };
    CSL2.NameOutput.prototype._familyName = function(name) {
      var str = this._stripPeriods("family", name.family);
      if (this.state.output.append(str, this.family_decor, true)) {
        return this.state.output.pop();
      }
      return false;
    };
    CSL2.NameOutput.prototype._givenName = function(name, pos, i) {
      var ret;
      var formIsShort = this.state.inheritOpt(this.name, "form", "name-form", "long") !== "long";
      var initializeIsTurnedOn = this.state.inheritOpt(this.name, "initialize") !== false;
      var hasInitializeWith = typeof this.state.inheritOpt(this.name, "initialize-with") === "string" && !name.block_initialize;
      var defaultLevel;
      var useLevel;
      if (name["full-form-always"]) {
        useLevel = 2;
      } else {
        if (formIsShort) {
          defaultLevel = 0;
        } else if (hasInitializeWith) {
          defaultLevel = 1;
        } else {
          defaultLevel = 2;
        }
        var requestedLevel = this.state.tmp.disambig_settings.givens[pos][i];
        if (requestedLevel > defaultLevel) {
          useLevel = requestedLevel;
        } else {
          useLevel = defaultLevel;
        }
      }
      var gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
      if (gdropt && gdropt.slice(-14) === "-with-initials") {
        hasInitializeWith = true;
      }
      if (name.family && useLevel === 1) {
        if (hasInitializeWith) {
          var initialize_with = this.state.inheritOpt(this.name, "initialize-with", false, "");
          name.given = CSL2.Util.Names.initializeWith(this.state, name.given, initialize_with, !initializeIsTurnedOn);
        } else {
          name.given = CSL2.Util.Names.unInitialize(this.state, name.given);
        }
      } else if (useLevel === 0) {
        return {
          blob: false
        };
      } else if (useLevel === 2) {
        name.given = CSL2.Util.Names.unInitialize(this.state, name.given);
      }
      var str = this._stripPeriods("given", name.given);
      var rendered = this.state.output.append(str, this.given_decor, true);
      if (rendered) {
        ret = this.state.output.pop();
        return {
          blob: ret,
          initializationLevel: useLevel
        };
      }
      return {
        blob: false
      };
    };
    CSL2.NameOutput.prototype._nameSuffix = function(name) {
      var str = name.suffix, ret;
      if (str && typeof this.state.inheritOpt(this.name, "initialize-with") === "string") {
        str = CSL2.Util.Names.initializeWith(this.state, str, this.state.inheritOpt(this.name, "initialize-with"), true);
      }
      str = this._stripPeriods("family", str);
      var toSuffix = "";
      if (str && str.slice(-1) === ".") {
        str = str.slice(0, -1);
        toSuffix = ".";
      }
      var rendered = this.state.output.append(str, "empty", true);
      if (rendered) {
        ret = this.state.output.pop();
        ret.strings.suffix = toSuffix + ret.strings.suffix;
        return ret;
      }
      return false;
    };
    CSL2.NameOutput.prototype._getLongStyle = function(name) {
      var long_style;
      if (name["short"].length) {
        if (this.institutionpart["long-with-short"]) {
          long_style = this.institutionpart["long-with-short"];
        } else {
          long_style = this.institutionpart["long"];
        }
      } else {
        long_style = this.institutionpart["long"];
      }
      if (!long_style) {
        long_style = new CSL2.Token();
      }
      return long_style;
    };
    CSL2.NameOutput.prototype._getShortStyle = function() {
      var short_style;
      if (this.institutionpart["short"]) {
        short_style = this.institutionpart["short"];
      } else {
        short_style = new CSL2.Token();
      }
      return short_style;
    };
    CSL2.NameOutput.prototype._parseName = function(name) {
      if (!name["parse-names"] && typeof name["parse-names"] !== "undefined") {
        return name;
      }
      if (name.family && !name.given && name.isInstitution) {
        name.literal = name.family;
        name.family = void 0;
        name.isInstitution = void 0;
      }
      var noparse;
      if (name.family && (name.family.slice(0, 1) === '"' && name.family.slice(-1) === '"') || !name["parse-names"] && typeof name["parse-names"] !== "undefined") {
        name.family = name.family.slice(1, -1);
        noparse = true;
        name["parse-names"] = 0;
      } else {
        noparse = false;
      }
      if (this.state.opt.development_extensions.parse_names) {
        if (!name["non-dropping-particle"] && name.family && !noparse && name.given) {
          if (!name["static-particles"]) {
            CSL2.parseParticles(name, true);
          }
        }
      }
    };
    CSL2.NameOutput.prototype.getName = function(name, slotLocaleset, fallback, stopOrig) {
      if (stopOrig && slotLocaleset === "locale-orig") {
        return { name: false, usedOrig: stopOrig };
      }
      if (!name.family) {
        name.family = "";
      }
      if (!name.given) {
        name.given = "";
      }
      var name_params = {};
      name_params["static-ordering"] = this.getStaticOrder(name);
      var foundTag = true;
      var langTag;
      if (slotLocaleset !== "locale-orig") {
        foundTag = false;
        if (name.multi) {
          var langTags = this.state.opt[slotLocaleset];
          for (var i = 0, ilen = langTags.length; i < ilen; i += 1) {
            langTag = langTags[i];
            if (name.multi._key[langTag]) {
              foundTag = true;
              var isInstitution = name.isInstitution;
              name = name.multi._key[langTag];
              name.isInstitution = isInstitution;
              name_params = this.getNameParams(langTag);
              name_params.transliterated = true;
              break;
            }
          }
        }
      }
      if (!foundTag) {
        langTag = false;
        if (name.multi && name.multi.main) {
          langTag = name.multi.main;
        } else if (this.Item.language) {
          langTag = this.Item.language;
        }
        if (langTag) {
          name_params = this.getNameParams(langTag);
        }
      }
      if (!fallback && !foundTag) {
        return { name: false, usedOrig: stopOrig };
      }
      if (!name.family) {
        name.family = "";
      }
      if (!name.given) {
        name.given = "";
      }
      if (name.literal) {
        delete name.family;
        delete name.given;
      }
      name = {
        family: name.family,
        given: name.given,
        "non-dropping-particle": name["non-dropping-particle"],
        "dropping-particle": name["dropping-particle"],
        suffix: name.suffix,
        "static-ordering": name_params["static-ordering"],
        "static-particles": name["static-particles"],
        "reverse-ordering": name_params["reverse-ordering"],
        "full-form-always": name_params["full-form-always"],
        "parse-names": name["parse-names"],
        "comma-suffix": name["comma-suffix"],
        "comma-dropping-particle": name["comma-dropping-particle"],
        transliterated: name_params.transliterated,
        block_initialize: name_params["block-initialize"],
        literal: name.literal,
        isInstitution: name.isInstitution,
        multi: name.multi
      };
      if (!name.literal && (!name.given && name.family && name.isInstitution)) {
        name.literal = name.family;
      }
      if (name.literal) {
        delete name.family;
        delete name.given;
      }
      name = this._normalizeNameInput(name);
      var usedOrig;
      if (stopOrig) {
        usedOrig = stopOrig;
      } else {
        usedOrig = !foundTag;
      }
      return { name, usedOrig };
    };
    CSL2.NameOutput.prototype.getNameParams = function(langTag) {
      var ret = {};
      var langspec = CSL2.localeResolve(this.Item.language, this.state.opt["default-locale"][0]);
      var try_locale = this.state.locale[langspec.best] ? langspec.best : this.state.opt["default-locale"][0];
      var name_as_sort_order = this.state.locale[try_locale].opts["name-as-sort-order"];
      var name_as_reverse_order = this.state.locale[try_locale].opts["name-as-reverse-order"];
      var name_never_short = this.state.locale[try_locale].opts["name-never-short"];
      var field_lang_bare = langTag.split("-")[0];
      if (name_as_sort_order && name_as_sort_order[field_lang_bare]) {
        ret["static-ordering"] = true;
        ret["reverse-ordering"] = false;
      }
      if (name_as_reverse_order && name_as_reverse_order[field_lang_bare]) {
        ret["reverse-ordering"] = true;
        ret["static-ordering"] = false;
      }
      if (name_never_short && name_never_short[field_lang_bare]) {
        ret["full-form-always"] = true;
      }
      if (ret["static-ordering"]) {
        ret["block-initialize"] = true;
      }
      return ret;
    };
    CSL2.NameOutput.prototype.setRenderedName = function(name) {
      if (this.state.tmp.area === "bibliography") {
        var strname = "";
        for (var j = 0, jlen = CSL2.NAME_PARTS.length; j < jlen; j += 1) {
          if (name[CSL2.NAME_PARTS[j]]) {
            strname += name[CSL2.NAME_PARTS[j]];
          }
        }
        this.state.tmp.rendered_name.push(strname);
      }
    };
    CSL2.NameOutput.prototype.fixupInstitution = function(name, varname, listpos) {
      if (!name.literal && name.family) {
        name.literal = name.family;
        delete name.family;
      }
      var longNameStr = name.literal;
      var shortNameStr = longNameStr;
      var ret = {
        "long": longNameStr.split(/\s*\|\s*/),
        "short": shortNameStr.split(/\s*\|\s*/)
      };
      if (this.state.sys.getAbbreviation) {
        if (this.institution.strings.form === "short") {
          let jurisdiction = this.Item.jurisdiction;
          jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-entire", longNameStr, this.Item.language);
          if (this.state.transform.abbrevs[jurisdiction]["institution-entire"][longNameStr]) {
            longNameStr = this.state.transform.abbrevs[jurisdiction]["institution-entire"][longNameStr];
          } else {
            jurisdiction = this.Item.jurisdiction;
            jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", longNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction]["institution-part"][longNameStr]) {
              longNameStr = this.state.transform.abbrevs[jurisdiction]["institution-part"][longNameStr];
            }
          }
          longNameStr = this._quashChecks(jurisdiction, longNameStr);
        }
        if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
          let jurisdiction = this.Item.jurisdiction;
          jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", shortNameStr, this.Item.language);
          if (this.state.transform.abbrevs[jurisdiction]["institution-part"][shortNameStr]) {
            shortNameStr = this.state.transform.abbrevs[jurisdiction]["institution-part"][shortNameStr];
          }
          shortNameStr = this._quashChecks(jurisdiction, shortNameStr);
          if (["short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            if (shortNameStr === longNameStr) {
              shortNameStr = "";
            }
          }
        }
        ret["long"] = longNameStr.split(/\s*\|\s*/);
        ret["short"] = shortNameStr.split(/\s*\|\s*/);
        if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
          for (var j = ret["short"].length - 1; j > -1; j--) {
            let jurisdiction = this.Item.jurisdiction;
            var abbrevKey = ret["short"][j];
            jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", abbrevKey, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction]["institution-part"][abbrevKey]) {
              ret["short"][j] = this.state.transform.abbrevs[jurisdiction]["institution-part"][abbrevKey];
            }
            if (ret["short"][j].indexOf("|") > -1) {
              let retShort = ret["short"];
              let splitShort = retShort[j].split(/\s*\|\s*/);
              ret["short"] = retShort.slice(0, j).concat(splitShort).concat(retShort.slice(j + 1));
            }
          }
        }
        if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
          ret["short"].reverse();
        }
        ret["short"] = this._trimInstitution(ret["short"]);
        if (this.institution.strings["reverse-order"]) {
          ret["short"].reverse();
        }
        if (!this.state.tmp.just_looking) {
          if (this.Item.jurisdiction) {
            let jurisdiction = this.Item.jurisdiction;
            var trimmer = this.state.tmp.abbrev_trimmer;
            if (trimmer && trimmer[jurisdiction] && trimmer[jurisdiction][varname]) {
              for (var i = 0, ilen = ret["short"].length; i < ilen; i++) {
                var frag = ret["short"][i];
                ret["short"][i] = frag.replace(trimmer[jurisdiction][varname], "").trim();
              }
            }
          }
        }
      }
      if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
        ret["long"].reverse();
      }
      ret["long"] = this._trimInstitution(ret["long"]);
      if (this.institution.strings["reverse-order"]) {
        ret["long"].reverse();
      }
      return ret;
    };
    CSL2.NameOutput.prototype.getStaticOrder = function(name, refresh) {
      var static_ordering_val = false;
      if (!refresh && name["static-ordering"]) {
        static_ordering_val = true;
      } else if (this._isRomanesque(name) === 0) {
        static_ordering_val = true;
      } else if ((!name.multi || !name.multi.main) && this.Item.language && ["vi", "hu"].indexOf(this.Item.language) > -1) {
        static_ordering_val = true;
      } else if (name.multi && name.multi.main && ["vi", "hu"].indexOf(name.multi.main.slice(0, 2)) > -1) {
        static_ordering_val = true;
      } else {
        if (this.state.opt["auto-vietnamese-names"] && (CSL2.VIETNAMESE_NAMES.exec(name.family + " " + name.given) && CSL2.VIETNAMESE_SPECIALS.exec(name.family + name.given))) {
          static_ordering_val = true;
        }
      }
      return static_ordering_val;
    };
    CSL2.NameOutput.prototype._quashChecks = function(jurisdiction, str) {
      var str = this.state.transform.quashCheck(jurisdiction, str);
      var lst = str.split(/>>[0-9]{4}>>/);
      var m2 = str.match(/>>([0-9]{4})>>/);
      str = lst.pop();
      var date = this.Item["original-date"] ? this.Item["original-date"] : this.Item["issued"];
      if (date) {
        date = parseInt(date.year, 10);
        date = isNaN(date) ? false : date;
      }
      if (date) {
        if (lst.length > 0) {
          for (var k = m2.length - 1; k > 0; k--) {
            if (date >= parseInt(m2[k], 10)) {
              break;
            }
            str = lst.pop();
          }
        }
        str = str.replace(/\s*\|\s*/g, "|");
      }
      return str;
    };
    CSL2.NameOutput.prototype._trimInstitution = function(subunits) {
      var use_first = false;
      var stop_last = false;
      var use_last = false;
      var stop_first = false;
      var s = subunits.slice();
      if (this.institution) {
        if (typeof this.institution.strings["use-first"] !== "undefined") {
          use_first = this.institution.strings["use-first"];
        }
        if (typeof this.institution.strings["use-last"] !== "undefined") {
          use_last = this.institution.strings["use-last"];
        }
        if (typeof this.institution.strings["stop-first"] !== "undefined") {
          stop_first = this.institution.strings["stop-first"];
        }
        if (typeof this.institution.strings["stop-last"] !== "undefined") {
          stop_last = this.institution.strings["stop-last"];
        }
        if (use_first) {
          if (stop_last) {
            s = s.slice(0, stop_last * -1);
          }
          s = s.slice(0, use_first);
        }
        if (use_last) {
          var ss = subunits.slice();
          if (use_first) {
            stop_first = use_first;
          } else {
            s = [];
          }
          if (stop_first) {
            ss = ss.slice(stop_first);
          }
          ss = ss.slice(use_last * -1);
          s = s.concat(ss);
        }
        subunits = s;
      }
      return subunits;
    };
    CSL2.PublisherOutput = function(state, group_tok) {
      this.state = state;
      this.group_tok = group_tok;
      this.varlist = [];
    };
    CSL2.PublisherOutput.prototype.render = function() {
      this.clearVars();
      this.composeAndBlob();
      this.composeElements();
      this.composePublishers();
      this.joinPublishers();
    };
    CSL2.PublisherOutput.prototype.composeAndBlob = function() {
      this.and_blob = {};
      var and_term = false;
      if (this.group_tok.strings.and === "text") {
        and_term = this.state.getTerm("and");
      } else if (this.group_tok.strings.and === "symbol") {
        and_term = "&";
      }
      var tok = new CSL2.Token();
      tok.strings.suffix = " ";
      tok.strings.prefix = " ";
      this.state.output.append(and_term, tok, true);
      var no_delim = this.state.output.pop();
      tok.strings.prefix = this.group_tok.strings["subgroup-delimiter"];
      this.state.output.append(and_term, tok, true);
      var with_delim = this.state.output.pop();
      this.and_blob.single = false;
      this.and_blob.multiple = false;
      if (and_term) {
        if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "always") {
          this.and_blob.single = with_delim;
        } else if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "never") {
          this.and_blob.single = no_delim;
          this.and_blob.multiple = no_delim;
        } else {
          this.and_blob.single = no_delim;
          this.and_blob.multiple = with_delim;
        }
      }
    };
    CSL2.PublisherOutput.prototype.composeElements = function() {
      for (var i = 0, ilen = 2; i < ilen; i += 1) {
        var varname = ["publisher", "publisher-place"][i];
        for (var j = 0, jlen = this["publisher-list"].length; j < jlen; j += 1) {
          var str = this[varname + "-list"][j];
          var tok = this[varname + "-token"];
          this.state.output.append(str, tok, true);
          this[varname + "-list"][j] = this.state.output.pop();
        }
      }
    };
    CSL2.PublisherOutput.prototype.composePublishers = function() {
      var blobs;
      for (var i = 0, ilen = this["publisher-list"].length; i < ilen; i += 1) {
        blobs = [this[this.varlist[0] + "-list"][i], this[this.varlist[1] + "-list"][i]];
        this["publisher-list"][i] = this._join(blobs, this.group_tok.strings.delimiter);
      }
    };
    CSL2.PublisherOutput.prototype.joinPublishers = function() {
      var blobs = this["publisher-list"];
      var publishers = this._join(blobs, this.group_tok.strings["subgroup-delimiter"], this.and_blob.single, this.and_blob.multiple, this.group_tok);
      this.state.output.append(publishers, "literal");
    };
    CSL2.PublisherOutput.prototype._join = CSL2.NameOutput.prototype._join;
    CSL2.PublisherOutput.prototype._getToken = CSL2.NameOutput.prototype._getToken;
    CSL2.PublisherOutput.prototype.clearVars = function() {
      this.state.tmp["publisher-list"] = false;
      this.state.tmp["publisher-place-list"] = false;
      this.state.tmp["publisher-group-token"] = false;
      this.state.tmp["publisher-token"] = false;
      this.state.tmp["publisher-place-token"] = false;
    };
    CSL2.evaluateLabel = function(node, state, Item, item) {
      var myterm;
      if (node.strings.term === "locator") {
        if (item && item.label) {
          if (item.label === "sub verbo") {
            myterm = "sub-verbo";
          } else {
            myterm = item.label;
          }
        }
        if (!myterm) {
          myterm = "page";
        }
      } else {
        myterm = node.strings.term;
      }
      var plural = node.strings.plural;
      if (typeof plural !== "number") {
        var theItem = item && node.strings.term === "locator" ? item : Item;
        if (theItem[node.strings.term]) {
          state.processNumber(false, theItem, node.strings.term, Item.type);
          plural = state.tmp.shadow_numbers[node.strings.term].plural;
          if (!state.tmp.shadow_numbers[node.strings.term].labelForm && !state.tmp.shadow_numbers[node.strings.term].labelDecorations) {
            if (node.strings.form) {
              state.tmp.shadow_numbers[node.strings.term].labelForm = node.strings.form;
            } else if (state.tmp.group_context.tip.label_form) {
              state.tmp.shadow_numbers[node.strings.term].labelForm = state.tmp.group_context.tip.label_form;
            }
            state.tmp.shadow_numbers[node.strings.term].labelCapitalizeIfFirst = node.strings.capitalize_if_first;
            state.tmp.shadow_numbers[node.strings.term].labelDecorations = node.decorations.slice();
          }
          if (["locator", "number", "page"].indexOf(node.strings.term) > -1 && state.tmp.shadow_numbers[node.strings.term].label) {
            myterm = state.tmp.shadow_numbers[node.strings.term].label;
          }
          if (node.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
            node.decorations.reverse();
            node.decorations.push(["@showid", "true", node.cslid]);
            node.decorations.reverse();
          }
        }
      }
      return CSL2.castLabel(state, node, myterm, plural, CSL2.TOLERANT);
    };
    CSL2.castLabel = function(state, node, term, plural, mode) {
      var label_form = node.strings.form;
      var label_capitalize_if_first = node.strings.capitalize_if_first;
      if (state.tmp.group_context.tip.label_form) {
        if (label_form === "static") {
          state.tmp.group_context.tip.label_static = true;
        } else {
          label_form = state.tmp.group_context.tip.label_form;
        }
      }
      if (state.tmp.group_context.tip.label_capitalize_if_first) {
        label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
      }
      var ret = state.getTerm(term, label_form, plural, false, mode, node.default_locale);
      if (label_capitalize_if_first) {
        ret = CSL2.Output.Formatters["capitalize-first"](state, ret);
      }
      if (state.tmp.strip_periods) {
        ret = ret.replace(/\./g, "");
      } else {
        for (var i = 0, ilen = node.decorations.length; i < ilen; i += 1) {
          if (node.decorations[i][0] === "@strip-periods" && node.decorations[i][1] === "true") {
            ret = ret.replace(/\./g, "");
            break;
          }
        }
      }
      return ret;
    };
    CSL2.Node.name = {
      build: function(state, target) {
        var func;
        if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
          var oldTmpRoot;
          if (typeof state.tmp.root === "undefined") {
            oldTmpRoot = void 0;
            state.tmp.root = "citation";
          } else {
            oldTmpRoot = state.tmp.root;
          }
          if (state.inheritOpt(this, "et-al-subsequent-min") && state.inheritOpt(this, "et-al-subsequent-min") !== state.inheritOpt(this, "et-al-min")) {
            state.opt.update_mode = CSL2.POSITION;
          }
          if (state.inheritOpt(this, "et-al-subsequent-use-first") && state.inheritOpt(this, "et-al-subsequent-use-first") !== state.inheritOpt(this, "et-al-use-first")) {
            state.opt.update_mode = CSL2.POSITION;
          }
          state.tmp.root = oldTmpRoot;
          func = function(state2) {
            state2.tmp.etal_term = "et-al";
            state2.tmp.name_delimiter = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
            state2.tmp["delimiter-precedes-et-al"] = state2.inheritOpt(this, "delimiter-precedes-et-al");
            if (state2.inheritOpt(this, "and") === "text") {
              this.and_term = state2.getTerm("and", "long", 0);
            } else if (state2.inheritOpt(this, "and") === "symbol") {
              if (state2.opt.development_extensions.expect_and_symbol_form) {
                this.and_term = state2.getTerm("and", "symbol", 0);
              } else {
                this.and_term = "&";
              }
            }
            state2.tmp.and_term = this.and_term;
            if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
              this.and_prefix_single = " ";
              this.and_prefix_multiple = ", ";
              if (typeof state2.tmp.name_delimiter === "string") {
                this.and_prefix_multiple = state2.tmp.name_delimiter;
              }
              this.and_suffix = " ";
            } else {
              this.and_prefix_single = "";
              this.and_prefix_multiple = "";
              this.and_suffix = "";
            }
            if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
              this.and_prefix_single = state2.tmp.name_delimiter;
            } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
              if (this.and_prefix_multiple) {
                this.and_prefix_multiple = " ";
              }
            } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "after-inverted-name") {
              if (this.and_prefix_single) {
                this.and_prefix_single = state2.tmp.name_delimiter;
              }
              if (this.and_prefix_multiple) {
                this.and_prefix_multiple = " ";
              }
            }
            this.and = {};
            if (state2.inheritOpt(this, "and")) {
              state2.output.append(this.and_term, "empty", true);
              this.and.single = state2.output.pop();
              this.and.single.strings.prefix = this.and_prefix_single;
              this.and.single.strings.suffix = this.and_suffix;
              state2.output.append(this.and_term, "empty", true);
              this.and.multiple = state2.output.pop();
              this.and.multiple.strings.prefix = this.and_prefix_multiple;
              this.and.multiple.strings.suffix = this.and_suffix;
            } else if (state2.tmp.name_delimiter) {
              this.and.single = new CSL2.Blob(state2.tmp.name_delimiter);
              this.and.single.strings.prefix = "";
              this.and.single.strings.suffix = "";
              this.and.multiple = new CSL2.Blob(state2.tmp.name_delimiter);
              this.and.multiple.strings.prefix = "";
              this.and.multiple.strings.suffix = "";
            }
            this.ellipsis = {};
            if (state2.inheritOpt(this, "et-al-use-last")) {
              this.ellipsis_term = "\u2026";
              this.ellipsis_prefix_single = " ";
              this.ellipsis_prefix_multiple = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
              this.ellipsis_suffix = " ";
              this.ellipsis.single = new CSL2.Blob(this.ellipsis_term);
              this.ellipsis.single.strings.prefix = this.ellipsis_prefix_single;
              this.ellipsis.single.strings.suffix = this.ellipsis_suffix;
              this.ellipsis.multiple = new CSL2.Blob(this.ellipsis_term);
              this.ellipsis.multiple.strings.prefix = this.ellipsis_prefix_multiple;
              this.ellipsis.multiple.strings.suffix = this.ellipsis_suffix;
            }
            if (typeof state2.tmp["et-al-min"] === "undefined") {
              state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
            }
            if (typeof state2.tmp["et-al-use-first"] === "undefined") {
              state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
            }
            if (typeof state2.tmp["et-al-use-last"] === "undefined") {
              state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
            }
            state2.nameOutput.name = this;
          };
          state.build.name_flag = true;
          this.execs.push(func);
        }
        target.push(this);
      }
    };
    CSL2.Node["name-part"] = {
      build: function(state) {
        state.build[this.strings.name] = this;
      }
    };
    CSL2.Node.names = {
      build: function(state, target) {
        var func;
        if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
          CSL2.Util.substituteStart.call(this, state, target);
          state.build.substitute_level.push(1);
        }
        if (this.tokentype === CSL2.SINGLETON) {
          state.build.names_variables[state.build.names_variables.length - 1].concat(this.variables);
          for (var i in this.variables) {
            var variable = this.variables[i];
            var name_labels = state.build.name_label[state.build.name_label.length - 1];
            if (Object.keys(name_labels).length) {
              name_labels[variable] = name_labels[Object.keys(name_labels)[0]];
            }
          }
          func = function(state2) {
            state2.nameOutput.reinit(this, this.variables_real[0]);
          };
          this.execs.push(func);
        }
        if (this.tokentype === CSL2.START) {
          state.build.names_flag = true;
          state.build.name_flag = false;
          state.build.names_level += 1;
          state.build.names_variables.push(this.variables);
          state.build.name_label.push({});
          func = function(state2) {
            state2.tmp.can_substitute.push(true);
            state2.tmp.name_node = {};
            state2.tmp.name_node.children = [];
            state2.nameOutput.init(this);
          };
          this.execs.push(func);
        }
        if (this.tokentype === CSL2.END) {
          for (var i = 0, ilen = 3; i < ilen; i += 1) {
            var key = ["family", "given", "et-al"][i];
            this[key] = state.build[key];
            if (state.build.names_level === 1) {
              state.build[key] = void 0;
            }
          }
          this.label = state.build.name_label[state.build.name_label.length - 1];
          state.build.names_level += -1;
          state.build.names_variables.pop();
          state.build.name_label.pop();
          func = function(state2) {
            if (state2.tmp.etal_node) {
              this.etal_style = state2.tmp.etal_node;
            } else {
              this.etal_style = "empty";
            }
            this.etal_term = state2.getTerm(state2.tmp.etal_term, "long", 0);
            this.etal_prefix_single = " ";
            this.etal_prefix_multiple = state2.tmp.name_delimiter;
            if (state2.tmp["delimiter-precedes-et-al"] === "always") {
              this.etal_prefix_single = state2.tmp.name_delimiter;
            } else if (state2.tmp["delimiter-precedes-et-al"] === "never") {
              this.etal_prefix_multiple = " ";
            } else if (state2.tmp["delimiter-precedes-et-al"] === "after-inverted-name") {
              this.etal_prefix_single = state2.tmp.name_delimiter;
              this.etal_prefix_multiple = " ";
            }
            this.etal_suffix = "";
            if (!CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.etal_term)) {
              if (this.etal_prefix_single === " ") {
                this.etal_prefix_single = "";
              }
              if (this.etal_prefix_multiple === " ") {
                this.etal_prefix_multiple = "";
              }
              if (this.etal_suffix === " ") {
                this.etal_suffix = "";
              }
            }
            for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
              var key2 = ["family", "given"][i2];
              state2.nameOutput[key2] = this[key2];
            }
            state2.nameOutput["with"] = this["with"];
            var mywith = "with";
            var with_default_prefix = "";
            var with_suffix = "";
            if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(mywith)) {
              with_default_prefix = " ";
              with_suffix = " ";
            }
            var thewith = {};
            thewith.single = new CSL2.Blob(mywith);
            thewith.single.strings.suffix = with_suffix;
            thewith.multiple = new CSL2.Blob(mywith);
            thewith.multiple.strings.suffix = with_suffix;
            if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "always") {
              thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
            } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "contextual") {
              thewith.single.strings.prefix = with_default_prefix;
              thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
            } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "after-inverted-name") {
              thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              thewith.multiple.strings.prefix = with_default_prefix;
            } else {
              thewith.single.strings.prefix = with_default_prefix;
              thewith.multiple.strings.prefix = with_default_prefix;
            }
            state2.nameOutput["with"] = thewith;
            state2.nameOutput.label = this.label;
            state2.nameOutput.etal_style = this.etal_style;
            state2.nameOutput.etal_term = this.etal_term;
            state2.nameOutput.etal_prefix_single = this.etal_prefix_single;
            state2.nameOutput.etal_prefix_multiple = this.etal_prefix_multiple;
            state2.nameOutput.etal_suffix = this.etal_suffix;
            state2.nameOutput.outputNames();
            state2.tmp["et-al-use-first"] = void 0;
            state2.tmp["et-al-min"] = void 0;
            state2.tmp["et-al-use-last"] = void 0;
          };
          this.execs.push(func);
          func = function(state2) {
            if (!state2.tmp.can_substitute.pop()) {
              state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
            }
            if (state2.tmp.can_substitute.mystack.length === 1) {
              state2.tmp.can_block_substitute = false;
            }
          };
          this.execs.push(func);
          state.build.name_flag = false;
        }
        target.push(this);
        if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
          state.build.substitute_level.pop();
          CSL2.Util.substituteEnd.call(this, state, target);
        }
      }
    };
    CSL2.Node.number = {
      build: function(state, target) {
        var func;
        CSL2.Util.substituteStart.call(this, state, target);
        if (this.strings.form === "roman") {
          this.formatter = state.fun.romanizer;
        } else if (this.strings.form === "ordinal") {
          this.formatter = state.fun.ordinalizer;
        } else if (this.strings.form === "long-ordinal") {
          this.formatter = state.fun.long_ordinalizer;
        }
        if (typeof this.successor_prefix === "undefined") {
          this.successor_prefix = state[state.build.area].opt.layout_delimiter;
        }
        if (typeof this.splice_prefix === "undefined") {
          this.splice_prefix = state[state.build.area].opt.layout_delimiter;
        }
        func = function(state2, Item, item) {
          if (this.variables.length === 0) {
            return;
          }
          var varname;
          varname = this.variables[0];
          if (typeof item === "undefined") {
            var item = {};
          }
          if (["locator", "locator-extra"].indexOf(varname) > -1) {
            if (state2.tmp.just_looking) {
              return;
            }
            if (!item[varname]) {
              return;
            }
          } else {
            if (!Item[varname]) {
              return;
            }
          }
          if (varname === "collection-number" && Item.type === "legal_case") {
            state2.tmp.renders_collection_number = true;
          }
          var node = this;
          if (state2.tmp.group_context.tip.force_suppress) {
            return false;
          }
          if (["locator", "locator-extra"].indexOf(varname) > -1) {
            state2.processNumber.call(state2, node, item, varname, Item.type);
          } else {
            if (!state2.tmp.group_context.tip.condition && Item[varname]) {
              state2.tmp.just_did_number = ("" + Item[varname]).match(/[0-9]$/);
            }
            state2.processNumber.call(state2, node, Item, varname, Item.type);
          }
          if (this.substring) {
            var val = Item[varname].slice(this.substring);
            state2.output.append(val, node);
          } else {
            CSL2.Util.outputNumericField(state2, varname, Item.id);
          }
          if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
            state2.tmp.done_vars.push(this.variables_real[0]);
            state2.tmp.group_context.tip.done_vars.push(this.variables_real[0]);
          }
        };
        this.execs.push(func);
        target.push(this);
        CSL2.Util.substituteEnd.call(this, state, target);
      }
    };
    CSL2.Node.sort = {
      build: function(state, target) {
        target = state[state.build.root + "_sort"].tokens;
        if (this.tokentype === CSL2.START) {
          if (state.build.area === "citation") {
            state.opt.sort_citations = true;
          }
          state.build.area = state.build.root + "_sort";
          state.build.extension = "_sort";
          var func = function(state2, Item) {
            if (state2.opt.has_layout_locale) {
              var langspec = CSL2.localeResolve(Item.language, state2.opt["default-locale"][0]);
              var sort_locales = state2[state2.tmp.area.slice(0, -5)].opt.sort_locales;
              var langForItem;
              for (var i = 0, ilen = sort_locales.length; i < ilen; i += 1) {
                langForItem = sort_locales[i][langspec.bare];
                if (!langForItem) {
                  langForItem = sort_locales[i][langspec.best];
                }
                if (langForItem) {
                  break;
                }
              }
              if (!langForItem) {
                langForItem = state2.opt["default-locale"][0];
              }
              state2.tmp.lang_sort_hold = state2.opt.lang;
              state2.opt.lang = langForItem;
            }
          };
          this.execs.push(func);
        }
        if (this.tokentype === CSL2.END) {
          state.build.area = state.build.root;
          state.build.extension = "";
          var func = function(state2) {
            if (state2.opt.has_layout_locale) {
              state2.opt.lang = state2.tmp.lang_sort_hold;
              delete state2.tmp.lang_sort_hold;
            }
          };
          this.execs.push(func);
        }
        target.push(this);
      }
    };
    CSL2.Node.substitute = {
      build: function(state, target) {
        var func;
        if (this.tokentype === CSL2.START) {
          var choose_start = new CSL2.Token("choose", CSL2.START);
          CSL2.Node.choose.build.call(choose_start, state, target);
          var if_singleton = new CSL2.Token("if", CSL2.SINGLETON);
          func = function() {
            if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
              return true;
            }
            return false;
          };
          if_singleton.tests = [func];
          if_singleton.test = state.fun.match.any(if_singleton, state, if_singleton.tests);
          target.push(if_singleton);
          func = function(state2) {
            state2.tmp.can_block_substitute = true;
            if (state2.tmp.value.length && !state2.tmp.common_term_match_fail) {
              state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
            }
            state2.tmp.common_term_match_fail = false;
          };
          this.execs.push(func);
          target.push(this);
        }
        if (this.tokentype === CSL2.END) {
          target.push(this);
          var choose_end = new CSL2.Token("choose", CSL2.END);
          CSL2.Node.choose.build.call(choose_end, state, target);
        }
      }
    };
    CSL2.Node.text = {
      build: function(state, target) {
        var func, form, plural, id2, num, number, formatter, firstoutput, specialdelimiter, label, suffix, term;
        if (this.postponed_macro) {
          var group_start = CSL2.Util.cloneToken(this);
          group_start.name = "group";
          group_start.tokentype = CSL2.START;
          CSL2.Node.group.build.call(group_start, state, target);
          CSL2.expandMacro.call(state, this, target);
          var group_end = CSL2.Util.cloneToken(this);
          group_end.name = "group";
          group_end.tokentype = CSL2.END;
          if (this.postponed_macro === "juris-locator-label") {
            group_end.isJurisLocatorLabel = true;
          }
          CSL2.Node.group.build.call(group_end, state, target);
        } else {
          CSL2.Util.substituteStart.call(this, state, target);
          if (!this.variables_real) {
            this.variables_real = [];
          }
          if (!this.variables) {
            this.variables = [];
          }
          form = "long";
          plural = 0;
          if (this.strings.form) {
            form = this.strings.form;
          }
          if (this.strings.plural) {
            plural = this.strings.plural;
          }
          if (this.variables_real[0] === "citation-number" || this.variables_real[0] === "year-suffix" || this.variables_real[0] === "citation-label") {
            if (this.variables_real[0] === "citation-number") {
              if (state.build.root === "citation") {
                state.opt.update_mode = CSL2.NUMERIC;
              }
              if (state.build.root === "bibliography") {
                state.opt.bib_mode = CSL2.NUMERIC;
              }
              if (state[state.tmp.area].opt.collapse === "citation-number") {
                this.range_prefix = state.getTerm("citation-range-delimiter");
              }
              this.successor_prefix = state[state.build.area].opt.layout_delimiter;
              this.splice_prefix = state[state.build.area].opt.layout_delimiter;
              func = function(state2, Item, item) {
                id2 = "" + Item.id;
                if (!state2.tmp.just_looking) {
                  if (state2.tmp.area.slice(-5) === "_sort" && this.variables[0] === "citation-number") {
                    if (state2.tmp.area === "bibliography_sort") {
                      state2.tmp.group_context.tip.done_vars.push("citation-number");
                    }
                    if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                      var num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                    } else {
                      var num2 = state2.registry.registry[Item.id].seq;
                    }
                    if (num2) {
                      num2 = CSL2.Util.padding("" + num2);
                    }
                    state2.output.append(num2, this);
                    return;
                  }
                  if (item && item["author-only"]) {
                    state2.tmp.element_trace.replace("suppress-me");
                  }
                  if (state2.tmp.area !== "bibliography_sort" && state2.bibliography_sort.tmp.citation_number_map && state2.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
                    num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[id2].seq];
                  } else {
                    num2 = state2.registry.registry[id2].seq;
                  }
                  if (state2.opt.citation_number_slug) {
                    state2.output.append(state2.opt.citation_number_slug, this);
                  } else {
                    number = new CSL2.NumericBlob(state2, false, num2, this, Item.id);
                    if (state2.tmp.in_cite_predecessor) {
                      number.suppress_splice_prefix = true;
                    }
                    state2.output.append(number, "literal");
                  }
                }
              };
              this.execs.push(func);
            } else if (this.variables_real[0] === "year-suffix") {
              state.opt.has_year_suffix = true;
              if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                this.range_prefix = state.getTerm("citation-range-delimiter");
              }
              this.successor_prefix = state[state.build.area].opt.layout_delimiter;
              if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                this.successor_prefix = state[state.build.area].opt["year-suffix-delimiter"];
              }
              func = function(state2, Item) {
                if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.just_looking) {
                  num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                  if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                    this.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
                  }
                  number = new CSL2.NumericBlob(state2, false, num, this, Item.id);
                  formatter = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
                  number.setFormatter(formatter);
                  state2.output.append(number, "literal");
                  firstoutput = false;
                  for (var i = 0, ilen = state2.tmp.group_context.mystack.length; i < ilen; i++) {
                    var flags = state2.tmp.group_context.mystack[i];
                    if (!flags.variable_success && (flags.variable_attempt || !flags.variable_attempt && !flags.term_intended)) {
                      firstoutput = true;
                      break;
                    }
                  }
                  specialdelimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                  if (firstoutput && specialdelimiter && !state2.tmp.sort_key_flag) {
                    state2.tmp.splice_delimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                  }
                }
              };
              this.execs.push(func);
            } else if (this.variables_real[0] === "citation-label") {
              if (state.build.root === "bibliography") {
                state.opt.bib_mode = CSL2.TRIGRAPH;
              }
              state.opt.has_year_suffix = true;
              func = function(state2, Item) {
                label = Item["citation-label"];
                if (!label) {
                  label = state2.getCitationLabel(Item);
                }
                if (!state2.tmp.just_looking) {
                  suffix = "";
                  if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false) {
                    num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                    suffix = state2.fun.suffixator.format(num);
                  }
                  label += suffix;
                }
                state2.output.append(label, this);
              };
              this.execs.push(func);
            }
          } else {
            if (this.strings.term) {
              func = function(state2, Item) {
                var gender = state2.opt.gender[Item.type];
                var term2 = this.strings.term;
                term2 = state2.getTerm(term2, form, plural, gender, CSL2.TOLERANT, this.default_locale);
                var myterm;
                if (term2 !== "") {
                  state2.tmp.group_context.tip.term_intended = true;
                }
                CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, term2, null, this);
                if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                  myterm = CSL2.Output.Formatters["capitalize-first"](state2, term2);
                } else {
                  myterm = term2;
                }
                if (state2.tmp.strip_periods) {
                  myterm = myterm.replace(/\./g, "");
                } else {
                  for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                    if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                      myterm = myterm.replace(/\./g, "");
                      break;
                    }
                  }
                }
                state2.output.append(myterm, this);
                if (state2.tmp.can_block_substitute) {
                  state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
                }
              };
              this.execs.push(func);
              state.build.term = false;
              state.build.form = false;
              state.build.plural = false;
            } else if (this.variables_real.length) {
              func = function(state2, Item) {
                if (this.variables_real[0] !== "locator") {
                  state2.tmp.have_collapsed = false;
                }
                if (!state2.tmp.group_context.tip.condition && Item[this.variables[0]]) {
                  state2.tmp.just_did_number = false;
                }
                var val = Item[this.variables[0]];
                if (val && !state2.tmp.group_context.tip.condition) {
                  if (("" + val).slice(-1).match(/[0-9]/)) {
                    state2.tmp.just_did_number = true;
                  } else {
                    state2.tmp.just_did_number = false;
                  }
                }
              };
              this.execs.push(func);
              if (CSL2.MULTI_FIELDS.indexOf(this.variables_real[0]) > -1 || this.variables_real[0].indexOf("-main") > -1 || this.variables_real[0].indexOf("-sub") > -1 || ["language-name", "language-name-original"].indexOf(this.variables_real[0]) > -1) {
                var abbrevfam = this.variables[0];
                var abbrfall = false;
                var altvar = false;
                var transfall = false;
                if (form === "short") {
                  if (this.variables_real[0].slice(-6) !== "-short") {
                    altvar = this.variables_real[0] + "-short";
                  }
                } else {
                  abbrevfam = false;
                }
                if (state.build.extension) {
                  transfall = true;
                } else {
                  transfall = true;
                  abbrfall = true;
                }
                func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
              } else {
                if (CSL2.CITE_FIELDS.indexOf(this.variables_real[0]) > -1) {
                  func = function(state2, Item, item) {
                    if (item && item[this.variables[0]]) {
                      state2.processNumber(this, item, this.variables[0], Item.type);
                      CSL2.Util.outputNumericField(state2, this.variables[0], Item.id);
                      if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
                        state2.tmp.done_vars.push(this.variables_real[0]);
                      }
                    }
                  };
                } else if (["page", "page-first", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume"].indexOf(this.variables_real[0]) > -1) {
                  func = function(state2, Item) {
                    state2.processNumber(this, Item, this.variables[0], Item.type);
                    CSL2.Util.outputNumericField(state2, this.variables[0], Item.id);
                  };
                } else if (["URL", "DOI"].indexOf(this.variables_real[0]) > -1) {
                  func = function(state2, Item) {
                    var value;
                    if (this.variables[0]) {
                      value = state2.getVariable(Item, this.variables[0], form);
                      if (value) {
                        if (this.variables[0] === "URL" && form === "short") {
                          value = value.replace(/(.*\.[^\/]+)\/.*/, "$1");
                          if (value.match(/\/\/www\./)) {
                            value = value.replace(/https?:\/\//, "");
                          }
                        }
                        if (state2.opt.development_extensions.wrap_url_and_doi) {
                          if (!this.decorations.length || this.decorations[0][0] !== "@" + this.variables[0]) {
                            var clonetoken = CSL2.Util.cloneToken(this);
                            var groupblob = new CSL2.Blob(null, null, "url-wrapper");
                            groupblob.decorations.push(["@DOI", "true"]);
                            if (this.variables_real[0] === "DOI") {
                              var prefix;
                              if (this.strings.prefix && this.strings.prefix.match(/^.*https:\/\/doi\.org\/$/)) {
                                value = value.replace(/^https?:\/\/doi\.org\//, "");
                                if (value.match(/^https?:\/\//)) {
                                  prefix = "";
                                } else {
                                  prefix = "https://doi.org/";
                                }
                                clonetoken.strings.prefix = this.strings.prefix.slice(0, clonetoken.strings.prefix.length - 16);
                              }
                              var prefixblob = new CSL2.Blob(prefix);
                              var valueblob = new CSL2.Blob(value);
                              groupblob.push(prefixblob);
                              groupblob.push(valueblob);
                              state2.output.append(groupblob, clonetoken, false, false, true);
                            } else {
                              var valueblob = new CSL2.Blob(value);
                              groupblob.push(valueblob);
                              state2.output.append(groupblob, clonetoken, false, false, true);
                            }
                          } else {
                            state2.output.append(value, this, false, false, true);
                          }
                        } else {
                          if (this.decorations.length) {
                            for (var i = this.decorations.length - 1; i > -1; i--) {
                              if (this.decorations[i][0] === "@" + this.variables[0]) {
                                this.decorations = this.decorations.slice(0, i).concat(this.decorations.slice(i + 1));
                              }
                            }
                          }
                          state2.output.append(value, this, false, false, true);
                        }
                      }
                    }
                  };
                } else if (this.variables_real[0] === "section") {
                  func = function(state2, Item) {
                    var value;
                    value = state2.getVariable(Item, this.variables[0], form);
                    if (value) {
                      state2.output.append(value, this);
                    }
                  };
                } else if (this.variables_real[0] === "hereinafter") {
                  func = function(state2, Item) {
                    var value = state2.transform.abbrevs["default"]["hereinafter"][Item.id];
                    if (value) {
                      state2.output.append(value, this);
                      state2.tmp.group_context.tip.variable_success = true;
                    }
                  };
                } else {
                  func = function(state2, Item) {
                    var value;
                    if (this.variables[0]) {
                      value = state2.getVariable(Item, this.variables[0], form);
                      if (value) {
                        value = "" + value;
                        value = value.split("\\").join("");
                        state2.output.append(value, this);
                      }
                    }
                  };
                }
              }
              this.execs.push(func);
            } else if (this.strings.value) {
              func = function(state2) {
                state2.tmp.group_context.tip.term_intended = true;
                CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.value, true, this);
                state2.output.append(this.strings.value, this);
                if (state2.tmp.can_block_substitute) {
                  state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
                }
              };
              this.execs.push(func);
            }
          }
          target.push(this);
          CSL2.Util.substituteEnd.call(this, state, target);
        }
      }
    };
    CSL2.Node.intext = {
      build: function(state, target) {
        if (this.tokentype === CSL2.START) {
          state.build.area = "intext";
          state.build.root = "intext";
          state.build.extension = "";
          var func = function(state2, Item) {
            state2.tmp.area = "intext";
            state2.tmp.root = "intext";
            state2.tmp.extension = "";
          };
          this.execs.push(func);
        }
        if (this.tokentype === CSL2.END) {
          state.intext_sort = {
            opt: {
              sort_directions: state.citation_sort.opt.sort_directions
            }
          };
          state.intext.srt = state.citation.srt;
        }
        target.push(this);
      }
    };
    CSL2.Attributes = {};
    CSL2.Attributes["@disambiguate"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      if (arg === "true") {
        state.opt.has_disambiguate = true;
        var func = function(Item) {
          if (state.tmp.area === "bibliography") {
            if (state.tmp.disambiguate_count < state.registry.registry[Item.id].disambig.disambiguate) {
              state.tmp.disambiguate_count += 1;
              return true;
            }
          } else {
            state.tmp.disambiguate_maxMax += 1;
            if (state.tmp.disambig_settings.disambiguate && state.tmp.disambiguate_count < state.tmp.disambig_settings.disambiguate) {
              state.tmp.disambiguate_count += 1;
              return true;
            }
          }
          return false;
        };
        this.tests.push(func);
      } else if (arg === "check-ambiguity-and-backreference") {
        var func = function(Item) {
          if (state.registry.registry[Item.id].disambig.disambiguate && state.registry.registry[Item.id]["citation-count"] > 1) {
            return true;
          }
          return false;
        };
        this.tests.push(func);
      }
    };
    CSL2.Attributes["@is-numeric"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var variables = arg.split(/\s+/);
      var maketest = function(variable) {
        return function(Item, item) {
          var myitem = Item;
          if (item && ["locator", "locator-extra"].indexOf(variable) > -1) {
            myitem = item;
          }
          if (!myitem[variable]) {
            return false;
          }
          if (CSL2.NUMERIC_VARIABLES.indexOf(variable) > -1) {
            if (!state.tmp.shadow_numbers[variable]) {
              state.processNumber(false, myitem, variable, Item.type);
            }
            if (state.tmp.shadow_numbers[variable].numeric) {
              return true;
            }
          } else if (["title", "version"].indexOf(variable) > -1) {
            if (myitem[variable].slice(-1) === "" + parseInt(myitem[variable].slice(-1), 10)) {
              return true;
            }
          }
          return false;
        };
      };
      for (var i = 0; i < variables.length; i += 1) {
        this.tests.push(maketest(variables[i]));
      }
    };
    CSL2.Attributes["@is-uncertain-date"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var variables = arg.split(/\s+/);
      var maketest = function(myvariable) {
        return function(Item) {
          if (Item[myvariable] && Item[myvariable].circa) {
            return true;
          } else {
            return false;
          }
        };
      };
      for (var i = 0, ilen = variables.length; i < ilen; i += 1) {
        this.tests.push(maketest(variables[i]));
      }
    };
    CSL2.Attributes["@locator"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var trylabels = arg.replace("sub verbo", "sub-verbo");
      trylabels = trylabels.split(/\s+/);
      var maketest = function(trylabel) {
        return function(Item, item) {
          var label;
          state.processNumber(false, item, "locator");
          label = state.tmp.shadow_numbers.locator.label;
          if (label && trylabel === label) {
            return true;
          } else {
            return false;
          }
        };
      };
      for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
        this.tests.push(maketest(trylabels[i]));
      }
    };
    CSL2.Attributes["@position"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var tryposition;
      state.opt.update_mode = CSL2.POSITION;
      var trypositions = arg.split(/\s+/);
      var testSubsequentNear = function(Item, item) {
        if (item && CSL2.POSITION_MAP[item.position] >= CSL2.POSITION_MAP[CSL2.POSITION_SUBSEQUENT] && item["near-note"]) {
          return true;
        }
        return false;
      };
      var testSubsequentNotNear = function(Item, item) {
        if (item && CSL2.POSITION_MAP[item.position] == CSL2.POSITION_MAP[CSL2.POSITION_SUBSEQUENT] && !item["near-note"]) {
          return true;
        }
        return false;
      };
      var maketest = function(tryposition2) {
        return function(Item, item) {
          if (state.tmp.area === "bibliography") {
            return false;
          }
          if (item && typeof item.position === "undefined") {
            item.position = 0;
          }
          if (item && typeof item.position === "number") {
            if (item.position === 0 && tryposition2 === 0) {
              return true;
            } else if (tryposition2 > 0 && CSL2.POSITION_MAP[item.position] >= CSL2.POSITION_MAP[tryposition2]) {
              return true;
            }
          } else if (tryposition2 === 0) {
            return true;
          }
          return false;
        };
      };
      for (var i = 0, ilen = trypositions.length; i < ilen; i += 1) {
        var tryposition = trypositions[i];
        if (tryposition === "first") {
          tryposition = CSL2.POSITION_FIRST;
        } else if (tryposition === "container-subsequent") {
          tryposition = CSL2.POSITION_CONTAINER_SUBSEQUENT;
        } else if (tryposition === "subsequent") {
          tryposition = CSL2.POSITION_SUBSEQUENT;
        } else if (tryposition === "ibid") {
          tryposition = CSL2.POSITION_IBID;
        } else if (tryposition === "ibid-with-locator") {
          tryposition = CSL2.POSITION_IBID_WITH_LOCATOR;
        }
        if (tryposition === "near-note") {
          this.tests.push(testSubsequentNear);
        } else if (tryposition === "far-note") {
          this.tests.push(testSubsequentNotNear);
        } else {
          this.tests.push(maketest(tryposition));
        }
      }
    };
    CSL2.Attributes["@type"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var types = arg.split(/\s+/);
      var maketest = function(mytype) {
        return function(Item) {
          var ret = Item.type === mytype;
          if (ret) {
            return true;
          } else {
            return false;
          }
        };
      };
      var tests = [];
      for (var i = 0, ilen = types.length; i < ilen; i += 1) {
        tests.push(maketest(types[i]));
      }
      this.tests.push(state.fun.match.any(this, state, tests));
    };
    CSL2.Attributes["@variable"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var func;
      this.variables = arg.split(/\s+/);
      this.variables_real = this.variables.slice();
      if (this.name === "label" && this.variables[0]) {
        this.strings.term = this.variables[0];
      } else if (["names", "date", "text", "number"].indexOf(this.name) > -1) {
        func = function(state2, Item, item) {
          for (var i2 = this.variables.length - 1; i2 > -1; i2 += -1) {
            this.variables.pop();
          }
          for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
            if (state2.tmp.done_vars.indexOf(this.variables_real[i2]) === -1) {
              this.variables.push(this.variables_real[i2]);
            }
            if (state2.tmp.can_block_substitute) {
              state2.tmp.done_vars.push(this.variables_real[i2]);
            }
          }
        };
        this.execs.push(func);
        func = function(state2, Item, item) {
          var output = false;
          for (var i2 = 0, ilen2 = this.variables.length; i2 < ilen2; i2++) {
            var variable = this.variables[i2];
            if (["authority", "committee"].indexOf(variable) > -1 && typeof Item[variable] === "string" && this.name === "names") {
              var isValid2 = true;
              var rawNames = Item[variable].split(/\s*;\s*/);
              var rawMultiNames = {};
              if (Item.multi && Item.multi._keys[variable]) {
                for (var langTag in Item.multi._keys[variable]) {
                  rawMultiNames[langTag] = Item.multi._keys[variable][langTag].split(/\s*;\s*/);
                  if (rawMultiNames[langTag].length !== rawNames.length) {
                    isValid2 = false;
                    break;
                  }
                }
              }
              if (!isValid2) {
                rawNames = [Item[variable]];
                rawMultiNames = Item.multi._keys[variable];
              }
              for (var j = 0, jlen = rawNames.length; j < jlen; j++) {
                var creatorParent = {
                  literal: rawNames[j],
                  multi: {
                    _key: {}
                  }
                };
                for (var langTag in rawMultiNames) {
                  var creatorChild = {
                    literal: rawMultiNames[langTag][j]
                  };
                  creatorParent.multi._key[langTag] = creatorChild;
                }
                rawNames[j] = creatorParent;
              }
              Item[variable] = rawNames;
            }
            if (this.strings.form === "short" && !Item[variable]) {
              if (variable === "title") {
                variable = "title-short";
              } else if (variable === "container-title") {
                variable = "container-title-short";
              }
            }
            if (variable === "year-suffix") {
              output = true;
              break;
            } else if (CSL2.DATE_VARIABLES.indexOf(variable) > -1) {
              if (state2.opt.development_extensions.locator_date_and_revision && variable === "locator-date") {
                output = true;
                break;
              }
              if (Item[variable]) {
                for (var key in Item[variable]) {
                  if (this.dateparts.indexOf(key) === -1 && key !== "literal") {
                    continue;
                  }
                  if (Item[variable][key]) {
                    output = true;
                    break;
                  }
                }
                if (output) {
                  break;
                }
              }
            } else if (variable === "locator") {
              if (item && item.locator) {
                output = true;
              }
              break;
            } else if (variable === "locator-extra") {
              if (item && item["locator-extra"]) {
                output = true;
              }
              break;
            } else if (["citation-number", "citation-label"].indexOf(variable) > -1) {
              output = true;
              break;
            } else if (variable === "first-reference-note-number") {
              if (item && item["first-reference-note-number"]) {
                output = true;
              }
              break;
            } else if (variable === "first-container-reference-note-number") {
              if (item && item["first-container-reference-note-number"]) {
                output = true;
              }
              break;
            } else if (variable === "hereinafter") {
              if (state2.transform.abbrevs["default"].hereinafter[Item.id] && state2.sys.getAbbreviation && Item.id) {
                output = true;
              }
              break;
            } else if (typeof Item[variable] === "object") {
              break;
            } else if (typeof Item[variable] === "string" && Item[variable]) {
              output = true;
              break;
            } else if (typeof Item[variable] === "number") {
              output = true;
              break;
            }
            if (output) {
              break;
            }
          }
          if (output) {
            for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
              var variable = this.variables_real[i2];
              if (variable !== "citation-number" || state2.tmp.area !== "bibliography") {
                state2.tmp.cite_renders_content = true;
              }
              state2.tmp.group_context.tip.variable_success = true;
              if (state2.tmp.can_substitute.value() && state2.tmp.area === "bibliography" && typeof Item[variable] === "string") {
                state2.tmp.name_node.top = state2.output.current.value();
                state2.tmp.rendered_name.push(Item[variable]);
              }
            }
            state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
          } else {
            state2.tmp.group_context.tip.variable_attempt = true;
          }
        };
        this.execs.push(func);
      } else if (["if", "else-if", "condition"].indexOf(this.name) > -1) {
        var maketest = function(variable) {
          return function(Item, item) {
            var myitem = Item;
            if (item && ["locator", "locator-extra", "first-reference-note-number", "first-container-reference-note-number", "locator-date"].indexOf(variable) > -1) {
              myitem = item;
            }
            if (variable === "hereinafter" && state.sys.getAbbreviation && myitem.id) {
              if (state.transform.abbrevs["default"].hereinafter[myitem.id]) {
                return true;
              }
            } else if (myitem[variable]) {
              if (typeof myitem[variable] === "number" || typeof myitem[variable] === "string") {
                return true;
              } else if (typeof myitem[variable] === "object") {
                for (var key in myitem[variable]) {
                  if (myitem[variable][key]) {
                    return true;
                  }
                }
              }
            }
            return false;
          };
        };
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          this.tests.push(maketest(this.variables[i]));
        }
      }
    };
    CSL2.Attributes["@page"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var trylabels = arg.replace("sub verbo", "sub-verbo");
      trylabels = trylabels.split(/\s+/);
      var maketest = function(trylabel) {
        return function(Item) {
          var label;
          state.processNumber(false, Item, "page", Item.type);
          if (!state.tmp.shadow_numbers.page.label) {
            label = "page";
          } else if (state.tmp.shadow_numbers.page.label === "sub verbo") {
            label = "sub-verbo";
          } else {
            label = state.tmp.shadow_numbers.page.label;
          }
          if (state.tmp.shadow_numbers.page.values.length > 0) {
            if (state.tmp.shadow_numbers.page.values[0].gotosleepability) {
              state.tmp.shadow_numbers.page.values[0].labelVisibility = false;
            }
          }
          if (trylabel === label) {
            return true;
          } else {
            return false;
          }
        };
      };
      for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
        this.tests.push(maketest(trylabels[i]));
      }
    };
    CSL2.Attributes["@number"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var trylabels = arg.split(/\s+/);
      var maketest = function(trylabel) {
        return function(Item) {
          var label;
          state.processNumber(false, Item, "number", Item.type);
          if (!state.tmp.shadow_numbers.number.label) {
            label = "number";
          } else {
            label = state.tmp.shadow_numbers.number.label;
          }
          if (trylabel === label) {
            return true;
          } else {
            return false;
          }
        };
      };
      for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
        this.tests.push(maketest(trylabels[i]));
      }
    };
    CSL2.Attributes["@jurisdiction"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var tryjurisdictions = arg.split(/\s+/);
      var maketests = function(tryjurisdictions2) {
        return function(Item) {
          if (!Item.jurisdiction) {
            return false;
          }
          var jurisdiction = Item.jurisdiction;
          for (var i = 0, ilen = tryjurisdictions2.length; i < ilen; i++) {
            if (jurisdiction === tryjurisdictions2[i]) {
              return true;
            }
          }
          return false;
        };
      };
      this.tests.push(maketests(tryjurisdictions));
    };
    CSL2.Attributes["@country"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var trycountries = arg.split(/\s+/);
      var maketests = function(trycountries2) {
        return function(Item) {
          if (!Item.country) {
            return false;
          }
          var country = Item.country;
          for (var i = 0, ilen = trycountries2.length; i < ilen; i++) {
            if (country === trycountries2[i]) {
              return true;
            }
          }
          return false;
        };
      };
      this.tests.push(maketests(trycountries));
    };
    CSL2.Attributes["@context"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var func = function() {
        if (["bibliography", "citation"].indexOf(arg) > -1) {
          var area = state.tmp.area.slice(0, arg.length);
          if (area === arg) {
            return true;
          }
          return false;
        } else if (arg === "alternative") {
          return !!state.tmp.abort_alternative;
        }
      };
      this.tests.push(func);
    };
    CSL2.Attributes["@has-year-only"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var trydates = arg.split(/\s+/);
      var maketest = function(trydate) {
        return function(Item) {
          var date = Item[trydate];
          if (!date || date.month || date.season) {
            return false;
          } else {
            return true;
          }
        };
      };
      for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
        this.tests.push(maketest(trydates[i]));
      }
    };
    CSL2.Attributes["@has-to-month-or-season"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var trydates = arg.split(/\s+/);
      var maketest = function(trydate) {
        return function(Item) {
          var date = Item[trydate];
          if (!date || !date.month && !date.season || date.day) {
            return false;
          } else {
            return true;
          }
        };
      };
      for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
        this.tests.push(maketest(trydates[i]));
      }
    };
    CSL2.Attributes["@has-day"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var trydates = arg.split(/\s+/);
      var maketest = function(trydate) {
        return function(Item) {
          var date = Item[trydate];
          if (!date || !date.day) {
            return false;
          } else {
            return true;
          }
        };
      };
      for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
        this.tests.push(maketest(trydates[i]));
      }
    };
    CSL2.Attributes["@is-plural"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var func = function(Item) {
        var nameList = Item[arg];
        if (nameList && nameList.length) {
          var persons = 0;
          var institutions = 0;
          var last_is_person = false;
          for (var i = 0, ilen = nameList.length; i < ilen; i += 1) {
            if (state.opt.development_extensions.spoof_institutional_affiliations && (nameList[i].literal || nameList[i].isInstitution && nameList[i].family && !nameList[i].given)) {
              institutions += 1;
              last_is_person = false;
            } else {
              persons += 1;
              last_is_person = true;
            }
          }
          if (persons > 1) {
            return true;
          } else if (institutions > 1) {
            return true;
          } else if (institutions && last_is_person) {
            return true;
          }
        }
        return false;
      };
      this.tests.push(func);
    };
    CSL2.Attributes["@is-multiple"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var func = function(Item) {
        var val = "" + Item[arg];
        var lst = val.split(/(?:,\s|\s(?:tot\sen\smet|līdz|oraz|and|bis|έως|και|och|až|do|en|et|in|ir|ja|og|sa|to|un|und|és|și|i|u|y|à|e|a|и|-|–)\s|—|\&)/);
        if (lst.length > 1) {
          return true;
        }
        return false;
      };
      this.tests.push(func);
    };
    CSL2.Attributes["@locale"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var ret, langspec, lang, lst, i, ilen;
      var locale_default = state.opt["default-locale"][0];
      if (this.name === "layout") {
        this.locale_raw = arg;
        if (this.tokentype === CSL2.START) {
          if (!state.opt.multi_layout) {
            state.opt.multi_layout = [];
          }
          var locale_data = [];
          var locales = arg.split(/\s+/);
          var sort_locale = {};
          var localeMaster = CSL2.localeResolve(locales[0], locale_default);
          locale_data.push(localeMaster);
          if (localeMaster.generic) {
            sort_locale[localeMaster.generic] = localeMaster.best;
          } else {
            sort_locale[localeMaster.best] = localeMaster.best;
          }
          for (var i = 1, ilen = locales.length; i < ilen; i += 1) {
            var localeServant = CSL2.localeResolve(locales[i], locale_default);
            locale_data.push(localeServant);
            if (localeServant.generic) {
              sort_locale[localeServant.generic] = localeMaster.best;
            } else {
              sort_locale[localeServant.best] = localeMaster.best;
            }
          }
          state[state.build.area].opt.sort_locales.push(sort_locale);
          state.opt.multi_layout.push(locale_data);
        }
        state.opt.has_layout_locale = true;
      } else {
        lst = arg.split(/\s+/);
        var locale_bares = [];
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          lang = lst[i];
          langspec = CSL2.localeResolve(lang, locale_default);
          if (lst[i].length === 2) {
            locale_bares.push(langspec.bare);
          }
          state.localeConfigure(langspec, true);
          lst[i] = langspec;
        }
        var locale_list = lst.slice();
        var maketest = function(locale_list2, locale_default2, locale_bares2) {
          return function(Item) {
            var res;
            ret = [];
            res = false;
            var langspec2 = false;
            var lang2;
            if (!Item.language) {
              lang2 = locale_default2;
            } else {
              lang2 = Item.language;
            }
            langspec2 = CSL2.localeResolve(lang2, locale_default2);
            for (i = 0, ilen = locale_list2.length; i < ilen; i += 1) {
              if (langspec2.best === locale_list2[i].best) {
                state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                state.tmp.condition_lang_val_arr.push(state.opt.lang);
                state.opt.lang = locale_list2[0].best;
                res = true;
                break;
              }
            }
            if (!res && locale_bares2.indexOf(langspec2.bare) > -1) {
              state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
              state.tmp.condition_lang_val_arr.push(state.opt.lang);
              state.opt.lang = locale_list2[0].best;
              res = true;
            }
            return res;
          };
        };
        this.tests.push(maketest(locale_list, locale_default, locale_bares));
      }
    };
    CSL2.Attributes["@alternative-node-internal"] = function(state) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var maketest = function() {
        return function() {
          return !state.tmp.abort_alternative;
        };
      };
      var me = this;
      this.tests.push(maketest(me));
    };
    CSL2.Attributes["@locale-internal"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var langspec, lang, lst, i, ilen;
      lst = arg.split(/\s+/);
      this.locale_bares = [];
      for (i = 0, ilen = lst.length; i < ilen; i += 1) {
        lang = lst[i];
        langspec = CSL2.localeResolve(lang, state.opt["default-locale"][0]);
        if (lst[i].length === 2) {
          this.locale_bares.push(langspec.bare);
        }
        state.localeConfigure(langspec);
        lst[i] = langspec;
      }
      this.locale_default = state.opt["default-locale"][0];
      this.locale = lst[0].best;
      this.locale_list = lst.slice();
      var maketest = function(me2) {
        return function(Item) {
          var ret, res;
          ret = [];
          res = false;
          var langspec2 = false;
          if (Item.language) {
            lang = Item.language;
            langspec2 = CSL2.localeResolve(lang, state.opt["default-locale"][0]);
            if (langspec2.best === state.opt["default-locale"][0]) {
              langspec2 = false;
            }
          }
          if (langspec2) {
            for (i = 0, ilen = me2.locale_list.length; i < ilen; i += 1) {
              if (langspec2.best === me2.locale_list[i].best) {
                state.opt.lang = me2.locale;
                state.tmp.last_cite_locale = me2.locale;
                state.output.openLevel("empty");
                state.output.current.value().new_locale = me2.locale;
                res = true;
                break;
              }
            }
            if (!res && me2.locale_bares.indexOf(langspec2.bare) > -1) {
              state.opt.lang = me2.locale;
              state.tmp.last_cite_locale = me2.locale;
              state.output.openLevel("empty");
              state.output.current.value().new_locale = me2.locale;
              res = true;
            }
          }
          return res;
        };
      };
      var me = this;
      this.tests.push(maketest(me));
    };
    CSL2.Attributes["@court-class"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var tryclasses = arg.split(/\s+/);
      var maketest = function(tryclass) {
        return function(Item) {
          var cls = CSL2.GET_COURT_CLASS(state, Item);
          if (cls === tryclass) {
            return true;
          } else {
            return false;
          }
        };
      };
      for (var i = 0, ilen = tryclasses.length; i < ilen; i++) {
        this.tests.push(maketest(tryclasses[i]));
      }
    };
    CSL2.Attributes["@container-multiple"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var retval = arg === "true" ? true : false;
      var maketest = function(retval2) {
        return function(Item) {
          if (!state.tmp.container_item_count[Item.container_id]) {
            return !retval2;
          } else if (state.tmp.container_item_count[Item.container_id] > 1) {
            return retval2;
          }
          return !retval2;
        };
      };
      this.tests.push(maketest(retval));
    };
    CSL2.Attributes["@container-subsequent"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var retval = arg === "true" ? true : false;
      var maketest = function(retval2) {
        return function(Item) {
          if (state.tmp.container_item_pos[Item.container_id] > 1) {
            return retval2;
          }
          return !retval2;
        };
      };
      this.tests.push(maketest(retval));
    };
    CSL2.Attributes["@has-subunit"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var maketest = function(namevar) {
        return function(Item) {
          var subunit_count = 0;
          for (var i in Item[namevar]) {
            var name = Item[namevar][i];
            if (!name.given) {
              var institution = name.literal ? name.literal : name.family;
              var length = institution.split("|").length;
              if (subunit_count === 0 || length < subunit_count) {
                subunit_count = length;
              }
            }
          }
          return subunit_count > 1;
        };
      };
      this.tests.push(maketest(arg));
    };
    CSL2.Attributes["@cite-form"] = function(state, arg) {
      if (!this.tests) {
        this.tests = [];
      }
      ;
      var maketest = function(citeForm) {
        return function(Item) {
          if (Item["cite-form"] === citeForm) {
            return true;
          }
          return false;
        };
      };
      this.tests.push(maketest(arg));
    };
    CSL2.Attributes["@disable-duplicate-year-suppression"] = function(state, arg) {
      state.opt.disable_duplicate_year_suppression = arg.split(/\s+/);
    };
    CSL2.Attributes["@consolidate-containers"] = function(state, arg) {
      CSL2.Attributes["@track-containers"](state, arg);
      var args = arg.split(/\s+/);
      state.bibliography.opt.consolidate_containers = args;
    };
    CSL2.Attributes["@track-containers"] = function(state, arg) {
      var args = arg.split(/\s+/);
      if (!state.bibliography.opt.track_container_items) {
        state.bibliography.opt.track_container_items = [];
      }
      if (!state.bibliography.opt.consolidate_containers) {
        state.bibliography.opt.consolidate_containers = [];
      }
      state.bibliography.opt.track_container_items = state.bibliography.opt.track_container_items.concat(args);
    };
    CSL2.Attributes["@parallel-first"] = function(state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      if (!state.opt.track_repeat) {
        state.opt.track_repeat = {};
      }
      this.parallel_first = {};
      for (var i in vars) {
        var v = vars[i];
        this.parallel_first[v] = true;
        state.opt.track_repeat[v] = true;
      }
    };
    CSL2.Attributes["@parallel-last"] = function(state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      if (!state.opt.track_repeat) {
        state.opt.track_repeat = {};
      }
      this.parallel_last = {};
      for (var i in vars) {
        var v = vars[i];
        this.parallel_last[v] = true;
        state.opt.track_repeat[v] = true;
      }
    };
    CSL2.Attributes["@parallel-last-to-first"] = function(state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      this.parallel_last_to_first = {};
      for (var i = 0, ilen = vars.length; i < ilen; i++) {
        this.parallel_last_to_first[vars[i]] = true;
      }
    };
    CSL2.Attributes["@parallel-delimiter-override"] = function(state, arg) {
      state.opt.parallel.enable = true;
      this.strings.set_parallel_delimiter_override = arg;
    };
    CSL2.Attributes["@parallel-delimiter-override-on-suppress"] = function(state, arg) {
      state.opt.parallel.enable = true;
      this.strings.set_parallel_delimiter_override_on_suppress = arg;
    };
    CSL2.Attributes["@no-repeat"] = function(state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      if (!state.opt.track_repeat) {
        state.opt.track_repeat = {};
      }
      this.non_parallel = {};
      for (var i in vars) {
        var v = vars[i];
        this.non_parallel[v] = true;
        state.opt.track_repeat[v] = true;
      }
    };
    CSL2.Attributes["@require"] = function(state, arg) {
      state.opt.use_context_condition = true;
      this.strings.require = arg;
    };
    CSL2.Attributes["@reject"] = function(state, arg) {
      state.opt.use_context_condition = true;
      this.strings.reject = arg;
    };
    CSL2.Attributes["@require-comma-on-symbol"] = function(state, arg) {
      state.opt.require_comma_on_symbol = arg;
    };
    CSL2.Attributes["@gender"] = function(state, arg) {
      this.gender = arg;
    };
    CSL2.Attributes["@cslid"] = function(state, arg) {
      this.cslid = parseInt(arg, 10);
    };
    CSL2.Attributes["@capitalize-if-first"] = function(state, arg) {
      this.strings.capitalize_if_first_override = arg;
    };
    CSL2.Attributes["@label-capitalize-if-first"] = function(state, arg) {
      this.strings.label_capitalize_if_first_override = arg;
    };
    CSL2.Attributes["@label-form"] = function(state, arg) {
      this.strings.label_form_override = arg;
    };
    CSL2.Attributes["@part-separator"] = function(state, arg) {
      this.strings["part-separator"] = arg;
    };
    CSL2.Attributes["@leading-noise-words"] = function(state, arg) {
      this["leading-noise-words"] = arg;
    };
    CSL2.Attributes["@name-never-short"] = function(state, arg) {
      this["name-never-short"] = arg;
    };
    CSL2.Attributes["@class"] = function(state, arg) {
      state.opt["class"] = arg;
    };
    CSL2.Attributes["@version"] = function(state, arg) {
      state.opt.version = arg;
    };
    CSL2.Attributes["@value"] = function(state, arg) {
      this.strings.value = arg;
    };
    CSL2.Attributes["@name"] = function(state, arg) {
      this.strings.name = arg;
    };
    CSL2.Attributes["@form"] = function(state, arg) {
      this.strings.form = arg;
    };
    CSL2.Attributes["@date-parts"] = function(state, arg) {
      this.strings["date-parts"] = arg;
    };
    CSL2.Attributes["@range-delimiter"] = function(state, arg) {
      this.strings["range-delimiter"] = arg;
    };
    CSL2.Attributes["@macro"] = function(state, arg) {
      this.postponed_macro = arg;
    };
    CSL2.Attributes["@term"] = function(state, arg) {
      if (arg === "sub verbo") {
        this.strings.term = "sub-verbo";
      } else {
        this.strings.term = arg;
      }
    };
    CSL2.Attributes["@xmlns"] = function() {
    };
    CSL2.Attributes["@lang"] = function(state, arg) {
      if (arg) {
        state.build.lang = arg;
      }
    };
    CSL2.Attributes["@lingo"] = function() {
    };
    CSL2.Attributes["@macro-has-date"] = function() {
      this["macro-has-date"] = true;
    };
    CSL2.Attributes["@suffix"] = function(state, arg) {
      this.strings.suffix = arg;
    };
    CSL2.Attributes["@prefix"] = function(state, arg) {
      this.strings.prefix = arg;
    };
    CSL2.Attributes["@delimiter"] = function(state, arg) {
      this.strings.delimiter = arg;
    };
    CSL2.Attributes["@match"] = function(state, arg) {
      this.match = arg;
    };
    CSL2.Attributes["@names-min"] = function(state, arg) {
      var val = parseInt(arg, 10);
      if (state[state.build.area].opt.max_number_of_names < val) {
        state[state.build.area].opt.max_number_of_names = val;
      }
      this.strings["et-al-min"] = val;
    };
    CSL2.Attributes["@names-use-first"] = function(state, arg) {
      this.strings["et-al-use-first"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@names-use-last"] = function(state, arg) {
      if (arg === "true") {
        this.strings["et-al-use-last"] = true;
      } else {
        this.strings["et-al-use-last"] = false;
      }
    };
    CSL2.Attributes["@sort"] = function(state, arg) {
      if (arg === "descending") {
        this.strings.sort_direction = CSL2.DESCENDING;
      }
    };
    CSL2.Attributes["@plural"] = function(state, arg) {
      if (arg === "always" || arg === "true") {
        this.strings.plural = 1;
      } else if (arg === "never" || arg === "false") {
        this.strings.plural = 0;
      } else if (arg === "contextual") {
        this.strings.plural = false;
      }
    };
    CSL2.Attributes["@has-publisher-and-publisher-place"] = function() {
      this.strings["has-publisher-and-publisher-place"] = true;
    };
    CSL2.Attributes["@publisher-delimiter-precedes-last"] = function(state, arg) {
      this.strings["publisher-delimiter-precedes-last"] = arg;
    };
    CSL2.Attributes["@publisher-delimiter"] = function(state, arg) {
      this.strings["publisher-delimiter"] = arg;
    };
    CSL2.Attributes["@publisher-and"] = function(state, arg) {
      this.strings["publisher-and"] = arg;
    };
    CSL2.Attributes["@givenname-disambiguation-rule"] = function(state, arg) {
      if (CSL2.GIVENNAME_DISAMBIGUATION_RULES.indexOf(arg) > -1) {
        state.citation.opt["givenname-disambiguation-rule"] = arg;
      }
    };
    CSL2.Attributes["@collapse"] = function(state, arg) {
      if (arg) {
        state[this.name].opt.collapse = arg;
      }
    };
    CSL2.Attributes["@cite-group-delimiter"] = function(state, arg) {
      if (arg) {
        state[state.tmp.area].opt.cite_group_delimiter = arg;
      }
    };
    CSL2.Attributes["@names-delimiter"] = function(state, arg) {
      state.setOpt(this, "names-delimiter", arg);
    };
    CSL2.Attributes["@name-form"] = function(state, arg) {
      state.setOpt(this, "name-form", arg);
    };
    CSL2.Attributes["@subgroup-delimiter"] = function(state, arg) {
      this.strings["subgroup-delimiter"] = arg;
    };
    CSL2.Attributes["@subgroup-delimiter-precedes-last"] = function(state, arg) {
      this.strings["subgroup-delimiter-precedes-last"] = arg;
    };
    CSL2.Attributes["@name-delimiter"] = function(state, arg) {
      state.setOpt(this, "name-delimiter", arg);
    };
    CSL2.Attributes["@et-al-min"] = function(state, arg) {
      var val = parseInt(arg, 10);
      if (state[state.build.area].opt.max_number_of_names < val) {
        state[state.build.area].opt.max_number_of_names = val;
      }
      state.setOpt(this, "et-al-min", val);
    };
    CSL2.Attributes["@et-al-use-first"] = function(state, arg) {
      state.setOpt(this, "et-al-use-first", parseInt(arg, 10));
    };
    CSL2.Attributes["@et-al-use-last"] = function(state, arg) {
      if (arg === "true") {
        state.setOpt(this, "et-al-use-last", true);
      } else {
        state.setOpt(this, "et-al-use-last", false);
      }
    };
    CSL2.Attributes["@et-al-subsequent-min"] = function(state, arg) {
      var val = parseInt(arg, 10);
      if (state[state.build.area].opt.max_number_of_names < val) {
        state[state.build.area].opt.max_number_of_names = val;
      }
      state.setOpt(this, "et-al-subsequent-min", val);
    };
    CSL2.Attributes["@et-al-subsequent-use-first"] = function(state, arg) {
      state.setOpt(this, "et-al-subsequent-use-first", parseInt(arg, 10));
    };
    CSL2.Attributes["@suppress-min"] = function(state, arg) {
      this.strings["suppress-min"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@suppress-max"] = function(state, arg) {
      this.strings["suppress-max"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@and"] = function(state, arg) {
      state.setOpt(this, "and", arg);
    };
    CSL2.Attributes["@delimiter-precedes-last"] = function(state, arg) {
      state.setOpt(this, "delimiter-precedes-last", arg);
    };
    CSL2.Attributes["@delimiter-precedes-et-al"] = function(state, arg) {
      state.setOpt(this, "delimiter-precedes-et-al", arg);
    };
    CSL2.Attributes["@initialize-with"] = function(state, arg) {
      state.setOpt(this, "initialize-with", arg);
    };
    CSL2.Attributes["@initialize"] = function(state, arg) {
      if (arg === "false") {
        state.setOpt(this, "initialize", false);
      }
    };
    CSL2.Attributes["@name-as-reverse-order"] = function(state, arg) {
      this["name-as-reverse-order"] = arg;
    };
    CSL2.Attributes["@name-as-sort-order"] = function(state, arg) {
      if (this.name === "style-options") {
        this["name-as-sort-order"] = arg;
      } else {
        state.setOpt(this, "name-as-sort-order", arg);
      }
    };
    CSL2.Attributes["@sort-separator"] = function(state, arg) {
      state.setOpt(this, "sort-separator", arg);
    };
    CSL2.Attributes["@require-match"] = function(state, arg) {
      if (arg === "true") {
        this.requireMatch = true;
      }
    };
    CSL2.Attributes["@exclude-types"] = function(state, arg) {
      state.bibliography.opt.exclude_types = arg.split(/\s+/);
    };
    CSL2.Attributes["@exclude-with-fields"] = function(state, arg) {
      state.bibliography.opt.exclude_with_fields = arg.split(/\s+/);
    };
    CSL2.Attributes["@year-suffix-delimiter"] = function(state, arg) {
      state[this.name].opt["year-suffix-delimiter"] = arg;
    };
    CSL2.Attributes["@after-collapse-delimiter"] = function(state, arg) {
      state[this.name].opt["after-collapse-delimiter"] = arg;
    };
    CSL2.Attributes["@subsequent-author-substitute"] = function(state, arg) {
      state[this.name].opt["subsequent-author-substitute"] = arg;
    };
    CSL2.Attributes["@subsequent-author-substitute-rule"] = function(state, arg) {
      state[this.name].opt["subsequent-author-substitute-rule"] = arg;
    };
    CSL2.Attributes["@disambiguate-add-names"] = function(state, arg) {
      if (arg === "true") {
        state.opt["disambiguate-add-names"] = true;
      }
    };
    CSL2.Attributes["@disambiguate-add-givenname"] = function(state, arg) {
      if (arg === "true") {
        state.opt["disambiguate-add-givenname"] = true;
      }
    };
    CSL2.Attributes["@disambiguate-add-year-suffix"] = function(state, arg) {
      if (arg === "true" && state.opt.xclass !== "numeric") {
        state.opt["disambiguate-add-year-suffix"] = true;
      }
    };
    CSL2.Attributes["@second-field-align"] = function(state, arg) {
      if (arg === "flush" || arg === "margin") {
        state[this.name].opt["second-field-align"] = arg;
      }
    };
    CSL2.Attributes["@hanging-indent"] = function(state, arg) {
      if (arg === "true") {
        if (state.opt.development_extensions.hanging_indent_legacy_number) {
          state[this.name].opt.hangingindent = 2;
        } else {
          state[this.name].opt.hangingindent = true;
        }
      }
    };
    CSL2.Attributes["@line-spacing"] = function(state, arg) {
      if (arg && arg.match(/^[.0-9]+$/)) {
        state[this.name].opt["line-spacing"] = parseFloat(arg, 10);
      }
    };
    CSL2.Attributes["@entry-spacing"] = function(state, arg) {
      if (arg && arg.match(/^[.0-9]+$/)) {
        state[this.name].opt["entry-spacing"] = parseFloat(arg, 10);
      }
    };
    CSL2.Attributes["@near-note-distance"] = function(state, arg) {
      state[this.name].opt["near-note-distance"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@substring"] = function(state, arg) {
      this.substring = parseInt(arg, 10);
    };
    CSL2.Attributes["@text-case"] = function(state, arg) {
      var func = function(state2, Item) {
        if (arg === "normal") {
          this.text_case_normal = true;
        } else {
          this.strings["text-case"] = arg;
          if (arg === "title") {
            if (Item.jurisdiction) {
              this.strings["text-case"] = "passthrough";
            }
          }
        }
      };
      this.execs.push(func);
    };
    CSL2.Attributes["@page-range-format"] = function(state, arg) {
      state.opt["page-range-format"] = arg;
    };
    CSL2.Attributes["@year-range-format"] = function(state, arg) {
      state.opt["year-range-format"] = arg;
    };
    CSL2.Attributes["@default-locale"] = function(state, arg) {
      if (this.name === "style") {
        var lst, len, pos, m2, ret;
        var m2 = arg.match(/-x-(sort|translit|translat)-/g);
        if (m2) {
          for (pos = 0, len = m2.length; pos < len; pos += 1) {
            m2[pos] = m2[pos].replace(/^-x-/, "").replace(/-$/, "");
          }
        }
        lst = arg.split(/-x-(?:sort|translit|translat)-/);
        ret = [lst[0]];
        for (pos = 1, len = lst.length; pos < len; pos += 1) {
          ret.push(m2[pos - 1]);
          ret.push(lst[pos]);
        }
        lst = ret.slice();
        len = lst.length;
        for (pos = 1; pos < len; pos += 2) {
          state.opt["locale-" + lst[pos]].push(lst[pos + 1].replace(/^\s*/g, "").replace(/\s*$/g, ""));
        }
        if (lst.length) {
          state.opt["default-locale"] = lst.slice(0, 1);
        } else {
          state.opt["default-locale"] = ["en"];
        }
      } else if (arg === "true") {
        this.default_locale = true;
      }
    };
    CSL2.Attributes["@default-locale-sort"] = function(state, arg) {
      state.opt["default-locale-sort"] = arg;
    };
    CSL2.Attributes["@demote-non-dropping-particle"] = function(state, arg) {
      state.opt["demote-non-dropping-particle"] = arg;
    };
    CSL2.Attributes["@initialize-with-hyphen"] = function(state, arg) {
      if (arg === "false") {
        state.opt["initialize-with-hyphen"] = false;
      }
    };
    CSL2.Attributes["@institution-parts"] = function(state, arg) {
      this.strings["institution-parts"] = arg;
    };
    CSL2.Attributes["@if-short"] = function(state, arg) {
      if (arg === "true") {
        this.strings["if-short"] = true;
      }
    };
    CSL2.Attributes["@substitute-use-first"] = function(state, arg) {
      this.strings["substitute-use-first"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@use-first"] = function(state, arg) {
      this.strings["use-first"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@use-last"] = function(state, arg) {
      this.strings["use-last"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@stop-first"] = function(state, arg) {
      this.strings["stop-first"] = parseInt(arg, 10);
    };
    CSL2.Attributes["@stop-last"] = function(state, arg) {
      this.strings["stop-last"] = parseInt(arg, 10) * -1;
    };
    CSL2.Attributes["@reverse-order"] = function(state, arg) {
      if (arg === "true") {
        this.strings["reverse-order"] = true;
      }
    };
    CSL2.Attributes["@display"] = function(state, arg) {
      if (state.bibliography.tokens.length === 2) {
        state.opt.using_display = true;
      }
      this.strings.cls = arg;
    };
    CSL2.Stack = function(val, literal) {
      this.mystack = [];
      if (literal || val) {
        this.mystack.push(val);
      }
      this.tip = this.mystack[0];
    };
    CSL2.Stack.prototype.push = function(val, literal) {
      if (literal || val) {
        this.mystack.push(val);
      } else {
        this.mystack.push("");
      }
      this.tip = this.mystack[this.mystack.length - 1];
    };
    CSL2.Stack.prototype.clear = function() {
      this.mystack = [];
      this.tip = {};
    };
    CSL2.Stack.prototype.replace = function(val, literal) {
      if (this.mystack.length === 0) {
        CSL2.error("Internal CSL processor error: attempt to replace nonexistent stack item with " + val);
      }
      if (literal || val) {
        this.mystack[this.mystack.length - 1] = val;
      } else {
        this.mystack[this.mystack.length - 1] = "";
      }
      this.tip = this.mystack[this.mystack.length - 1];
    };
    CSL2.Stack.prototype.pop = function() {
      var ret = this.mystack.pop();
      if (this.mystack.length) {
        this.tip = this.mystack[this.mystack.length - 1];
      } else {
        this.tip = {};
      }
      return ret;
    };
    CSL2.Stack.prototype.value = function() {
      return this.mystack.slice(-1)[0];
    };
    CSL2.Stack.prototype.length = function() {
      return this.mystack.length;
    };
    CSL2.Parallel = function(state) {
      this.state = state;
    };
    CSL2.Parallel.prototype.StartCitation = function(sortedItems, out) {
      this.state.tmp.suppress_repeats = [];
      if (sortedItems.length < 2)
        return;
      var idxEnd = 0;
      var parallelMatchList = false;
      var siblingRanges = [];
      for (var i = 0, ilen = sortedItems.length - 1; i < ilen; i++) {
        var currItem = sortedItems[i][0];
        var nextItem = sortedItems[i + 1][0];
        var freshMatchList = false;
        var info = {};
        if (sortedItems[i][0].seeAlso && sortedItems[i][0].seeAlso.length > 0 && !parallelMatchList) {
          freshMatchList = true;
          parallelMatchList = [sortedItems[i][0].id].concat(sortedItems[i][0].seeAlso);
          var tempMatchList = parallelMatchList.slice();
          var remainder = sortedItems.slice(i);
          remainder[0][1].parallel = "first";
          for (var j = 0, jlen = remainder.length; j < jlen; j++) {
            var itemID = remainder[j][0].id;
            var ididx = tempMatchList.indexOf(itemID);
            idxEnd = false;
            if (ididx === -1) {
              idxEnd = i + j - 1;
            } else if (i + j === sortedItems.length - 1) {
              idxEnd = i + j;
            }
            if (idxEnd) {
              siblingRanges.push([i, idxEnd]);
              break;
            } else {
              tempMatchList = tempMatchList.slice(0, ididx).concat(tempMatchList.slice(ididx + 1));
            }
          }
        }
        if (i > 0 && freshMatchList) {
          this.state.tmp.suppress_repeats[i - 1].START = true;
          freshMatchList = false;
        }
        for (var varname in this.state.opt.track_repeat) {
          if (!currItem[varname] || !nextItem[varname]) {
            info[varname] = false;
          } else if (typeof nextItem[varname] === "string" || typeof nextItem[varname] === "number") {
            if (varname === "title" && currItem["title-short"] && nextItem["title-short"]) {
              var currVal = currItem["title-short"];
              var nextVal = nextItem["title-short"];
            } else {
              var currVal = currItem[varname];
              var nextVal = nextItem[varname];
            }
            if (currVal == nextVal) {
              info[varname] = true;
            } else {
              info[varname] = false;
            }
          } else if (typeof currItem[varname].length === "undefined") {
            info[varname] = false;
            var currYear = currItem[varname].year;
            var nextYear = nextItem[varname].year;
            if (currYear && nextYear) {
              if (currYear == nextYear) {
                info[varname] = true;
              }
            }
          } else {
            var currVal = JSON.stringify(currItem[varname]);
            var nextVal = JSON.stringify(nextItem[varname]);
            if (currVal === nextVal) {
              info[varname] = true;
            } else {
              info[varname] = false;
            }
          }
        }
        if (!parallelMatchList) {
          info.ORPHAN = true;
        }
        if (idxEnd === i) {
          info.END = true;
          parallelMatchList = false;
        }
        this.state.tmp.suppress_repeats.push(info);
      }
      for (var j = 0, jlen = siblingRanges.length; j < jlen; j++) {
        var masterID = sortedItems[siblingRanges[j][0]][0].id;
        this.state.registry.registry[masterID].master = true;
        this.state.registry.registry[masterID].siblings = [];
        var start3 = siblingRanges[j][0];
        var end2 = siblingRanges[j][1];
        for (var k = start3; k < end2; k++) {
          this.state.tmp.suppress_repeats[k].SIBLING = true;
          var siblingID = sortedItems[k + 1][0].id;
          sortedItems[k + 1][1].parallel = "other";
          this.state.registry.registry[masterID].siblings.push(siblingID);
        }
      }
    };
    CSL2.Parallel.prototype.checkRepeats = function(params) {
      var idx = this.state.tmp.cite_index;
      if (this.state.tmp.suppress_repeats) {
        if (params.parallel_first && Object.keys(params.parallel_first).length > 0) {
          var arr = [{}].concat(this.state.tmp.suppress_repeats);
          var ret = true;
          for (var varname in params.parallel_first) {
            if (!arr[idx][varname] || arr[idx].START) {
              ret = false;
            }
          }
          return ret;
        }
        if (params.parallel_last && Object.keys(params.parallel_last).length > 0) {
          var arr = this.state.tmp.suppress_repeats.concat([{}]);
          var ret = Object.keys(params.parallel_last).length > 0 ? true : false;
          for (var varname in params.parallel_last) {
            if (!arr[idx][varname] || arr[idx].END) {
              ret = false;
            }
          }
          return ret;
        }
        if (params.non_parallel && Object.keys(params.non_parallel).length > 0) {
          var arr = [{}].concat(this.state.tmp.suppress_repeats);
          var ret = true;
          for (var varname in params.non_parallel) {
            if (!arr[idx][varname]) {
              ret = false;
            }
          }
          return ret;
        }
      }
      return false;
    };
    CSL2.Util = {};
    CSL2.Util.Match = function() {
      this.any = function(token, state, tests) {
        return function(Item, item) {
          for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
            var result = tests[i](Item, item);
            if (result) {
              return true;
            }
          }
          return false;
        };
      };
      this.none = function(token, state, tests) {
        return function(Item, item) {
          for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
            var result = tests[i](Item, item);
            if (result) {
              return false;
            }
          }
          return true;
        };
      };
      this.all = function(token, state, tests) {
        return function(Item, item) {
          for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
            var result = tests[i](Item, item);
            if (!result) {
              return false;
            }
          }
          return true;
        };
      };
      this[void 0] = this.all;
      this.nand = function(token, state, tests) {
        return function(Item, item) {
          for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
            var result = tests[i](Item, item);
            if (!result) {
              return true;
            }
          }
          return false;
        };
      };
    };
    CSL2.Transform = function(state) {
      this.abbrevs = {};
      this.abbrevs["default"] = new state.sys.AbbreviationSegments();
      function getCountryOrJurisdiction(variable, normalizedKey, quashCountry) {
        var value = "";
        if (state.sys.getHumanForm) {
          if (variable === "country") {
            value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
            value = value.split("|")[0];
          } else if (variable === "jurisdiction") {
            value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
            if (!quashCountry) {
              value = value.split("|").slice(1).join(", ");
            } else {
              value = "";
            }
          }
        }
        return value;
      }
      function abbreviate(state2, tok, Item, altvar, basevalue, family_var, use_field) {
        var value = "";
        var myabbrev_family = CSL2.FIELD_CATEGORY_REMAP[family_var];
        var preferredJurisdiction;
        if (!myabbrev_family) {
          return basevalue;
        }
        var variable = family_var;
        var normalizedKey = basevalue;
        if (state2.sys.normalizeAbbrevsKey) {
          normalizedKey = state2.sys.normalizeAbbrevsKey(family_var, basevalue);
        }
        var quashCountry = false;
        if (variable === "jurisdiction" && normalizedKey) {
          quashCountry = normalizedKey.indexOf(":") === -1;
        }
        if (["jurisdiction", "country"].indexOf(family_var) > -1 && basevalue === basevalue.toLowerCase()) {
          normalizedKey = basevalue.toUpperCase();
        }
        if (state2.sys.getAbbreviation) {
          if (["jurisdiction", "country", "language-name", "language-name-original"].indexOf(variable) > -1) {
            preferredJurisdiction = "default";
          } else if (Item.jurisdiction) {
            preferredJurisdiction = Item.jurisdiction;
          } else {
            preferredJurisdiction = "default";
          }
          var jurisdiction = state2.transform.loadAbbreviation(preferredJurisdiction, myabbrev_family, normalizedKey, Item.language);
          if (state2.transform.abbrevs[jurisdiction][myabbrev_family] && normalizedKey) {
            var abbrev = state2.transform.abbrevs[jurisdiction][myabbrev_family][normalizedKey];
            if (tok.strings.form === "short" && abbrev) {
              if (quashCountry) {
                value = "";
              } else {
                value = abbrev;
              }
            } else {
              value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
            }
          }
        }
        if (!value && (!state2.opt.development_extensions.require_explicit_legal_case_title_short || Item.type !== "legal_case") && altvar && Item[altvar] && use_field) {
          value = Item[altvar];
        }
        if (!value && !state2.sys.getAbbreviation && state2.sys.getHumanForm) {
          value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
        }
        if (!value && !quashCountry && (!state2.sys.getHumanForm || variable !== "jurisdiction")) {
          value = basevalue;
        }
        if (state2.opt.development_extensions.force_title_abbrev_fallback) {
          if (variable === "title" && value === basevalue && Item["title-short"]) {
            value = Item["title-short"];
          }
        }
        return value;
      }
      function getFieldLocale(Item, field) {
        var ret = state.opt["default-locale"][0].slice(0, 2);
        var localeRex;
        if (state.opt.development_extensions.strict_text_case_locales) {
          localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*| .*)");
        } else {
          localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*|.*)");
        }
        if (Item.language) {
          var m2 = ("" + Item.language).match(localeRex);
          if (m2) {
            ret = m2[1];
          } else {
            ret = "tlh";
          }
        }
        if (Item.multi && Item.multi && Item.multi.main && Item.multi.main[field]) {
          ret = Item.multi.main[field];
        }
        if (!state.opt.development_extensions.strict_text_case_locales || state.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          ret = ret.toLowerCase();
        }
        return ret;
      }
      function getTextSubField(Item, field, locale_type, use_default, stopOrig, family_var) {
        var opt, o, ret, opts;
        var usedOrig = stopOrig;
        var usingOrig = false;
        if (!Item[field]) {
          return {
            name: "",
            usedOrig: stopOrig,
            token: CSL2.Util.cloneToken(this)
          };
        }
        var stickyLongForm = false;
        if (CSL2.VARIABLES_WITH_SHORT_FORM.indexOf(field) > -1 && family_var) {
          field = field + "-short";
          stickyLongForm = true;
        }
        var breakMe = false;
        var firstValue = null;
        var fieldsToTry = [];
        if (field.slice(-6) === "-short") {
          fieldsToTry.push(field);
          fieldsToTry.push(field.slice(0, -6));
        } else {
          fieldsToTry.push(field);
        }
        for (var h = 0, hlen = fieldsToTry.length; h < hlen; h++) {
          var variantMatch = false;
          var field = fieldsToTry[h];
          ret = { name: "", usedOrig: stopOrig, locale: getFieldLocale(Item, field) };
          opts = state.opt[locale_type] ? state.opt[locale_type].slice() : [];
          var hasVal = false;
          if (locale_type === "locale-orig") {
            if (!stopOrig) {
              ret.name = Item[field];
              ret.usedOrig = false;
            }
            hasVal = true;
            usingOrig = true;
          } else if (use_default && (typeof opts === "undefined" || opts.length === 0)) {
            ret.name = Item[field];
            ret.usedOrig = true;
            hasVal = true;
            usingOrig = true;
          }
          if (!hasVal) {
            for (var i = 0, ilen = opts.length; i < ilen; i += 1) {
              opt = opts[i];
              o = opt.split(/[\-_]/)[0];
              if (opt && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][opt]) {
                ret.name = Item.multi._keys[field][opt];
                ret.locale = opt;
                hasVal = true;
                variantMatch = true;
                usingOrig = false;
                break;
              } else if (o && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][o]) {
                ret.name = Item.multi._keys[field][o];
                ret.locale = o;
                hasVal = true;
                variantMatch = true;
                usingOrig = false;
                break;
              }
            }
            if (!ret.name && use_default) {
              ret = { name: Item[field], usedOrig: true, locale: getFieldLocale(Item, field) };
              usingOrig = true;
            }
          }
          ret.token = CSL2.Util.cloneToken(this);
          if (h === 0) {
            if (variantMatch) {
              ret.found_variant_ok = true;
            }
            firstValue = ret;
            if (!stickyLongForm && (typeof opts === "undefined" || opts.length === 0)) {
              breakMe = true;
            }
            if (variantMatch) {
              breakMe = true;
            }
          } else {
            if (!stickyLongForm && !variantMatch && firstValue) {
              ret = firstValue;
              field = fieldsToTry[0];
            } else if (variantMatch) {
              ret.found_variant_ok = true;
            }
          }
          if (["title", "container-title"].indexOf(field) > -1) {
            if (!usedOrig && (!ret.token.strings["text-case"] || ret.token.strings["text-case"] === "sentence" || ret.token.strings["text-case"] === "normal")) {
              var locale2 = state.opt.lang;
              var lang;
              if (usingOrig) {
                lang = false;
              } else {
                lang = ret.locale;
              }
              var seg = field.slice(0, -5);
              var sentenceCase = ret.token.strings["text-case"] === "sentence" ? true : false;
              ret.name = CSL2.titlecaseSentenceOrNormal(state, Item, seg, lang, sentenceCase);
              delete ret.token.strings["text-case"];
            }
          }
          if (breakMe) {
            break;
          }
        }
        return ret;
      }
      this.getTextSubField = getTextSubField;
      function loadAbbreviation(jurisdiction, category, orig, lang) {
        if (!jurisdiction) {
          jurisdiction = "default";
        }
        var country = jurisdiction.split(":")[0];
        var domain = CSL2.getAbbrevsDomain(state, country, lang);
        if (domain) {
          jurisdiction += "@" + domain;
        }
        if (!orig) {
          if (!state.transform.abbrevs[jurisdiction]) {
            state.transform.abbrevs[jurisdiction] = new state.sys.AbbreviationSegments();
          }
          if (!state.transform.abbrevs[jurisdiction][category]) {
            state.transform.abbrevs[jurisdiction][category] = {};
          }
          return jurisdiction;
        }
        if (state.sys.getAbbreviation) {
          jurisdiction = state.sys.getAbbreviation(state.opt.styleID, state.transform.abbrevs, jurisdiction, category, orig);
          if (!jurisdiction) {
            jurisdiction = "default";
            if (domain) {
              jurisdiction += "@" + domain;
            }
          }
        }
        return jurisdiction;
      }
      this.loadAbbreviation = loadAbbreviation;
      function publisherCheck(tok, Item, primary, family_var) {
        var varname = tok.variables[0];
        if (state.publisherOutput && primary) {
          if (["publisher", "publisher-place"].indexOf(varname) === -1) {
            return false;
          } else {
            state.publisherOutput[varname + "-token"] = tok;
            state.publisherOutput.varlist.push(varname);
            var lst = primary.split(/;\s*/);
            if (lst.length === state.publisherOutput[varname + "-list"].length) {
              state.publisherOutput[varname + "-list"] = lst;
            }
            for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
              lst[i] = abbreviate(state, tok, Item, false, lst[i], family_var, true);
            }
            state.tmp[varname + "-token"] = tok;
            return true;
          }
        }
        return false;
      }
      function citeFormCheck(Item, value) {
        var m2 = value.match(/^#([0-9]+).*>>>/);
        if (m2 && m2[1]) {
          Item["cite-form"] = m2[1];
        }
      }
      function quashCheck(jurisdiction, value) {
        var m2 = value.match(/^(?:#[0-9]+)*(?:!((?:[-_a-z]+(?:(?:.*)))(?:,(?:[-_a-z]+(?:(?:.*))))*))*>>>/);
        if (m2) {
          value = value.slice(m2[0].length);
          if (m2[1]) {
            var fields = m2[1].split(",");
            for (var i = 0, ilen = fields.length; i < ilen; i += 1) {
              var rawField = fields[i];
              var mm = rawField.match(/^([-_a-z]+)(?:\:(.*))*$/);
              var field = mm[1];
              var trimmer = state.tmp.abbrev_trimmer;
              if (mm[2]) {
                if (trimmer && jurisdiction) {
                  if (!trimmer[jurisdiction]) {
                    trimmer[jurisdiction] = {};
                  }
                  trimmer[jurisdiction][field] = mm[2];
                }
              } else if (state.tmp.done_vars.indexOf(field) === -1) {
                if (trimmer && jurisdiction) {
                  if (!trimmer.QUASHES[jurisdiction]) {
                    trimmer.QUASHES[jurisdiction] = {};
                  }
                  trimmer.QUASHES[jurisdiction][field] = true;
                }
                state.tmp.done_vars.push(field);
              }
            }
          }
        }
        return value;
      }
      this.quashCheck = quashCheck;
      function getOutputFunction(variables, family_var, abbreviation_fallback, alternative_varname) {
        var localesets;
        var langPrefs = CSL2.LangPrefsMap[variables[0]];
        if (!langPrefs) {
          localesets = false;
        } else {
          localesets = state.opt["cite-lang-prefs"][langPrefs];
        }
        return function(state2, Item, item) {
          var primary, primary_locale, secondary, secondary_locale, tertiary, tertiary_locale, primary_tok;
          if (!variables[0] || !Item[variables[0]] && !Item[alternative_varname]) {
            return null;
          }
          if (!state2.tmp.just_looking && item && item["suppress-author"]) {
            if (!state2.tmp.probably_rendered_something && state2.tmp.can_substitute.length() > 1) {
              return null;
            }
          }
          var slot = { primary: false, secondary: false, tertiary: false };
          if (state2.tmp.area.slice(-5) === "_sort") {
            slot.primary = "locale-sort";
          } else {
            if (localesets && localesets.length === 1 && localesets[0] === "locale-orig") {
              slot.primary = "locale-orig";
              localesets = false;
            } else if (localesets && !state2.tmp.multi_layout) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var i = 0, ilen = slotnames.length; i < ilen; i += 1) {
                if (localesets.length - 1 < i) {
                  break;
                }
                if (localesets[i]) {
                  slot[slotnames[i]] = "locale-" + localesets[i];
                }
              }
            } else {
              slot.primary = "locale-orig";
            }
          }
          if (variables[0] === "title-short" || state2.tmp.area !== "bibliography" && !(state2.tmp.area === "citation" && state2.opt.xclass === "note" && item && !item.position)) {
            slot.secondary = false;
            slot.tertiary = false;
          }
          if (state2.tmp.multi_layout) {
            slot.secondary = false;
            slot.tertiary = false;
          }
          if (state2.tmp["publisher-list"]) {
            if (variables[0] === "publisher") {
              state2.tmp["publisher-token"] = this;
            } else if (variables[0] === "publisher-place") {
              state2.tmp["publisher-place-token"] = this;
            }
            return null;
          }
          var oldLangArray = state2.tmp.lang_array.slice();
          var res = getTextSubField.call(this, Item, variables[0], slot.primary, true, null, family_var);
          primary = res.name;
          primary_locale = res.locale;
          var primary_tok = res.token;
          var primaryUsedOrig = res.usedOrig;
          if (family_var && !res.found_variant_ok) {
            primary = abbreviate(state2, primary_tok, Item, alternative_varname, primary, family_var, true);
            if (primary) {
              citeFormCheck(Item, primary);
              if (!state2.tmp.just_looking) {
                primary = quashCheck(Item.jurisdiction, primary);
              }
            }
          }
          if (publisherCheck(this, Item, primary, family_var)) {
            state2.tmp.lang_array = oldLangArray;
            return null;
          }
          secondary = false;
          tertiary = false;
          var secondary_tok;
          var tertiary_tok;
          if (slot.secondary) {
            res = getTextSubField.call(this, Item, variables[0], slot.secondary, false, res.usedOrig, null, family_var);
            secondary = res.name;
            secondary_locale = res.locale;
            secondary_tok = res.token;
            if (family_var && !res.found_variant_ok) {
              if (secondary) {
                secondary = abbreviate(state2, secondary_tok, Item, false, secondary, family_var, true);
              }
            }
          }
          if (slot.tertiary) {
            res = getTextSubField.call(this, Item, variables[0], slot.tertiary, false, res.usedOrig, null, family_var);
            tertiary = res.name;
            tertiary_locale = res.locale;
            tertiary_tok = res.token;
            if (family_var && !res.found_variant_ok) {
              if (tertiary) {
                tertiary = abbreviate(state2, tertiary_tok, Item, false, tertiary, family_var, true);
              }
            }
          }
          var primaryPrefix;
          if (slot.primary === "locale-translit") {
            primaryPrefix = state2.opt.citeAffixes[langPrefs][slot.primary].prefix;
          }
          if (primaryPrefix === "<i>" && variables[0] === "title" && !primaryUsedOrig) {
            var hasItalic = false;
            for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
              if (primary_tok.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                hasItalic = true;
              }
            }
            if (!hasItalic) {
              primary_tok.decorations.push(["@font-style", "italic"]);
            }
          }
          if (primary_locale !== "en" && primary_tok.strings["text-case"] === "title") {
            primary_tok.strings["text-case"] = "passthrough";
          }
          if (variables[0] === "title") {
            primary = CSL2.demoteNoiseWords(state2, primary, this["leading-noise-words"]);
          }
          if (secondary || tertiary) {
            state2.output.openLevel("empty");
            primary_tok.strings.suffix = primary_tok.strings.suffix.replace(/[ .,]+$/, "");
            if (primary_locale) {
              state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
            }
            CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
            state2.output.append(primary, primary_tok);
            state2.tmp.probably_rendered_something = true;
            if (primary === secondary) {
              secondary = false;
            }
            if (secondary) {
              secondary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.secondary].prefix;
              secondary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.secondary].suffix;
              if (!secondary_tok.strings.prefix) {
                secondary_tok.strings.prefix = " ";
              }
              for (var i = secondary_tok.decorations.length - 1; i > -1; i += -1) {
                if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(secondary_tok.decorations[i].join("/")) > -1) {
                  secondary_tok.decorations = secondary_tok.decorations.slice(0, i).concat(secondary_tok.decorations.slice(i + 1));
                }
              }
              if (secondary_locale !== "en" && secondary_tok.strings["text-case"] === "title") {
                secondary_tok.strings["text-case"] = "passthrough";
              }
              if (secondary_locale) {
                state2.tmp.lang_array = [secondary_locale].concat(oldLangArray);
              }
              var secondary_outer = new CSL2.Token();
              secondary_outer.decorations.push(["@font-style", "normal"]);
              secondary_outer.decorations.push(["@font-weight", "normal"]);
              state2.output.openLevel(secondary_outer);
              state2.output.append(secondary, secondary_tok);
              state2.output.closeLevel();
              var blob_obj = state2.output.current.value();
              var blobs_pos = state2.output.current.value().blobs.length - 1;
            }
            if (primary === tertiary) {
              tertiary = false;
            }
            if (tertiary) {
              tertiary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.tertiary].prefix;
              tertiary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.tertiary].suffix;
              if (!tertiary_tok.strings.prefix) {
                tertiary_tok.strings.prefix = " ";
              }
              for (var i = tertiary_tok.decorations.length - 1; i > -1; i += -1) {
                if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(tertiary_tok.decorations[i].join("/")) > -1) {
                  tertiary_tok.decorations = tertiary_tok.decorations.slice(0, i).concat(tertiary_tok.decorations.slice(i + 1));
                }
              }
              if (tertiary_locale !== "en" && tertiary_tok.strings["text-case"] === "title") {
                tertiary_tok.strings["text-case"] = "passthrough";
              }
              if (tertiary_locale) {
                state2.tmp.lang_array = [tertiary_locale].concat(oldLangArray);
              }
              var tertiary_outer = new CSL2.Token();
              tertiary_outer.decorations.push(["@font-style", "normal"]);
              tertiary_outer.decorations.push(["@font-weight", "normal"]);
              state2.output.openLevel(tertiary_outer);
              state2.output.append(tertiary, tertiary_tok);
              state2.output.closeLevel();
              var blob_obj = state2.output.current.value();
              var blobs_pos = state2.output.current.value().blobs.length - 1;
            }
            state2.output.closeLevel();
          } else {
            if (primary_locale) {
              state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
            }
            CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
            state2.output.append(primary, primary_tok);
            state2.tmp.probably_rendered_something = true;
          }
          state2.tmp.lang_array = oldLangArray;
          if (state2.tmp.can_block_substitute) {
            state2.tmp.name_node.children.push(state2.output.current.value());
          }
          return null;
        };
      }
      this.getOutputFunction = getOutputFunction;
    };
    CSL2.Token = function(name, tokentype, conditional) {
      this.name = name;
      this.strings = {};
      this.strings.delimiter = void 0;
      this.strings.prefix = "";
      this.strings.suffix = "";
      this.decorations = [];
      this.variables = [];
      this.execs = [];
      this.tokentype = tokentype;
    };
    CSL2.Util.cloneToken = function(token) {
      var newtok, key, pos, len;
      if (typeof token === "string") {
        return token;
      }
      newtok = new CSL2.Token(token.name, token.tokentype);
      for (var key in token.strings) {
        if (token.strings.hasOwnProperty(key)) {
          newtok.strings[key] = token.strings[key];
        }
      }
      if (token.decorations) {
        newtok.decorations = [];
        for (pos = 0, len = token.decorations.length; pos < len; pos += 1) {
          newtok.decorations.push(token.decorations[pos].slice());
        }
      }
      if (token.variables) {
        newtok.variables = token.variables.slice();
      }
      if (token.execs) {
        newtok.execs = token.execs.slice();
        if (token.tests) {
          newtok.tests = token.tests.slice();
        }
      }
      return newtok;
    };
    CSL2.AmbigConfig = function() {
      this.maxvals = [];
      this.minval = 1;
      this.names = [];
      this.givens = [];
      this.year_suffix = false;
      this.disambiguate = 0;
    };
    CSL2.Blob = function(str, token, levelname) {
      var len, pos, key;
      this.levelname = levelname;
      if (token) {
        this.strings = { "prefix": "", "suffix": "" };
        for (var key in token.strings) {
          if (token.strings.hasOwnProperty(key)) {
            this.strings[key] = token.strings[key];
          }
        }
        this.decorations = [];
        if (token.decorations === void 0) {
          len = 0;
        } else {
          len = token.decorations.length;
        }
        for (pos = 0; pos < len; pos += 1) {
          this.decorations.push(token.decorations[pos].slice());
        }
      } else {
        this.strings = {};
        this.strings.prefix = "";
        this.strings.suffix = "";
        this.strings.delimiter = "";
        this.decorations = [];
      }
      if (typeof str === "string") {
        this.blobs = str;
      } else if (str) {
        this.blobs = [str];
      } else {
        this.blobs = [];
      }
      this.alldecor = [this.decorations];
    };
    CSL2.Blob.prototype.push = function(blob) {
      if (typeof this.blobs === "string") {
        CSL2.error("Attempt to push blob onto string object");
      } else if (blob !== false) {
        blob.alldecor = blob.alldecor.concat(this.alldecor);
        this.blobs.push(blob);
      }
    };
    CSL2.NumericBlob = function(state, particle, num, mother_token, id2) {
      this.id = id2;
      this.alldecor = [];
      this.num = num;
      this.particle = particle;
      this.blobs = num.toString();
      this.status = CSL2.START;
      this.strings = {};
      if (mother_token) {
        if (mother_token.strings["text-case"]) {
          var textCase = mother_token.strings["text-case"];
          this.particle = CSL2.Output.Formatters[textCase](state, this.particle);
          this.blobs = CSL2.Output.Formatters[textCase](state, this.blobs);
        }
        this.gender = mother_token.gender;
        this.decorations = mother_token.decorations;
        this.strings.prefix = mother_token.strings.prefix;
        this.strings.suffix = mother_token.strings.suffix;
        this.strings["text-case"] = mother_token.strings["text-case"];
        this.successor_prefix = mother_token.successor_prefix;
        this.range_prefix = mother_token.range_prefix;
        this.splice_prefix = mother_token.splice_prefix;
        this.formatter = mother_token.formatter;
        if (!this.formatter) {
          this.formatter = new CSL2.Output.DefaultFormatter();
        }
        if (this.formatter) {
          this.type = this.formatter.format(1);
        }
      } else {
        this.decorations = [];
        this.strings.prefix = "";
        this.strings.suffix = "";
        this.successor_prefix = "";
        this.range_prefix = "";
        this.splice_prefix = "";
        this.formatter = new CSL2.Output.DefaultFormatter();
      }
    };
    CSL2.NumericBlob.prototype.setFormatter = function(formatter) {
      this.formatter = formatter;
      this.type = this.formatter.format(1);
    };
    CSL2.Output.DefaultFormatter = function() {
    };
    CSL2.Output.DefaultFormatter.prototype.format = function(num) {
      return num.toString();
    };
    CSL2.NumericBlob.prototype.checkNext = function(next, start3) {
      if (start3) {
        this.status = CSL2.START;
        if (typeof next === "object") {
          if (next.num === this.num + 1) {
            next.status = CSL2.SUCCESSOR;
          } else {
            next.status = CSL2.SEEN;
          }
        }
      } else if (!next || !next.num || this.type !== next.type || next.num !== this.num + 1) {
        if (this.status === CSL2.SUCCESSOR_OF_SUCCESSOR) {
          this.status = CSL2.END;
        }
        if (typeof next === "object") {
          next.status = CSL2.SEEN;
        }
      } else {
        if (this.status === CSL2.START || this.status === CSL2.SEEN) {
          next.status = CSL2.SUCCESSOR;
        } else if (this.status === CSL2.SUCCESSOR || this.status === CSL2.SUCCESSOR_OF_SUCCESSOR) {
          if (this.range_prefix) {
            next.status = CSL2.SUCCESSOR_OF_SUCCESSOR;
            this.status = CSL2.SUPPRESS;
          } else {
            next.status = CSL2.SUCCESSOR;
          }
        }
      }
    };
    CSL2.NumericBlob.prototype.checkLast = function(last) {
      if (this.status === CSL2.SEEN || last.num !== this.num - 1 && this.status === CSL2.SUCCESSOR) {
        this.status = CSL2.SUCCESSOR;
        return true;
      }
      return false;
    };
    CSL2.Util.fixDateNode = function(parent, pos, node) {
      var form, variable, datexml, subnode, partname, attr, val, prefix, suffix, children2, subchildren, display, cslid;
      var lingo = this.cslXml.getAttributeValue(node, "lingo");
      var default_locale = this.cslXml.getAttributeValue(node, "default-locale");
      this.build.date_key = true;
      form = this.cslXml.getAttributeValue(node, "form");
      var lingo;
      if (default_locale) {
        lingo = this.opt["default-locale"][0];
      } else {
        lingo = this.cslXml.getAttributeValue(node, "lingo");
      }
      if (!this.getDate(form, default_locale)) {
        return parent;
      }
      var dateparts = this.cslXml.getAttributeValue(node, "date-parts");
      variable = this.cslXml.getAttributeValue(node, "variable");
      prefix = this.cslXml.getAttributeValue(node, "prefix");
      suffix = this.cslXml.getAttributeValue(node, "suffix");
      display = this.cslXml.getAttributeValue(node, "display");
      cslid = this.cslXml.getAttributeValue(node, "cslid");
      datexml = this.cslXml.nodeCopy(this.getDate(form, default_locale));
      this.cslXml.setAttribute(datexml, "lingo", this.opt.lang);
      this.cslXml.setAttribute(datexml, "form", form);
      this.cslXml.setAttribute(datexml, "date-parts", dateparts);
      this.cslXml.setAttribute(datexml, "cslid", cslid);
      this.cslXml.setAttribute(datexml, "variable", variable);
      this.cslXml.setAttribute(datexml, "default-locale", default_locale);
      if (prefix) {
        this.cslXml.setAttribute(datexml, "prefix", prefix);
      }
      if (suffix) {
        this.cslXml.setAttribute(datexml, "suffix", suffix);
      }
      if (display) {
        this.cslXml.setAttribute(datexml, "display", display);
      }
      children2 = this.cslXml.children(datexml);
      for (var key in children2) {
        subnode = children2[key];
        if (this.cslXml.nodename(subnode) === "date-part") {
          partname = this.cslXml.getAttributeValue(subnode, "name");
          if (default_locale) {
            this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, "@default-locale", "true");
          }
        }
      }
      children2 = this.cslXml.children(node);
      for (var key in children2) {
        subnode = children2[key];
        if (this.cslXml.nodename(subnode) === "date-part") {
          partname = this.cslXml.getAttributeValue(subnode, "name");
          subchildren = this.cslXml.attributes(subnode);
          for (attr in subchildren) {
            if (attr === "@name") {
              continue;
            }
            if (lingo && lingo !== this.opt.lang) {
              if (["@suffix", "@prefix", "@form"].indexOf(attr) > -1) {
                continue;
              }
            }
            val = subchildren[attr];
            this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, attr, val);
          }
        }
      }
      if (this.cslXml.getAttributeValue(node, "date-parts") === "year") {
        this.cslXml.deleteNodeByNameAttribute(datexml, "month");
        this.cslXml.deleteNodeByNameAttribute(datexml, "day");
      } else if (this.cslXml.getAttributeValue(node, "date-parts") === "year-month") {
        this.cslXml.deleteNodeByNameAttribute(datexml, "day");
      } else if (this.cslXml.getAttributeValue(node, "date-parts") === "month-day") {
        var childNodes = this.cslXml.children(datexml);
        for (var i = 1, ilen = this.cslXml.numberofnodes(childNodes); i < ilen; i++) {
          if (this.cslXml.getAttributeValue(childNodes[i], "name") === "year") {
            this.cslXml.setAttribute(childNodes[i - 1], "suffix", "");
            break;
          }
        }
        this.cslXml.deleteNodeByNameAttribute(datexml, "year");
      }
      return this.cslXml.insertChildNodeAfter(parent, node, pos, datexml);
    };
    CSL2.dateMacroAsSortKey = function(state, Item) {
      CSL2.dateAsSortKey.call(this, state, Item, true);
    };
    CSL2.dateAsSortKey = function(state, Item, isMacro) {
      var dp, elem, value, e, yr, prefix, i, ilen;
      var variable = this.variables[0];
      var macroFlag = "empty";
      if (isMacro && state.tmp.extension) {
        macroFlag = "macro-with-date";
      }
      dp = Item[variable];
      if (typeof dp === "undefined") {
        dp = { "date-parts": [[0]] };
      }
      if (typeof this.dateparts === "undefined") {
        this.dateparts = ["year", "month", "day"];
      }
      if (dp.raw) {
        dp = state.fun.dateparser.parseDateToArray(dp.raw);
      } else if (dp["date-parts"]) {
        dp = state.dateParseArray(dp);
      }
      if (typeof dp === "undefined") {
        dp = {};
      }
      if (dp.year) {
        for (i = 0, ilen = CSL2.DATE_PARTS_INTERNAL.length; i < ilen; i += 1) {
          elem = CSL2.DATE_PARTS_INTERNAL[i];
          value = 0;
          e = elem;
          if (e.slice(-4) === "_end") {
            e = e.slice(0, -4);
          }
          if (dp[elem] && this.dateparts.indexOf(e) > -1) {
            value = dp[elem];
          }
          if (elem.slice(0, 4) === "year") {
            yr = CSL2.Util.Dates[e].numeric(state, value);
            var prefix = "1";
            if (yr[0] === "-") {
              prefix = "0";
              yr = yr.slice(1);
              yr = 9999 - parseInt(yr, 10);
            }
            state.output.append(CSL2.Util.Dates[elem.slice(0, 4)].numeric(state, prefix + yr), macroFlag);
          } else {
            value = CSL2.Util.Dates[e]["numeric-leading-zeros"](state, value);
            if (!value) {
              value = "00";
            }
            state.output.append(value, macroFlag);
          }
        }
      }
    };
    CSL2.Engine.prototype.dateParseArray = function(date_obj) {
      var ret, field, dp, exts;
      ret = {};
      for (field in date_obj) {
        if (field === "date-parts") {
          dp = date_obj["date-parts"];
          if (dp.length > 1) {
            if (dp[0].length !== dp[1].length) {
              CSL2.error("CSL data error: element mismatch in date range input.");
            }
          }
          exts = ["", "_end"];
          for (var i = 0, ilen = dp.length; i < ilen; i += 1) {
            for (var j = 0, jlen = CSL2.DATE_PARTS.length; j < jlen; j += 1) {
              if (isNaN(parseInt(dp[i][j], 10))) {
                ret[CSL2.DATE_PARTS[j] + exts[i]] = void 0;
              } else {
                ret[CSL2.DATE_PARTS[j] + exts[i]] = parseInt(dp[i][j], 10);
              }
            }
          }
        } else if (date_obj.hasOwnProperty(field)) {
          if (field === "literal" && typeof date_obj.literal === "object" && typeof date_obj.literal.part === "string") {
            CSL2.debug("Warning: fixing up weird literal date value");
            ret.literal = date_obj.literal.part;
          } else {
            ret[field] = date_obj[field];
          }
        }
      }
      return ret;
    };
    CSL2.Util.Names = {};
    CSL2.Util.Names.compareNamesets = CSL2.NameOutput.prototype._compareNamesets;
    CSL2.Util.Names.unInitialize = function(state, name) {
      var i, ilen, namelist, punctlist, ret;
      if (!name) {
        return "";
      }
      namelist = name.split(/(?:\-|\s+)/);
      punctlist = name.match(/(\-|\s+)/g);
      ret = "";
      for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
        ret += namelist[i];
        if (i < ilen - 1) {
          ret += punctlist[i];
        }
      }
      return ret;
    };
    CSL2.Util.Names.initializeWith = function(state, name, terminator, normalizeOnly) {
      var i, ilen, mm, lst, ret;
      if (!name) {
        return "";
      }
      if (!terminator) {
        terminator = "";
      }
      if (["Lord", "Lady"].indexOf(name) > -1 || !name.replace(/^(?:<[^>]+>)*/, "").match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) && !terminator.match("%s")) {
        return name;
      }
      if (state.opt["initialize-with-hyphen"] === false) {
        name = name.replace(/\-/g, " ");
      }
      name = name.replace(/\s*\-\s*/g, "-").replace(/\s+/g, " ");
      name = name.replace(/-([a-z])/g, "\u2013$1");
      for (var i = name.length - 2; i > -1; i += -1) {
        if (name.slice(i, i + 1) === "." && name.slice(i + 1, i + 2) !== " ") {
          name = name.slice(0, i) + ". " + name.slice(i + 1);
        }
      }
      var nameSplits = CSL2.Output.Formatters.nameDoppel.split(name);
      var namelist = [];
      namelist = [nameSplits.strings[0]];
      if (nameSplits.tags.length === 0) {
        var mmm = namelist[0].match(/[^\.]+$/);
        if (mmm && mmm[0].length === 1 && mmm[0] !== mmm[0].toLowerCase()) {
          namelist[0] += ".";
        }
      }
      for (i = 1, ilen = nameSplits.strings.length; i < ilen; i += 1) {
        namelist.push(nameSplits.tags[i - 1]);
        namelist.push(nameSplits.strings[i]);
      }
      if (normalizeOnly) {
        ret = this.doNormalize(state, namelist, terminator);
      } else {
        ret = this.doInitialize(state, namelist, terminator);
      }
      ret = ret.replace(/\u2013([a-z])/g, "-$1");
      return ret;
    };
    CSL2.Util.Names.notag = function(str) {
      return str.replace(/^(?:<[^>]+>)*/, "");
    };
    CSL2.Util.Names.mergetag = function(state, tagstr, newstr) {
      var m2 = tagstr.match(/(?:-*<[^>]+>-*)/g);
      if (!m2) {
        return newstr;
      } else {
        tagstr = m2.join("");
      }
      m2 = newstr.match(/^(.*[^\s])*(\s+)$/);
      if (m2) {
        m2[1] = m2[1] ? m2[1] : "";
        newstr = m2[1] + tagstr + m2[2];
      } else {
        newstr = newstr + tagstr;
      }
      return newstr;
    };
    CSL2.Util.Names.tagonly = function(state, str) {
      var m2 = str.match(/(?:<[^>]+>)+/);
      if (!m2) {
        return str;
      } else {
        return m2.join("");
      }
    };
    CSL2.Util.Names.doNormalize = function(state, namelist, terminator) {
      var i, ilen;
      terminator = terminator ? terminator : "";
      var isAbbrev = [];
      for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
        if (this.notag(namelist[i]).length > 1 && this.notag(namelist[i]).slice(-1) === ".") {
          namelist[i] = namelist[i].replace(/^(.*)\.(.*)$/, "$1$2");
          isAbbrev.push(true);
        } else if (namelist[i].length === 1 && namelist[i].toUpperCase() === namelist[i]) {
          isAbbrev.push(true);
        } else {
          isAbbrev.push(false);
        }
      }
      for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
        if (isAbbrev[i]) {
          if (i < namelist.length - 2) {
            namelist[i + 1] = this.tagonly(state, namelist[i + 1]);
            if (!isAbbrev[i + 2]) {
              namelist[i + 1] = this.tagonly(state, namelist[i + 1]) + " ";
            }
            if (namelist[i + 2].length > 1) {
              namelist[i + 1] = terminator.replace(/\ufeff$/, "") + namelist[i + 1];
            } else {
              namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
            }
          }
          if (i === namelist.length - 1) {
            namelist[i] = namelist[i] + terminator;
          }
        }
      }
      return namelist.join("").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
    };
    CSL2.Util.Names.doInitialize = function(state, namelist, terminator) {
      var i, ilen, m2, j, jlen, lst, n;
      for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
        n = namelist[i];
        if (!n) {
          continue;
        }
        m2 = n.match(CSL2.NAME_INITIAL_REGEXP);
        if (!m2 && (!n.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) && n.length > 1 && terminator.match("%s"))) {
          m2 = n.match(/(.)(.*)/);
        }
        if (m2 && m2[2] && m2[3]) {
          m2[1] = m2[1] + m2[2];
          m2[2] = "";
        }
        if (m2 && m2[1].slice(0, 1) === m2[1].slice(0, 1).toUpperCase()) {
          var extra = "";
          if (m2[2]) {
            var s = "";
            lst = m2[2].split("");
            for (j = 0, jlen = lst.length; j < jlen; j += 1) {
              var c2 = lst[j];
              if (c2 === c2.toUpperCase()) {
                s += c2;
              } else {
                break;
              }
            }
            if (s.length < m2[2].length) {
              extra = CSL2.toLocaleLowerCase.call(state, s);
            }
          }
          namelist[i] = m2[1] + extra;
          if (i < ilen - 1) {
            if (terminator.match("%s")) {
              namelist[i] = terminator.replace("%s", namelist[i]);
            } else {
              if (namelist[i + 1].indexOf("-") > -1) {
                namelist[i + 1] = this.mergetag(state, namelist[i + 1].replace("-", ""), terminator) + "-";
              } else {
                namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
              }
            }
          } else {
            if (terminator.match("%s")) {
              namelist[i] = terminator.replace("%s", namelist[i]);
            } else {
              namelist.push(terminator);
            }
          }
        } else if (n.match(CSL2.ROMANESQUE_REGEXP) && (!m2 || !m2[3])) {
          namelist[i] = " " + n;
        }
      }
      var ret = namelist.join("");
      ret = ret.replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
      return ret;
    };
    CSL2.Util.Names.getRawName = function(name) {
      var ret = [];
      if (name.literal) {
        ret.push(name.literal);
      } else {
        if (name.given) {
          ret.push(name.given);
        }
        if (name.family) {
          ret.push(name.family);
        }
      }
      return ret.join(" ");
    };
    CSL2.Util.Dates = {};
    CSL2.Util.Dates.year = {};
    CSL2.Util.Dates.year["long"] = function(state, num) {
      if (!num) {
        if (typeof num === "boolean") {
          num = "";
        } else {
          num = 0;
        }
      }
      return num.toString();
    };
    CSL2.Util.Dates.year.imperial = function(state, num, end2) {
      var year = "";
      if (!num) {
        if (typeof num === "boolean") {
          num = "";
        } else {
          num = 0;
        }
      }
      end2 = end2 ? "_end" : "";
      var month = state.tmp.date_object["month" + end2];
      month = month ? "" + month : "1";
      while (month.length < 2) {
        month = "0" + month;
      }
      var day = state.tmp.date_object["day" + end2];
      day = day ? "" + day : "1";
      while (day.length < 2) {
        day = "0" + day;
      }
      var date = parseInt(num + month + day, 10);
      var label;
      var offset2;
      if (date >= 18680908 && date < 19120730) {
        label = "\u660E\u6CBB";
        offset2 = 1867;
      } else if (date >= 19120730 && date < 19261225) {
        label = "\u5927\u6B63";
        offset2 = 1911;
      } else if (date >= 19261225 && date < 19890108) {
        label = "\u662D\u548C";
        offset2 = 1925;
      } else if (date >= 19890108) {
        label = "\u5E73\u6210";
        offset2 = 1988;
      }
      if (label && offset2) {
        var normalizedKey = label;
        if (state.sys.normalizeAbbrevsKey) {
          normalizedKey = state.sys.normalizeAbbrevsKey("number", label);
        }
        if (!state.transform.abbrevs["default"]["number"][normalizedKey]) {
          state.transform.loadAbbreviation("default", "number", normalizedKey, null);
        }
        if (state.transform.abbrevs["default"]["number"][normalizedKey]) {
          label = state.transform.abbrevs["default"]["number"][normalizedKey];
        }
        year = label + (num - offset2);
      }
      return year;
    };
    CSL2.Util.Dates.year["short"] = function(state, num) {
      num = num.toString();
      if (num && num.length === 4) {
        return num.substr(2);
      }
    };
    CSL2.Util.Dates.year.numeric = function(state, num) {
      var m2, pre;
      num = "" + num;
      var m2 = num.match(/([0-9]*)$/);
      if (m2) {
        pre = num.slice(0, m2[1].length * -1);
        num = m2[1];
      } else {
        pre = num;
        num = "";
      }
      while (num.length < 4) {
        num = "0" + num;
      }
      return pre + num;
    };
    CSL2.Util.Dates.normalizeMonth = function(num, useSeason) {
      var ret;
      if (!num) {
        num = 0;
      }
      num = "" + num;
      if (!num.match(/^[0-9]+$/)) {
        num = 0;
      }
      num = parseInt(num, 10);
      if (useSeason) {
        var res = { stub: "month-", num };
        if (res.num < 1 || res.num > 24) {
          res.num = 0;
        } else {
          while (res.num > 16) {
            res.num = res.num - 4;
          }
          if (res.num > 12) {
            res.stub = "season-";
            res.num = res.num - 12;
          }
        }
        ret = res;
      } else {
        if (num < 1 || num > 12) {
          num = 0;
        }
        ret = num;
      }
      return ret;
    };
    CSL2.Util.Dates.month = {};
    CSL2.Util.Dates.month.numeric = function(state, num) {
      var num = CSL2.Util.Dates.normalizeMonth(num);
      if (!num) {
        num = "";
      }
      return num;
    };
    CSL2.Util.Dates.month["numeric-leading-zeros"] = function(state, num) {
      var num = CSL2.Util.Dates.normalizeMonth(num);
      if (!num) {
        num = "";
      } else {
        num = "" + num;
        while (num.length < 2) {
          num = "0" + num;
        }
      }
      return num;
    };
    CSL2.Util.Dates.month["long"] = function(state, num, gender, forceDefaultLocale) {
      var res = CSL2.Util.Dates.normalizeMonth(num, true);
      var num = res.num;
      if (!num) {
        num = "";
      } else {
        num = "" + num;
        while (num.length < 2) {
          num = "0" + num;
        }
        num = state.getTerm(res.stub + num, "long", 0, 0, false, forceDefaultLocale);
      }
      return num;
    };
    CSL2.Util.Dates.month["short"] = function(state, num, gender, forceDefaultLocale) {
      var res = CSL2.Util.Dates.normalizeMonth(num, true);
      var num = res.num;
      if (!num) {
        num = "";
      } else {
        num = "" + num;
        while (num.length < 2) {
          num = "0" + num;
        }
        num = state.getTerm(res.stub + num, "short", 0, 0, false, forceDefaultLocale);
      }
      return num;
    };
    CSL2.Util.Dates.day = {};
    CSL2.Util.Dates.day.numeric = function(state, num) {
      return num.toString();
    };
    CSL2.Util.Dates.day["long"] = CSL2.Util.Dates.day.numeric;
    CSL2.Util.Dates.day["numeric-leading-zeros"] = function(state, num) {
      if (!num) {
        num = 0;
      }
      num = num.toString();
      while (num.length < 2) {
        num = "0" + num;
      }
      return num.toString();
    };
    CSL2.Util.Dates.day.ordinal = function(state, num, gender) {
      return state.fun.ordinalizer.format(num, gender);
    };
    CSL2.Util.Sort = {};
    CSL2.Util.Sort.strip_prepositions = function(str) {
      var m2;
      if (typeof str === "string") {
        m2 = str.match(/^(([aA]|[aA][nN]|[tT][hH][eE])\s+)/);
      }
      if (m2) {
        str = str.substr(m2[1].length);
      }
      return str;
    };
    CSL2.Util.substituteStart = function(state, target) {
      var element_trace, display, bib_first, func, choose_start, if_start, nodetypes;
      func = function(state2, Item, item) {
        for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
          if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
            state2.tmp.strip_periods += 1;
            break;
          }
        }
      };
      this.execs.push(func);
      if (this.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
        this.decorations.reverse();
        this.decorations.push(["@showid", "true", this.cslid]);
        this.decorations.reverse();
      }
      nodetypes = ["number", "date", "names"];
      if (this.name === "text" && !this.postponed_macro || nodetypes.indexOf(this.name) > -1) {
        element_trace = function(state2, Item, item) {
          if (state2.tmp.element_trace.value() === "author" || this.name === "names") {
            if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
              if (!state2.tmp.probably_rendered_something) {
              } else {
                state2.tmp.element_trace.push("suppress-me");
              }
            }
            if (!state2.tmp.just_looking && item && item["suppress-author"]) {
              if (!state2.tmp.probably_rendered_something) {
                state2.tmp.element_trace.push("suppress-me");
              }
            }
          } else if (this.name === "date") {
            if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
              if (state2.tmp.probably_rendered_something) {
                state2.tmp.element_trace.push("suppress-me");
              }
            }
          } else {
            if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
              if (!state2.tmp.probably_rendered_something && state2.tmp.can_block_substitute) {
              } else {
                state2.tmp.element_trace.push("suppress-me");
              }
            } else if (item && item["suppress-author"]) {
              state2.tmp.element_trace.push("do-not-suppress-me");
            }
          }
        };
        this.execs.push(element_trace);
      }
      display = this.strings.cls;
      this.strings.cls = false;
      if (state.build.render_nesting_level === 0) {
        if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
          bib_first = new CSL2.Token("group", CSL2.START);
          bib_first.decorations = [["@display", "left-margin"]];
          func = function(state2, Item) {
            if (!state2.tmp.render_seen) {
              bib_first.strings.first_blob = Item.id;
              state2.output.startTag("bib_first", bib_first);
            }
          };
          bib_first.execs.push(func);
          target.push(bib_first);
        } else if (CSL2.DISPLAY_CLASSES.indexOf(display) > -1) {
          bib_first = new CSL2.Token("group", CSL2.START);
          bib_first.decorations = [["@display", display]];
          func = function(state2, Item) {
            bib_first.strings.first_blob = Item.id;
            state2.output.startTag("bib_first", bib_first);
          };
          bib_first.execs.push(func);
          target.push(bib_first);
        }
        state.build.cls = display;
      }
      state.build.render_nesting_level += 1;
      if (state.build.substitute_level.value() === 1) {
        choose_start = new CSL2.Token("choose", CSL2.START);
        CSL2.Node.choose.build.call(choose_start, state, target);
        if_start = new CSL2.Token("if", CSL2.START);
        func = function() {
          if (state.tmp.can_substitute.value()) {
            return true;
          }
          return false;
        };
        if_start.tests ? {} : if_start.tests = [];
        if_start.tests.push(func);
        if_start.test = state.fun.match.any(this, state, if_start.tests);
        target.push(if_start);
      }
      if (state.sys.variableWrapper && this.variables_real && this.variables_real.length) {
        func = function(state2, Item, item) {
          if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
            var variable_entry = new CSL2.Token("text", CSL2.START);
            variable_entry.decorations = [["@showid", "true"]];
            state2.output.startTag("variable_entry", variable_entry);
            var position = null;
            if (item) {
              position = item.position;
            }
            if (!position) {
              position = 0;
            }
            var positionMap = [
              "first",
              "container-subsequent",
              "subsequent",
              "ibid",
              "ibid-with-locator"
            ];
            var noteNumber = 0;
            if (item && item.noteIndex) {
              noteNumber = item.noteIndex;
            }
            var firstReferenceNoteNumber = 0;
            if (item && item["first-reference-note-number"]) {
              firstReferenceNoteNumber = item["first-reference-note-number"];
            }
            var firstContainerReferenceNoteNumber = 0;
            if (item && item["first-container-reference-note-number"]) {
              firstContainerReferenceNoteNumber = item["first-container-reference-note-number"];
            }
            var citationNumber = 0;
            if (item && item["citation-number"]) {
              citationNumber = item["citation-number"];
            }
            var index6 = 0;
            if (item && item.index) {
              index6 = item.index;
            }
            var params = {
              itemData: Item,
              variableNames: this.variables,
              context: state2.tmp.area,
              xclass: state2.opt.xclass,
              position: positionMap[position],
              "note-number": noteNumber,
              "first-reference-note-number": firstReferenceNoteNumber,
              "first-container-reference-note-number": firstContainerReferenceNoteNumber,
              "citation-number": citationNumber,
              "index": index6,
              "mode": state2.opt.mode
            };
            state2.output.current.value().params = params;
          }
        };
        this.execs.push(func);
      }
    };
    CSL2.Util.substituteEnd = function(state, target) {
      var func, bib_first_end, bib_other, if_end, choose_end, author_substitute, str;
      if (state.sys.variableWrapper && (this.hasVariable || this.variables_real && this.variables_real.length)) {
        func = function(state2) {
          if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
            state2.output.endTag("variable_entry");
          }
        };
        this.execs.push(func);
      }
      func = function(state2) {
        for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
          if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
            state2.tmp.strip_periods += -1;
            break;
          }
        }
      };
      this.execs.push(func);
      state.build.render_nesting_level += -1;
      if (state.build.render_nesting_level === 0) {
        if (state.build.cls) {
          func = function(state2) {
            state2.output.endTag("bib_first");
          };
          this.execs.push(func);
          state.build.cls = false;
        } else if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
          bib_first_end = new CSL2.Token("group", CSL2.END);
          func = function(state2) {
            if (!state2.tmp.render_seen) {
              state2.output.endTag("bib_first");
            }
          };
          bib_first_end.execs.push(func);
          target.push(bib_first_end);
          bib_other = new CSL2.Token("group", CSL2.START);
          bib_other.decorations = [["@display", "right-inline"]];
          func = function(state2) {
            if (!state2.tmp.render_seen) {
              state2.tmp.render_seen = true;
              state2.output.startTag("bib_other", bib_other);
            }
          };
          bib_other.execs.push(func);
          target.push(bib_other);
        }
      }
      if (state.build.substitute_level.value() === 1) {
        if_end = new CSL2.Token("if", CSL2.END);
        target.push(if_end);
        choose_end = new CSL2.Token("choose", CSL2.END);
        CSL2.Node.choose.build.call(choose_end, state, target);
      }
      if (this.name === "names" || this.name === "text" && this.variables_real !== "title") {
        author_substitute = new CSL2.Token("text", CSL2.SINGLETON);
        var substitution_name = this.name;
        func = function(state2, Item) {
          if (state2.tmp.area !== "bibliography") {
            return;
          }
          if (typeof state2.bibliography.opt["subsequent-author-substitute"] !== "string") {
            return;
          }
          if (this.variables_real && !Item[this.variables_real]) {
            return;
          }
          if (this.variables_real && substitution_name === "names") {
            return;
          }
          var subrule = state2.bibliography.opt["subsequent-author-substitute-rule"];
          var i, ilen;
          var printing = !state2.tmp.suppress_decorations;
          if (printing && state2.tmp.subsequent_author_substitute_ok) {
            if (state2.tmp.rendered_name) {
              if (subrule === "partial-each" || subrule === "partial-first") {
                var dosub = true;
                var rendered_name = [];
                for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                  var name = state2.tmp.rendered_name[i];
                  if (dosub && state2.tmp.last_rendered_name && state2.tmp.last_rendered_name.length > i - 1 && name && !name.localeCompare(state2.tmp.last_rendered_name[i])) {
                    str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                    state2.tmp.name_node.children[i].blobs = [str];
                    if (subrule === "partial-first") {
                      dosub = false;
                    }
                  } else {
                    dosub = false;
                  }
                  rendered_name.push(name);
                }
                state2.tmp.last_rendered_name = rendered_name;
              } else if (subrule === "complete-each") {
                var rendered_name = state2.tmp.rendered_name.join(",");
                if (rendered_name) {
                  if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                    for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                      str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                      state2.tmp.name_node.children[i].blobs = [str];
                    }
                  }
                  state2.tmp.last_rendered_name = rendered_name;
                }
              } else {
                var rendered_name = state2.tmp.rendered_name.join(",");
                if (rendered_name) {
                  if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                    str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                    if (state2.tmp.label_blob) {
                      state2.tmp.name_node.top.blobs = [str, state2.tmp.label_blob];
                    } else if (state2.tmp.name_node.top.blobs.length) {
                      state2.tmp.name_node.top.blobs[0].blobs = [str];
                    } else {
                      state2.tmp.name_node.top.blobs = [str];
                    }
                    state2.tmp.substituted_variable = substitution_name;
                  }
                  state2.tmp.last_rendered_name = rendered_name;
                }
              }
              state2.tmp.subsequent_author_substitute_ok = false;
            }
          }
        };
        this.execs.push(func);
      }
      if (this.name === "text" && !this.postponed_macro || ["number", "date", "names"].indexOf(this.name) > -1) {
        func = function(state2, Item) {
          if (state2.tmp.element_trace.mystack.length > 1) {
            state2.tmp.element_trace.pop();
          }
        };
        this.execs.push(func);
      }
    };
    CSL2.Util.padding = function(num) {
      var m2 = num.match(/\s*(-{0,1}[0-9]+)/);
      if (m2) {
        num = parseInt(m2[1], 10);
        if (num < 0) {
          num = 1e20 + num;
        }
        num = "" + num;
        while (num.length < 20) {
          num = "0" + num;
        }
      }
      return num;
    };
    CSL2.Util.LongOrdinalizer = function() {
    };
    CSL2.Util.LongOrdinalizer.prototype.init = function(state) {
      this.state = state;
    };
    CSL2.Util.LongOrdinalizer.prototype.format = function(num, gender) {
      if (num < 10) {
        num = "0" + num;
      }
      var ret = CSL2.Engine.getField(CSL2.LOOSE, this.state.locale[this.state.opt.lang].terms, "long-ordinal-" + num, "long", 0, gender);
      if (!ret) {
        ret = this.state.fun.ordinalizer.format(num, gender);
      }
      this.state.tmp.cite_renders_content = true;
      return ret;
    };
    CSL2.Util.Ordinalizer = function(state) {
      this.state = state;
      this.suffixes = {};
    };
    CSL2.Util.Ordinalizer.prototype.init = function() {
      if (!this.suffixes[this.state.opt.lang]) {
        this.suffixes[this.state.opt.lang] = {};
        for (var i = 0, ilen = 3; i < ilen; i += 1) {
          var gender = [void 0, "masculine", "feminine"][i];
          this.suffixes[this.state.opt.lang][gender] = [];
          for (var j = 1; j < 5; j += 1) {
            var ordinal2 = this.state.getTerm("ordinal-0" + j, "long", false, gender);
            if (typeof ordinal2 === "undefined") {
              delete this.suffixes[this.state.opt.lang][gender];
              break;
            }
            this.suffixes[this.state.opt.lang][gender].push(ordinal2);
          }
        }
      }
    };
    CSL2.Util.Ordinalizer.prototype.format = function(num, gender) {
      var str;
      num = parseInt(num, 10);
      str = "" + num;
      var suffix = "";
      var trygenders = [];
      if (gender) {
        trygenders.push(gender);
      }
      trygenders.push("neuter");
      if (this.state.locale[this.state.opt.lang].ord["1.0.1"]) {
        suffix = this.state.getTerm("ordinal", false, 0, gender);
        var trygender;
        for (var i = 0, ilen = trygenders.length; i < ilen; i += 1) {
          trygender = trygenders[i];
          var ordinfo = this.state.locale[this.state.opt.lang].ord["1.0.1"];
          if (ordinfo["whole-number"][str] && ordinfo["whole-number"][str][trygender]) {
            suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["whole-number"][str][trygender], false, 0, gender);
          } else if (ordinfo["last-two-digits"][str.slice(str.length - 2)] && ordinfo["last-two-digits"][str.slice(str.length - 2)][trygender]) {
            suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-two-digits"][str.slice(str.length - 2)][trygender], false, 0, gender);
          } else if (ordinfo["last-digit"][str.slice(str.length - 1)] && ordinfo["last-digit"][str.slice(str.length - 1)][trygender]) {
            suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-digit"][str.slice(str.length - 1)][trygender], false, 0, gender);
          }
          if (suffix) {
            break;
          }
        }
      } else {
        if (!gender) {
          gender = void 0;
        }
        this.state.fun.ordinalizer.init();
        if (num / 10 % 10 === 1 || num > 10 && num < 20) {
          suffix = this.suffixes[this.state.opt.lang][gender][3];
        } else if (num % 10 === 1 && num % 100 !== 11) {
          suffix = this.suffixes[this.state.opt.lang][gender][0];
        } else if (num % 10 === 2 && num % 100 !== 12) {
          suffix = this.suffixes[this.state.opt.lang][gender][1];
        } else if (num % 10 === 3 && num % 100 !== 13) {
          suffix = this.suffixes[this.state.opt.lang][gender][2];
        } else {
          suffix = this.suffixes[this.state.opt.lang][gender][3];
        }
      }
      str = str += suffix;
      return str;
    };
    CSL2.Util.Romanizer = function() {
    };
    CSL2.Util.Romanizer.prototype.format = function(num) {
      var ret, pos, n, numstr, len;
      ret = "";
      if (num < 6e3) {
        numstr = num.toString().split("");
        numstr.reverse();
        pos = 0;
        n = 0;
        len = numstr.length;
        for (pos = 0; pos < len; pos += 1) {
          n = parseInt(numstr[pos], 10);
          ret = CSL2.ROMAN_NUMERALS[pos][n] + ret;
        }
      }
      return ret;
    };
    CSL2.Util.Suffixator = function(slist) {
      if (!slist) {
        slist = CSL2.SUFFIX_CHARS;
      }
      this.slist = slist.split(",");
    };
    CSL2.Util.Suffixator.prototype.format = function(N) {
      var X2;
      N += 1;
      var key = "";
      do {
        X2 = N % 26 === 0 ? 26 : N % 26;
        var key = this.slist[X2 - 1] + key;
        N = (N - X2) / 26;
      } while (N !== 0);
      return key;
    };
    CSL2.Engine.prototype.processNumber = function(node, ItemObject, variable) {
      var val;
      var me = this;
      var realVariable = variable;
      variable = variable === "page-first" ? "page" : variable;
      var fullformAnd = ",\\s+and\\s+|\\s+and\\s+";
      if (this.opt.lang.slice(0, 2) !== "en") {
        fullformAnd += "|,\\s+" + this.getTerm("and") + "\\s+|\\s+" + this.getTerm("and") + "\\s+";
      }
      var symbolAnd = "\\s*&\\s*";
      var andRex = new RegExp("^" + symbolAnd + "$");
      var joinerMatchRex = new RegExp("(" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)", "g");
      var joinerSplitRex = new RegExp("(?:" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)");
      var localeAnd = this.getTerm("and");
      var localeAmpersand = this.getTerm("and", "symbol");
      if (localeAnd === localeAmpersand) {
        localeAmpersand = "&";
      }
      function normalizeFieldValue(str) {
        str = str.trim();
        var m2 = str.match(/^([^ ]+)/);
        if (m2 && !CSL2.STATUTE_SUBDIV_STRINGS[m2[1]]) {
          var embeddedLabel = null;
          if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
            if (ItemObject.label) {
              embeddedLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[ItemObject.label];
            } else {
              embeddedLabel = "p.";
            }
          } else {
            embeddedLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
          }
          if (embeddedLabel) {
            str = embeddedLabel + " " + str;
          }
        }
        return str;
      }
      function composeNumberInfo(origLabel, label, val2, joiningSuffix, parsePosition) {
        joiningSuffix = joiningSuffix ? joiningSuffix : "";
        var info2 = {};
        if (!label && !CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable]) {
          label = "var:" + variable;
        }
        if (label) {
          var m2 = label.match(/(\s*)([^\s]+)(\s*)/);
          if (realVariable === "page" && parsePosition === 0 && ["p.", "pp."].indexOf(m2[2]) === -1) {
            info2.gotosleepability = true;
            info2.labelVisibility = true;
          } else {
            info2.labelVisibility = false;
          }
          info2.label = m2[2];
          info2.origLabel = origLabel;
          info2.labelSuffix = m2[3] ? m2[3] : "";
          info2.plural = 0;
        }
        var m2 = val2.match(/^([0-9]*[a-zA-Z]+0*)?([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
        if (m2) {
          info2.particle = m2[1] ? m2[1] : "";
          info2.value = m2[2];
        } else {
          info2.particle = "";
          info2.value = val2;
        }
        info2.joiningSuffix = joiningSuffix.replace(/\s*-\s*/, "-");
        return info2;
      }
      function fixupSubsections(elems) {
        for (var i = elems.length - 2; i > -1; i -= 2) {
          if (elems[i] === "-" && elems[i - 1].match(/^(?:(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])\.  *)*[0-9]+[,a-zA-Z]+$/) && elems[i + 1].match(/^[,a-zA-Z]+$/)) {
            elems[i - 1] = elems.slice(i - 1, i + 2).join("");
            elems = elems.slice(0, i).concat(elems.slice(i + 2));
          }
        }
        return elems;
      }
      function parseString(str, defaultLabel2) {
        defaultLabel2 = defaultLabel2 ? defaultLabel2 : "";
        str = normalizeFieldValue(str, defaultLabel2);
        var jmrex, jsrex, mystr;
        if (variable === "page") {
          if (str.indexOf("\u2013") > -1) {
            str = str.replace(/\u2013/g, "-");
          }
        }
        if (str.indexOf("\\-") > -1) {
          jmrex = new RegExp(joinerMatchRex.source.replace("\\-", ""));
          jsrex = new RegExp(joinerSplitRex.source.replace("\\-", ""));
          var lst = str.split("\\-");
          for (var i = 0, ilen = lst.length; i < ilen; i++) {
            lst[i] = lst[i].replace(/\-/g, "\u2013");
          }
          mystr = lst.join("\\-");
          mystr = mystr.replace(/\\/g, "");
        } else {
          jmrex = joinerMatchRex;
          jsrex = joinerSplitRex;
          mystr = str;
        }
        var elems = [];
        var m2 = mystr.match(jmrex);
        if (m2) {
          var lst = mystr.split(jsrex);
          for (var i = 0, ilen = m2.length; i < ilen; i++) {
            if (m2[i].match(andRex)) {
              if (lst[i].match(/[a-zA-Z]$/) && lst[i].match(/^[a-zA-Z]/)) {
                m2[i] = localeAmpersand;
              } else {
                m2[i] = " " + localeAmpersand + " ";
              }
            }
          }
          var recombine = false;
          for (var i in lst) {
            if (("" + lst[i]).replace(/^[a-z]\.\s+/, "").match(/[^\s0-9ivxlcmIVXLCM]/)) {
              break;
            }
          }
          if (recombine) {
            elems = [mystr];
          } else {
            for (var i = 0, ilen = lst.length - 1; i < ilen; i++) {
              elems.push(lst[i]);
              elems.push(m2[i]);
            }
            elems.push(lst[lst.length - 1]);
            elems = fixupSubsections(elems);
          }
        } else {
          var elems = [mystr];
        }
        var values2 = [];
        var label = defaultLabel2;
        var origLabel = "";
        for (var i = 0, ilen = elems.length; i < ilen; i += 2) {
          var m2 = elems[i].match(/((?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/g);
          if (m2) {
            var lst = elems[i].split(/(?:(?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/);
            for (var j = lst.length - 1; j > 0; j--) {
              if (lst[j - 1] && (!lst[j].match(/^[0-9]+([-;,:a-zA-Z]*)$/) || !lst[j - 1].match(/^[0-9]+([-;,:a-zA-Z]*)$/))) {
                lst[j - 1] = lst[j - 1] + m2[j - 1] + lst[j];
                lst = lst.slice(0, j).concat(lst.slice(j + 1));
                m2 = m2.slice(0, j - 1).concat(m2.slice(j));
              }
            }
            if (m2.length > 0) {
              var slug = m2[0].trim();
              var notAlabel = !CSL2.STATUTE_SUBDIV_STRINGS[slug] || typeof me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[slug]) === "undefined" || ["locator", "number", "locator-extra", "page"].indexOf(variable) === -1 && CSL2.STATUTE_SUBDIV_STRINGS[slug] !== variable;
              if (notAlabel) {
                if (i === 0) {
                  m2 = m2.slice(1);
                  lst[0] = lst[0] + " " + slug + " " + lst[1];
                  lst = lst.slice(0, 1).concat(lst.slice(2));
                }
              } else {
                origLabel = slug;
              }
            }
            for (var j = 0, jlen = lst.length; j < jlen; j++) {
              if (lst[j] || j === lst.length - 1) {
                var filteredOrigLabel;
                label = m2[j - 1] ? m2[j - 1] : label;
                if (origLabel === label.trim()) {
                  filteredOrigLabel = "";
                } else {
                  filteredOrigLabel = origLabel;
                }
                mystr = lst[j] ? lst[j].trim() : "";
                if (j === lst.length - 1) {
                  values2.push(composeNumberInfo(filteredOrigLabel, label, mystr, elems[i + 1], i));
                } else {
                  values2.push(composeNumberInfo(filteredOrigLabel, label, mystr, null, i));
                }
              }
            }
          } else {
            var filteredOrigLabel;
            if (origLabel === label.trim()) {
              filteredOrigLabel = "";
            } else {
              filteredOrigLabel = origLabel;
            }
            values2.push(composeNumberInfo(filteredOrigLabel, label, elems[i], elems[i + 1]));
          }
        }
        return values2;
      }
      function setSpaces(values2) {
        for (var i = 0, ilen = values2.length - 1; i < ilen; i++) {
          if (!values2[i].joiningSuffix && values2[i + 1].label) {
            values2[i].joiningSuffix = " ";
          }
        }
      }
      function fixNumericAndCount(values2, i, currentLabelInfo) {
        var master = values2[currentLabelInfo.pos];
        var val2 = values2[i].value;
        var isEscapedHyphen = master.joiningSuffix === "\\-";
        if (val2.particle && val2.particle !== master.particle) {
          currentLabelInfo.collapsible = false;
        }
        var mVal = val2.match(/^[0-9]+([-,:a-zA-Z]*)$/);
        var mCurrentLabel = master.value.match(/^(?:[0-9]+|[ixv]+)([-,:a-zA-Z]*|\-[\-0-9]+)$/);
        if (!val2 || !mVal || !mCurrentLabel || isEscapedHyphen) {
          currentLabelInfo.collapsible = false;
          if (!val2 || !mCurrentLabel) {
            currentLabelInfo.numeric = false;
          }
          if (isEscapedHyphen) {
            currentLabelInfo.count--;
          }
        }
        if (mVal && mVal[1] || mCurrentLabel && mCurrentLabel[1]) {
          currentLabelInfo.collapsible = false;
        }
        if (values2[i].collapsible === void 0) {
          for (var j = i, jlen = i + currentLabelInfo.count; j < jlen; j++) {
            if (isNaN(parseInt(values2[j].value)) && !values2[j].value.match(/^[ivxlcmIVXLCM]+$/)) {
              values2[j].collapsible = false;
            } else {
              values2[j].collapsible = true;
            }
          }
          currentLabelInfo.collapsible = values2[i].collapsible;
        }
        var isCollapsible = currentLabelInfo.collapsible;
        for (var j = currentLabelInfo.pos, jlen = currentLabelInfo.pos + currentLabelInfo.count; j < jlen; j++) {
          if (currentLabelInfo.count > 1 && isCollapsible) {
            values2[j].plural = 1;
          }
          values2[j].numeric = currentLabelInfo.numeric;
          values2[j].collapsible = currentLabelInfo.collapsible;
        }
      }
      function fixLabelVisibility(values2, groupStartPos, currentLabelInfo) {
        if (currentLabelInfo.label.slice(0, 4) !== "var:") {
          if (currentLabelInfo.pos === 0) {
            if (["locator", "number", "locator-extra", "page"].indexOf(variable) > -1) {
              if (typeof me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label]) === "undefined") {
                values2[currentLabelInfo.pos].labelVisibility = true;
              }
            }
            if (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1) {
              if (CSL2.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label] !== variable) {
                values2[0].labelVisibility = true;
              }
            }
          } else {
            values2[currentLabelInfo.pos].labelVisibility = true;
          }
        }
      }
      function setPluralsAndNumerics(values2) {
        if (values2.length === 0) {
          return;
        }
        var groupStartPos = 0;
        var groupCount = 1;
        for (var i = 1, ilen = values2.length; i < ilen; i++) {
          var lastVal = values2[i - 1];
          var thisVal = values2[i];
          if (lastVal.label === thisVal.label && lastVal.particle === lastVal.particle) {
            groupCount++;
          } else {
            var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
            currentLabelInfo.pos = groupStartPos;
            currentLabelInfo.count = groupCount;
            currentLabelInfo.numeric = true;
            fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
            if (lastVal.label !== thisVal.label) {
              fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
            }
            groupStartPos = i;
            groupCount = 1;
          }
        }
        var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
        currentLabelInfo.pos = groupStartPos;
        currentLabelInfo.count = groupCount;
        currentLabelInfo.numeric = true;
        fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
        fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
        if (values2.length && values2[0].numeric && variable.slice(0, 10) === "number-of-") {
          if (parseInt(ItemObject[realVariable], 10) > 1) {
            values2[0].plural = 1;
          }
        }
      }
      function stripHyphenBackslash(joiningSuffix) {
        return joiningSuffix.replace("\\-", "-");
      }
      function setStyling(values2) {
        var masterNode = CSL2.Util.cloneToken(node);
        var masterStyling = new CSL2.Token();
        if (!me.tmp.just_looking) {
          masterStyling.decorations = masterNode.decorations;
          masterNode.decorations = [];
          masterStyling.strings.prefix = masterNode.strings.prefix;
          masterNode.strings.prefix = "";
          masterStyling.strings.suffix = masterNode.strings.suffix;
          masterNode.strings.suffix = "";
        }
        var masterLabel = values2.length ? values2[0].label : null;
        if (values2.length) {
          for (var i = 0, ilen = values2.length; i < ilen; i++) {
            var val2 = values2[i];
            var newnode = CSL2.Util.cloneToken(masterNode);
            newnode.gender = node.gender;
            if (masterLabel === val2.label) {
              newnode.formatter = node.formatter;
            }
            if (val2.numeric) {
              newnode.successor_prefix = val2.successor_prefix;
            }
            newnode.strings.suffix = newnode.strings.suffix + stripHyphenBackslash(val2.joiningSuffix);
            val2.styling = newnode;
          }
          if (!me.tmp.just_looking) {
            if (values2[0].value.slice(0, 1) === '"' && values2[values2.length - 1].value.slice(-1) === '"') {
              values2[0].value = values2[0].value.slice(1);
              values2[values2.length - 1].value = values2[values2.length - 1].value.slice(0, -1);
              masterStyling.decorations.push(["@quotes", true]);
            }
          }
        }
        return masterStyling;
      }
      function checkTerm(variable2, val2) {
        var ret = true;
        if (["locator", "locator-extra", "page"].indexOf(variable2) > -1) {
          var label;
          if (val2.origLabel) {
            label = val2.origLabel;
          } else {
            label = val2.label;
          }
          ret = !!me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[label]);
        }
        return ret;
      }
      function checkPage(variable2, val2) {
        return variable2 === "page" || ["locator", "locator-extra"].indexOf(variable2) > -1 && (["p."].indexOf(val2.label) > -1 || ["p."].indexOf(val2.origLabel) > -1);
      }
      function fixupRangeDelimiter(variable2, val2, rangeDelimiter, isNumeric) {
        var isPage = checkPage(variable2, val2);
        var hasTerm = checkTerm(variable2, val2);
        if (hasTerm && rangeDelimiter === "-") {
          if (isNumeric) {
            if (isPage || ["locator", "locator-extra", "issue", "volume", "edition", "number"].indexOf(variable2) > -1) {
              rangeDelimiter = me.getTerm("page-range-delimiter");
              if (!rangeDelimiter) {
                rangeDelimiter = "\u2013";
              }
            }
            if (variable2 === "collection-number") {
              rangeDelimiter = me.getTerm("year-range-delimiter");
              if (!rangeDelimiter) {
                rangeDelimiter = "\u2013";
              }
            }
          }
        }
        return rangeDelimiter;
      }
      function manglePageNumbers(values2, i, currentInfo) {
        if (i < 1) {
          return;
        }
        if (currentInfo.count !== 2) {
          return;
        }
        if (values2[i - 1].particle !== values2[i].particle) {
          return;
        }
        if (values2[i - 1].joiningSuffix !== "-") {
          currentInfo.count = 1;
          return;
        }
        if (!me.opt["page-range-format"] && parseInt(values2[i - 1].value, 10) > parseInt(values2[i].value, 10)) {
          values2[i - 1].joiningSuffix = fixupRangeDelimiter(variable, values2[i], values2[i - 1].joiningSuffix, true);
          return;
        }
        var val2 = values2[i];
        var isPage = checkPage(variable, val2);
        var str;
        if (isPage && !isNaN(parseInt(values2[i - 1].value)) && !isNaN(parseInt(values2[i].value))) {
          str = values2[i - 1].particle + values2[i - 1].value + " - " + values2[i].particle + values2[i].value;
          str = me.fun.page_mangler(str);
        } else {
          if (("" + values2[i - 1].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/) && ("" + values2[i].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/)) {
            values2[i - 1].joiningSuffix = me.getTerm("page-range-delimiter");
          }
          str = values2[i - 1].value + stripHyphenBackslash(values2[i - 1].joiningSuffix) + values2[i].value;
        }
        var m2 = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
        if (m2) {
          var rangeDelimiter = m2[3];
          rangeDelimiter = fixupRangeDelimiter(variable, val2, rangeDelimiter, values2[i].numeric);
          values2[i - 1].particle = m2[1];
          values2[i - 1].value = m2[2];
          values2[i - 1].joiningSuffix = rangeDelimiter;
          values2[i].particle = m2[4];
          values2[i].value = m2[5];
        }
        currentInfo.count = 0;
      }
      function fixRanges(values2) {
        if (!node) {
          return;
        }
        if (["page", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume", "locator", "locator-extra"].indexOf(variable) === -1) {
          return;
        }
        var currentInfo = {
          count: 0,
          label: null,
          lastHadRangeDelimiter: false
        };
        for (var i = 0, ilen = values2.length; i < ilen; i++) {
          var val2 = values2[i];
          if (!val2.collapsible) {
            currentInfo.count = 0;
            currentInfo.label = null;
            var isNumeric = val2.numeric;
            val2.joiningSuffix = fixupRangeDelimiter(variable, val2, val2.joiningSuffix, isNumeric);
          } else if (currentInfo.label === val2.label && val2.joiningSuffix === "-") {
            currentInfo.count = 1;
          } else if (currentInfo.label === val2.label && val2.joiningSuffix !== "-") {
            currentInfo.count++;
            if (currentInfo.count === 2) {
              manglePageNumbers(values2, i, currentInfo);
            }
          } else if (currentInfo.label !== val2.label) {
            currentInfo.label = val2.label;
            currentInfo.count = 1;
          } else {
            currentInfo.count = 1;
            currentInfo.label = val2.label;
          }
        }
        if (currentInfo.count === 2) {
          manglePageNumbers(values2, values2.length - 1, currentInfo);
        }
      }
      function setVariableParams(shadow_numbers, realVariable2, values2) {
        var obj2 = shadow_numbers[realVariable2];
        if (values2.length) {
          obj2.numeric = values2[0].numeric;
          obj2.collapsible = values2[0].collapsible;
          obj2.plural = values2[0].plural;
          obj2.label = CSL2.STATUTE_SUBDIV_STRINGS[values2[0].label];
          if (variable === "number" && obj2.label === "issue" && me.getTerm("number")) {
            obj2.label = "number";
          }
        }
      }
      if (node && this.tmp.shadow_numbers[realVariable] && this.tmp.shadow_numbers[realVariable].values.length) {
        var values = this.tmp.shadow_numbers[realVariable].values;
        fixRanges(values);
        this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
        return;
      }
      if (!this.tmp.shadow_numbers[realVariable]) {
        this.tmp.shadow_numbers[realVariable] = {
          values: []
        };
      }
      if (!ItemObject) {
        return;
      }
      var languageRole = CSL2.LangPrefsMap[variable];
      if (languageRole) {
        var localeType = this.opt["cite-lang-prefs"][languageRole][0];
        val = this.transform.getTextSubField(ItemObject, realVariable, "locale-" + localeType, true);
        val = val.name;
      } else {
        val = ItemObject[realVariable];
      }
      if (val && realVariable === "number" && ItemObject.type === "legal_case") {
        val = val.replace(/[\\]*-/g, "\\-");
      }
      if (val && this.sys.getAbbreviation) {
        if (this.sys.normalizeAbbrevsKey) {
          var normval = this.sys.normalizeAbbrevsKey(realVariable, val);
        } else {
          var normval = val;
        }
        var jurisdiction = this.transform.loadAbbreviation(ItemObject.jurisdiction, "number", normval, ItemObject.language);
        if (this.transform.abbrevs[jurisdiction].number) {
          if (this.transform.abbrevs[jurisdiction].number[normval]) {
            val = this.transform.abbrevs[jurisdiction].number[normval];
          } else {
            if (typeof this.transform.abbrevs[jurisdiction].number[normval] !== "undefined") {
              delete this.transform.abbrevs[jurisdiction].number[normval];
            }
          }
        }
      }
      if (typeof val !== "undefined" && (typeof val === "string" || typeof val === "number")) {
        if (typeof val === "number") {
          val = "" + val;
        }
        var defaultLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
        if (this.tmp.shadow_numbers[realVariable].values.length === 0) {
          var values = parseString(val, defaultLabel);
          setSpaces(values);
          setPluralsAndNumerics(values);
          for (var obj of values) {
            if (!obj.numeric)
              obj.plural = 0;
          }
          this.tmp.shadow_numbers[realVariable].values = values;
          if (node) {
            fixRanges(values);
            this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
          }
          setVariableParams(this.tmp.shadow_numbers, realVariable, values);
        }
        var info = this.tmp.shadow_numbers[realVariable];
        if (variable === "number") {
          if (info.values.length === 1 && info.values[0].value.indexOf("|") > -1) {
            info.values[0].value = info.values[0].value.replace(/\|/g, ", ");
            info.values[0].numeric = true;
            info.values[0].plural = 1;
            info.values[0].collapsible = false;
            info.numeric = true;
            info.plural = 1;
            info.collapsible = false;
          }
        }
        if (info.values.length === 1) {
          if (info.values[0].value.match(/^[0-9]+(?:\/[0-9]+)+$/)) {
            info.values[0].numeric = true;
            info.values[0].plural = 0;
            info.values[0].collapsible = false;
            info.numeric = true;
            info.plural = 0;
            info.collapsible = false;
          }
        }
        if (variable === "page") {
          if (info.values.length > 0) {
            if (info.values[0].gotosleepability) {
              info.labelForm = "short";
            }
          }
        }
      }
    };
    CSL2.Util.outputNumericField = function(state, varname, itemID) {
      state.output.openLevel(state.tmp.shadow_numbers[varname].masterStyling);
      var masterStyling = state.tmp.shadow_numbers[varname].masterStyling;
      var nums = state.tmp.shadow_numbers[varname].values;
      var masterLabel = nums.length ? nums[0].label : null;
      var labelForm = state.tmp.shadow_numbers[varname].labelForm;
      var tryStatic = state.tmp.group_context.tip.label_static;
      var embeddedLabelForm;
      if (labelForm) {
        embeddedLabelForm = labelForm;
      } else {
        embeddedLabelForm = "short";
      }
      var labelCapitalizeIfFirst = state.tmp.shadow_numbers[varname].labelCapitalizeIfFirst;
      var labelDecorations = state.tmp.shadow_numbers[varname].labelDecorations;
      var lastLabelName = null;
      for (var i = 0, ilen = nums.length; i < ilen; i++) {
        var num = nums[i];
        var label = "";
        var labelName;
        if (num.label) {
          if (num.label.slice(0, 4) === "var:") {
            labelName = num.label.slice(4);
          } else {
            labelName = CSL2.STATUTE_SUBDIV_STRINGS[num.label];
          }
          if (labelName) {
            if (num.label === masterLabel) {
              if (tryStatic) {
                label = state.getTerm(labelName, "static", num.plural);
                if (label.indexOf("%s") === -1) {
                  label = "";
                }
              }
              if (!label) {
                label = state.getTerm(labelName, labelForm, num.plural);
              }
            } else {
              if (tryStatic) {
                label = state.getTerm(labelName, "static", num.plural);
                if (label.indexOf("%s") === -1) {
                  label = "";
                }
              }
              if (!label) {
                label = state.getTerm(labelName, embeddedLabelForm, num.plural);
              }
            }
            if (labelCapitalizeIfFirst) {
              label = CSL2.Output.Formatters["capitalize-first"](state, label);
            }
          }
        }
        var labelPlaceholderPos = -1;
        if (label) {
          labelPlaceholderPos = label.indexOf("%s");
        }
        var numStyling = CSL2.Util.cloneToken(num.styling);
        numStyling.formatter = num.styling.formatter;
        numStyling.type = num.styling.type;
        numStyling.num = num.styling.num;
        numStyling.gender = num.styling.gender;
        if (labelPlaceholderPos > 0 && labelPlaceholderPos < label.length - 2) {
          numStyling.strings.prefix += label.slice(0, labelPlaceholderPos);
          numStyling.strings.suffix = label.slice(labelPlaceholderPos + 2) + numStyling.strings.suffix;
        } else if (num.labelVisibility) {
          if (!label) {
            label = num.label;
            labelName = num.label;
          }
          if (labelPlaceholderPos > 0) {
            var prefixLabelStyling = new CSL2.Token();
            prefixLabelStyling.decorations = labelDecorations;
            state.output.append(label.slice(0, labelPlaceholderPos), prefixLabelStyling);
          } else if (labelPlaceholderPos === label.length - 2 || labelPlaceholderPos === -1) {
            state.output.append(label + num.labelSuffix, "empty");
          }
        }
        CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state, masterStyling.strings.prefix, null, masterStyling, `${num.particle}${num.value}`);
        if (num.collapsible) {
          var blob;
          if (num.value.match(/^[1-9][0-9]*$/) && Number.isSafeInteger(parseInt(num.value, 10))) {
            blob = new CSL2.NumericBlob(state, num.particle, parseInt(num.value, 10), numStyling, itemID);
          } else {
            blob = new CSL2.NumericBlob(state, num.particle, num.value, numStyling, itemID);
          }
          if (typeof blob.gender === "undefined") {
            blob.gender = state.locale[state.opt.lang]["noun-genders"][varname];
          }
          state.output.append(blob, "literal");
        } else {
          state.output.append(num.particle + num.value, numStyling);
        }
        if (labelPlaceholderPos === 0 && labelPlaceholderPos < label.length - 2) {
          if (lastLabelName === null) {
            lastLabelName = labelName;
          }
          if (labelName !== lastLabelName || i === nums.length - 1) {
            var suffixLabelStyling = new CSL2.Token();
            suffixLabelStyling.decorations = labelDecorations;
            state.output.append(label.slice(labelPlaceholderPos + 2), suffixLabelStyling);
          }
        }
        lastLabelName = labelName;
        state.tmp.term_predecessor = true;
      }
      state.output.closeLevel();
    };
    CSL2.Util.PageRangeMangler = {};
    CSL2.Util.PageRangeMangler.getFunction = function(state, rangeType) {
      var rangerex, pos, len, stringify, listify, expand, minimize, minimize_internal, chicago15, chicago16, lst, m2, b, e, ret, begin, end2, ret_func;
      var range_delimiter = state.getTerm(rangeType + "-range-delimiter");
      rangerex = /([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)\s*(?:\u2013|-)\s*([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)/;
      stringify = function(lst2) {
        len = lst2.length;
        for (pos = 1; pos < len; pos += 2) {
          if (typeof lst2[pos] === "object") {
            lst2[pos] = lst2[pos].join("");
          }
        }
        var ret2 = lst2.join("");
        ret2 = ret2.replace(/([^\\])\-/g, "$1" + state.getTerm(rangeType + "-range-delimiter"));
        return ret2;
      };
      listify = function(str) {
        var m3, lst2, ret2;
        var hyphens = "\\s+\\-\\s+";
        var this_range_delimiter = range_delimiter === "-" ? "" : range_delimiter;
        var delimRex = new RegExp("([^\\\\])[-" + this_range_delimiter + "\\u2013]", "g");
        str = str.replace(delimRex, "$1 - ").replace(/\s+-\s+/g, " - ");
        var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*)", "g");
        var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*");
        m3 = str.match(rexm);
        lst2 = str.split(rexlst);
        if (lst2.length === 0) {
          ret2 = m3;
        } else {
          ret2 = [lst2[0]];
          for (pos = 1, len = lst2.length; pos < len; pos += 1) {
            ret2.push(m3[pos - 1].replace(/\s*\-\s*/g, "-"));
            ret2.push(lst2[pos]);
          }
        }
        return ret2;
      };
      expand = function(str) {
        str = "" + str;
        lst = listify(str);
        len = lst.length;
        for (pos = 1; pos < len; pos += 2) {
          m2 = lst[pos].match(rangerex);
          if (m2) {
            if (!m2[3] || m2[1] === m2[3]) {
              if (m2[4].length < m2[2].length) {
                m2[4] = m2[2].slice(0, m2[2].length - m2[4].length) + m2[4];
              }
              if (parseInt(m2[2], 10) < parseInt(m2[4], 10)) {
                m2[3] = range_delimiter + (m2[1] ? m2[1] : "");
                lst[pos] = m2.slice(1);
              }
            }
          }
          if (typeof lst[pos] === "string") {
            lst[pos] = lst[pos].replace(/\-/g, range_delimiter);
          }
        }
        return lst;
      };
      minimize = function(lst2, minchars, isyear) {
        len = lst2.length;
        for (var i = 1, ilen = lst2.length; i < ilen; i += 2) {
          if (typeof lst2[i] === "object") {
            lst2[i][3] = minimize_internal(lst2[i][1], lst2[i][3], minchars, isyear);
            if (lst2[i][2].slice(1) === lst2[i][0]) {
              lst2[i][2] = range_delimiter;
            }
          }
        }
        return stringify(lst2);
      };
      minimize_internal = function(begin2, end3, minchars, isyear) {
        if (!minchars) {
          minchars = 0;
        }
        b = ("" + begin2).split("");
        e = ("" + end3).split("");
        ret = e.slice();
        ret.reverse();
        if (b.length === e.length) {
          for (var i = 0, ilen = b.length; i < ilen; i += 1) {
            if (b[i] === e[i] && ret.length > minchars) {
              ret.pop();
            } else {
              if (minchars && isyear && ret.length === 3) {
                var front = b.slice(0, i);
                front.reverse();
                ret = ret.concat(front);
              }
              break;
            }
          }
        }
        ret.reverse();
        return ret.join("");
      };
      chicago15 = function(lst2) {
        len = lst2.length;
        for (pos = 1; pos < len; pos += 2) {
          if (typeof lst2[pos] === "object") {
            m2 = lst2[pos];
            begin = parseInt(m2[1], 10);
            end2 = parseInt(m2[3], 10);
            if (begin > 100 && begin % 100 && parseInt(begin / 100, 10) === parseInt(end2 / 100, 10)) {
              m2[3] = "" + end2 % 100;
            } else if (begin >= 1e4) {
              m2[3] = "" + end2 % 1e3;
            }
          }
          if (m2[2].slice(1) === m2[0]) {
            m2[2] = range_delimiter;
          }
        }
        return stringify(lst2);
      };
      chicago16 = function(lst2) {
        len = lst2.length;
        for (pos = 1; pos < len; pos += 2) {
          if (typeof lst2[pos] === "object") {
            m2 = lst2[pos];
            begin = parseInt(m2[1], 10);
            end2 = parseInt(m2[3], 10);
            e = "" + end2;
            if (begin > 100 && begin % 100) {
              for (var i = 2; i < e.length; i++) {
                var divisor = Math.pow(10, i);
                if (Math.floor(begin / divisor) === Math.floor(end2 / divisor)) {
                  m2[3] = "" + end2 % divisor;
                  break;
                }
              }
            }
          }
          if (m2[2].slice(1) === m2[0]) {
            m2[2] = range_delimiter;
          }
        }
        return stringify(lst2);
      };
      var sniff = function(str, func, minchars, isyear) {
        var ret2;
        str = "" + str;
        var lst2 = expand(str);
        var ret2 = func(lst2, minchars, isyear);
        return ret2;
      };
      if (!state.opt[rangeType + "-range-format"]) {
        ret_func = function(str) {
          return sniff(str, stringify);
        };
      } else if (state.opt[rangeType + "-range-format"] === "expanded") {
        ret_func = function(str) {
          return sniff(str, stringify);
        };
      } else if (state.opt[rangeType + "-range-format"] === "minimal") {
        ret_func = function(str) {
          return sniff(str, minimize);
        };
      } else if (state.opt[rangeType + "-range-format"] === "minimal-two") {
        ret_func = function(str, isyear) {
          return sniff(str, minimize, 2, isyear);
        };
      } else if (state.opt[rangeType + "-range-format"] === "chicago") {
        ret_func = function(str) {
          return sniff(str, chicago15);
        };
      } else if (state.opt[rangeType + "-range-format"] === "chicago-15") {
        ret_func = function(str) {
          return sniff(str, chicago15);
        };
      } else if (state.opt[rangeType + "-range-format"] === "chicago-16") {
        ret_func = function(str) {
          return sniff(str, chicago16);
        };
      }
      return ret_func;
    };
    CSL2.Util.FlipFlopper = function(state) {
      var _nestingState = [];
      var _nestingData = {
        '<span class="nocase">': {
          type: "nocase",
          opener: '<span class="nocase">',
          closer: "</span>",
          attr: null,
          outer: null,
          flipflop: null
        },
        '<span class="nodecor">': {
          type: "nodecor",
          opener: '<span class="nodecor">',
          closer: "</span>",
          attr: "@class",
          outer: "nodecor",
          flipflop: {
            "nodecor": "nodecor"
          }
        },
        '<span style="font-variant:small-caps;">': {
          type: "tag",
          opener: '<span style="font-variant:small-caps;">',
          closer: "</span>",
          attr: "@font-variant",
          outer: "small-caps",
          flipflop: {
            "small-caps": "normal",
            "normal": "small-caps"
          }
        },
        "<sc>": {
          type: "tag",
          opener: "<sc>",
          closer: "</sc>",
          attr: "@font-variant",
          outer: "small-caps",
          flipflop: {
            "small-caps": "normal",
            "normal": "small-caps"
          }
        },
        "<i>": {
          type: "tag",
          opener: "<i>",
          closer: "</i>",
          attr: "@font-style",
          outer: "italic",
          flipflop: {
            "italic": "normal",
            "normal": "italic"
          }
        },
        "<b>": {
          type: "tag",
          opener: "<b>",
          closer: "</b>",
          attr: "@font-weight",
          outer: "bold",
          flipflop: {
            "bold": "normal",
            "normal": "bold"
          }
        },
        "<sup>": {
          type: "tag",
          opener: "<sup>",
          closer: "</sup>",
          attr: "@vertical-align",
          outer: "sup",
          flipflop: {
            "sub": "sup",
            "sup": "sup"
          }
        },
        "<sub>": {
          type: "tag",
          opener: "<sub>",
          closer: "</sub>",
          attr: "@vertical-align",
          outer: "sub",
          flipflop: {
            "sup": "sub",
            "sub": "sub"
          }
        },
        ' "': {
          type: "quote",
          opener: ' "',
          closer: '"',
          attr: "@quotes",
          outer: "true",
          flipflop: {
            "true": "inner",
            "inner": "true",
            "false": "true"
          }
        },
        " '": {
          type: "quote",
          opener: " '",
          closer: "'",
          attr: "@quotes",
          outer: "inner",
          flipflop: {
            "true": "inner",
            "inner": "true",
            "false": "true"
          }
        }
      };
      _nestingData['("'] = _nestingData[' "'];
      _nestingData["('"] = _nestingData[" '"];
      var localeOpenQuote = state.getTerm("open-quote");
      var localeCloseQuote = state.getTerm("close-quote");
      var localeOpenInnerQuote = state.getTerm("open-inner-quote");
      var localeCloseInnerQuote = state.getTerm("close-inner-quote");
      if (localeOpenQuote && localeCloseQuote && [' "', " '", '"', "'"].indexOf(localeOpenQuote) === -1) {
        _nestingData[localeOpenQuote] = JSON.parse(JSON.stringify(_nestingData[' "']));
        _nestingData[localeOpenQuote].opener = localeOpenQuote;
        _nestingData[localeOpenQuote].closer = localeCloseQuote;
      }
      if (localeOpenInnerQuote && localeCloseInnerQuote && [' "', " '", '"', "'"].indexOf(localeOpenInnerQuote) === -1) {
        _nestingData[localeOpenInnerQuote] = JSON.parse(JSON.stringify(_nestingData[" '"]));
        _nestingData[localeOpenInnerQuote].opener = localeOpenInnerQuote;
        _nestingData[localeOpenInnerQuote].closer = localeCloseInnerQuote;
      }
      function _setOuterQuoteForm(quot) {
        var flip3 = {
          " '": ' "',
          ' "': " '",
          '("': "('",
          "('": '("'
        };
        _nestingData[quot].outer = "true";
        _nestingData[flip3[quot]].outer = "inner";
      }
      function _getNestingOpenerParams(opener) {
        var openers = [];
        var keys = Object.keys(_nestingData);
        for (var i = 0, l = keys.length; i < l; i++) {
          var key = keys[i];
          if (_nestingData[opener].type !== "quote" || !_nestingData[opener]) {
            openers.push(key);
          }
        }
        var ret = _nestingData[opener];
        ret.opener = new RegExp("^(?:" + openers.map(function(str) {
          return str.replace("(", "\\(");
        }).join("|") + ")");
        return ret;
      }
      var _nestingParams = function() {
        var ret = {};
        var keys = Object.keys(_nestingData);
        for (var i = 0, l = keys.length; i < l; i++) {
          var key = keys[i];
          ret[key] = _getNestingOpenerParams(key);
        }
        return ret;
      }();
      var _tagRex = function() {
        var openers = [];
        var closers = [];
        var vals = {};
        for (var opener in _nestingParams) {
          openers.push(opener);
          vals[_nestingParams[opener].closer] = true;
        }
        var keys = Object.keys(vals);
        for (var i = 0, l = keys.length; i < l; i++) {
          var closer = keys[i];
          closers.push(closer);
        }
        var all = openers.concat(closers).map(function(str) {
          return str.replace("(", "\\(");
        }).join("|");
        return {
          matchAll: new RegExp("((?:" + all + "))", "g"),
          splitAll: new RegExp("(?:" + all + ")", "g"),
          open: new RegExp("(^(?:" + openers.map(function(str) {
            return str.replace("(", "\\(");
          }).join("|") + ")$)"),
          close: new RegExp("(^(?:" + closers.join("|") + ")$)")
        };
      }();
      function _tryOpen(tag, pos) {
        var params = _nestingState[_nestingState.length - 1];
        if (!params || tag.match(params.opener)) {
          _nestingState.push({
            type: _nestingParams[tag].type,
            opener: _nestingParams[tag].opener,
            closer: _nestingParams[tag].closer,
            pos
          });
          return false;
        } else {
          _nestingState.pop();
          _nestingState.push({
            type: _nestingParams[tag].type,
            opener: _nestingParams[tag].opener,
            closer: _nestingParams[tag].closer,
            pos
          });
          return {
            fixtag: params.pos
          };
        }
      }
      function _tryClose(tag, pos) {
        var params = _nestingState[_nestingState.length - 1];
        if (params && tag === params.closer) {
          _nestingState.pop();
          if (params.type === "nocase") {
            return {
              nocase: {
                open: params.pos,
                close: pos
              }
            };
          } else {
            return false;
          }
        } else {
          if (params) {
            return {
              fixtag: params.pos
            };
          } else {
            return {
              fixtag: pos
            };
          }
        }
      }
      function _pushNestingState(tag, pos) {
        if (tag.match(_tagRex.open)) {
          return _tryOpen(tag, pos);
        } else {
          return _tryClose(tag, pos);
        }
      }
      function _doppelString(str) {
        var forcedSpaces = [];
        str = str.replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?\"[^>]*(>)/g, '$1 $2$3;"$4');
        str = str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3");
        var match = str.match(_tagRex.matchAll);
        if (!match) {
          return {
            tags: [],
            strings: [str],
            forcedSpaces: []
          };
        }
        var split = str.split(_tagRex.splitAll);
        for (var i = 0, ilen = match.length - 1; i < ilen; i++) {
          if (_nestingData[match[i]]) {
            if (split[i + 1] === "" && ['"', "'"].indexOf(match[i + 1]) > -1) {
              match[i + 1] = " " + match[i + 1];
              forcedSpaces.push(true);
            } else {
              forcedSpaces.push(false);
            }
          }
        }
        return {
          tags: match,
          strings: split,
          forcedSpaces
        };
      }
      var TagReg = function(blob) {
        var _stack = [];
        this.set = function(tag) {
          var attr = _nestingData[tag].attr;
          var decor = null;
          for (var i = _stack.length - 1; i > -1; i--) {
            var _decor = _stack[i];
            if (_decor[0] === attr) {
              decor = _decor;
              break;
            }
          }
          if (!decor) {
            var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(blob.alldecor);
            outer:
              for (var i = allTheDecor.length - 1; i > -1; i--) {
                var decorset = allTheDecor[i];
                if (!decorset) {
                  continue;
                }
                for (var j = decorset.length - 1; j > -1; j--) {
                  var _decor = decorset[j];
                  if (_decor[0] === attr) {
                    decor = _decor;
                    break outer;
                  }
                }
              }
          }
          if (!decor) {
            decor = [attr, _nestingData[tag].outer];
          } else {
            decor = [attr, _nestingData[tag].flipflop[decor[1]]];
          }
          _stack.push(decor);
        };
        this.pair = function() {
          return _stack[_stack.length - 1];
        };
        this.pop = function() {
          _stack.pop();
        };
      };
      function _apostropheForce(tag, str) {
        if (tag === "'") {
          if (str && str.match(/^[^\,\.\?\:\;\ ]/)) {
            return "\u2019";
          }
        } else if (tag === " '" && str && str.match(/^[\ ]/)) {
          return " \u2019";
        }
        return false;
      }
      function _undoppelToQueue(blob, doppel, leadingSpace) {
        var firstString = true;
        var tagReg = new TagReg(blob);
        blob.blobs = [];
        function Stack2(blob2) {
          this.stack = [blob2];
          this.latest = blob2;
          this.addStyling = function(str2, decor) {
            if (firstString) {
              if (str2.slice(0, 1) === " ") {
                str2 = str2.slice(1);
              }
              if (str2.slice(0, 1) === " ") {
                str2 = str2.slice(1);
              }
              firstString = false;
            }
            this.latest = this.stack[this.stack.length - 1];
            if (decor) {
              if (typeof this.latest.blobs === "string") {
                var child = new CSL2.Blob();
                child.blobs = this.latest.blobs;
                child.alldecor = this.latest.alldecor.slice();
                this.latest.blobs = [child];
              }
              var tok = new CSL2.Token();
              var newblob = new CSL2.Blob(null, tok);
              newblob.alldecor = this.latest.alldecor.slice();
              if (decor[0] === "@class" && decor[1] === "nodecor") {
                var newdecorset = [];
                var seen = {};
                var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(newblob.alldecor);
                for (var i2 = allTheDecor.length - 1; i2 > -1; i2--) {
                  var _decorset = allTheDecor[i2];
                  if (!_decorset) {
                    continue;
                  }
                  for (var j = _decorset.length - 1; j > -1; j--) {
                    var _olddecor = _decorset[j];
                    if (["@font-weight", "@font-style", "@font-variant"].indexOf(_olddecor[0]) > -1 && !seen[_olddecor[0]]) {
                      if (decor[1] !== "normal") {
                        newblob.decorations.push([_olddecor[0], "normal"]);
                        newdecorset.push([_olddecor[0], "normal"]);
                      }
                      seen[_olddecor[0]] = true;
                    }
                  }
                }
                newblob.alldecor.push(newdecorset);
              } else {
                newblob.decorations.push(decor);
                newblob.alldecor.push([decor]);
              }
              this.latest.blobs.push(newblob);
              this.stack.push(newblob);
              this.latest = newblob;
              if (str2) {
                var tok = new CSL2.Token();
                var newblob = new CSL2.Blob(null, tok);
                newblob.blobs = str2;
                newblob.alldecor = this.latest.alldecor.slice();
                this.latest.blobs.push(newblob);
              }
            } else {
              if (str2) {
                var child = new CSL2.Blob();
                child.blobs = str2;
                child.alldecor = this.latest.alldecor.slice();
                this.latest.blobs.push(child);
              }
            }
          };
          this.popStyling = function() {
            this.stack.pop();
          };
        }
        var stack = new Stack2(blob);
        if (doppel.strings.length) {
          var str = doppel.strings[0];
          if (leadingSpace) {
            str = " " + str;
          }
          stack.addStyling(str);
        }
        for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
          var tag = doppel.tags[i];
          var str = doppel.strings[i + 1];
          if (tag.match(_tagRex.open)) {
            tagReg.set(tag);
            stack.addStyling(str, tagReg.pair());
          } else {
            tagReg.pop();
            stack.popStyling();
            stack.addStyling(str);
          }
        }
      }
      this.processTags = function(blob) {
        var str = blob.blobs;
        var leadingSpace = false;
        if (str.slice(0, 1) === " " && !str.match(/^\s+[\'\"]/)) {
          leadingSpace = true;
        }
        var rex = new RegExp("(" + CSL2.ROMANESQUE_REGEXP.source + ")\u2019(" + CSL2.ROMANESQUE_REGEXP.source + ")", "g");
        var str = " " + str.replace(rex, "$1'$2");
        var doppel = _doppelString(str);
        if (doppel.tags.length === 0) {
          return;
        }
        var quoteFormSeen = false;
        for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
          var tag = doppel.tags[i];
          var str = doppel.strings[i + 1];
          var apostrophe = _apostropheForce(tag, str);
          if (apostrophe) {
            doppel.strings[i + 1] = apostrophe + doppel.strings[i + 1];
            doppel.tags[i] = "";
          } else {
            var tagInfo;
            while (true) {
              tagInfo = _pushNestingState(tag, i);
              if (tagInfo) {
                if (Object.keys(tagInfo).indexOf("fixtag") > -1) {
                  if (tag.match(_tagRex.close) && tag === "'") {
                    doppel.strings[i + 1] = "\u2019" + doppel.strings[i + 1];
                    doppel.tags[i] = "";
                  } else {
                    var failedTag = doppel.tags[tagInfo.fixtag];
                    if (doppel.forcedSpaces[tagInfo.fixtag - 1]) {
                      failedTag = failedTag.slice(1);
                    }
                    doppel.strings[tagInfo.fixtag + 1] = failedTag + doppel.strings[tagInfo.fixtag + 1];
                    doppel.tags[tagInfo.fixtag] = "";
                  }
                  if (_nestingState.length > 0) {
                    if (tag !== "'") {
                      _nestingState.pop();
                    } else {
                      break;
                    }
                  } else {
                    break;
                  }
                } else if (tagInfo.nocase) {
                  doppel.tags[tagInfo.nocase.open] = "";
                  doppel.tags[tagInfo.nocase.close] = "";
                  break;
                } else {
                  break;
                }
              } else {
                break;
              }
            }
            if (tagInfo && (tagInfo.fixtag || tagInfo.fixtag === 0)) {
              doppel.strings[i + 1] = doppel.tags[i] + doppel.strings[i + 1];
              doppel.tags[i] = "";
            }
          }
        }
        for (var i = _nestingState.length - 1; i > -1; i--) {
          var tagPos = _nestingState[i].pos;
          var tag = doppel.tags[tagPos];
          if (tag === " '" || tag === "'") {
            doppel.strings[tagPos + 1] = " \u2019" + doppel.strings[tagPos + 1];
          } else {
            doppel.strings[tagPos + 1] = doppel.tags[tagPos] + doppel.strings[tagPos + 1];
          }
          doppel.tags[tagPos] = "";
          _nestingState.pop();
        }
        for (var i = doppel.tags.length - 1; i > -1; i--) {
          if (!doppel.tags[i]) {
            doppel.tags = doppel.tags.slice(0, i).concat(doppel.tags.slice(i + 1));
            doppel.strings[i] = doppel.strings[i] + doppel.strings[i + 1];
            doppel.strings = doppel.strings.slice(0, i + 1).concat(doppel.strings.slice(i + 2));
          }
        }
        for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
          var tag = doppel.tags[i];
          var forcedSpace = doppel.forcedSpaces[i - 1];
          if ([' "', " '", '("', "('"].indexOf(tag) > -1) {
            if (!quoteFormSeen) {
              _setOuterQuoteForm(tag);
              quoteFormSeen = true;
            }
            if (!forcedSpace) {
              doppel.strings[i] += tag.slice(0, 1);
            }
          }
        }
        _undoppelToQueue(blob, doppel, leadingSpace);
      };
    };
    CSL2.Output.Formatters = function() {
      var rexStr = `(?:\u2018|\u2019|\u201C|\u201D| "| '|"|'|[-\u2013\u2014/.,;?!:]|\\[|\\]|\\(|\\)|<span style="font-variant: small-caps;">|<span class="no(?:case|decor)">|</span>|</?(?:i|sc|b|sub|sup)>)`;
      var tagDoppel = new CSL2.Doppeler(rexStr, function(str) {
        return str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3").replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?(\")[^>]*(>)/g, "$1 $2 $3;$4$5");
      });
      var rexNameStr = '(?:[-\\s]*<\\/*(?:spans+class="no(?:case|decor)"|i|sc|b|sub|sup)>[-\\s]*|[-\\s]+)';
      var nameDoppel = new CSL2.Doppeler(rexNameStr);
      var wordDoppel = new CSL2.Doppeler("(?:[\xA0 \xA0\u2000-\u200B\u205F\u3000]+)");
      var _tagParams = {
        '<span style="font-variant: small-caps;">': "</span>",
        '<span class="nocase">': "</span>",
        '<span class="nodecor">': "</span>",
        "<sc>": "</sc>",
        "<sub>": "</sub>",
        "<sup>": "</sup>"
      };
      function _capitalise(word) {
        var m2 = word.match(/(^\s*)((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))(.*)/);
        if (m2 && !(m2[2].match(/^[\u0370-\u03FF]$/) && !m2[3])) {
          return m2[1] + CSL2.toLocaleUpperCase.call(this, m2[2]) + m2[3];
        }
        return word;
      }
      function _textcaseEngine(config, string) {
        if (!string) {
          return "";
        }
        config.doppel = tagDoppel.split(string);
        var quoteParams = {
          ' "': {
            opener: " '",
            closer: '"'
          },
          " '": {
            opener: ' "',
            closer: "'"
          },
          "\u2018": {
            opener: "\u2018",
            closer: "\u2019"
          },
          "\u201C": {
            opener: "\u201C",
            closer: "\u201D"
          }
        };
        function tryOpen(tag2, pos) {
          if (config.quoteState.length === 0 || tag2 === config.quoteState[config.quoteState.length - 1].opener) {
            config.quoteState.push({
              opener: quoteParams[tag2].opener,
              closer: quoteParams[tag2].closer,
              pos
            });
            return false;
          } else {
            var prevPos = config.quoteState[config.quoteState.length - 1].pos;
            config.quoteState.pop();
            config.quoteState.push({
              opener: quoteParams[tag2].opener,
              closer: quoteParams[tag2].closer,
              positions: pos
            });
            return prevPos;
          }
        }
        function tryClose(tag2, pos) {
          if (config.quoteState.length > 0 && tag2 === config.quoteState[config.quoteState.length - 1].closer) {
            config.quoteState.pop();
          } else {
            return pos;
          }
        }
        function pushQuoteState(tag2, pos) {
          var isOpener = ["\u201C", "\u2018", ' "', " '"].indexOf(tag2) > -1 ? true : false;
          if (isOpener) {
            return tryOpen(tag2, pos);
          } else {
            return tryClose(tag2, pos);
          }
        }
        function quoteFix(tag2, positions) {
          var m2 = tag2.match(/(^(?:\u2018|\u2019|\u201C|\u201D|\"|\')|(?: \"| \')$)/);
          if (m2) {
            return pushQuoteState(m2[1], positions);
          }
        }
        if (config.doppel.strings.length && config.doppel.strings[0].trim()) {
          config.doppel.strings[0] = config.capitaliseWords(config.doppel.strings[0], 0, config.doppel.tags[0]);
        }
        for (var i = 0, ilen = config.doppel.tags.length; i < ilen; i++) {
          var tag = config.doppel.tags[i];
          var str = config.doppel.strings[i + 1];
          if (config.tagState !== null) {
            if (_tagParams[tag]) {
              config.tagState.push(_tagParams[tag]);
            } else if (config.tagState.length && tag === config.tagState[config.tagState.length - 1]) {
              config.tagState.pop();
            }
          }
          if (config.afterPunct !== null) {
            if (tag.match(/[\!\?\:]$/)) {
              config.afterPunct = true;
            }
          }
          if (config.tagState.length === 0) {
            config.doppel.strings[i + 1] = config.capitaliseWords(str, i + 1, config.doppel, config.doppel.tags[i + 1]);
          } else if (config.doppel.strings[i + 1].trim()) {
            config.lastWordPos = null;
          }
          if (config.quoteState !== null) {
            var quotePos = quoteFix(tag, i);
            if (quotePos || quotePos === 0) {
              var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
              config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
              config.lastWordPos = null;
            }
          }
          if (config.isFirst) {
            if (str.trim()) {
              config.isFirst = false;
            }
          }
          if (config.afterPunct) {
            if (str.trim()) {
              config.afterPunct = false;
            }
          }
        }
        if (config.quoteState) {
          for (var i = 0, ilen = config.quoteState.length; i < ilen; i++) {
            var quotePos = config.quoteState[i].pos;
            if (typeof quotePos !== "undefined") {
              var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
              config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
            }
          }
        }
        if (config.lastWordPos) {
          var lastWords = wordDoppel.split(config.doppel.strings[config.lastWordPos.strings]);
          var lastWord = lastWords.strings[config.lastWordPos.words];
          if (lastWord.length > 1 && CSL2.toLocaleLowerCase.call(this, lastWord).match(config.skipWordsRex)) {
            lastWord = _capitalise.call(this, lastWord);
            lastWords.strings[config.lastWordPos.words] = lastWord;
          }
          config.doppel.strings[config.lastWordPos.strings] = wordDoppel.join(lastWords);
        }
        return tagDoppel.join(config.doppel);
      }
      function passthrough(state, str) {
        return str;
      }
      function lowercase(state, string) {
        var config = {
          quoteState: null,
          capitaliseWords: function(str) {
            var words = str.split(" ");
            for (var i = 0, ilen = words.length; i < ilen; i++) {
              var word = words[i];
              if (word) {
                words[i] = CSL2.toLocaleLowerCase.call(state, word);
              }
            }
            return words.join(" ");
          },
          skipWordsRex: null,
          tagState: [],
          afterPunct: null,
          isFirst: null
        };
        return _textcaseEngine.call(state, config, string);
      }
      function uppercase(state, string) {
        var config = {
          quoteState: null,
          capitaliseWords: function(str) {
            var words = str.split(" ");
            for (var i = 0, ilen = words.length; i < ilen; i++) {
              var word = words[i];
              if (word) {
                words[i] = CSL2.toLocaleUpperCase.call(state, word);
              }
            }
            return words.join(" ");
          },
          skipWordsRex: null,
          tagState: [],
          afterPunct: null,
          isFirst: null
        };
        return _textcaseEngine.call(state, config, string);
      }
      function sentence(state, string) {
        var config = {
          quoteState: [],
          capitaliseWords: function(str) {
            var words = str.split(" ");
            for (var i = 0, ilen = words.length; i < ilen; i++) {
              var word = words[i];
              if (word) {
                if (config.isFirst) {
                  words[i] = _capitalise.call(state, word);
                  config.isFirst = false;
                } else {
                  words[i] = CSL2.toLocaleLowerCase.call(state, word);
                }
              }
            }
            return words.join(" ");
          },
          skipWordsRex: null,
          tagState: [],
          afterPunct: null,
          isFirst: true
        };
        return _textcaseEngine.call(state, config, string);
      }
      function title(state, string) {
        var config = {
          quoteState: [],
          capitaliseWords: function(str, i, followingTag) {
            if (str.trim()) {
              var wordle = wordDoppel.split(str);
              var words = wordle.strings;
              for (var j = 0, jlen = words.length; j < jlen; j++) {
                var word = words[j];
                if (!word) {
                  continue;
                }
                let lcase = CSL2.toLocaleLowerCase.call(state, word);
                let capitalize = false;
                if (word.length > 1 && !lcase.match(config.skipWordsRex)) {
                  capitalize = true;
                } else if (j === words.length - 1 && followingTag === "-") {
                  capitalize = true;
                } else if (config.isFirst) {
                  capitalize = true;
                } else if (config.afterPunct) {
                  capitalize = true;
                }
                if (capitalize && word === lcase) {
                  words[j] = _capitalise.call(state, word);
                }
                config.afterPunct = false;
                config.isFirst = false;
                config.lastWordPos = {
                  strings: i,
                  words: j
                };
              }
              str = wordDoppel.join(wordle);
            }
            return str;
          },
          skipWordsRex: state.locale[state.opt.lang].opts["skip-words-regexp"],
          tagState: [],
          afterPunct: false,
          isFirst: true
        };
        return _textcaseEngine.call(state, config, string);
      }
      function capitalizeFirst(state, string) {
        var config = {
          quoteState: [],
          capitaliseWords: function(str) {
            var wordle = wordDoppel.split(str);
            var words = wordle.strings;
            for (var i = 0, ilen = words.length; i < ilen; i++) {
              var word = words[i];
              if (word) {
                if (config.isFirst) {
                  if (word === CSL2.toLocaleLowerCase.call(state, word)) {
                    words[i] = _capitalise.call(state, word);
                  }
                  config.isFirst = false;
                  break;
                }
              }
            }
            return wordDoppel.join(wordle);
          },
          skipWordsRex: null,
          tagState: [],
          afterPunct: null,
          isFirst: true
        };
        return _textcaseEngine.call(state, config, string);
      }
      function capitalizeAll(state, string) {
        var config = {
          quoteState: [],
          capitaliseWords: function(str) {
            var wordle = wordDoppel.split(str);
            var words = wordle.strings;
            for (var i = 0, ilen = words.length; i < ilen; i++) {
              var word = words[i];
              if (word) {
                if (word === CSL2.toLocaleLowerCase.call(state, word)) {
                  words[i] = _capitalise.call(state, word);
                }
              }
            }
            return wordDoppel.join(wordle);
          },
          skipWordsRex: null,
          tagState: [],
          afterPunct: null,
          isFirst: null
        };
        return _textcaseEngine.call(state, config, string);
      }
      return {
        nameDoppel,
        passthrough,
        lowercase,
        uppercase,
        sentence,
        title,
        "capitalize-first": capitalizeFirst,
        "capitalize-all": capitalizeAll
      };
    }();
    CSL2.Output.Formats = function() {
    };
    CSL2.Output.Formats.prototype.html = {
      "text_escape": function(text) {
        if (!text) {
          text = "";
        }
        return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\s\s/g, "\xA0 ").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
          return "<sup>" + CSL2.SUPERSCRIPTS[aChar] + "</sup>";
        });
      },
      "bibstart": '<div class="csl-bib-body">\n',
      "bibend": "</div>",
      "@font-style/italic": "<i>%%STRING%%</i>",
      "@font-style/oblique": "<em>%%STRING%%</em>",
      "@font-style/normal": '<span style="font-style:normal;">%%STRING%%</span>',
      "@font-variant/small-caps": '<span style="font-variant:small-caps;">%%STRING%%</span>',
      "@passthrough/true": CSL2.Output.Formatters.passthrough,
      "@font-variant/normal": '<span style="font-variant:normal;">%%STRING%%</span>',
      "@font-weight/bold": "<b>%%STRING%%</b>",
      "@font-weight/normal": '<span style="font-weight:normal;">%%STRING%%</span>',
      "@font-weight/light": false,
      "@text-decoration/none": '<span style="text-decoration:none;">%%STRING%%</span>',
      "@text-decoration/underline": '<span style="text-decoration:underline;">%%STRING%%</span>',
      "@vertical-align/sup": "<sup>%%STRING%%</sup>",
      "@vertical-align/sub": "<sub>%%STRING%%</sub>",
      "@vertical-align/baseline": '<span style="baseline">%%STRING%%</span>',
      "@strip-periods/true": CSL2.Output.Formatters.passthrough,
      "@strip-periods/false": CSL2.Output.Formatters.passthrough,
      "@quotes/true": function(state, str) {
        if (typeof str === "undefined") {
          return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function(state, str) {
        if (typeof str === "undefined") {
          return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      "@cite/entry": function(state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function(state, str) {
        var insert = "";
        if (state.sys.embedBibliographyEntry) {
          insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
        }
        return '  <div class="csl-entry">' + str + "</div>\n" + insert;
      },
      "@display/block": function(state, str) {
        return '\n\n    <div class="csl-block">' + str + "</div>\n";
      },
      "@display/left-margin": function(state, str) {
        return '\n    <div class="csl-left-margin">' + str + "</div>";
      },
      "@display/right-inline": function(state, str) {
        return '<div class="csl-right-inline">' + str + "</div>\n  ";
      },
      "@display/indent": function(state, str) {
        return '<div class="csl-indent">' + str + "</div>\n  ";
      },
      "@showid/true": function(state, str, cslid) {
        if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
          if (cslid) {
            return '<span class="' + state.opt.nodenames[cslid] + '" cslid="' + cslid + '">' + str + "</span>";
          } else if (this.params && typeof str === "string") {
            var prePunct = "";
            if (str) {
              var m2 = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m2[1];
              str = m2[2];
            }
            var postPunct = "";
            if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        } else {
          return str;
        }
      },
      "@URL/true": function(state, str) {
        return '<a href="' + str + '">' + str + "</a>";
      },
      "@DOI/true": function(state, str) {
        var doiurl = str;
        if (!str.match(/^https?:\/\//)) {
          doiurl = "https://doi.org/" + str;
        }
        return '<a href="' + doiurl + '">' + str + "</a>";
      }
    };
    CSL2.Output.Formats.prototype.text = {
      "text_escape": function(text) {
        if (!text) {
          text = "";
        }
        return text;
      },
      "bibstart": "",
      "bibend": "",
      "@font-style/italic": false,
      "@font-style/oblique": false,
      "@font-style/normal": false,
      "@font-variant/small-caps": false,
      "@passthrough/true": CSL2.Output.Formatters.passthrough,
      "@font-variant/normal": false,
      "@font-weight/bold": false,
      "@font-weight/normal": false,
      "@font-weight/light": false,
      "@text-decoration/none": false,
      "@text-decoration/underline": false,
      "@vertical-align/baseline": false,
      "@vertical-align/sup": false,
      "@vertical-align/sub": false,
      "@strip-periods/true": CSL2.Output.Formatters.passthrough,
      "@strip-periods/false": CSL2.Output.Formatters.passthrough,
      "@quotes/true": function(state, str) {
        if (typeof str === "undefined") {
          return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function(state, str) {
        if (typeof str === "undefined") {
          return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      "@cite/entry": function(state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function(state, str) {
        return str + "\n";
      },
      "@display/block": function(state, str) {
        return "\n" + str;
      },
      "@display/left-margin": function(state, str) {
        return str + " ";
      },
      "@display/right-inline": function(state, str) {
        return str;
      },
      "@display/indent": function(state, str) {
        return "\n    " + str;
      },
      "@showid/true": function(state, str) {
        return str;
      },
      "@URL/true": function(state, str) {
        return str;
      },
      "@DOI/true": function(state, str) {
        return str;
      }
    };
    CSL2.Output.Formats.prototype.rtf = {
      "text_escape": function(text) {
        if (!text) {
          text = "";
        }
        return text.replace(/([\\{}])/g, "\\$1").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
          return "\\super " + CSL2.SUPERSCRIPTS[aChar] + "\\nosupersub{}";
        }).replace(/[\u007F-\uFFFF]/g, function(aChar) {
          return "\\uc0\\u" + aChar.charCodeAt(0).toString() + "{}";
        }).split("	").join("\\tab{}");
      },
      "@passthrough/true": CSL2.Output.Formatters.passthrough,
      "@font-style/italic": "{\\i{}%%STRING%%}",
      "@font-style/normal": "{\\i0{}%%STRING%%}",
      "@font-style/oblique": "{\\i{}%%STRING%%}",
      "@font-variant/small-caps": "{\\scaps %%STRING%%}",
      "@font-variant/normal": "{\\scaps0{}%%STRING%%}",
      "@font-weight/bold": "{\\b{}%%STRING%%}",
      "@font-weight/normal": "{\\b0{}%%STRING%%}",
      "@font-weight/light": false,
      "@text-decoration/none": false,
      "@text-decoration/underline": "{\\ul{}%%STRING%%}",
      "@vertical-align/baseline": false,
      "@vertical-align/sup": "\\super %%STRING%%\\nosupersub{}",
      "@vertical-align/sub": "\\sub %%STRING%%\\nosupersub{}",
      "@strip-periods/true": CSL2.Output.Formatters.passthrough,
      "@strip-periods/false": CSL2.Output.Formatters.passthrough,
      "@quotes/true": function(state, str) {
        if (typeof str === "undefined") {
          return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-quote"));
        }
        return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-quote")) + str + CSL2.Output.Formats.rtf.text_escape(state.getTerm("close-quote"));
      },
      "@quotes/inner": function(state, str) {
        if (typeof str === "undefined") {
          return CSL2.Output.Formats.rtf.text_escape("\u2019");
        }
        return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-inner-quote")) + str + CSL2.Output.Formats.rtf.text_escape(state.getTerm("close-inner-quote"));
      },
      "@quotes/false": false,
      "bibstart": "{\\rtf ",
      "bibend": "}",
      "@display/block": "\\line{}%%STRING%%\\line\r\n",
      "@cite/entry": function(state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function(state, str) {
        return str;
      },
      "@display/left-margin": function(state, str) {
        return str + "\\tab ";
      },
      "@display/right-inline": function(state, str) {
        return str + "\r\n";
      },
      "@display/indent": function(state, str) {
        return "\n\\tab " + str + "\\line\r\n";
      },
      "@showid/true": function(state, str) {
        if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
          var prePunct = "";
          if (str) {
            var m2 = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
            prePunct = m2[1];
            str = m2[2];
          }
          var postPunct = "";
          if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
            postPunct = str.slice(-1);
            str = str.slice(0, -1);
          }
          return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
        } else {
          return str;
        }
      },
      "@URL/true": function(state, str) {
        return str;
      },
      "@DOI/true": function(state, str) {
        return str;
      }
    };
    CSL2.Output.Formats.prototype.asciidoc = {
      "text_escape": function(text) {
        if (!text) {
          text = "";
        }
        return text.replace("*", "pass:[*]", "g").replace("_", "pass:[_]", "g").replace("#", "pass:[#]", "g").replace("^", "pass:[^]", "g").replace("~", "pass:[~]", "g").replace("[[", "pass:[[[]", "g").replace("  ", "&#160; ", "g").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
          return "^" + CSL2.SUPERSCRIPTS[aChar] + "^";
        });
      },
      "bibstart": "",
      "bibend": "",
      "@passthrough/true": CSL2.Output.Formatters.passthrough,
      "@font-style/italic": "__%%STRING%%__",
      "@font-style/oblique": "__%%STRING%%__",
      "@font-style/normal": false,
      "@font-variant/small-caps": "[small-caps]#%%STRING%%#",
      "@font-variant/normal": false,
      "@font-weight/bold": "**%%STRING%%**",
      "@font-weight/normal": false,
      "@font-weight/light": false,
      "@text-decoration/none": false,
      "@text-decoration/underline": "[underline]##%%STRING%%##",
      "@vertical-align/sup": "^^%%STRING%%^^",
      "@vertical-align/sub": "~~%%STRING%%~~",
      "@vertical-align/baseline": false,
      "@strip-periods/true": CSL2.Output.Formatters.passthrough,
      "@strip-periods/false": CSL2.Output.Formatters.passthrough,
      "@quotes/true": function(state, str) {
        if (typeof str === "undefined") {
          return "``";
        }
        return "``" + str + "''";
      },
      "@quotes/inner": function(state, str) {
        if (typeof str === "undefined") {
          return "`";
        }
        return "`" + str + "'";
      },
      "@quotes/false": false,
      "@cite/entry": function(state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function(state, str) {
        return str + "\n";
      },
      "@display/block": function(state, str) {
        return str;
      },
      "@display/left-margin": function(state, str) {
        return str;
      },
      "@display/right-inline": function(state, str) {
        return " " + str;
      },
      "@display/indent": function(state, str) {
        return " " + str;
      },
      "@showid/true": function(state, str) {
        if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
          var prePunct = "";
          if (str) {
            var m2 = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
            prePunct = m2[1];
            str = m2[2];
          }
          var postPunct = "";
          if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
            postPunct = str.slice(-1);
            str = str.slice(0, -1);
          }
          return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
        } else {
          return str;
        }
      },
      "@URL/true": function(state, str) {
        return str;
      },
      "@DOI/true": function(state, str) {
        var doiurl = str;
        if (!str.match(/^https?:\/\//)) {
          doiurl = "https://doi.org/" + str;
        }
        return doiurl + "[" + str + "]";
      }
    };
    CSL2.Output.Formats.prototype.fo = {
      "text_escape": function(text) {
        if (!text) {
          text = "";
        }
        return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace("  ", "&#160; ", "g").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
          return '<fo:inline vertical-align="super">' + CSL2.SUPERSCRIPTS[aChar] + "</fo:inline>";
        });
      },
      "bibstart": "",
      "bibend": "",
      "@passthrough/true": CSL2.Output.Formatters.passthrough,
      "@font-style/italic": '<fo:inline font-style="italic">%%STRING%%</fo:inline>',
      "@font-style/oblique": '<fo:inline font-style="oblique">%%STRING%%</fo:inline>',
      "@font-style/normal": '<fo:inline font-style="normal">%%STRING%%</fo:inline>',
      "@font-variant/small-caps": '<fo:inline font-variant="small-caps">%%STRING%%</fo:inline>',
      "@font-variant/normal": '<fo:inline font-variant="normal">%%STRING%%</fo:inline>',
      "@font-weight/bold": '<fo:inline font-weight="bold">%%STRING%%</fo:inline>',
      "@font-weight/normal": '<fo:inline font-weight="normal">%%STRING%%</fo:inline>',
      "@font-weight/light": '<fo:inline font-weight="lighter">%%STRING%%</fo:inline>',
      "@text-decoration/none": '<fo:inline text-decoration="none">%%STRING%%</fo:inline>',
      "@text-decoration/underline": '<fo:inline text-decoration="underline">%%STRING%%</fo:inline>',
      "@vertical-align/sup": '<fo:inline vertical-align="super">%%STRING%%</fo:inline>',
      "@vertical-align/sub": '<fo:inline vertical-align="sub">%%STRING%%</fo:inline>',
      "@vertical-align/baseline": '<fo:inline vertical-align="baseline">%%STRING%%</fo:inline>',
      "@strip-periods/true": CSL2.Output.Formatters.passthrough,
      "@strip-periods/false": CSL2.Output.Formatters.passthrough,
      "@quotes/true": function(state, str) {
        if (typeof str === "undefined") {
          return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function(state, str) {
        if (typeof str === "undefined") {
          return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      "@cite/entry": function(state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function(state, str) {
        var indent = "";
        if (state.bibliography && state.bibliography.opt && state.bibliography.opt.hangingindent) {
          var hi = state.bibliography.opt.hangingindent;
          indent = ' start-indent="' + hi + 'em" text-indent="-' + hi + 'em"';
        }
        var insert = "";
        if (state.sys.embedBibliographyEntry) {
          insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
        }
        return '<fo:block id="' + this.system_id + '"' + indent + ">" + str + "</fo:block>\n" + insert;
      },
      "@display/block": function(state, str) {
        return "\n  <fo:block>" + str + "</fo:block>\n";
      },
      "@display/left-margin": function(state, str) {
        return '\n  <fo:table table-layout="fixed" width="100%">\n    <fo:table-column column-number="1" column-width="$$$__COLUMN_WIDTH_1__$$$"/>\n    <fo:table-column column-number="2" column-width="proportional-column-width(1)"/>\n    <fo:table-body>\n      <fo:table-row>\n        <fo:table-cell>\n          <fo:block>' + str + "</fo:block>\n        </fo:table-cell>\n        ";
      },
      "@display/right-inline": function(state, str) {
        return "<fo:table-cell>\n          <fo:block>" + str + "</fo:block>\n        </fo:table-cell>\n      </fo:table-row>\n    </fo:table-body>\n  </fo:table>\n";
      },
      "@display/indent": function(state, str) {
        return '<fo:block margin-left="2em">' + str + "</fo:block>\n";
      },
      "@showid/true": function(state, str) {
        if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
          var prePunct = "";
          if (str) {
            var m2 = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
            prePunct = m2[1];
            str = m2[2];
          }
          var postPunct = "";
          if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
            postPunct = str.slice(-1);
            str = str.slice(0, -1);
          }
          return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
        } else {
          return str;
        }
      },
      "@URL/true": function(state, str) {
        return `<fo:basic-link external-destination="url('` + str + `')">` + str + "</fo:basic-link>";
      },
      "@DOI/true": function(state, str) {
        var doiurl = str;
        if (!str.match(/^https?:\/\//)) {
          doiurl = "https://doi.org/" + str;
        }
        return `<fo:basic-link external-destination="url('` + doiurl + `')">` + str + "</fo:basic-link>";
      }
    };
    CSL2.Output.Formats.prototype.latex = {
      "text_escape": function(text) {
        if (!text) {
          text = "";
        }
        return text;
      },
      "bibstart": "\\begin{thebibliography}{4}",
      "bibend": "\\end{thebibliography}",
      "@font-style/italic": "{\\em %%STRING%%}",
      "@font-style/oblique": false,
      "@font-style/normal": false,
      "@font-variant/small-caps": false,
      "@passthrough/true": CSL2.Output.Formatters.passthrough,
      "@font-variant/normal": false,
      "@font-weight/bold": "{\\bf %%STRING%%}",
      "@font-weight/normal": false,
      "@font-weight/light": false,
      "@text-decoration/none": false,
      "@text-decoration/underline": false,
      "@vertical-align/baseline": false,
      "@vertical-align/sup": false,
      "@vertical-align/sub": false,
      "@strip-periods/true": CSL2.Output.Formatters.passthrough,
      "@strip-periods/false": CSL2.Output.Formatters.passthrough,
      "@quotes/true": function(state, str) {
        if (typeof str === "undefined") {
          return state.getTerm("open-quote");
        }
        return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function(state, str) {
        if (typeof str === "undefined") {
          return "\u2019";
        }
        return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      "@cite/entry": function(state, str) {
        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function(state, str) {
        return "\\bibitem{" + state.sys.embedBibliographyEntry(this.item_id) + "}\n";
      },
      "@display/block": function(state, str) {
        return "\n" + str;
      },
      "@display/left-margin": function(state, str) {
        return str;
      },
      "@display/right-inline": function(state, str) {
        return str;
      },
      "@display/indent": function(state, str) {
        return "\n    " + str;
      },
      "@showid/true": function(state, str, cslid) {
        return str;
      },
      "@URL/true": function(state, str) {
        return str;
      },
      "@DOI/true": function(state, str) {
        return str;
      }
    };
    CSL2.Output.Formats = new CSL2.Output.Formats();
    CSL2.Registry = function(state) {
      this.debug = false;
      this.state = state;
      this.registry = {};
      this.reflist = [];
      this.refhash = {};
      this.namereg = new CSL2.Registry.NameReg(state);
      this.citationreg = new CSL2.Registry.CitationReg(state);
      this.authorstrings = {};
      this.masterMap = {};
      this.mylist = [];
      this.myhash = {};
      this.deletes = [];
      this.inserts = [];
      this.uncited = {};
      this.refreshes = {};
      this.akeys = {};
      this.oldseq = {};
      this.return_data = {};
      this.ambigcites = {};
      this.ambigresets = {};
      this.sorter = new CSL2.Registry.Comparifier(state, "bibliography_sort");
      this.getSortedIds = function() {
        var ret = [];
        for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
          ret.push("" + this.reflist[i].id);
        }
        return ret;
      };
      this.getSortedRegistryItems = function() {
        var ret = [];
        for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
          ret.push(this.reflist[i]);
        }
        return ret;
      };
    };
    CSL2.Registry.prototype.init = function(itemIDs, uncited_flag) {
      var i, ilen;
      this.oldseq = {};
      if (uncited_flag) {
        this.uncited = {};
        for (var i = 0, ilen = itemIDs.length; i < ilen; i += 1) {
          if (!this.myhash[itemIDs[i]]) {
            this.mylist.push("" + itemIDs[i]);
          }
          this.uncited[itemIDs[i]] = true;
          this.myhash[itemIDs[i]] = true;
        }
      } else {
        for (var key in this.uncited) {
          itemIDs.push(key);
        }
        var myhash = {};
        for (i = itemIDs.length - 1; i > -1; i += -1) {
          if (myhash[itemIDs[i]]) {
            itemIDs = itemIDs.slice(0, i).concat(itemIDs.slice(i + 1));
          } else {
            myhash[itemIDs[i]] = true;
          }
        }
        this.mylist = itemIDs;
        this.myhash = myhash;
      }
      this.refreshes = {};
      this.touched = {};
      this.ambigsTouched = {};
      this.ambigresets = {};
    };
    CSL2.Registry.prototype.dopurge = function(myhash) {
      for (var i = this.mylist.length - 1; i > -1; i += -1) {
        if (this.citationreg.citationsByItemId) {
          if ((!this.citationreg.citationsByItemId || !this.citationreg.citationsByItemId[this.mylist[i]]) && !myhash[this.mylist[i]]) {
            delete this.myhash[this.mylist[i]];
            delete this.uncited[this.mylist[i]];
            this.mylist = this.mylist.slice(0, i).concat(this.mylist.slice(i + 1));
          }
        }
      }
      this.dodeletes(this.myhash);
    };
    CSL2.Registry.prototype.dodeletes = function(myhash) {
      var otheritems, key, ambig, pos, len, items, kkey, mypos, id2;
      if (typeof myhash === "string") {
        var key = myhash;
        myhash = {};
        myhash[key] = true;
      }
      for (var key in this.registry) {
        if (!myhash[key]) {
          if (this.uncited[key]) {
            continue;
          }
          otheritems = this.namereg.delitems(key);
          for (kkey in otheritems) {
            this.refreshes[kkey] = true;
          }
          ambig = this.registry[key].ambig;
          mypos = this.ambigcites[ambig].indexOf(key);
          if (mypos > -1) {
            items = this.ambigcites[ambig].slice();
            this.ambigcites[ambig] = items.slice(0, mypos).concat(items.slice(mypos + 1, items.length));
            this.ambigresets[ambig] = this.ambigcites[ambig].length;
          }
          len = this.ambigcites[ambig].length;
          for (pos = 0; pos < len; pos += 1) {
            id2 = "" + this.ambigcites[ambig][pos];
            this.refreshes[id2] = true;
          }
          if (this.registry[key].siblings) {
            if (this.registry[key].siblings.length == 1) {
              var loneSiblingID = this.registry[key].siblings[0];
              if (this.registry[loneSiblingID].siblings) {
                this.registry[loneSiblingID].siblings.pop();
                this.registry[loneSiblingID].master = true;
              }
            } else if (this.registry[key].siblings.length > 1) {
              var removeIDs = [key];
              if (this.registry[key].master) {
                var newmasterID = this.registry[key].siblings[0];
                var newmaster = this.registry[newmasterID];
                newmaster.master = true;
                removeIDs.push(newmasterID);
              }
              var buffer = [];
              for (var k = this.registry[key].siblings.length - 1; k > -1; k += -1) {
                var siblingID = this.registry[key].siblings.pop();
                if (removeIDs.indexOf(siblingID) === -1) {
                  buffer.push(siblingID);
                }
              }
              for (var k = buffer.length - 1; k > -1; k += -1) {
                this.registry[key].siblings.push(buffer[k]);
              }
            }
          }
          for (var i = this.reflist.length - 1; i > -1; i--) {
            if (this.reflist[i].id === key) {
              this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
            }
          }
          delete this.registry[key];
          delete this.refhash[key];
          this.return_data.bibchange = true;
        }
      }
    };
    CSL2.Registry.prototype.doinserts = function(mylist) {
      var item, Item, akey, newitem, abase, i, ilen;
      if (typeof mylist === "string") {
        mylist = [mylist];
      }
      for (var i = 0, ilen = mylist.length; i < ilen; i += 1) {
        item = mylist[i];
        if (!this.registry[item]) {
          Item = this.state.retrieveItem(item);
          akey = CSL2.getAmbiguousCite.call(this.state, Item);
          this.ambigsTouched[akey] = true;
          if (!Item.legislation_id) {
            this.akeys[akey] = true;
          }
          newitem = {
            "id": "" + item,
            "seq": 0,
            "offset": 0,
            "sortkeys": false,
            "ambig": false,
            "rendered": false,
            "disambig": false,
            "ref": Item,
            "newItem": true
          };
          this.registry[item] = newitem;
          if (this.citationreg.citationsByItemId && this.citationreg.citationsByItemId[item]) {
            this.registry[item]["first-reference-note-number"] = this.citationreg.citationsByItemId[item][0].properties.noteIndex;
          }
          abase = CSL2.getAmbigConfig.call(this.state);
          this.registerAmbigToken(akey, item, abase);
          this.touched[item] = true;
          this.return_data.bibchange = true;
        }
      }
    };
    CSL2.Registry.prototype.rebuildlist = function(nosort) {
      var len, pos, item, Item;
      if (!nosort) {
        this.reflist_inserts = [];
        len = this.mylist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.mylist[pos];
          Item = this.registry[item];
          if (Item.newItem) {
            this.reflist_inserts.push(Item);
          }
          this.oldseq[item] = this.registry[item].seq;
          this.registry[item].seq = pos + 1;
        }
      } else {
        this.reflist = [];
        len = this.mylist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.mylist[pos];
          Item = this.registry[item];
          this.reflist.push(Item);
          this.oldseq[item] = this.registry[item].seq;
          this.registry[item].seq = pos + 1;
        }
      }
    };
    CSL2.Registry.prototype.dorefreshes = function() {
      var key, regtoken, Item, akey, abase;
      for (var key in this.refreshes) {
        regtoken = this.registry[key];
        if (!regtoken) {
          continue;
        }
        regtoken.sortkeys = void 0;
        Item = this.state.refetchItem(key);
        var akey = regtoken.ambig;
        if (typeof akey === "undefined") {
          this.state.tmp.disambig_settings = false;
          akey = CSL2.getAmbiguousCite.call(this.state, Item);
          abase = CSL2.getAmbigConfig.call(this.state);
          this.registerAmbigToken(akey, key, abase);
        }
        for (var akkey in this.ambigresets) {
          if (this.ambigresets[akkey] === 1) {
            var loneKey = this.ambigcites[akey][0];
            var Item = this.state.refetchItem(loneKey);
            this.registry[loneKey].disambig = new CSL2.AmbigConfig();
            this.state.tmp.disambig_settings = false;
            var akey = CSL2.getAmbiguousCite.call(this.state, Item);
            var abase = CSL2.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, loneKey, abase);
          }
        }
        this.state.tmp.taintedItemIDs[key] = true;
        this.ambigsTouched[akey] = true;
        if (!Item.legislation_id) {
          this.akeys[akey] = true;
        }
        this.touched[key] = true;
      }
    };
    CSL2.Registry.prototype.setdisambigs = function() {
      for (var akey in this.ambigsTouched) {
        this.state.disambiguate.run(akey);
      }
      this.ambigsTouched = {};
      this.akeys = {};
    };
    CSL2.Registry.prototype.renumber = function() {
      var len, pos, item;
      if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
        this.state.bibliography_sort.tmp.citation_number_map = {};
      }
      len = this.reflist.length;
      for (pos = 0; pos < len; pos += 1) {
        item = this.reflist[pos];
        item.seq = pos + 1;
        if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
          this.state.bibliography_sort.tmp.citation_number_map[item.seq] = this.reflist.length - item.seq + 1;
        }
        if (this.state.opt.update_mode === CSL2.NUMERIC && item.seq != this.oldseq[item.id]) {
          this.state.tmp.taintedItemIDs[item.id] = true;
        }
        if (item.seq != this.oldseq[item.id]) {
          this.return_data.bibchange = true;
        }
      }
    };
    CSL2.Registry.prototype.setsortkeys = function() {
      var key;
      for (var i = 0, ilen = this.mylist.length; i < ilen; i += 1) {
        var key = this.mylist[i];
        if (this.touched[key] || this.state.tmp.taintedItemIDs[key] || !this.registry[key].sortkeys) {
          this.registry[key].sortkeys = CSL2.getSortKeys.call(this.state, this.state.retrieveItem(key), "bibliography_sort");
        }
      }
    };
    CSL2.Registry.prototype._insertItem = function(element, array2) {
      array2.splice(this._locationOf(element, array2) + 1, 0, element);
      return array2;
    };
    CSL2.Registry.prototype._locationOf = function(element, array2, start3, end2) {
      if (array2.length === 0) {
        return -1;
      }
      start3 = start3 || 0;
      end2 = end2 || array2.length;
      var pivot = start3 + end2 >> 1;
      var c2 = this.sorter.compareKeys(element, array2[pivot]);
      if (end2 - start3 <= 1) {
        return c2 == -1 ? pivot - 1 : pivot;
      }
      switch (c2) {
        case -1:
          return this._locationOf(element, array2, start3, pivot);
        case 0:
          return pivot;
        case 1:
          return this._locationOf(element, array2, pivot, end2);
      }
    };
    CSL2.Registry.prototype.sorttokens = function(nosort) {
      var len, item, Item, pos;
      if (!nosort) {
        this.reflist_inserts = [];
        len = this.mylist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.mylist[pos];
          Item = this.registry[item];
          if (Item.newItem) {
            this.reflist_inserts.push(Item);
          }
        }
        for (var key in this.state.tmp.taintedItemIDs) {
          if (this.registry[key] && !this.registry[key].newItem) {
            for (var i = this.reflist.length - 1; i > -1; i--) {
              if (this.reflist[i].id === key) {
                this.reflist_inserts.push(this.reflist[i]);
                this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
              }
            }
          }
        }
        for (var i = 0, ilen = this.reflist_inserts.length; i < ilen; i++) {
          var Item = this.reflist_inserts[i];
          delete Item.newItem;
          this.reflist = this._insertItem(Item, this.reflist);
        }
        for (pos = 0; pos < len; pos += 1) {
          item = this.mylist[pos];
          Item = this.registry[item];
          this.registry[item].seq = pos + 1;
        }
      }
    };
    CSL2.Registry.Comparifier = function(state, keyset) {
      var sort_directions, len, pos, compareKeys;
      var sortCompare = CSL2.getSortCompare.call(state, state.opt["default-locale-sort"]);
      sort_directions = state[keyset].opt.sort_directions;
      this.compareKeys = function(a2, b) {
        len = a2.sortkeys ? a2.sortkeys.length : 0;
        for (pos = 0; pos < len; pos += 1) {
          var cmp = 0;
          if (a2.sortkeys[pos] === b.sortkeys[pos]) {
            cmp = 0;
          } else if (typeof a2.sortkeys[pos] === "undefined") {
            cmp = sort_directions[pos][1];
          } else if (typeof b.sortkeys[pos] === "undefined") {
            cmp = sort_directions[pos][0];
          } else {
            cmp = sortCompare(a2.sortkeys[pos], b.sortkeys[pos]);
          }
          if (0 < cmp) {
            return sort_directions[pos][1];
          } else if (0 > cmp) {
            return sort_directions[pos][0];
          }
        }
        if (a2.seq > b.seq) {
          return 1;
        } else if (a2.seq < b.seq) {
          return -1;
        }
        return 0;
      };
      compareKeys = this.compareKeys;
      this.compareCompositeKeys = function(a2, b) {
        return compareKeys(a2[1], b[1]);
      };
    };
    CSL2.Registry.prototype.compareRegistryTokens = function(a2, b) {
      if (a2.seq > b.seq) {
        return 1;
      } else if (a2.seq < b.seq) {
        return -1;
      }
      return 0;
    };
    CSL2.Registry.prototype.registerAmbigToken = function(akey, id2, ambig_config) {
      if (!this.registry[id2]) {
        CSL2.debug("Warning: unregistered item: itemID=(" + id2 + "), akey=(" + akey + ")");
      }
      if (this.registry[id2] && this.registry[id2].disambig && this.registry[id2].disambig.names) {
        for (var i = 0, ilen = ambig_config.names.length; i < ilen; i += 1) {
          var new_names_params = ambig_config.names[i];
          var old_names_params = this.registry[id2].disambig.names[i];
          if (new_names_params !== old_names_params) {
            this.state.tmp.taintedItemIDs[id2] = true;
          } else if (ambig_config.givens[i]) {
            for (var j = 0, jlen = ambig_config.givens[i].length; j < jlen; j += 1) {
              var new_gnames_params = ambig_config.givens[i][j];
              var old_gnames_params = this.registry[id2].disambig.givens[i][j];
              if (new_gnames_params !== old_gnames_params) {
                this.state.tmp.taintedItemIDs[id2] = true;
              }
            }
          }
        }
      }
      if (!this.ambigcites[akey]) {
        this.ambigcites[akey] = [];
      }
      if (this.ambigcites[akey].indexOf("" + id2) === -1) {
        this.ambigcites[akey].push("" + id2);
      }
      this.registry[id2].ambig = akey;
      this.registry[id2].disambig = CSL2.cloneAmbigConfig(ambig_config);
    };
    CSL2.getSortKeys = function(Item, key_type) {
      var area, root3, extension, strip_prepositions, len, pos;
      if (false) {
        CSL2.debug("KEY TYPE: " + key_type);
      }
      area = this.tmp.area;
      root3 = this.tmp.root;
      extension = this.tmp.extension;
      strip_prepositions = CSL2.Util.Sort.strip_prepositions;
      this.tmp.area = key_type;
      this.tmp.root = key_type.indexOf("_") > -1 ? key_type.slice(0, -5) : key_type;
      this.tmp.extension = "_sort";
      this.tmp.disambig_override = true;
      this.tmp.disambig_request = false;
      this.tmp.suppress_decorations = true;
      CSL2.getCite.call(this, Item);
      this.tmp.suppress_decorations = false;
      this.tmp.disambig_override = false;
      len = this[key_type].keys.length;
      for (pos = 0; pos < len; pos += 1) {
        this[key_type].keys[pos] = strip_prepositions(this[key_type].keys[pos]);
      }
      if (false) {
        CSL2.debug("sort keys (" + key_type + "): " + this[key_type].keys);
      }
      this.tmp.area = area;
      this.tmp.root = root3;
      this.tmp.extension = extension;
      return this[key_type].keys;
    };
    CSL2.Registry.NameReg = function(state) {
      var pkey, ikey, skey, dagopt, gdropt, items, strip_periods, set_keys, evalname, delitems, addname, myitems;
      this.state = state;
      this.namereg = {};
      this.nameind = {};
      this.nameindpkeys = {};
      this.itemkeyreg = {};
      strip_periods = function(str) {
        if (!str) {
          str = "";
        }
        return str.replace(/\./g, " ").replace(/\s+/g, " ").replace(/\s+$/, "");
      };
      set_keys = function(state2, itemid, nameobj) {
        pkey = strip_periods(nameobj.family);
        if (state2.opt["demote-non-dropping-particle"] === "never" && nameobj["non-dropping-particle"] && nameobj["family"]) {
          pkey = `${pkey} ${nameobj["non-dropping-particle"]}`;
        }
        skey = strip_periods(nameobj.given);
        var m2 = skey.match(/[,\!]* ([^,]+)$/);
        if (m2 && m2[1] === m2[1].toLowerCase()) {
          skey = skey.replace(/[,\!]* [^,]+$/, "");
        }
        ikey = CSL2.Util.Names.initializeWith(state2, skey, "%s");
        if (state2.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
          pkey = "" + itemid + pkey;
        }
      };
      evalname = function(item_id, nameobj, namenum, request_base, form, initials) {
        var param;
        if (state.tmp.area.slice(0, 12) === "bibliography" && !form) {
          if (typeof initials === "string") {
            return 1;
          } else {
            return 2;
          }
        }
        var res = state.nameOutput.getName(nameobj, "locale-translit", true);
        nameobj = res.name;
        set_keys(this.state, "" + item_id, nameobj);
        param = 2;
        dagopt = state.opt["disambiguate-add-givenname"];
        gdropt = state.citation.opt["givenname-disambiguation-rule"];
        var gdropt_orig = gdropt;
        if (gdropt === "by-cite") {
          gdropt = "all-names";
        }
        if (form === "short") {
          param = 0;
        } else if (typeof initials === "string") {
          param = 1;
        }
        if (typeof this.namereg[pkey] === "undefined" || typeof this.namereg[pkey].ikey[ikey] === "undefined") {
          return param;
        }
        if (gdropt_orig === "by-cite" && param <= request_base) {
          return request_base;
        }
        if (!dagopt) {
          return param;
        }
        if (typeof gdropt === "string" && gdropt.slice(0, 12) === "primary-name" && namenum > 0) {
          return param;
        }
        if (!gdropt || gdropt === "all-names" || gdropt === "primary-name") {
          if (this.namereg[pkey].count > 1) {
            param = 1;
          }
          if (this.namereg[pkey].ikey && this.namereg[pkey].ikey[ikey].count > 1 || this.namereg[pkey].count > 1 && typeof initials !== "string") {
            param = 2;
          }
        } else if (gdropt === "all-names-with-initials" || gdropt === "primary-name-with-initials") {
          if (this.namereg[pkey].count > 1) {
            param = 1;
          } else {
            param = 0;
          }
        }
        if (!state.registry.registry[item_id]) {
          if (form == "short") {
            return 0;
          } else if (typeof initials == "string") {
            return 1;
          }
        } else {
          return param;
        }
      };
      delitems = function(ids) {
        var pos, len, posB, id2, fullkey;
        if (typeof ids === "string" || typeof ids === "number") {
          ids = ["" + ids];
        }
        var ret = {};
        len = ids.length;
        for (pos = 0; pos < len; pos += 1) {
          id2 = "" + ids[pos];
          if (!this.nameind[id2]) {
            continue;
          }
          for (fullkey in this.nameind[id2]) {
            if (this.nameind[id2].hasOwnProperty(fullkey)) {
              var key = fullkey.split("::");
              pkey = key[0];
              ikey = key[1];
              skey = key[2];
              if (typeof this.namereg[pkey] === "undefined") {
                continue;
              }
              items = this.namereg[pkey].items;
              if (skey && this.namereg[pkey].ikey[ikey] && this.namereg[pkey].ikey[ikey].skey[skey]) {
                myitems = this.namereg[pkey].ikey[ikey].skey[skey].items;
                posB = myitems.indexOf("" + id2);
                if (posB > -1) {
                  this.namereg[pkey].ikey[ikey].skey[skey].items = myitems.slice(0, posB).concat(myitems.slice([posB + 1]));
                }
                if (this.namereg[pkey].ikey[ikey].skey[skey].items.length === 0) {
                  delete this.namereg[pkey].ikey[ikey].skey[skey];
                  this.namereg[pkey].ikey[ikey].count += -1;
                  if (this.namereg[pkey].ikey[ikey].count < 2) {
                    for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                      state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                    }
                  }
                }
              }
              if (ikey && this.namereg[pkey].ikey[ikey]) {
                posB = this.namereg[pkey].ikey[ikey].items.indexOf("" + id2);
                if (posB > -1) {
                  items = this.namereg[pkey].ikey[ikey].items.slice();
                  this.namereg[pkey].ikey[ikey].items = items.slice(0, posB).concat(items.slice([posB + 1]));
                }
                if (this.namereg[pkey].ikey[ikey].items.length === 0) {
                  delete this.namereg[pkey].ikey[ikey];
                  this.namereg[pkey].count += -1;
                  if (this.namereg[pkey].count < 2) {
                    for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                      state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                    }
                  }
                }
              }
              if (pkey) {
                posB = this.namereg[pkey].items.indexOf("" + id2);
                if (posB > -1) {
                  items = this.namereg[pkey].items.slice();
                  this.namereg[pkey].items = items.slice(0, posB).concat(items.slice([posB + 1], items.length));
                }
                if (this.namereg[pkey].items.length < 2) {
                  delete this.namereg[pkey];
                }
              }
              delete this.nameind[id2][fullkey];
            }
          }
          delete this.nameind[id2];
          delete this.nameindpkeys[id2];
        }
        return ret;
      };
      addname = function(item_id, nameobj, pos) {
        var i, ilen;
        var res = state.nameOutput.getName(nameobj, "locale-translit", true);
        nameobj = res.name;
        if (state.citation.opt["givenname-disambiguation-rule"] && state.citation.opt["givenname-disambiguation-rule"].slice(0, 8) === "primary-" && pos !== 0) {
          return;
        }
        set_keys(this.state, "" + item_id, nameobj);
        if (pkey) {
          if (typeof this.namereg[pkey] === "undefined") {
            this.namereg[pkey] = {};
            this.namereg[pkey].count = 0;
            this.namereg[pkey].ikey = {};
            this.namereg[pkey].items = [item_id];
          } else if (this.namereg[pkey].items.indexOf(item_id) === -1) {
            this.namereg[pkey].items.push(item_id);
          }
        }
        if (pkey && ikey) {
          if (typeof this.namereg[pkey].ikey[ikey] === "undefined") {
            this.namereg[pkey].ikey[ikey] = {};
            this.namereg[pkey].ikey[ikey].count = 0;
            this.namereg[pkey].ikey[ikey].skey = {};
            this.namereg[pkey].ikey[ikey].items = [item_id];
            this.namereg[pkey].count += 1;
            if (this.namereg[pkey].count === 2) {
              for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
              }
            }
          } else if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
            this.namereg[pkey].ikey[ikey].items.push(item_id);
          }
        }
        if (pkey && ikey && skey) {
          if (typeof this.namereg[pkey].ikey[ikey].skey[skey] === "undefined") {
            this.namereg[pkey].ikey[ikey].skey[skey] = {};
            this.namereg[pkey].ikey[ikey].skey[skey].items = [item_id];
            this.namereg[pkey].ikey[ikey].count += 1;
            if (this.namereg[pkey].ikey[ikey].count === 2) {
              for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
              }
            }
          } else if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
            this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
          }
        }
        if (typeof this.nameind[item_id] === "undefined") {
          this.nameind[item_id] = {};
          this.nameindpkeys[item_id] = {};
        }
        if (pkey) {
          this.nameind[item_id][pkey + "::" + ikey + "::" + skey] = true;
          this.nameindpkeys[item_id][pkey] = this.namereg[pkey];
        }
      };
      this.addname = addname;
      this.delitems = delitems;
      this.evalname = evalname;
    };
    CSL2.Registry.CitationReg = function() {
      this.citationById = {};
      this.citationByIndex = [];
    };
    CSL2.Disambiguation = function(state) {
      this.state = state;
      this.sys = this.state.sys;
      this.registry = state.registry.registry;
      this.ambigcites = state.registry.ambigcites;
      this.configModes();
      this.debug = false;
    };
    CSL2.Disambiguation.prototype.run = function(akey) {
      if (!this.modes.length) {
        return;
      }
      if (this.debug) {
        this.state.sys.print("[A] === RUN ===");
      }
      this.akey = akey;
      if (this.initVars(akey)) {
        this.runDisambig();
      }
    };
    CSL2.Disambiguation.prototype.runDisambig = function() {
      var ismax;
      if (this.debug) {
        this.state.sys.print("[C] === runDisambig() ===");
      }
      this.initGivens = true;
      while (this.lists.length) {
        this.gnameset = 0;
        this.gname = 0;
        this.clashes = [1, 0];
        while (this.lists[0][1].length) {
          this.listpos = 0;
          if (!this.base) {
            this.base = this.lists[0][0];
          }
          ismax = this.incrementDisambig();
          this.scanItems(this.lists[0]);
          this.evalScan(ismax);
        }
        this.lists = this.lists.slice(1);
      }
    };
    CSL2.Disambiguation.prototype.scanItems = function(list) {
      var pos, len, otherItem;
      if (this.debug) {
        this.state.sys.print("[2] === scanItems() ===");
      }
      this.Item = list[1][0];
      this.ItemCite = CSL2.getAmbiguousCite.call(this.state, this.Item, this.base, true);
      this.scanlist = list[1];
      this.partners = [];
      this.partners.push(this.Item);
      this.nonpartners = [];
      var clashes = 0;
      for (var pos = 1, len = list[1].length; pos < len; pos += 1) {
        otherItem = list[1][pos];
        var otherItemCite = CSL2.getAmbiguousCite.call(this.state, otherItem, this.base, true);
        if (this.debug) {
          if (pos > 1) {
            this.state.sys.print("  -----------");
          }
        }
        if (this.ItemCite === otherItemCite) {
          if (this.debug) {
            this.state.sys.print("  [CLASH]--> " + this.Item.id + ": " + this.ItemCite);
            this.state.sys.print("             " + otherItem.id + ": " + otherItemCite);
          }
          clashes += 1;
          this.partners.push(otherItem);
        } else {
          if (this.debug) {
            this.state.sys.print("  [clear]--> " + this.Item.id + ": " + this.ItemCite);
            this.state.sys.print("             " + otherItem.id + ": " + otherItemCite);
          }
          this.nonpartners.push(otherItem);
        }
      }
      this.clashes[0] = this.clashes[1];
      this.clashes[1] = clashes;
    };
    CSL2.Disambiguation.prototype.evalScan = function(maxed) {
      this[this.modes[this.modeindex]](maxed);
      if (maxed) {
        if (this.modeindex < this.modes.length - 1) {
          this.modeindex += 1;
        } else {
          this.lists[this.listpos + 1] = [this.base, []];
        }
      }
    };
    CSL2.Disambiguation.prototype.disNames = function(ismax) {
      var i, ilen;
      if (this.debug) {
        this.state.sys.print("[3] == disNames() ==");
      }
      if (this.clashes[1] === 0 && this.nonpartners.length === 1) {
        this.captureStepToBase();
        if (this.debug) {
          this.state.sys.print("  ** RESOLUTION [a]: lone partner, one nonpartner");
          this.state.sys.print("  registering " + this.partners[0].id + " and " + this.nonpartners[0].id);
        }
        this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
        this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
        this.lists[this.listpos] = [this.betterbase, []];
      } else if (this.clashes[1] === 0) {
        this.captureStepToBase();
        if (this.debug) {
          this.state.sys.print("  ** RESOLUTION [b]: lone partner, unknown number of remaining nonpartners");
          this.state.sys.print("  registering " + this.partners[0].id);
        }
        this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
        this.lists[this.listpos] = [this.betterbase, this.nonpartners];
        if (this.nonpartners.length) {
          this.initGivens = true;
        }
      } else if (this.nonpartners.length === 1) {
        this.captureStepToBase();
        if (this.debug) {
          this.state.sys.print("  ** RESOLUTION [c]: lone nonpartner, unknown number of partners remaining");
          this.state.sys.print("  registering " + this.nonpartners[0].id);
        }
        this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
        this.lists[this.listpos] = [this.betterbase, this.partners];
      } else if (this.clashes[1] < this.clashes[0]) {
        this.captureStepToBase();
        if (this.debug) {
          this.state.sys.print("  ** RESOLUTION [d]: better result, but no entries safe to register");
        }
        this.lists[this.listpos] = [this.betterbase, this.partners];
        this.lists.push([this.betterbase, this.nonpartners]);
      } else {
        if (this.debug) {
          this.state.sys.print("  ** RESOLUTION [e]: no improvement, and clashes remain");
        }
        if (ismax) {
          this.lists[this.listpos] = [this.betterbase, this.nonpartners];
          this.lists.push([this.betterbase, this.partners]);
          if (this.modeindex === this.modes.length - 1) {
            if (this.debug) {
              this.state.sys.print("     (registering clashing entries because we've run out of options)");
            }
            for (var i = 0, ilen = this.partners.length; i < ilen; i += 1) {
              this.state.registry.registerAmbigToken(this.akey, "" + this.partners[i].id, this.betterbase);
            }
            this.lists[this.listpos] = [this.betterbase, []];
          }
        }
      }
    };
    CSL2.Disambiguation.prototype.disExtraText = function() {
      if (this.debug) {
        this.state.sys.print("[3] === disExtraText ==");
      }
      var done = false;
      if (this.clashes[1] === 0 && this.nonpartners.length < 2) {
        done = true;
      }
      if (!done && (!this.base.disambiguate || this.state.tmp.disambiguate_count !== this.state.tmp.disambiguate_maxMax)) {
        this.modeindex = 0;
        this.base.disambiguate = this.state.tmp.disambiguate_count;
        this.betterbase.disambiguate = this.state.tmp.disambiguate_count;
        if (!this.base.disambiguate) {
          this.initGivens = true;
          this.base.disambiguate = 1;
          for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
            this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
          }
        } else {
          this.disNames();
        }
      } else if (done || this.state.tmp.disambiguate_count === this.state.tmp.disambiguate_maxMax) {
        if (done || this.modeindex === this.modes.length - 1) {
          var base = this.lists[this.listpos][0];
          for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
            this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
            this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
          }
          this.lists[this.listpos] = [this.betterbase, []];
        } else {
          this.modeindex = this.modes.length - 1;
          var base = this.lists[this.listpos][0];
          base.disambiguate = true;
          for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
            this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
            this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
          }
        }
      }
    };
    CSL2.Disambiguation.prototype.disYears = function() {
      var pos, len, tokens, token;
      if (this.debug) {
        this.state.sys.print("[3] === disYears ==");
      }
      tokens = [];
      var base = this.lists[this.listpos][0];
      if (this.clashes[1]) {
        for (var i = 0, ilen = this.state.registry.mylist.length; i < ilen; i += 1) {
          var origid = this.state.registry.mylist[i];
          for (var j = 0, jlen = this.lists[this.listpos][1].length; j < jlen; j += 1) {
            var token = this.lists[this.listpos][1][j];
            if (token.id == origid) {
              tokens.push(this.registry[token.id]);
              break;
            }
          }
        }
      }
      tokens.sort(this.state.registry.sorter.compareKeys);
      for (var pos = 0, len = tokens.length; pos < len; pos += 1) {
        base.year_suffix = "" + pos;
        var oldBase = this.state.registry.registry[tokens[pos].id].disambig;
        this.state.registry.registerAmbigToken(this.akey, "" + tokens[pos].id, base);
        if (CSL2.ambigConfigDiff(oldBase, base)) {
          this.state.tmp.taintedItemIDs[tokens[pos].id] = true;
        }
      }
      this.lists[this.listpos] = [this.betterbase, []];
    };
    CSL2.Disambiguation.prototype.incrementDisambig = function() {
      if (this.debug) {
        this.state.sys.print("\n[1] === incrementDisambig() ===");
      }
      if (this.initGivens) {
        this.initGivens = false;
        return false;
      }
      var maxed = false;
      var increment_names = true;
      if (this.modes[this.modeindex] === "disNames") {
        increment_names = false;
        if (typeof this.givensMax !== "number") {
          increment_names = true;
        }
        var increment_namesets = false;
        if (typeof this.namesMax !== "number") {
          increment_namesets = true;
        }
        if (typeof this.givensMax === "number") {
          if (this.base.givens.length && this.base.givens[this.gnameset][this.gname] < this.givensMax) {
            this.base.givens[this.gnameset][this.gname] += 1;
          } else {
            increment_names = true;
          }
        }
        if (typeof this.namesMax === "number" && increment_names) {
          if (this.state.opt["disambiguate-add-names"]) {
            increment_namesets = false;
            if (this.gname < this.namesMax) {
              this.base.names[this.gnameset] += 1;
              this.gname += 1;
            } else {
              increment_namesets = true;
            }
          } else {
            increment_namesets = true;
          }
        }
        if (typeof this.namesetsMax === "number" && increment_namesets) {
          if (this.gnameset < this.namesetsMax) {
            this.gnameset += 1;
            this.base.names[this.gnameset] = 1;
            this.gname = 0;
          }
        }
        if (this.debug) {
          this.state.sys.print("    ------------------");
          this.state.sys.print("    incremented values");
          this.state.sys.print("    ------------------");
          this.state.sys.print("    | gnameset: " + this.gnameset);
          this.state.sys.print("    | gname: " + this.gname);
          this.state.sys.print("    | names value: " + this.base.names[this.gnameset]);
          if (this.base.givens.length) {
            this.state.sys.print("    | givens value: " + this.base.givens[this.gnameset][this.gname]);
          } else {
            this.state.sys.print("    | givens value: nil");
          }
          this.state.sys.print("    | namesetsMax: " + this.namesetsMax);
          this.state.sys.print("    | namesMax: " + this.namesMax);
          this.state.sys.print("    | givensMax: " + this.givensMax);
        }
        if ((typeof this.namesetsMax !== "number" || this.namesetsMax === -1 || this.gnameset === this.namesetsMax) && (!this.state.opt["disambiguate-add-names"] || typeof this.namesMax !== "number" || this.gname === this.namesMax) && (typeof this.givensMax != "number" || typeof this.base.givens[this.gnameset] === "undefined" || typeof this.base.givens[this.gnameset][this.gname] === "undefined" || this.base.givens[this.gnameset][this.gname] === this.givensMax)) {
          maxed = true;
          if (this.debug) {
            this.state.sys.print("    MAXED");
          }
        }
      } else if (this.modes[this.modeindex] === "disExtraText") {
        this.base.disambiguate += 1;
        this.betterbase.disambiguate += 1;
      }
      return maxed;
    };
    CSL2.Disambiguation.prototype.initVars = function(akey) {
      var i, ilen, myIds, myItemBundles, myItems;
      if (this.debug) {
        this.state.sys.print("[B] === initVars() ===");
      }
      this.lists = [];
      this.base = false;
      this.betterbase = false;
      this.akey = akey;
      this.maxNamesByItemId = {};
      myItemBundles = [];
      myIds = this.ambigcites[akey];
      if (!myIds || !myIds.length) {
        return false;
      }
      var myItem = this.state.refetchItem("" + myIds[0]);
      this.getCiteData(myItem);
      this.base = CSL2.getAmbigConfig.call(this.state);
      if (myIds && myIds.length > 1) {
        myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
        for (var i = 1, ilen = myIds.length; i < ilen; i += 1) {
          myItem = this.state.refetchItem("" + myIds[i]);
          this.getCiteData(myItem, this.base);
          myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
        }
        myItemBundles.sort(function(a2, b) {
          if (a2[0] > b[0]) {
            return 1;
          } else if (a2[0] < b[0]) {
            return -1;
          } else {
            if (a2[1].id > b[1].id) {
              return 1;
            } else if (a2[1].id < b[1].id) {
              return -1;
            } else {
              return 0;
            }
          }
        });
        myItems = [];
        for (var i = 0, ilen = myItemBundles.length; i < ilen; i += 1) {
          myItems.push(myItemBundles[i][1]);
        }
        this.lists.push([this.base, myItems]);
        this.Item = this.lists[0][1][0];
      } else {
        this.Item = this.state.refetchItem("" + myIds[0]);
      }
      this.modeindex = 0;
      if (this.state.citation.opt["disambiguate-add-names"] || true) {
        this.namesMax = this.maxNamesByItemId[this.Item.id][0];
      } else {
        var namesMax = this.base.names[0];
        for (var i = 1, ilen = this.base.names.length; i < ilen; i += 1) {
          namesMax = Math.max(namesMax, this.base.names.names[i]);
        }
      }
      this.padBase(this.base);
      this.padBase(this.betterbase);
      this.base.year_suffix = false;
      this.base.disambiguate = false;
      this.betterbase.year_suffix = false;
      this.betterbase.disambiguate = false;
      if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.state.opt["disambiguate-add-givenname"]) {
        this.givensMax = 2;
      }
      return true;
    };
    CSL2.Disambiguation.prototype.padBase = function(base) {
      for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
        if (!base.givens[i]) {
          base.givens[i] = [];
        }
        for (var j = 0, jlen = base.names[i]; j < jlen; j += 1) {
          if (!base.givens[i][j]) {
            base.givens[i][j] = 0;
          }
        }
      }
    };
    CSL2.Disambiguation.prototype.configModes = function() {
      var dagopt, gdropt;
      this.modes = [];
      dagopt = this.state.opt["disambiguate-add-givenname"];
      gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
      if (this.state.opt["disambiguate-add-names"] || dagopt && gdropt === "by-cite") {
        this.modes.push("disNames");
      }
      if (this.state.opt.development_extensions.prioritize_disambiguate_condition) {
        if (this.state.opt.has_disambiguate) {
          this.modes.push("disExtraText");
        }
        if (this.state.opt["disambiguate-add-year-suffix"]) {
          this.modes.push("disYears");
        }
      } else {
        if (this.state.opt["disambiguate-add-year-suffix"]) {
          this.modes.push("disYears");
        }
        if (this.state.opt.has_disambiguate) {
          this.modes.push("disExtraText");
        }
      }
    };
    CSL2.Disambiguation.prototype.getCiteData = function(Item, base) {
      if (!this.maxNamesByItemId[Item.id]) {
        CSL2.getAmbiguousCite.call(this.state, Item, base);
        base = CSL2.getAmbigConfig.call(this.state);
        this.maxNamesByItemId[Item.id] = CSL2.getMaxVals.call(this.state);
        this.state.registry.registry[Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
        for (var i = 0, ilen = this.state.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
          this.state.registry.registry[Item.id].disambig.givens[i] = this.state.tmp.disambig_settings.givens[i].slice();
        }
        this.namesetsMax = this.state.registry.registry[Item.id].disambig.names.length - 1;
        if (!this.base) {
          this.base = base;
          this.betterbase = CSL2.cloneAmbigConfig(base);
        }
        if (base.names.length < this.base.names.length) {
          this.base = base;
        }
        for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
          if (base.names[i] > this.base.names[i]) {
            this.base.givens[i] = base.givens[i].slice();
            this.base.names[i] = base.names[i];
            this.betterbase.names = this.base.names.slice();
            this.betterbase.givens = this.base.givens.slice();
            this.padBase(this.base);
            this.padBase(this.betterbase);
          }
        }
        this.betterbase.givens = this.base.givens.slice();
        for (var j = 0, jlen = this.base.givens.length; j < jlen; j += 1) {
          this.betterbase.givens[j] = this.base.givens[j].slice();
        }
      }
    };
    CSL2.Disambiguation.prototype.captureStepToBase = function() {
      if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.base.givens && this.base.givens.length) {
        if (typeof this.base.givens[this.gnameset][this.gname] !== "undefined") {
          if (this.betterbase.givens.length < this.base.givens.length) {
            this.betterbase.givens = JSON.parse(JSON.stringify(this.base.givens));
          }
          this.betterbase.givens[this.gnameset][this.gname] = this.base.givens[this.gnameset][this.gname];
        }
      }
      this.betterbase.names[this.gnameset] = this.base.names[this.gnameset];
    };
    CSL2.Engine.prototype.getJurisdictionList = function(jurisdiction) {
      var jurisdictionList = [];
      var jurisdictionElems = jurisdiction.split(":");
      for (var j = jurisdictionElems.length; j > 0; j--) {
        var composedID = jurisdictionElems.slice(0, j).join(":");
        jurisdictionList.push(composedID);
        if (this.opt.jurisdiction_fallbacks[composedID]) {
          var fallback = this.opt.jurisdiction_fallbacks[composedID];
          jurisdictionList.push(fallback);
        }
      }
      if (jurisdictionList.indexOf("us") === -1) {
        jurisdictionList.push("us");
      }
      return jurisdictionList;
    };
    CSL2.Engine.prototype.loadStyleModule = function(jurisdiction, xmlSource, skipFallback) {
      var myFallback = null;
      var macroCount = 0;
      this.juris[jurisdiction] = {};
      var myXml = CSL2.setupXml(xmlSource);
      myXml.addMissingNameNodes(myXml.dataObj);
      myXml.addInstitutionNodes(myXml.dataObj);
      myXml.insertPublisherAndPlace(myXml.dataObj);
      myXml.flagDateMacros(myXml.dataObj);
      var myNodes = myXml.getNodesByName(myXml.dataObj, "law-module");
      for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
        var myTypes = myXml.getAttributeValue(myNodes[i], "types");
        if (myTypes) {
          this.juris[jurisdiction].types = {};
          myTypes = myTypes.split(/\s+/);
          for (var j = 0, jlen = myTypes.length; j < jlen; j++) {
            this.juris[jurisdiction].types[myTypes[j]] = true;
          }
        }
        if (!skipFallback) {
          myFallback = myXml.getAttributeValue(myNodes[i], "fallback");
          if (myFallback) {
            if (jurisdiction !== "us") {
              this.opt.jurisdiction_fallbacks[jurisdiction] = myFallback;
            }
          }
        }
      }
      var lang = this.opt.lang ? this.opt.lang : this.opt["default-locale"][0];
      CSL2.SET_COURT_CLASSES(this, lang, myXml, myXml.dataObj);
      if (!this.juris[jurisdiction].types) {
        this.juris[jurisdiction].types = CSL2.MODULE_TYPES;
      }
      var myNodes = myXml.getNodesByName(myXml.dataObj, "macro");
      for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
        var myName = myXml.getAttributeValue(myNodes[i], "name");
        if (!CSL2.MODULE_MACROS[myName]) {
          CSL2.debug('CSL: skipping non-modular macro name "' + myName + '" in module context');
          continue;
        }
        macroCount++;
        this.juris[jurisdiction][myName] = [];
        this.buildTokenLists(myNodes[i], this.juris[jurisdiction][myName]);
        this.configureTokenList(this.juris[jurisdiction][myName]);
      }
      return myFallback;
    };
    CSL2.Engine.prototype.retrieveAllStyleModules = function(jurisdictionList) {
      var ret = {};
      var preferences = this.locale[this.opt.lang].opts["jurisdiction-preference"];
      preferences = preferences ? preferences : [];
      preferences = [""].concat(preferences);
      for (var i = preferences.length - 1; i > -1; i--) {
        var preference = preferences[i];
        for (var j = 0, jlen = jurisdictionList.length; j < jlen; j++) {
          var jurisdiction = jurisdictionList[j];
          if (this.opt.jurisdictions_seen[jurisdiction]) {
            continue;
          }
          var res = this.sys.retrieveStyleModule(jurisdiction, preference);
          if (!res && !preference || res) {
            this.opt.jurisdictions_seen[jurisdiction] = true;
          }
          if (!res) {
            continue;
          }
          ret[jurisdiction] = res;
        }
      }
      return ret;
    };
    CSL2.ParticleList = function() {
      var always_dropping_1 = [[[0, 1], null]];
      var always_dropping_3 = [[[0, 3], null]];
      var always_non_dropping_1 = [[null, [0, 1]]];
      var always_non_dropping_2 = [[null, [0, 2]]];
      var always_non_dropping_3 = [[null, [0, 3]]];
      var either_1 = [[null, [0, 1]], [[0, 1], null]];
      var either_2 = [[null, [0, 2]], [[0, 2], null]];
      var either_1_dropping_best = [[[0, 1], null], [null, [0, 1]]];
      var either_2_dropping_best = [[[0, 2], null], [null, [0, 2]]];
      var either_3_dropping_best = [[[0, 3], null], [null, [0, 3]]];
      var non_dropping_2_alt_dropping_1_non_dropping_1 = [[null, [0, 2]], [[0, 1], [1, 2]]];
      var PARTICLES = [
        ["'s", always_non_dropping_1],
        ["'s-", always_non_dropping_1],
        ["'t", always_non_dropping_1],
        ["a", always_non_dropping_1],
        ["aan 't", always_non_dropping_2],
        ["aan de", always_non_dropping_2],
        ["aan den", always_non_dropping_2],
        ["aan der", always_non_dropping_2],
        ["aan het", always_non_dropping_2],
        ["aan t", always_non_dropping_2],
        ["aan", always_non_dropping_1],
        ["ad-", either_1],
        ["adh-", either_1],
        ["af", either_1],
        ["al", either_1],
        ["al-", either_1],
        ["am de", always_non_dropping_2],
        ["am", always_non_dropping_1],
        ["an-", either_1],
        ["ar-", either_1],
        ["as-", either_1],
        ["ash-", either_1],
        ["at-", either_1],
        ["ath-", either_1],
        ["auf dem", either_2_dropping_best],
        ["auf den", either_2_dropping_best],
        ["auf der", either_2_dropping_best],
        ["auf ter", always_non_dropping_2],
        ["auf", either_1_dropping_best],
        ["aus 'm", either_2_dropping_best],
        ["aus dem", either_2_dropping_best],
        ["aus den", either_2_dropping_best],
        ["aus der", either_2_dropping_best],
        ["aus m", either_2_dropping_best],
        ["aus", either_1_dropping_best],
        ["aus'm", either_2_dropping_best],
        ["az-", either_1],
        ["a\u0161-", either_1],
        ["a\u1E0D-", either_1],
        ["a\u1E0F-", either_1],
        ["a\u1E63-", either_1],
        ["a\u1E6D-", either_1],
        ["a\u1E6F-", either_1],
        ["a\u1E93-", either_1],
        ["ben", always_non_dropping_1],
        ["bij 't", always_non_dropping_2],
        ["bij de", always_non_dropping_2],
        ["bij den", always_non_dropping_2],
        ["bij het", always_non_dropping_2],
        ["bij t", always_non_dropping_2],
        ["bij", always_non_dropping_1],
        ["bin", always_non_dropping_1],
        ["boven d", always_non_dropping_2],
        ["boven d'", always_non_dropping_2],
        ["d", always_non_dropping_1],
        ["d'", either_1],
        ["da", either_1],
        ["dal", always_non_dropping_1],
        ["dal'", always_non_dropping_1],
        ["dall'", always_non_dropping_1],
        ["dalla", always_non_dropping_1],
        ["das", either_1],
        ["de die le", always_non_dropping_3],
        ["de die", always_non_dropping_2],
        ["de l", always_non_dropping_2],
        ["de l'", always_non_dropping_2],
        ["de la", non_dropping_2_alt_dropping_1_non_dropping_1],
        ["de las", non_dropping_2_alt_dropping_1_non_dropping_1],
        ["de le", always_non_dropping_2],
        ["de li", either_2],
        ["de van der", always_non_dropping_3],
        ["de", either_1],
        ["de'", either_1],
        ["deca", always_non_dropping_1],
        ["degli", either_1],
        ["dei", either_1],
        ["del", either_1],
        ["dela", always_dropping_1],
        ["dell'", either_1],
        ["della", either_1],
        ["delle", either_1],
        ["dello", either_1],
        ["den", either_1],
        ["der", either_1],
        ["des", either_1],
        ["di", either_1],
        ["die le", always_non_dropping_2],
        ["do", always_non_dropping_1],
        ["don", always_non_dropping_1],
        ["dos", either_1],
        ["du", either_1],
        ["ed-", either_1],
        ["edh-", either_1],
        ["el", either_1],
        ["el-", either_1],
        ["en-", either_1],
        ["er-", either_1],
        ["es-", either_1],
        ["esh-", either_1],
        ["et-", either_1],
        ["eth-", either_1],
        ["ez-", either_1],
        ["e\u0161-", either_1],
        ["e\u1E0D-", either_1],
        ["e\u1E0F-", either_1],
        ["e\u1E63-", either_1],
        ["e\u1E6D-", either_1],
        ["e\u1E6F-", either_1],
        ["e\u1E93-", either_1],
        ["het", always_non_dropping_1],
        ["i", always_non_dropping_1],
        ["il", always_dropping_1],
        ["im", always_non_dropping_1],
        ["in 't", always_non_dropping_2],
        ["in de", always_non_dropping_2],
        ["in den", always_non_dropping_2],
        ["in der", either_2],
        ["in het", always_non_dropping_2],
        ["in t", always_non_dropping_2],
        ["in", always_non_dropping_1],
        ["l", always_non_dropping_1],
        ["l'", always_non_dropping_1],
        ["la", always_non_dropping_1],
        ["las", always_non_dropping_1],
        ["le", always_non_dropping_1],
        ["les", either_1],
        ["lo", either_1],
        ["los", always_non_dropping_1],
        ["lou", always_non_dropping_1],
        ["of", always_non_dropping_1],
        ["onder 't", always_non_dropping_2],
        ["onder de", always_non_dropping_2],
        ["onder den", always_non_dropping_2],
        ["onder het", always_non_dropping_2],
        ["onder t", always_non_dropping_2],
        ["onder", always_non_dropping_1],
        ["op 't", always_non_dropping_2],
        ["op de", either_2],
        ["op den", always_non_dropping_2],
        ["op der", always_non_dropping_2],
        ["op gen", always_non_dropping_2],
        ["op het", always_non_dropping_2],
        ["op t", always_non_dropping_2],
        ["op ten", always_non_dropping_2],
        ["op", always_non_dropping_1],
        ["over 't", always_non_dropping_2],
        ["over de", always_non_dropping_2],
        ["over den", always_non_dropping_2],
        ["over het", always_non_dropping_2],
        ["over t", always_non_dropping_2],
        ["over", always_non_dropping_1],
        ["s", always_non_dropping_1],
        ["s'", always_non_dropping_1],
        ["sen", always_dropping_1],
        ["t", always_non_dropping_1],
        ["te", always_non_dropping_1],
        ["ten", always_non_dropping_1],
        ["ter", always_non_dropping_1],
        ["tho", always_non_dropping_1],
        ["thoe", always_non_dropping_1],
        ["thor", always_non_dropping_1],
        ["to", always_non_dropping_1],
        ["toe", always_non_dropping_1],
        ["tot", always_non_dropping_1],
        ["uijt 't", always_non_dropping_2],
        ["uijt de", always_non_dropping_2],
        ["uijt den", always_non_dropping_2],
        ["uijt te de", always_non_dropping_3],
        ["uijt ten", always_non_dropping_2],
        ["uijt", always_non_dropping_1],
        ["uit 't", always_non_dropping_2],
        ["uit de", always_non_dropping_2],
        ["uit den", always_non_dropping_2],
        ["uit het", always_non_dropping_2],
        ["uit t", always_non_dropping_2],
        ["uit te de", always_non_dropping_3],
        ["uit ten", always_non_dropping_2],
        ["uit", always_non_dropping_1],
        ["unter", always_non_dropping_1],
        ["v", always_non_dropping_1],
        ["v.", always_non_dropping_1],
        ["v.d.", always_non_dropping_1],
        ["van 't", always_non_dropping_2],
        ["van de l", always_non_dropping_3],
        ["van de l'", always_non_dropping_3],
        ["van de", always_non_dropping_2],
        ["van de", always_non_dropping_2],
        ["van den", always_non_dropping_2],
        ["van der", always_non_dropping_2],
        ["van gen", always_non_dropping_2],
        ["van het", always_non_dropping_2],
        ["van la", always_non_dropping_2],
        ["van t", always_non_dropping_2],
        ["van ter", always_non_dropping_2],
        ["van van de", always_non_dropping_3],
        ["van", either_1],
        ["vander", always_non_dropping_1],
        ["vd", always_non_dropping_1],
        ["ver", always_non_dropping_1],
        ["vom und zum", always_dropping_3],
        ["vom", either_1],
        ["von 't", always_non_dropping_2],
        ["von dem", either_2_dropping_best],
        ["von den", either_2_dropping_best],
        ["von der", either_2_dropping_best],
        ["von t", always_non_dropping_2],
        ["von und zu", either_3_dropping_best],
        ["von zu", either_2_dropping_best],
        ["von", either_1_dropping_best],
        ["voor 't", always_non_dropping_2],
        ["voor de", always_non_dropping_2],
        ["voor den", always_non_dropping_2],
        ["voor in 't", always_non_dropping_3],
        ["voor in t", always_non_dropping_3],
        ["voor", always_non_dropping_1],
        ["vor der", either_2_dropping_best],
        ["vor", either_1_dropping_best],
        ["z", always_dropping_1],
        ["ze", always_dropping_1],
        ["zu", either_1_dropping_best],
        ["zum", either_1],
        ["zur", either_1]
      ];
      return PARTICLES;
    }();
    CSL2.parseParticles = function() {
      function splitParticles(nameValue, firstNameFlag, caseOverride) {
        var origNameValue = nameValue;
        nameValue = caseOverride ? nameValue.toLowerCase() : nameValue;
        var particleList = [];
        var rex;
        var hasParticle;
        if (firstNameFlag) {
          nameValue = nameValue.split("").reverse().join("");
          rex = CSL2.PARTICLE_GIVEN_REGEXP;
        } else {
          rex = CSL2.PARTICLE_FAMILY_REGEXP;
        }
        var m2 = nameValue.match(rex);
        while (m2) {
          var m1 = firstNameFlag ? m2[1].split("").reverse().join("") : m2[1];
          var firstChar = m2 ? m1 : false;
          var firstChar = firstChar ? m1.replace(/^[-\'\u02bb\u2019\s]*(.).*$/, "$1") : false;
          hasParticle = firstChar ? firstChar.toUpperCase() !== firstChar : false;
          if (!hasParticle) {
            break;
          }
          if (firstNameFlag) {
            particleList.push(origNameValue.slice(m1.length * -1));
            origNameValue = origNameValue.slice(0, m1.length * -1);
          } else {
            particleList.push(origNameValue.slice(0, m1.length));
            origNameValue = origNameValue.slice(m1.length);
          }
          nameValue = m2[2];
          m2 = nameValue.match(rex);
        }
        if (firstNameFlag) {
          nameValue = nameValue.split("").reverse().join("");
          particleList.reverse();
          for (var i = 1, ilen = particleList.length; i < ilen; i++) {
            if (particleList[i].slice(0, 1) == " ") {
              particleList[i - 1] += " ";
            }
          }
          for (var i = 0, ilen = particleList.length; i < ilen; i++) {
            if (particleList[i].slice(0, 1) == " ") {
              particleList[i] = particleList[i].slice(1);
            }
          }
          nameValue = origNameValue.slice(0, nameValue.length);
        } else {
          nameValue = origNameValue.slice(nameValue.length * -1);
        }
        return [hasParticle, nameValue, particleList];
      }
      function trimLast(str) {
        var lastChar = str.slice(-1);
        str = str.trim();
        if (lastChar === " " && ["'", "\u2019"].indexOf(str.slice(-1)) > -1) {
          str += " ";
        }
        return str;
      }
      function parseSuffix(nameObj) {
        if (!nameObj.suffix && nameObj.given) {
          var m2 = nameObj.given.match(/(\s*,!*\s*)/);
          if (m2) {
            var idx = nameObj.given.indexOf(m2[1]);
            var possible_suffix = nameObj.given.slice(idx + m2[1].length);
            var possible_comma = nameObj.given.slice(idx, idx + m2[1].length).replace(/\s*/g, "");
            if (possible_suffix.replace(/\./g, "") === "et al" && !nameObj["dropping-particle"]) {
              nameObj["dropping-particle"] = possible_suffix;
              nameObj["comma-dropping-particle"] = ",";
            } else {
              if (possible_comma.length === 2) {
                nameObj["comma-suffix"] = true;
              }
              nameObj.suffix = possible_suffix;
            }
            nameObj.given = nameObj.given.slice(0, idx);
          }
        }
      }
      return function(nameObj) {
        var res = splitParticles(nameObj.family);
        var lastNameValue = res[1];
        var lastParticleList = res[2];
        nameObj.family = lastNameValue;
        var nonDroppingParticle = trimLast(lastParticleList.join(""));
        if (nonDroppingParticle) {
          nameObj["non-dropping-particle"] = nonDroppingParticle;
        }
        parseSuffix(nameObj);
        var res = splitParticles(nameObj.given, true);
        var firstNameValue = res[1];
        var firstParticleList = res[2];
        nameObj.given = firstNameValue;
        var droppingParticle = firstParticleList.join("").trim();
        if (droppingParticle) {
          nameObj["dropping-particle"] = droppingParticle;
        }
      };
    }();
    module2.exports = CSL2;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ReferenceMap
});
module.exports = __toCommonJS(main_exports);
var import_path4 = __toESM(require("path"));
var import_obsidian15 = require("obsidian");

// src/types.ts
var RELOAD = {
  HARD: "hard",
  SOFT: "soft",
  VIEW: "view"
};
var DIRECTION = { LEFT: "left", RIGHT: "right" };

// src/constants.ts
var METADATA_COPY_TEMPLATE_ONE = `{{bibtex}}`;
var METADATA_COPY_TEMPLATE_TWO = `**{{title}}**
{{authors}}
*{{journal}}, {{year}}*
**Abstract**
{{abstract}}
{{doi}}
`;
var METADATA_COPY_TEMPLATE_THREE = `[[{{title}}-{{author}} {{year}}]]`;
var METADATA_MODAL_INSERT_TEMPLATE = `{{title}}
{{authors}}
{{journal}}, {{year}}
{{abstract}}
{{doi}}
`;
var METADATA_MODAL_CREATE_TEMPLATE = `{{title}}
{{authors}}
{{journal}}, {{year}}
{{abstract}}
[External Link]({{url}})
{{pdfurl}}
{{doi}}
`;
var DEFAULT_ZOTERO_PORT = "23119";
var DEFAULT_HEADERS = {
  "Content-Type": "application/json",
  "User-Agent": "obsidian/zotero",
  Accept: "application/json",
  Connection: "keep-alive"
};
var DEFAULT_ZOTERO_GROUPS = [{ id: 1, name: "My Library" }];
var DEFAULT_SETTINGS = {
  hideButtonsOnHover: false,
  influentialCount: false,
  showAbstract: false,
  abstractTruncateLength: 160,
  showAuthors: false,
  showJournal: true,
  filterRedundantReferences: false,
  lookupLinkedFiles: false,
  searchTitle: false,
  searchLimit: 3,
  searchFrontMatter: false,
  searchFrontMatterKey: "keywords",
  searchFrontMatterLimit: 3,
  searchCiteKey: true,
  pullFromZotero: true,
  zoteroGroups: DEFAULT_ZOTERO_GROUPS,
  zoteroPort: DEFAULT_ZOTERO_PORT,
  searchCiteKeyPath: "",
  autoUpdateCitekeyFile: true,
  linkCiteKey: true,
  findZoteroCiteKeyFromID: true,
  findCiteKeyFromLinksWithoutPrefix: false,
  citedLimit: 100,
  citingLimit: 100,
  enableReferenceSorting: false,
  sortByReference: "year",
  sortOrderReference: "desc",
  enableIndexSorting: false,
  sortByIndex: "year",
  sortOrderIndex: "desc",
  modalSearchLimit: 10,
  fileNameFormat: "{{title}}-{{author}} {{year}}",
  folder: "",
  modalCreateTemplate: METADATA_MODAL_CREATE_TEMPLATE,
  modalInsertTemplate: METADATA_MODAL_INSERT_TEMPLATE,
  formatMetadataCopyOne: true,
  formatMetadataCopyTwo: true,
  formatMetadataCopyThree: false,
  metadataCopyTemplateOne: METADATA_COPY_TEMPLATE_ONE,
  metadataCopyTemplateTwo: METADATA_COPY_TEMPLATE_TWO,
  metadataCopyTemplateThree: METADATA_COPY_TEMPLATE_THREE,
  metadataCopyOneBatch: false,
  metadataCopyTwoBatch: false,
  metadataCopyThreeBatch: true,
  debugMode: false,
  isLocalExclusive: false,
  cslStyle: "American Psychological Association 7th edition (default)",
  citationStylePath: "",
  cslLocale: "English (US)",
  defaultStyleURL: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl",
  defaultLocale: "en-US"
};
var DEFAULT_LIBRARY = {
  active: false,
  adapter: "",
  libraryData: null,
  mtime: 0
};
var SEMANTIC_FIELDS = [
  "abstract",
  "authors",
  "citationCount",
  "externalIds",
  "fieldsOfStudy",
  "influentialCitationCount",
  "isOpenAccess",
  "openAccessPdf",
  "journal",
  "paperId",
  "publicationDate",
  "publicationTypes",
  "referenceCount",
  "title",
  "url",
  "venue",
  "year",
  "citationStyles"
];
var SEARCH_PARAMETERS = [
  "paperId",
  "externalIds",
  "url",
  "title",
  "abstract",
  "venue",
  "year",
  "referenceCount",
  "citationCount",
  "influentialCitationCount",
  "isOpenAccess",
  "openAccessPdf",
  "fieldsOfStudy",
  "publicationTypes",
  "publicationDate",
  "journal",
  "citationStyles",
  "authors"
];
var SEMANTIC_SCHOLAR_API_URL = "https://api.semanticscholar.org/graph/v1";
var SEMANTIC_SCHOLAR_URL = "https://www.semanticscholar.org";
var COMMON_WORDS = ["a", "able", "about", "across", "after", "all", "almost", "also", "am", "among", "an", "and", "any", "are", "as", "at", "be", "because", "been", "but", "by", "can", "cannot", "could", "dear", "did", "do", "does", "either", "else", "ever", "every", "for", "from", "get", "got", "had", "has", "have", "he", "her", "hers", "him", "his", "how", "however", "i", "if", "in", "into", "is", "it", "its", "just", "least", "let", "like", "likely", "may", "me", "might", "most", "must", "my", "neither", "no", "nor", "not", "of", "off", "often", "on", "only", "or", "other", "our", "own", "rather", "said", "say", "says", "she", "should", "since", "so", "some"];
var PUNCTUATION = ["!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~"];
var NUMBERS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var EXCLUDE_FILE_NAMES = ["LICENSE", "README", "TEST", "UNTITLED"];
var VALID_S2AG_API_URLS = [
  "semanticscholar.org",
  "arxiv.org",
  "aclweb.org",
  "acm.org",
  "biorxiv.org"
];

// src/settings/settings.tsx
var import_react7 = __toESM(require_react());
var import_obsidian6 = require("obsidian");
var import_client = __toESM(require_client());
var import_obsidian7 = require("obsidian");

// src/lang/helpers.ts
var import_obsidian2 = require("obsidian");

// src/utils/functions.ts
var import_obsidian = require("obsidian");
var import_path = __toESM(require("path"));
var import_fs = __toESM(require("fs"));

// src/utils/parser.ts
var import_doi_regex = __toESM(require_doi_regex());
var sanitizeDOI = (dirtyDOI) => {
  const doi_matches = dirtyDOI.match((0, import_doi_regex.default)());
  if (doi_matches) {
    for (const match of doi_matches) {
      return match.replace(/\)+$|\]+$|\*+$|_+$|`+$/, "").replace(/\s+/g, "");
    }
  }
  return dirtyDOI.replace(/\s+/g, "");
};
var getPaperIds = (content) => {
  const modContent = content.replaceAll("](", " ");
  const output = [];
  const arxivRegex = /arXiv:\s*(\d{4}\.\d{4,5})/gi;
  const arXivMatches = modContent.matchAll(arxivRegex);
  const corpusRegex = /CorpusId:\s*(\d{4,})/gi;
  const corpusMatches = modContent.matchAll(corpusRegex);
  const magRegex = /MAG:\s*(\d{4,})/gi;
  const magMatches = modContent.matchAll(magRegex);
  const pmidRegex = /PMID:\s*(\d{4,})/gi;
  const pmidMatches = modContent.matchAll(pmidRegex);
  const pmcidRegex = /PMCID:\s*([a-zA-Z]*\d{4,})/gi;
  const pmcidMatches = modContent.matchAll(pmcidRegex);
  const urlRegex = /URL:\s*(http[s]?:.[^\s]+)/gi;
  const urlMatches = modContent.matchAll(urlRegex);
  const doi_matches = modContent.match((0, import_doi_regex.default)());
  if (arXivMatches) {
    for (const match of arXivMatches) {
      output.push(`arXiv:${match[1]}`);
    }
  }
  if (corpusMatches) {
    for (const match of corpusMatches) {
      output.push(`CorpusId:${match[1]}`);
    }
  }
  if (magMatches) {
    for (const match of magMatches) {
      output.push(`MAG:${match[1]}`);
    }
  }
  if (pmidMatches) {
    for (const match of pmidMatches) {
      output.push(`PMID:${match[1]}`);
    }
  }
  if (pmcidMatches) {
    for (const match of pmcidMatches) {
      output.push(`PMCID:${match[1]}`);
    }
  }
  if (urlMatches) {
    for (const match of urlMatches) {
      if (VALID_S2AG_API_URLS.some((item) => match[1].includes(item))) {
        output.push(`URL:${match[1]}`);
      }
    }
  }
  if (doi_matches) {
    for (const match of doi_matches) {
      output.push(match.replace(/\)+$|\]+$|\*+$|_+$|`+$|\.+$|,+$/, ""));
    }
  }
  return new Set(output.sort());
};
var getCiteKeys = (library, content, prefix) => {
  var _a, _b, _c, _d;
  if (!library)
    return /* @__PURE__ */ new Set();
  let keys = [];
  if (library.adapter === "bibtex") {
    keys = (_b = (_a = library.libraryData) == null ? void 0 : _a.map((item) => prefix + item.key)) != null ? _b : [];
  } else {
    keys = (_d = (_c = library.libraryData) == null ? void 0 : _c.map((item) => prefix + item.id)) != null ? _d : [];
  }
  const pattern = new RegExp(keys.join("|"), "g");
  const matches = content.match(pattern);
  const output = matches == null ? void 0 : matches.map((match) => match.startsWith("@") ? match.slice(1) : match);
  return new Set(output);
};
function extractKeywords(text) {
  if (!text)
    return [];
  const regex = new RegExp(`[${PUNCTUATION.join("")}]`, "gmi");
  const keywords = text.replace(regex, " ").replace(/\s\s+/g, " ").split(" ");
  const result = keywords.filter((element) => {
    if (!COMMON_WORDS.includes(element) && !PUNCTUATION.includes(element) && !NUMBERS.includes(element)) {
      return true;
    }
    return false;
  });
  return result;
}

// src/utils/postprocess.ts
var makeMetaData = (data) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F;
  const paper = data.paper;
  const paperTitle = (_b = (_a = paper.title) == null ? void 0 : _a.trim().replace(/[^\x20-\x7E]/g, "")) != null ? _b : "Could not recover Title";
  const author = (_f = (_e = (_d = (_c = paper.authors) == null ? void 0 : _c[0]) == null ? void 0 : _d.name) == null ? void 0 : _e.trim()) != null ? _f : "Could not recover Author";
  const authors = (_h = (_g = paper.authors) == null ? void 0 : _g.map((author2) => author2.name).join(", ")) != null ? _h : "Could not recover Authors";
  const year = (_j = (_i = paper.year) == null ? void 0 : _i.toString().trim()) != null ? _j : "Could not recover Year";
  const journal = (_m = (_l = (_k = paper.journal) == null ? void 0 : _k.name) == null ? void 0 : _l.trim()) != null ? _m : "Could not recover Journal";
  const volume = (_p = (_o = (_n = paper.journal) == null ? void 0 : _n.volume) == null ? void 0 : _o.trim()) != null ? _p : "Could not recover Volume";
  const pages = (_s = (_r = (_q = paper.journal) == null ? void 0 : _q.pages) == null ? void 0 : _r.trim()) != null ? _s : "Could not recover Pages";
  const abstract = (_u = (_t = paper.abstract) == null ? void 0 : _t.trim()) != null ? _u : "No abstract available";
  const bibTex = (_w = (_v = paper.citationStyles) == null ? void 0 : _v.bibtex) != null ? _w : "No BibTex available";
  const referenceCount = (_x = paper.referenceCount) != null ? _x : 0;
  const citationCount = (_y = paper.citationCount) != null ? _y : 0;
  const influentialCount = (_z = paper.influentialCitationCount) != null ? _z : 0;
  const openAccessPdfUrl = paper.isOpenAccess ? (_B = (_A = paper.openAccessPdf) == null ? void 0 : _A.url) != null ? _B : "" : "";
  const paperURL = (_C = paper.url) != null ? _C : "Could not recover URL";
  const doi = (_E = (_D = paper.externalIds) == null ? void 0 : _D.DOI) != null ? _E : "Could not recover DOI";
  const csl = (_F = paper.csl) != null ? _F : "Could not recover CSL";
  return {
    bibtex: bibTex,
    title: paperTitle,
    author,
    authors,
    year,
    journal,
    volume,
    pages,
    abstract,
    url: paperURL,
    pdfurl: openAccessPdfUrl,
    doi,
    referenceCount,
    citationCount,
    influentialCount,
    csl
  };
};
var templateReplace = (template, data, id2 = "") => {
  var _a;
  if (id2 === "") {
    id2 = data.doi ? data.doi : "";
  }
  return template.replaceAll("{{id}}", id2).replaceAll("{{bibtex}}", data.bibtex).replaceAll("{{title}}", data.title.replace(/[:\\\\/]/g, "")).replaceAll("{{author}}", data.author.replace(/[:\\\\/]/g, "")).replaceAll("{{authors}}", data.authors.replace(/[:\\\\/]/g, "")).replaceAll("{{year}}", data.year.replace(/[:\\\\/]/g, "")).replaceAll("{{journal}}", data.journal.replace(/[:\\\\/]/g, "")).replaceAll("{{volume}}", data.volume.replace(/[:\\\\/]/g, "")).replaceAll("{{pages}}", data.pages.replace(/[:\\\\/]/g, "")).replaceAll("{{abstract}}", data.abstract).replaceAll("{{url}}", data.url).replaceAll("{{pdfurl}}", data.pdfurl).replaceAll("{{doi}}", data.doi).replaceAll("{{csl}}", ((_a = data.csl) == null ? void 0 : _a.toString()) || "Could not recover CSL");
};
var setCiteKeyId = (paperId, citeLibrary) => {
  var _a, _b, _c, _d;
  if (citeLibrary.adapter === "csl-json") {
    const citeKey = (_b = (_a = citeLibrary.libraryData) == null ? void 0 : _a.find((item) => {
      var _a2, _b2, _c2;
      return ((_a2 = item == null ? void 0 : item.DOI) == null ? void 0 : _a2.toLowerCase()) === paperId.toLowerCase() || ((_b2 = item == null ? void 0 : item.DOI) == null ? void 0 : _b2.toLowerCase()) === `https://doi.org/${paperId.toLowerCase()}` || ((_c2 = item == null ? void 0 : item.URL) == null ? void 0 : _c2.toLowerCase()) === paperId.replace("URL:", "").toLowerCase();
    })) == null ? void 0 : _b.id;
    return citeKey ? "@" + citeKey : paperId;
  } else if (citeLibrary.adapter === "bibtex") {
    const citeKey = (_d = (_c = citeLibrary.libraryData) == null ? void 0 : _c.find((item) => {
      var _a2, _b2, _c2, _d2, _e, _f, _g, _h, _i;
      return ((_c2 = (_b2 = (_a2 = item.fields) == null ? void 0 : _a2.doi) == null ? void 0 : _b2[0]) == null ? void 0 : _c2.toLowerCase()) === paperId.toLowerCase() || ((_f = (_e = (_d2 = item.fields) == null ? void 0 : _d2.doi) == null ? void 0 : _e[0]) == null ? void 0 : _f.toLowerCase()) === `https://doi.org/${paperId.toLowerCase()}` || ((_i = (_h = (_g = item.fields) == null ? void 0 : _g.url) == null ? void 0 : _h[0]) == null ? void 0 : _i.toLowerCase()) === paperId.replace("URL:", "").toLowerCase();
    })) == null ? void 0 : _d.key;
    return citeKey ? "@" + citeKey : paperId;
  } else {
    return paperId;
  }
};
var getCiteKeyIds = (citeKeys, citeLibrary) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const citeKeysMap = [];
  let index6 = 1;
  if (citeKeys.size > 0) {
    for (const citeKey of citeKeys) {
      let entry;
      if ((citeLibrary == null ? void 0 : citeLibrary.adapter) === "csl-json") {
        entry = (_a = citeLibrary.libraryData) == null ? void 0 : _a.find((item) => item.id === citeKey);
      } else if ((citeLibrary == null ? void 0 : citeLibrary.adapter) === "bibtex") {
        entry = (_b = citeLibrary.libraryData) == null ? void 0 : _b.find((item) => item.key === citeKey);
      }
      let paperId = "@" + citeKey;
      if (entry == null ? void 0 : entry.DOI) {
        paperId = sanitizeDOI(entry == null ? void 0 : entry.DOI).toLowerCase();
      } else if (VALID_S2AG_API_URLS.some((item) => {
        var _a2;
        return (_a2 = entry == null ? void 0 : entry.URL) == null ? void 0 : _a2.includes(item);
      })) {
        paperId = `URL:${entry == null ? void 0 : entry.URL}`;
      } else if ((_d = (_c = entry == null ? void 0 : entry.fields) == null ? void 0 : _c.doi) == null ? void 0 : _d[0]) {
        paperId = sanitizeDOI((_f = (_e = entry == null ? void 0 : entry.fields) == null ? void 0 : _e.doi) == null ? void 0 : _f[0]).toLowerCase();
      } else if (VALID_S2AG_API_URLS.some((item) => {
        var _a2, _b2, _c2;
        return (_c2 = (_b2 = (_a2 = entry == null ? void 0 : entry.fields) == null ? void 0 : _a2.url) == null ? void 0 : _b2[0]) == null ? void 0 : _c2.includes(item);
      })) {
        paperId = `URL:${(_h = (_g = entry == null ? void 0 : entry.fields) == null ? void 0 : _g.url) == null ? void 0 : _h[0]}`;
      }
      citeKeysMap.push({
        citeKey: "@" + citeKey,
        location: index6,
        paperId
      });
      index6++;
    }
  }
  return citeKeysMap;
};
function fillMissingReference(citeKeyEntry, reference2 = null) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
  let ref;
  if (reference2) {
    ref = reference2;
  } else {
    const paperId = (_a = citeKeyEntry == null ? void 0 : citeKeyEntry.id) != null ? _a : "";
    ref = { paperId };
  }
  if (citeKeyEntry) {
    ref.paperId = (_b = ref.paperId) != null ? _b : citeKeyEntry.id;
    ref.externalIds = (_c = ref.externalIds) != null ? _c : { DOI: citeKeyEntry.DOI };
    ref.url = (_d = ref.url) != null ? _d : citeKeyEntry.URL;
    ref.type = (_e = ref.type) != null ? _e : citeKeyEntry.type;
    ref.title = (_f = ref.title) != null ? _f : citeKeyEntry.title;
    ref.abstract = (_g = ref.abstract) != null ? _g : citeKeyEntry.abstract;
    ref.year = (_i = ref.year) != null ? _i : (_h = citeKeyEntry.issued) == null ? void 0 : _h["date-parts"].flat().join("-");
    ref.journal = (_j = ref.journal) != null ? _j : {
      name: citeKeyEntry["container-title"],
      volume: citeKeyEntry.volume,
      pages: citeKeyEntry.page
    };
    ref.authors = (_l = ref.authors) != null ? _l : (_k = citeKeyEntry.author) == null ? void 0 : _k.map((author) => {
      if (author.literal) {
        return {
          name: author.literal
        };
      }
      return {
        name: author.given + " " + author.family
      };
    });
    ref.directors = (_n = ref.directors) != null ? _n : (_m = citeKeyEntry.director) == null ? void 0 : _m.map((author) => {
      if (author.literal) {
        return {
          name: author.literal
        };
      }
      return {
        name: author.given + " " + author.family
      };
    });
    ref.editors = (_p = ref.editors) != null ? _p : (_o = citeKeyEntry.editor) == null ? void 0 : _o.map((author) => {
      if (author.literal) {
        return {
          name: author.literal
        };
      }
      return {
        name: author.given + " " + author.family
      };
    });
    ref.citationStyles = (_q = ref.citationStyles) != null ? _q : {
      bibtex: citeKeyEntry.key
    };
    ref.csl = (_r = ref == null ? void 0 : ref.csl) != null ? _r : citeKeyEntry == null ? void 0 : citeKeyEntry.csl;
  }
  return ref;
}
function convertToCiteKeyEntry(paper, id2 = "") {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
  const reference2 = paper.paper;
  const bibEntry = paper.bibEntry;
  let issued = { "date-parts": [[0, 0, 0]] };
  if (reference2.publicationDate) {
    const dateParts = reference2.publicationDate.split("-").map(Number);
    if (dateParts.length === 3) {
      issued = {
        "date-parts": [[dateParts[0], dateParts[1], dateParts[2]]]
      };
    }
  }
  const citeKeyEntry = {
    id: id2 ? id2 : reference2.paperId,
    key: bibEntry == null ? void 0 : bibEntry.key,
    type: (_a = bibEntry == null ? void 0 : bibEntry.type) != null ? _a : reference2.type,
    abstract: (_b = bibEntry == null ? void 0 : bibEntry.abstract) != null ? _b : reference2.abstract,
    DOI: (_d = bibEntry == null ? void 0 : bibEntry.DOI) != null ? _d : (_c = reference2.externalIds) == null ? void 0 : _c.DOI,
    fields: bibEntry == null ? void 0 : bibEntry.fields,
    note: bibEntry == null ? void 0 : bibEntry.note,
    page: (_f = bibEntry == null ? void 0 : bibEntry.page) != null ? _f : (_e = reference2.journal) == null ? void 0 : _e.pages,
    title: (_g = reference2.title) != null ? _g : bibEntry == null ? void 0 : bibEntry.title,
    URL: (_h = bibEntry == null ? void 0 : bibEntry.URL) != null ? _h : reference2.url,
    author: (_i = reference2.authors) == null ? void 0 : _i.map((author) => {
      const nameParts = author.name ? author.name.split(" ") : [""];
      return {
        given: nameParts.slice(0, -1).join(" "),
        family: nameParts.slice(-1).join(" ")
      };
    }),
    issued: (_j = bibEntry == null ? void 0 : bibEntry.issued) != null ? _j : issued,
    "container-title": (_k = reference2.journal) == null ? void 0 : _k.name,
    ISSN: bibEntry == null ? void 0 : bibEntry.ISSN,
    issue: bibEntry == null ? void 0 : bibEntry.issue,
    volume: (_m = bibEntry == null ? void 0 : bibEntry.volume) != null ? _m : (_l = reference2.journal) == null ? void 0 : _l.volume,
    language: bibEntry == null ? void 0 : bibEntry.language,
    "title-short": bibEntry == null ? void 0 : bibEntry["title-short"],
    dimensions: bibEntry == null ? void 0 : bibEntry.dimensions,
    source: bibEntry == null ? void 0 : bibEntry.source,
    director: (_n = reference2.directors) == null ? void 0 : _n.map((director) => {
      const nameParts = director.name ? director.name.split(" ") : [""];
      return {
        given: nameParts.slice(0, -1).join(" "),
        family: nameParts.slice(-1).join(" ")
      };
    }),
    genre: bibEntry == null ? void 0 : bibEntry.genre,
    number: bibEntry == null ? void 0 : bibEntry.number,
    publisher: bibEntry == null ? void 0 : bibEntry.publisher,
    license: bibEntry == null ? void 0 : bibEntry.license,
    journalAbbreviation: bibEntry == null ? void 0 : bibEntry.journalAbbreviation,
    "collection-title": bibEntry == null ? void 0 : bibEntry["collection-title"],
    "event-place": bibEntry == null ? void 0 : bibEntry["event-place"],
    ISBN: bibEntry == null ? void 0 : bibEntry.ISBN,
    "publisher-place": bibEntry == null ? void 0 : bibEntry["publisher-place"],
    editor: (_o = reference2.editors) == null ? void 0 : _o.map((editor) => {
      const nameParts = editor.name ? editor.name.split(" ") : [""];
      return {
        given: nameParts.slice(0, -1).join(" "),
        family: nameParts.slice(-1).join(" ")
      };
    }),
    "number-of-pages": bibEntry == null ? void 0 : bibEntry["number-of-pages"]
  };
  return citeKeyEntry;
}
var dataSearch = (data, query) => {
  return data.filter((item) => SEARCH_PARAMETERS.some((parameter) => {
    var _a, _b;
    if (parameter === "authors") {
      return (_a = item.authors) == null ? void 0 : _a.some((author) => {
        var _a2;
        return (_a2 = author.name) == null ? void 0 : _a2.toLowerCase().includes(query.toLowerCase());
      });
    } else {
      return (_b = item[parameter]) == null ? void 0 : _b.toString().toLowerCase().includes(query.toLowerCase());
    }
  }));
};
var dataSort = (data, sortProperty, sortOrder) => {
  return data.sort((a2, b) => {
    const left2 = a2[sortProperty];
    const right2 = b[sortProperty];
    if (sortOrder === "asc") {
      if (left2 === void 0)
        return 1;
      if (right2 === void 0)
        return -1;
      return left2 > right2 ? 1 : -1;
    } else {
      if (left2 === void 0)
        return -1;
      if (right2 === void 0)
        return 1;
      return left2 < right2 ? 1 : -1;
    }
  });
};
var indexSort = (data, sortProperty, sortOrder) => {
  return data.sort((a2, b) => {
    const left2 = a2.paper[sortProperty];
    const right2 = b.paper[sortProperty];
    if (sortOrder === "asc") {
      if (left2 === void 0)
        return 1;
      if (right2 === void 0)
        return -1;
      return left2 > right2 ? 1 : -1;
    } else {
      if (left2 === void 0)
        return -1;
      if (right2 === void 0)
        return 1;
      return left2 < right2 ? 1 : -1;
    }
  });
};

// src/utils/functions.ts
function ensureDir(dir) {
  if (!import_fs.default.existsSync(dir)) {
    import_fs.default.mkdirSync(dir, { recursive: true });
  }
}
function splitString(str, length) {
  if (!str)
    return "";
  const regex = new RegExp("(\\S{" + length + "})", "g");
  return str.replace(regex, "$1 ");
}
var getLinkedFiles = (file, metadataCache) => {
  var _a;
  if (file) {
    const links = (_a = metadataCache.getFileCache(file)) == null ? void 0 : _a.links;
    if (links) {
      return links.map((link) => metadataCache.getFirstLinkpathDest(link.link, ""));
    }
  }
  return [];
};
function getVaultRoot(app2) {
  return app2.vault.adapter.getBasePath();
}
var fragWithHTML = (html) => createFragment((frag) => frag.createDiv().innerHTML = html);
var errorlog = (data) => {
  console.error({ plugin: "Zotero Annotations", ...data });
};
var resolvePath = function(rawPath, app2) {
  const vaultRoot = app2.vault.adapter instanceof import_obsidian.FileSystemAdapter ? app2.vault.adapter.getBasePath() : "/";
  return import_path.default.normalize(import_path.default.resolve(vaultRoot, rawPath));
};
function copyToClipboard(el) {
  require("electron").clipboard.write({
    text: el
  });
  new import_obsidian.Notice("Copied to clipboard");
}
function removeNullReferences(references) {
  return references.filter((element) => element.paper && element.paper.paperId !== null);
}
function makeFileName(metaData, fileNameFormat) {
  let output;
  if (fileNameFormat) {
    output = templateReplace(fileNameFormat, metaData);
  } else {
    output = metaData.title;
  }
  return replaceIllegalFileNameCharactersInString(output) + ".md";
}
function replaceIllegalFileNameCharactersInString(text) {
  return text.replace(/[\\,#%&{}/*<>$":@?.]/g, "").replace(/\s+/g, " ");
}
async function getCanvasContent(fileCache, vault) {
  let content = "";
  const canvasJson = JSON.parse(fileCache);
  const nodes = canvasJson == null ? void 0 : canvasJson.nodes;
  if (nodes) {
    for (const node of nodes) {
      switch (node.type) {
        case "text": {
          content += (node == null ? void 0 : node.text) ? node == null ? void 0 : node.text : "";
          break;
        }
        case "link": {
          content += (node == null ? void 0 : node.url) ? node == null ? void 0 : node.url : "";
          break;
        }
        case "file": {
          if (node.file) {
            try {
              const file = app.vault.getAbstractFileByPath(node.file);
              if (file instanceof import_obsidian.TFile) {
                const temContent = await vault.read(file);
                content += temContent;
              } else {
                content += (node == null ? void 0 : node.file) ? node == null ? void 0 : node.file : "";
              }
            } catch (err) {
              content += "";
            }
          }
          break;
        }
      }
    }
    fileCache += content;
  }
  return fileCache;
}

// src/lang/locale/ar.ts
var ar_default = {};

// src/lang/locale/cz.ts
var cz_default = {};

// src/lang/locale/da.ts
var da_default = {};

// src/lang/locale/de.ts
var de_default = {};

// src/lang/locale/en.ts
var en_default = {
  GENERAL_SETTINGS: "General Settings",
  REFERENCE_MAP: "Reference Map",
  NO_REFERENCES_IN_FILE: "No entries are found in the active document",
  HIDE_SHOW_ABSTRACT: "Show or hide abstract",
  HIDE_SHOW_ABSTRACT_DESC: "Show or hide the abstract.<br><b>Toggle ON:</b> Show abstract<br><b>Toggle OFF:</b> Hide abstract",
  ABSTRACT_TRUNCATE_LENGTH: "Abstract characters truncate length",
  ABSTRACT_TRUNCATE_LENGTH_DESC: "If set to 0, abstract will NOT be truncated (default 160)",
  HIDE_SHOW_AUTHORS: "Show or hide the names of all authors",
  HIDE_SHOW_AUTHORS_DESC: "Show or hide the names of all authors.<br><b>Toggle ON:</b> Show all contributors<br><b>Toggle OFF:</b> Show one contributor",
  HIDE_SHOW_JOURNAL: "Show or hide journal, volume and pages",
  HIDE_SHOW_JOURNAL_DESC: "Show or hide the journal name, volume and pages.<br><b>Toggle ON:</b> Show journal name, volume and pages<br><b>Toggle OFF:</b> Hide journal name, volume and pages",
  HIDE_SHOW_BUTTONS_ON_HOVER: "Show or hide buttons on hover",
  HIDE_SHOW_BUTTONS_ON_HOVER_DESC: "Automatically show and hide buttons<br><b> Toggle ON:</b> Show buttons on hover<br><b> Toggle OFF:</b> Always show buttons",
  HIDE_SHOW_INFLUENTIAL_COUNT: "Show or hide influential citation count",
  HIDE_SHOW_INFLUENTIAL_COUNT_DESC: "Show or Hide the influential citation count.<br><b> Toggle ON:</b> Show influential count<br><b> Toggle OFF:</b> Hide Influential count",
  HIDE_SHOW_INVALID_ITEMS: "Show or hide invalid",
  HIDE_SHOW_INVALID_ITEMS_DESC: "Show or Hide Entries that could not be processed.<br><b> Toggle ON:</b> Show notice about invalid entry<br><b> Toggle OFF:</b> Hide notice about invalid entry",
  HIDE_SHOW_REDUNDANT_REFERENCES: "Show or hide redundant items",
  HIDE_SHOW_REDUNDANT_REFERENCES_DESC: "Show or Hide references with <b>no cited/citation</b> count<br><b> Toggle ON:</b> Redundant entries will be hidden<br><b> Toggle OFF:</b> Redundant entries will be listed",
  LOOKUP_ENTRIES_LINKED_FILES: "Lookup entries in linked files",
  LOOKUP_ENTRIES_LINKED_FILES_DESC: "Include entries found in the linked files(wiki links).<br>Enabling will also hide the location indicators.<br><b>Toggle ON:</b> Enable lookup in linked files<br><b>Toggle OFF:</b> Disable lookup in linked files",
  REMOVE_DUPLICATE_IDS: "Remove duplicate cards",
  REMOVE_DUPLICATE_IDS_DESC: "Remove duplicated cards from the reference map sidebar.<br><b>Toggle ON:</b> Remove duplicate cards<br><b>Toggle OFF:</b> Keep duplicate cards",
  SEARCH_TITLE: "Get using file name",
  SEARCH_TITLE_DESC: "Find references using the markdown file name in addition to entries in the file.<br><b>Toggle ON:</b> Get using file name is enabled<br><b>Toggle OFF:</b> Get using file name disabled",
  SEARCH_LIMIT: "Get limit",
  SEARCH_LIMIT_DESC: "Number of entries shown in the reference map when <b>Get Using File Name</b> is enabled.",
  SEARCH_FRONT_MATTER: "Get using frontmatter",
  SEARCH_FRONT_MATTER_DESC: "Find references also using the frontmatter of the markdown note file in addition to reference IDs.<br><b>Toggle ON:</b> Enable search using front matter<br><b>Toggle OFF:</b> Disable search using front matter",
  SEARCH_FRONT_MATTER_LIMIT: "Get limit",
  SEARCH_FRONT_MATTER_LIMIT_DESC: "Number of entries shown in the reference map when <b>Get Using Frontmatter</b> is enabled.",
  SEARCH_FRONT_MATTER_KEY: "Key in the frontmatter",
  SEARCH_FRONT_MATTER_KEY_DESC: "Keyword specified here will be used to search for references.",
  SEARCH_CITEKEY: "Get references using <code>citeKey</code>",
  SEARCH_CITEKEY_DESC: "Find references using the <code>@citekey</code> included in the markdown file in addition to reference IDs.<br>Make sure to enable <b>Pull bibliography from Zotero</b> option OR give a <b>valid library file</b><br><b>Toggle ON:</b> Enable citekey detection<br><b>Toggle OFF:</b> Disable citekey detection",
  SEARCH_CITEKEY_PATH: "Library file path",
  SEARCH_CITEKEY_PATH_DESC: "Path to your CSL JSON file with <code>.json</code> extension or BibTex file with <code>.bib</code> extension.<br>Usually exported from reference manager such as Zotero or BibDesk.<br>Path must be relative to the vault's root. This option is redundant if <Code>Pull Bibliography From Zotero</code> is enabled.<br>",
  CITEKEY_PATH_ERROR: "The citation export file can't be found. Please check the path.<br>OR set <b>Pull Bibliography From Zotero</b> to TRUE and select a library.",
  AUTO_DETECT_UPDATE_TO_CITEKEY: "Auto detect updates to library",
  AUTO_DETECT_UPDATE_TO_CITEKEY_DESC: "Auto detect changes to the Library and update the reference map.<br>You can also use <code>Refresh Map</code> in the command palette to manually do the same<br><b>Toggle ON:</b> Enable auto detection changes in the Library<br><b>Toggle OFF:</b> Disable auto detection changes in the Library",
  ZOTERO_PULL: "Pull bibliography from Zotero",
  ZOTERO_PULL_DESC: "Pull data from Zotero. Zotero must have Better BibTex plugin.",
  CANNOT_CONNECT_TO_ZOTERO: "Cannot connect to Zotero",
  CANNOT_CONNECT_TO_ZOTERO_DESC: "Start Zotero and try again.",
  ZOTERO_PORT: "Zotero port",
  ZOTERO_PORT_DESC: "Use 23119 or specify a custom port if you have changed Zotero's default.",
  ZOTERO_LIBRARY_ID: "Select libraries to include",
  FIND_CITEKEY_WITHOUT_PREFIX: "Process citeKeys without <code>@</code> prefix",
  FIND_CITEKEY_WITHOUT_PREFIX_DESC: "Find and process citekey WITHOUT <code>@</code> prefix.<br>This <b>does NOT disable</b> citekey detection with <code>@</code> prefix.<br><b>Toggle ON:</b> Find citekey without <code>@</code> prefix<br><b>Toggle OFF:</b> Do not find citekey without <code>@</code> prefix",
  CITEKEY_ZOTERO_LINK: "Show or hide link to view item in Zotero library",
  CITEKEY_ZOTERO_LINK_DESC: "Show or Hide the link (as <code>@citekey</code>) to open item in zotero.<br><b>Toggle ON:</b> Show link in the index card<br><b>Toggle OFF:</b> Hide link in the index card",
  FIND_ZOTERO_CITEKEY_FROM_ID: "Find citeKey from ID entry",
  FIND_ZOTERO_CITEKEY_FROM_ID_DESC: "Attempt to find citekey from ID(DOI, URL,et,.).<br> If found the <code>{{id}}</code> metadata field is substituted by <code>{{citekey}}</code>.<br><b>Toggle ON:</b> Find citekey from ID and set ID to citekey<br><b>Toggle OFF:</b> Do not lookup citekey from ID",
  ENABLE_SORTING_REFERENCE_CARDS: "Sort sidebar citing and cited cards",
  ENABLE_SORTING_REFERENCE_CARDS_DESC: "Enable or Disable sorting of reference/citation cards. <br><b>Toggle ON:</b> Enable sorting<br><b>Toggle OFF:</b> Default sorting, as it is retrieved from database",
  ENABLE_SORTING_INDEX_CARDS: "Sort sidebar index cards",
  ENABLE_SORTING_INDEX_CARDS_DESC: "Enable or Disable sorting of index cards.<br><b>Toggle ON:</b> Enable sorting of the Index cards<br><b>Toggle OFF:</b> Default sorting, as appear in the markdown",
  SORT_BY: "Sort By",
  CITED_MAX_LIMIT: "Maximum number of cited papers",
  CITED_MAX_LIMIT_DESC: "Maximum number of cited papers to show for each index card.<br> Default is set to 100. Maximum is 1000.<br><b>Warning:</b> Increasing this value will increase the loading time of the literature graph.",
  CITING_MAX_LIMIT: "Maximum number of citing papers",
  CITING_MAX_LIMIT_DESC: "Maximum number of citing papers to show for each index card.<br> Default is set to 100. Maximum is 1000.<br><b>Warning:</b> Increasing this value will increase the loading time of the literature graph.",
  SORT_BY_YEAR: "Year",
  SORT_BY_CITATION_COUNT: "Citation count",
  SORT_BY_REFERENCE_COUNT: "Reference count",
  SORT_BY_INFLUENTIAL_CITATION_COUNT: "Influential citation count",
  SORT_ORDER: "Sort order",
  SORT_ORDER_ASC: "Ascending",
  SORT_ORDER_DESC: "Descending",
  FORMAT_METADATA_COPY_ONE: `Metadata button one`,
  FORMAT_METADATA_COPY_ONE_DESC: "Change the format of the metadata to be copied to the clipboard",
  FORMAT_METADATA_COPY_ONE_ON: "Copy to clipboard button is shown",
  FORMAT_METADATA_COPY_ONE_OFF: "Copy to clipboard button is hidden",
  FORMAT_METADATA_COPY_TWO: `Metadata button two`,
  FORMAT_METADATA_COPY_TWO_DESC: "Change the format of the metadata to be copied to the clipboard",
  FORMAT_METADATA_COPY_TWO_ON: "Copy to clipboard button is shown",
  FORMAT_METADATA_COPY_TWO_OFF: "Copy to clipboard button is hidden",
  FORMAT_METADATA_COPY_THREE: `Metadata button three`,
  FORMAT_METADATA_COPY_THREE_DESC: "Change the format of the metadata to be copied to the clipboard",
  FORMAT_METADATA_COPY_THREE_ON: "Copy to clipboard button is shown",
  FORMAT_METADATA_COPY_THREE_OFF: "Copy to clipboard button is hidden",
  METADATA_COPY_TEMPLATE_ONE: `Metadata template one`,
  METADATA_COPY_TEMPLATE_ONE_DESC: "Template of the metadata to be copied to the clipboard. Valid variables are {{id}}, {{title}}, {{author}}, {{authors}}, {{journal}}, {{volume}}, {{pages}}, {{year}}, {{abstract}}, {{url}}, {{pdfurl}}, {{doi}}, {{bibtex}}, {{csl}}",
  METADATA_COPY_TEMPLATE_TWO: `Metadata template two`,
  METADATA_COPY_TEMPLATE_TWO_DESC: "Template of the metadata to be copied to the clipboard. Valid variables are {{id}}, {{title}}, {{author}}, {{authors}}, {{journal}}, {{volume}}, {{pages}}, {{year}}, {{abstract}}, {{url}}, {{pdfurl}}, {{doi}}, {{bibtex}}, {{csl}}",
  METADATA_COPY_TEMPLATE_THREE: `Metadata template three`,
  METADATA_COPY_TEMPLATE_THREE_DESC: "Template of the metadata to be copied to the clipboard.<br>Valid variables are {{id}}, {{title}}, {{author}}, {{authors}}, {{journal}}, {{volume}}, {{pages}}, {{year}}, {{abstract}}, {{url}}, {{pdfurl}}, {{doi}}, {{bibtex}}, {{csl}}",
  METADATA_COPY_ONE_BATCH: `Metadata batch one`,
  METADATA_COPY_ONE_BATCH_DESC: "Copy metadata for all the references(cited papers) to the clipboard. This option only applies to index card button and template variable {{id}} will return empty",
  METADATA_COPY_ONE_BATCH_ON: "Copy metadata for all references",
  METADATA_COPY_ONE_BATCH_OFF: "Copy metadata for the individual index/reference card",
  METADATA_COPY_TWO_BATCH: `Metadata batch two`,
  METADATA_COPY_TWO_BATCH_DESC: "Copy metadata for all the references(cited papers) to the clipboard. This option only applies to index card button and template variable {{id}} will return empty",
  METADATA_COPY_TWO_BATCH_ON: "Copy metadata for all references",
  METADATA_COPY_TWO_BATCH_OFF: "Copy metadata for the individual index/reference card",
  METADATA_COPY_THREE_BATCH: `Metadata batch three`,
  METADATA_COPY_THREE_BATCH_DESC: "Copy metadata for all the references(cited papers) to the clipboard. This option only applies to index card button and template variable {{id}} will return empty",
  METADATA_COPY_THREE_BATCH_ON: "Copy metadata for all references",
  METADATA_COPY_THREE_BATCH_OFF: "Copy metadata for the individual index/reference card",
  MODAL_SEARCH_LIMIT: "Search limit",
  MODAL_SEARCH_LIMIT_DESC: "Number of references to show in the modal search. Default is set to 10. Maximum is 100.",
  MODAL_SEARCH_CREATE_FOLDER: "Folder location",
  MODAL_SEARCH_CREATE_FOLDER_DESC: "Folder location to create the new reference. Relative to the vault root. If left blank, the new reference will be created in the vault root.",
  MODAL_SEARCH_CREATE_FILE_FORMAT: "File name format",
  MODAL_SEARCH_CREATE_FILE_FORMAT_DESC: "File name format to create the new reference. <br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>, <code>{{csl}}</code>",
  MODAL_SEARCH_CREATE_FILE_TEMPLATE: "Template for new note",
  MODAL_SEARCH_CREATE_FILE_TEMPLATE_DESC: "Template to create the new reference markdown file.<br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>, <code>{{csl}}</code>",
  MODAL_SEARCH_INSERT_TEMPLATE: "Template for inserting to current note",
  MODAL_SEARCH_INSERT_TEMPLATE_DESC: "Template to insert the reference metadata in the current note at the cursor position.<br>Valid variables are <code>{{id}}</code>, <code>{{title}}</code>, <code>{{author}}</code>, <code>{{authors}}</code>, <code>{{journal}}</code>, <code>{{volume}}</code>, <code>{{pages}}</code>, <code>{{year}}</code>, <code>{{abstract}}</code>, <code>{{url}}</code>, <code>{{pdfurl}}</code>, <code>{{doi}}</code>, <code>{{bibtex}}</code>, <code>{{csl}}</code>",
  DEBUG_MODE: "Debug mode",
  DEBUG_MODE_DESC: "Enable debug mode to see more information in the console. This is useful for debugging and <b>reporting issues</b>.<br>Enabling this will also reset all the reference data caches of Reference map.<br><b>Toggle ON:</b> Enable debug mode <br><b>Toggle OFF:</b> Disable debug mode",
  SEE_DOCUMENTATION: "See documentation",
  SEE_DOCUMENTATION_DESC: "For more information regarding the plugin see the <a href='https://github.com/anoopkcn/obsidian-reference-map/wiki'>Reference Map Wiki</a>.",
  FORMAT_CSL: "CSL format template variable",
  FORMAT_CSL_DESC: "Format the citation according to a CSL schema. This will add a new template variable {{csl}} to be used in buttons and templates.<b>Note: {{csl}} variable is only available for index cards</b>"
};

// src/lang/locale/en-gb.ts
var en_gb_default = {};

// src/lang/locale/es.ts
var es_default = {};

// src/lang/locale/fr.ts
var fr_default = {};

// src/lang/locale/hi.ts
var hi_default = {};

// src/lang/locale/id.ts
var id_default = {};

// src/lang/locale/it.ts
var it_default = {};

// src/lang/locale/ja.ts
var ja_default = {};

// src/lang/locale/ko.ts
var ko_default = {};

// src/lang/locale/nl.ts
var nl_default = {};

// src/lang/locale/no.ts
var no_default = {};

// src/lang/locale/pl.ts
var pl_default = {};

// src/lang/locale/pt.ts
var pt_default = {};

// src/lang/locale/pt-br.ts
var pt_br_default = {};

// src/lang/locale/ro.ts
var ro_default = {};

// src/lang/locale/ru.ts
var ru_default = {};

// src/lang/locale/tr.ts
var tr_default = {};

// src/lang/locale/zh-cn.ts
var zh_cn_default = {};

// src/lang/locale/zh-tw.ts
var zh_tw_default = {};

// src/lang/helpers.ts
var localeMap = {
  ar: ar_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  tr: tr_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian2.moment.locale()];
function t2(str) {
  if (!locale) {
    errorlog({
      where: "helpers.t",
      message: "Error: Zotero Annotations locale not found",
      locale: import_obsidian2.moment.locale()
    });
  }
  return locale && locale[str] || en_default[str];
}

// src/settings/ZoteroPullSettings.tsx
var import_react2 = __toESM(require_react());

// src/utils/zotero.ts
var import_fs2 = __toESM(require("fs"));
var import_http = __toESM(require("http"));
var import_path2 = __toESM(require("path"));
function getGlobal() {
  if (window == null ? void 0 : window.activeWindow)
    return activeWindow;
  if (window)
    return window;
  return global;
}
async function isZoteroRunning(port = DEFAULT_ZOTERO_PORT) {
  const options = {
    hostname: "127.0.0.1",
    port,
    path: "/better-bibtex/cayw?probe=true",
    method: "GET"
  };
  const res = await Promise.race([
    new Promise((resolve, reject) => {
      const req = import_http.default.request(options, (res2) => {
        let data = "";
        res2.on("data", (chunk) => data += chunk);
        res2.on("end", () => resolve(data));
      });
      req.on("error", (error) => {
        resolve(null);
      });
      req.end();
    }),
    new Promise((resolve) => {
      getGlobal().setTimeout(() => {
        resolve(null);
      }, 150);
    })
  ]);
  return (res == null ? void 0 : res.toString()) === "ready";
}
function applyGroupID(list, groupId) {
  return list.map((item) => {
    item.groupID = groupId;
    return item;
  });
}
async function getZBib(port = DEFAULT_ZOTERO_PORT, cacheDir, groupId, loadCached) {
  const isRunning = await isZoteroRunning(port);
  const cached = import_path2.default.join(cacheDir, `zotero-library-${groupId}.json`);
  ensureDir(cacheDir);
  if (loadCached || !isRunning) {
    if (import_fs2.default.existsSync(cached)) {
      return applyGroupID(JSON.parse(import_fs2.default.readFileSync(cached).toString()), groupId);
    }
    if (!isRunning) {
      return null;
    }
  }
  const options = {
    hostname: "127.0.0.1",
    port,
    path: `/better-bibtex/export/library?/${groupId}/library.json`,
    method: "GET"
  };
  const req = import_http.default.request(options);
  req.end();
  const bib = await new Promise((resolve, reject) => {
    req.on("response", (res) => {
      let data = "";
      res.on("data", (chunk) => data += chunk);
      res.on("end", () => resolve(data));
    });
    req.on("error", reject);
  });
  const str = bib.toString();
  import_fs2.default.writeFileSync(cached, str);
  return applyGroupID(JSON.parse(str), groupId);
}
async function getZUserGroups(port = DEFAULT_ZOTERO_PORT) {
  if (!await isZoteroRunning(port))
    return [];
  return new Promise((res, rej) => {
    const body = JSON.stringify({
      jsonrpc: "2.0",
      method: "user.groups"
    });
    const postRequest = (0, import_http.request)({
      host: "127.0.0.1",
      port,
      path: "/better-bibtex/json-rpc",
      method: "POST",
      headers: {
        ...DEFAULT_HEADERS,
        "Content-Length": Buffer.byteLength(body)
      }
    }, (result) => {
      let output = "";
      result.setEncoding("utf8");
      result.on("data", (chunk) => output += chunk);
      result.on("error", (e) => rej(`Error connecting to Zotero: ${e}`));
      result.on("close", () => {
        rej(new Error("Error: cannot connect to Zotero"));
      });
      result.on("end", () => {
        try {
          res(JSON.parse(output).result);
        } catch (e) {
          rej(e);
        }
      });
    });
    postRequest.write(body);
    postRequest.end();
  });
}

// src/settings/SettingItem.tsx
var import_react = __toESM(require_react());
function SettingItemInfo({ name, description, options, icon }) {
  return /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-info"
  }, /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-name"
  }, icon, " ", name), /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-description"
  }, description), options && /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-description"
  }, /* @__PURE__ */ import_react.default.createElement("b", null, "Toggle ON: "), options.ON, /* @__PURE__ */ import_react.default.createElement("br", null), /* @__PURE__ */ import_react.default.createElement("b", null, "Toggle OFF: "), options.OFF));
}
function SettingItem({
  name,
  description,
  icon,
  options,
  children: children2
}) {
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(SettingItemInfo, {
    name,
    description,
    options,
    icon
  }), /* @__PURE__ */ import_react.default.createElement("div", {
    className: "setting-item-control"
  }, children2));
}

// src/settings/ZoteroPullSettings.tsx
function validateGroups(plugin, groups) {
  if (groups.length === 0) {
    return false;
  }
  const validated = [];
  plugin.settings.zoteroGroups.forEach((g) => {
    if (groups.some((g2) => g2.id === g.id)) {
      validated.push(g);
    }
  });
  plugin.settings.zoteroGroups = validated;
  plugin.saveSettings();
  return true;
}
function ZoteroPullSetting({ plugin }) {
  var _a;
  const [isEnabled, setIsEnabled] = import_react2.default.useState(!!plugin.settings.pullFromZotero);
  const [possibleGroups, setPossibleGroups] = import_react2.default.useState(plugin.settings.zoteroGroups);
  const [activeGroups, setActiveGroups] = import_react2.default.useState(plugin.settings.zoteroGroups);
  const [connected, setConnected] = import_react2.default.useState(false);
  const pullUserGroups = async () => {
    var _a2;
    try {
      const groups = await getZUserGroups((_a2 = plugin.settings.zoteroPort) != null ? _a2 : DEFAULT_ZOTERO_PORT);
      const isvalid = validateGroups(plugin, groups);
      if (!isvalid) {
        return;
      } else {
        setPossibleGroups(groups);
        setConnected(true);
      }
    } catch (e) {
      setConnected(false);
    }
  };
  import_react2.default.useEffect(() => {
    pullUserGroups();
  }, []);
  return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t2("ZOTERO_PULL"),
    description: t2("ZOTERO_PULL_DESC")
  }, /* @__PURE__ */ import_react2.default.createElement("div", {
    onClick: () => {
      setIsEnabled((cur) => {
        plugin.settings.pullFromZotero = !cur;
        if (connected && activeGroups.length == 0) {
          const myLibrary = possibleGroups.find((g) => g.id === 1);
          if (myLibrary) {
            activeGroups.push(myLibrary);
            plugin.settings.zoteroGroups = activeGroups;
            setActiveGroups([...activeGroups]);
          }
        }
        plugin.saveSettings().then(() => {
          var _a2;
          plugin.referenceMapData.reinit(true);
          (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
        });
        return !cur;
      });
    },
    className: `checkbox-container${isEnabled ? " is-enabled" : ""}`
  }))), !connected && /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item"
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t2("CANNOT_CONNECT_TO_ZOTERO"),
    description: t2("CANNOT_CONNECT_TO_ZOTERO_DESC")
  }, /* @__PURE__ */ import_react2.default.createElement("button", {
    onClick: pullUserGroups,
    className: "mod-cta"
  }, "Retry"))), isEnabled && connected && /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item"
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t2("ZOTERO_PORT"),
    description: t2("ZOTERO_PORT_DESC")
  }, /* @__PURE__ */ import_react2.default.createElement("input", {
    onChange: (e) => {
      var _a2;
      plugin.settings.zoteroPort = e.target.value;
      plugin.saveSettings();
      (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
    },
    type: "text",
    spellCheck: false,
    defaultValue: (_a = plugin.settings.zoteroPort) != null ? _a : DEFAULT_ZOTERO_PORT
  }))), /* @__PURE__ */ import_react2.default.createElement("div", {
    className: "setting-item orm-setting-item-wrapper"
  }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
    name: t2("ZOTERO_LIBRARY_ID")
  }), possibleGroups.map((g) => {
    const isEnabled2 = activeGroups.some((g2) => g2.id === g.id);
    return /* @__PURE__ */ import_react2.default.createElement("div", {
      key: g.id,
      className: "orm-group-toggle"
    }, /* @__PURE__ */ import_react2.default.createElement(SettingItem, {
      description: g.name
    }, /* @__PURE__ */ import_react2.default.createElement("div", {
      onClick: () => {
        if (isEnabled2) {
          const next = activeGroups.filter((g2) => g2.id !== g.id);
          plugin.settings.zoteroGroups = next;
          setActiveGroups(next);
        } else {
          activeGroups.push(g);
          plugin.settings.zoteroGroups = activeGroups;
          setActiveGroups([...activeGroups]);
        }
        plugin.saveSettings().then(() => {
          var _a2;
          plugin.referenceMapData.reinit(true);
          (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
        });
      },
      className: `checkbox-container${isEnabled2 ? " is-enabled" : ""}`
    })));
  }))));
}

// src/settings/ButtonSettings.tsx
var import_react6 = __toESM(require_react());

// src/icons.tsx
var import_react5 = __toESM(require_react());
var import_obsidian3 = require("obsidian");

// node_modules/.pnpm/react-icons@4.12.0_react@18.2.0/node_modules/react-icons/lib/esm/iconBase.js
var import_react4 = __toESM(require_react());

// node_modules/.pnpm/react-icons@4.12.0_react@18.2.0/node_modules/react-icons/lib/esm/iconContext.js
var import_react3 = __toESM(require_react());
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = import_react3.default.createContext && import_react3.default.createContext(DefaultContext);

// node_modules/.pnpm/react-icons@4.12.0_react@18.2.0/node_modules/react-icons/lib/esm/iconBase.js
var __assign = function() {
  __assign = Object.assign || function(t3) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t3[p] = s[p];
    }
    return t3;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t3 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t3[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t3[p[i]] = s[p[i]];
    }
  return t3;
};
function Tree2Element(tree) {
  return tree && tree.map(function(node, i) {
    return import_react4.default.createElement(node.tag, __assign({
      key: i
    }, node.attr), Tree2Element(node.child));
  });
}
function GenIcon(data) {
  return function(props) {
    return import_react4.default.createElement(IconBase, __assign({
      attr: __assign({}, data.attr)
    }, props), Tree2Element(data.child));
  };
}
function IconBase(props) {
  var elem = function(conf) {
    var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
    var computedSize = size || conf.size || "1em";
    var className;
    if (conf.className)
      className = conf.className;
    if (props.className)
      className = (className ? className + " " : "") + props.className;
    return import_react4.default.createElement("svg", __assign({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className,
      style: __assign(__assign({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && import_react4.default.createElement("title", null, title), props.children);
  };
  return IconContext !== void 0 ? import_react4.default.createElement(IconContext.Consumer, null, function(conf) {
    return elem(conf);
  }) : elem(DefaultContext);
}

// node_modules/.pnpm/react-icons@4.12.0_react@18.2.0/node_modules/react-icons/bs/index.esm.js
function BsSearch(props) {
  return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" } }] })(props);
}

// node_modules/.pnpm/react-icons@4.12.0_react@18.2.0/node_modules/react-icons/si/index.esm.js
function SiOpenaccess(props) {
  return GenIcon({ "tag": "svg", "attr": { "role": "img", "viewBox": "0 0 24 24" }, "child": [{ "tag": "title", "attr": {}, "child": [] }, { "tag": "path", "attr": { "d": "M18.971 13.486a7.56 7.56 0 00-.54-1.043V6.415a6.375 6.375 0 00-1.88-4.535A6.374 6.374 0 0012.017 0h-.002a6.374 6.374 0 00-4.536 1.878 6.375 6.375 0 00-1.88 4.537v.877h2.57v-.877c0-1.026.4-1.992 1.127-2.72a3.822 3.822 0 012.72-1.125 3.852 3.852 0 013.847 3.845v3.508A7.52 7.52 0 0012 8.865a7.54 7.54 0 00-5.35 2.216 7.54 7.54 0 00-2.216 5.35 7.54 7.54 0 002.215 5.35A7.54 7.54 0 0012 24a7.54 7.54 0 005.35-2.216 7.54 7.54 0 002.216-5.35c0-1.021-.2-2.012-.595-2.946zM12 21.428a5.003 5.003 0 01-4.997-4.996A5.003 5.003 0 0112 11.435a5.002 5.002 0 014.997 4.997A5.002 5.002 0 0112 21.428zm2.145-4.973a2.12 2.12 0 11-4.24 0 2.12 2.12 0 014.24 0z" } }] })(props);
}

// node_modules/.pnpm/react-icons@4.12.0_react@18.2.0/node_modules/react-icons/lu/index.esm.js
function LuClipboardCopy(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "rect", "attr": { "width": "8", "height": "4", "x": "8", "y": "2", "rx": "1", "ry": "1" } }, { "tag": "path", "attr": { "d": "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2" } }, { "tag": "path", "attr": { "d": "M16 4h2a2 2 0 0 1 2 2v4" } }, { "tag": "path", "attr": { "d": "M21 14H11" } }, { "tag": "path", "attr": { "d": "m15 10-4 4 4 4" } }] })(props);
}
function LuClipboardList(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "rect", "attr": { "width": "8", "height": "4", "x": "8", "y": "2", "rx": "1", "ry": "1" } }, { "tag": "path", "attr": { "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" } }, { "tag": "path", "attr": { "d": "M12 11h4" } }, { "tag": "path", "attr": { "d": "M12 16h4" } }, { "tag": "path", "attr": { "d": "M8 11h.01" } }, { "tag": "path", "attr": { "d": "M8 16h.01" } }] })(props);
}
function LuClipboard(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "rect", "attr": { "width": "8", "height": "4", "x": "8", "y": "2", "rx": "1", "ry": "1" } }, { "tag": "path", "attr": { "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" } }] })(props);
}
function LuCopy(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "rect", "attr": { "width": "14", "height": "14", "x": "8", "y": "8", "rx": "2", "ry": "2" } }, { "tag": "path", "attr": { "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" } }] })(props);
}

// src/icons.tsx
var IconSize = 16;
var SearchIcon = () => /* @__PURE__ */ import_react5.default.createElement(BsSearch, {
  size: IconSize
});
var OpenAccessIcon = () => /* @__PURE__ */ import_react5.default.createElement(SiOpenaccess, {
  size: IconSize
});
var CopyIconOne = () => /* @__PURE__ */ import_react5.default.createElement(LuClipboard, {
  size: IconSize
});
var CopyIconTwo = () => /* @__PURE__ */ import_react5.default.createElement(LuClipboardCopy, {
  size: IconSize
});
var CopyIconThree = () => /* @__PURE__ */ import_react5.default.createElement(LuClipboardList, {
  size: IconSize
});
var CopyIcon = () => /* @__PURE__ */ import_react5.default.createElement(LuCopy, {
  size: IconSize
});
function addIcons() {
  const width = 96;
  const height = 96;
  (0, import_obsidian3.addIcon)("ReferenceMapIconScroll", `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10 17v2a2 2 0 0 1-2 2v0a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v3h3"></path><path d="M22 17v2a2 2 0 0 1-2 2H8"></path><path d="M19 17V5a2 2 0 0 0-2-2H4"></path><path d="M22 17H10"></path></svg>`);
  (0, import_obsidian3.addIcon)("ReferenceMapGraphIcon", `<svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="graph-icon" width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg"><line x1="6" x2="6" y1="3" y2="15"></line><circle cx="18" cy="6" r="3"></circle><circle cx="6" cy="18" r="3"></circle><path d="M18 9a9 9 0 0 1-9 9"></path></svg>
		`);
}

// src/settings/ButtonSettings.tsx
function ButtonSettings({ plugin }) {
  var _a, _b, _c;
  const [isButtonOne, setButtonOne] = import_react6.default.useState(!!plugin.settings.formatMetadataCopyOne);
  const [isButtonOneBatch, setButtonOneBatch] = import_react6.default.useState(!!plugin.settings.metadataCopyOneBatch);
  const [isButtonTwo, setButtonTwo] = import_react6.default.useState(!!plugin.settings.formatMetadataCopyTwo);
  const [isButtonTwoBatch, setButtonTwoBatch] = import_react6.default.useState(!!plugin.settings.metadataCopyTwoBatch);
  const [isButtonThree, setButtonThree] = import_react6.default.useState(!!plugin.settings.formatMetadataCopyThree);
  const [isButtonThreeBatch, setButtonThreeBatch] = import_react6.default.useState(!!plugin.settings.metadataCopyThreeBatch);
  return /* @__PURE__ */ import_react6.default.createElement(import_react6.default.Fragment, null, /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("FORMAT_METADATA_COPY_ONE"),
    description: t2("FORMAT_METADATA_COPY_ONE_DESC"),
    options: {
      ON: t2("FORMAT_METADATA_COPY_ONE_ON"),
      OFF: t2("FORMAT_METADATA_COPY_ONE_OFF")
    },
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconOne, null)
  }, /* @__PURE__ */ import_react6.default.createElement("div", {
    onClick: () => {
      setButtonOne((cur) => {
        plugin.settings.formatMetadataCopyOne = !cur;
        plugin.saveSettings().then(() => {
          var _a2;
          plugin.referenceMapData.reinit(true);
          (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
        });
        return !cur;
      });
    },
    className: `checkbox-container${isButtonOne ? " is-enabled" : ""}`
  }))), isButtonOne && /* @__PURE__ */ import_react6.default.createElement(import_react6.default.Fragment, null, /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item"
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("METADATA_COPY_TEMPLATE_ONE"),
    description: t2("METADATA_COPY_TEMPLATE_ONE_DESC"),
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconOne, null)
  }, /* @__PURE__ */ import_react6.default.createElement("textarea", {
    style: { minWidth: "200px", maxWidth: "500px", minHeight: "100px" },
    onBlur: (e) => {
      var _a2;
      plugin.settings.metadataCopyTemplateOne = e.target.value;
      plugin.saveSettings();
      (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.VIEW);
    },
    spellCheck: false,
    defaultValue: (_a = plugin.settings.metadataCopyTemplateOne) != null ? _a : METADATA_COPY_TEMPLATE_ONE
  }))), /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("METADATA_COPY_ONE_BATCH"),
    description: t2("METADATA_COPY_ONE_BATCH_DESC"),
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconOne, null),
    options: {
      ON: t2("METADATA_COPY_ONE_BATCH_ON"),
      OFF: t2("METADATA_COPY_ONE_BATCH_OFF")
    }
  }, /* @__PURE__ */ import_react6.default.createElement("div", {
    onClick: () => {
      if (isButtonOne) {
        setButtonOneBatch((cur) => {
          plugin.settings.metadataCopyOneBatch = !cur;
          plugin.saveSettings().then(() => {
            var _a2;
            plugin.referenceMapData.reinit(true);
            (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
          });
          return !cur;
        });
      }
    },
    className: `checkbox-container${isButtonOneBatch ? " is-enabled" : ""}`
  })))), /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("FORMAT_METADATA_COPY_TWO"),
    description: t2("FORMAT_METADATA_COPY_TWO_DESC"),
    options: {
      ON: t2("FORMAT_METADATA_COPY_TWO_ON"),
      OFF: t2("FORMAT_METADATA_COPY_TWO_OFF")
    },
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconTwo, null)
  }, /* @__PURE__ */ import_react6.default.createElement("div", {
    onClick: () => {
      setButtonTwo((cur) => {
        plugin.settings.formatMetadataCopyTwo = !cur;
        plugin.saveSettings().then(() => {
          var _a2;
          plugin.referenceMapData.reinit(true);
          (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
        });
        return !cur;
      });
    },
    className: `checkbox-container${isButtonTwo ? " is-enabled" : ""}`
  }))), isButtonTwo && /* @__PURE__ */ import_react6.default.createElement(import_react6.default.Fragment, null, /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item"
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("METADATA_COPY_TEMPLATE_TWO"),
    description: t2("METADATA_COPY_TEMPLATE_TWO_DESC"),
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconTwo, null)
  }, /* @__PURE__ */ import_react6.default.createElement("textarea", {
    style: { minWidth: "200px", maxWidth: "500px", minHeight: "100px" },
    onBlur: (e) => {
      var _a2;
      plugin.settings.metadataCopyTemplateTwo = e.target.value;
      plugin.saveSettings();
      (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.VIEW);
    },
    spellCheck: false,
    defaultValue: (_b = plugin.settings.metadataCopyTemplateTwo) != null ? _b : METADATA_COPY_TEMPLATE_TWO
  }))), /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("METADATA_COPY_TWO_BATCH"),
    description: t2("METADATA_COPY_TWO_BATCH_DESC"),
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconTwo, null),
    options: {
      ON: t2("METADATA_COPY_TWO_BATCH_ON"),
      OFF: t2("METADATA_COPY_TWO_BATCH_OFF")
    }
  }, /* @__PURE__ */ import_react6.default.createElement("div", {
    onClick: () => {
      if (isButtonTwo) {
        setButtonTwoBatch((cur) => {
          plugin.settings.metadataCopyTwoBatch = !cur;
          plugin.saveSettings().then(() => {
            var _a2;
            plugin.referenceMapData.reinit(true);
            (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
          });
          return !cur;
        });
      }
    },
    className: `checkbox-container${isButtonTwoBatch ? " is-enabled" : ""}`
  })))), /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("FORMAT_METADATA_COPY_THREE"),
    description: t2("FORMAT_METADATA_COPY_THREE_DESC"),
    options: {
      ON: t2("FORMAT_METADATA_COPY_THREE_ON"),
      OFF: t2("FORMAT_METADATA_COPY_THREE_OFF")
    },
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconThree, null)
  }, /* @__PURE__ */ import_react6.default.createElement("div", {
    onClick: () => {
      setButtonThree((cur) => {
        plugin.settings.formatMetadataCopyThree = !cur;
        plugin.saveSettings().then(() => {
          var _a2;
          plugin.referenceMapData.reinit(true);
          (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
        });
        return !cur;
      });
    },
    className: `checkbox-container${isButtonThree ? " is-enabled" : ""}`
  }))), isButtonThree && /* @__PURE__ */ import_react6.default.createElement(import_react6.default.Fragment, null, /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item"
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("METADATA_COPY_TEMPLATE_THREE"),
    description: t2("METADATA_COPY_TEMPLATE_THREE_DESC"),
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconThree, null)
  }, /* @__PURE__ */ import_react6.default.createElement("textarea", {
    style: { minWidth: "200px", maxWidth: "500px", minHeight: "100px" },
    onBlur: (e) => {
      var _a2;
      plugin.settings.metadataCopyTemplateThree = e.target.value;
      plugin.saveSettings();
      (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.VIEW);
    },
    spellCheck: false,
    defaultValue: (_c = plugin.settings.metadataCopyTemplateThree) != null ? _c : METADATA_COPY_TEMPLATE_THREE
  }))), /* @__PURE__ */ import_react6.default.createElement("div", {
    className: "setting-item orm-setting-item "
  }, /* @__PURE__ */ import_react6.default.createElement(SettingItem, {
    name: t2("METADATA_COPY_THREE_BATCH"),
    description: t2("METADATA_COPY_THREE_BATCH_DESC"),
    icon: /* @__PURE__ */ import_react6.default.createElement(CopyIconThree, null),
    options: {
      ON: t2("METADATA_COPY_THREE_BATCH_ON"),
      OFF: t2("METADATA_COPY_THREE_BATCH_OFF")
    }
  }, /* @__PURE__ */ import_react6.default.createElement("div", {
    onClick: () => {
      if (isButtonThree) {
        setButtonThreeBatch((cur) => {
          plugin.settings.metadataCopyThreeBatch = !cur;
          plugin.saveSettings().then(() => {
            var _a2;
            plugin.referenceMapData.reinit(true);
            (_a2 = plugin.referenceMapData) == null ? void 0 : _a2.reload(RELOAD.SOFT);
          });
          return !cur;
        });
      }
    },
    className: `checkbox-container${isButtonThreeBatch ? " is-enabled" : ""}`
  })))));
}

// src/settings/list-suggest.ts
var import_obsidian5 = require("obsidian");

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x3 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y3 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y3,
    right: x3 + width,
    bottom: y3 + height,
    left: x3,
    x: x3,
    y: y3
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle2(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/within.js
function within(min5, value, max5) {
  return max(min5, min(value, max5));
}
function withinMaxClamp(min5, value, max5) {
  var v = within(min5, value, max5);
  return v > max5 ? max5 : v;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min5 = paddingObject[minProp];
  var max5 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min5, center, max5);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x3 = _ref.x, y3 = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x3 * dpr) / dpr || 0,
    y: round(y3 * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x3 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y3 = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x: x3,
    y: y3
  }) : {
    x: x3,
    y: y3
  };
  x3 = _ref3.x;
  y3 = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y3 -= offsetY - popperRect.height;
      y3 *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x3 -= offsetX - popperRect.width;
      x3 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x3,
    y: y3
  }, getWindow(popper2)) : {
    x: x3,
    y: y3
  };
  x3 = _ref4.x;
  y3 = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x3 + "px, " + y3 + "px)" : "translate3d(" + x3 + "px, " + y3 + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y3 + "px" : "", _Object$assign2[sideX] = hasX ? x3 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x3 = 0;
  var y3 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x3 = visualViewport.offsetLeft;
      y3 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3 + getWindowScrollBarX(element),
    y: y3
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x3 = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y3 = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x3 += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x3,
    y: y3
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b) {
    return overflows[a2] - overflows[b];
  });
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x3 = _data$state$placement.x, y3 = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x3;
    state.modifiersData.popperOffsets.y += y3;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min5 = offset2 + overflow[mainSide];
    var max5 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min5, tetherMin) : min5, offset2, tether ? max(max5, tetherMax) : max5);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m2) {
          return m2.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index6 = 0; index6 < state.orderedModifiers.length; index6++) {
          if (state.reset === true) {
            state.reset = false;
            index6 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index6], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/.pnpm/@popperjs+core@2.11.8/node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/settings/suggest.ts
var import_obsidian4 = require("obsidian");
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    __publicField(this, "owner");
    __publicField(this, "values");
    __publicField(this, "suggestions");
    __publicField(this, "selectedItem");
    __publicField(this, "containerEl");
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app2, inputEl) {
    __publicField(this, "app");
    __publicField(this, "inputEl");
    __publicField(this, "popper");
    __publicField(this, "scope");
    __publicField(this, "suggestEl");
    __publicField(this, "suggest");
    this.app = app2;
    this.inputEl = inputEl;
    this.scope = new import_obsidian4.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.dom.appContainerEl, this.inputEl);
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    this.suggestEl.detach();
  }
};

// src/utils/cslList.ts
var cslList = [
  {
    label: "Academy of Management Review",
    id: "academy-of-management-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/academy-of-management-review.csl"
  },
  {
    label: "Accident Analysis and Prevention",
    id: "accident-analysis-and-prevention",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/accident-analysis-and-prevention.csl"
  },
  {
    label: "ACI Materials Journal",
    id: "aci-materials-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aci-materials-journal.csl"
  },
  {
    label: 'ACM SIG Proceedings ("et al." for 15+ authors)',
    id: "acm-sig-proceedings-long-author-list",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acm-sig-proceedings-long-author-list.csl"
  },
  {
    label: 'ACM SIG Proceedings ("et al." for 3+ authors)',
    id: "acm-sig-proceedings",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acm-sig-proceedings.csl"
  },
  {
    label: "ACM SIGCHI Proceedings - Extended Abstract Format",
    id: "acm-sigchi-proceedings-extended-abstract-format",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acm-sigchi-proceedings-extended-abstract-format.csl"
  },
  {
    label: "ACM SIGCHI Proceedings (2016)",
    id: "acm-sigchi-proceedings",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acm-sigchi-proceedings.csl"
  },
  {
    label: "ACM SIGGRAPH",
    id: "acm-siggraph",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acm-siggraph.csl"
  },
  {
    label: "ACME: An International Journal for Critical Geographies",
    id: "acme-an-international-journal-for-critical-geographies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acme-an-international-journal-for-critical-geographies.csl"
  },
  {
    label: "Acta Amazonica",
    id: "acta-amazonica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-amazonica.csl"
  },
  {
    label: "Acta Anaesthesiologica Scandinavica",
    id: "acta-anaesthesiologica-scandinavica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-anaesthesiologica-scandinavica.csl"
  },
  {
    label: "Acta Anaesthesiologica Taiwanica",
    id: "acta-anaesthesiologica-taiwanica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-anaesthesiologica-taiwanica.csl"
  },
  {
    label: "Acta Botanica Croatica",
    id: "acta-botanica-croatica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-botanica-croatica.csl"
  },
  {
    label: "Acta Chiropterologica",
    id: "acta-chiropterologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-chiropterologica.csl"
  },
  {
    label: "Acta chirurgiae orthopaedicae et traumatologiae \u010Cechoslovaca",
    id: "acta-chirurgiae-orthopaedicae-et-traumatologiae-cechoslovaca",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-chirurgiae-orthopaedicae-et-traumatologiae-cechoslovaca.csl"
  },
  {
    label: "Acta hydrotechnica",
    id: "acta-hydrotechnica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-hydrotechnica.csl"
  },
  {
    label: "Acta Ichthyologica et Piscatoria",
    id: "acta-ichthyologica-et-piscatoria",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-ichthyologica-et-piscatoria.csl"
  },
  {
    label: "Acta M\xE9dica Peruana",
    id: "acta-medica-peruana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-medica-peruana.csl"
  },
  {
    label: "Acta Naturae",
    id: "acta-naturae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-naturae.csl"
  },
  {
    label: "Acta Neurobiologiae Experimentalis",
    id: "acta-neurobiologiae-experimentalis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-neurobiologiae-experimentalis.csl"
  },
  {
    label: "Acta Neurochirurgica",
    id: "acta-neurochirurgica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-neurochirurgica.csl"
  },
  {
    label: "Acta Ophthalmologica",
    id: "acta-ophthalmologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-ophthalmologica.csl"
  },
  {
    label: "Acta Ornithologica",
    id: "acta-ornithologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-ornithologica.csl"
  },
  {
    label: "Acta Orthop\xE6dica Belgica",
    id: "acta-orthopaedica-belgica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-orthopaedica-belgica.csl"
  },
  {
    label: "Acta Orthopaedica",
    id: "acta-orthopaedica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-orthopaedica.csl"
  },
  {
    label: "Acta Paediatrica",
    id: "acta-paediatrica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-paediatrica.csl"
  },
  {
    label: "Acta Palaeontologica Polonica",
    id: "acta-palaeontologica-polonica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-palaeontologica-polonica.csl"
  },
  {
    label: "Acta Pharmaceutica Sinica B",
    id: "acta-pharmaceutica-sinica-b",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-pharmaceutica-sinica-b.csl"
  },
  {
    label: "Acta Pharmaceutica",
    id: "acta-pharmaceutica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-pharmaceutica.csl"
  },
  {
    label: "Acta Philosophica",
    id: "acta-philosophica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-philosophica.csl"
  },
  {
    label: "Acta Physica Sinica (\u7269\u7406\u5B66\u62A5)",
    id: "acta-physica-sinica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-physica-sinica.csl"
  },
  {
    label: "Acta Physiologica",
    id: "acta-physiologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-physiologica.csl"
  },
  {
    label: "Acta Polytechnica",
    id: "acta-polytechnica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-polytechnica.csl"
  },
  {
    label: "Acta Radiologica",
    id: "acta-radiologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-radiologica.csl"
  },
  {
    label: "Acta Scientiae Veterinariae",
    id: "acta-scientiae-veterinariae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-scientiae-veterinariae.csl"
  },
  {
    label: "Acta Societatis Botanicorum Poloniae",
    id: "acta-societatis-botanicorum-poloniae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-societatis-botanicorum-poloniae.csl"
  },
  {
    label: "Acta Universitatis Agriculturae et Silviculturae Mendelianae Brunensis",
    id: "acta-universitatis-agriculturae-et-silviculturae-mendelianae-brunensis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-universitatis-agriculturae-et-silviculturae-mendelianae-brunensis.csl"
  },
  {
    label: "Acta Universitatis Agriculturae Sueciae (Swedish University of Agricultural Sciences)",
    id: "acta-universitatis-agriculturae-sueciae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-universitatis-agriculturae-sueciae.csl"
  },
  {
    label: "Acta Zoologica Academiae Scientiarum Hungaricae",
    id: "acta-zoologica-academiae-scientiarum-hungaricae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/acta-zoologica-academiae-scientiarum-hungaricae.csl"
  },
  {
    label: "Administrative Science Quarterly",
    id: "administrative-science-quarterly",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/administrative-science-quarterly.csl"
  },
  {
    label: "Advanced Engineering Materials",
    id: "advanced-engineering-materials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advanced-engineering-materials.csl"
  },
  {
    label: "Advanced Functional Materials",
    id: "advanced-functional-materials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advanced-functional-materials.csl"
  },
  {
    label: "Advanced Healthcare Materials",
    id: "advanced-healthcare-materials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advanced-healthcare-materials.csl"
  },
  {
    label: "Advanced Materials",
    id: "advanced-materials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advanced-materials.csl"
  },
  {
    label: "Advanced Optical Materials",
    id: "advanced-optical-materials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advanced-optical-materials.csl"
  },
  {
    label: "Advanced Pharmaceutical Bulletin",
    id: "advanced-pharmaceutical-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advanced-pharmaceutical-bulletin.csl"
  },
  {
    label: "Advances in Alzheimer's Disease",
    id: "advances-in-alzheimers-disease",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advances-in-alzheimers-disease.csl"
  },
  {
    label: "Advances in Complex Systems",
    id: "advances-in-complex-systems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/advances-in-complex-systems.csl"
  },
  {
    label: "Aerosol and Air Quality Research",
    id: "aerosol-and-air-quality-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aerosol-and-air-quality-research.csl"
  },
  {
    label: "Aerosol Science and Technology",
    id: "aerosol-science-and-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aerosol-science-and-technology.csl"
  },
  {
    label: "Aerospace Medicine and Human Performance",
    id: "aerospace-medicine-and-human-performance",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aerospace-medicine-and-human-performance.csl"
  },
  {
    label: "African Journal of Marine Science",
    id: "african-journal-of-marine-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/african-journal-of-marine-science.csl"
  },
  {
    label: "African Online Scientific Information Systems - Harvard",
    id: "african-online-scientific-information-systems-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/african-online-scientific-information-systems-harvard.csl"
  },
  {
    label: "African Online Scientific Information Systems - Vancouver",
    id: "african-online-scientific-information-systems-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/african-online-scientific-information-systems-vancouver.csl"
  },
  {
    label: "African Zoology",
    id: "african-zoology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/african-zoology.csl"
  },
  {
    label: "Afro-\xC1sia (Portugu\xEAs - Brasil)",
    id: "afro-asia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/afro-asia.csl"
  },
  {
    label: "Age and Ageing",
    id: "age-and-ageing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/age-and-ageing.csl"
  },
  {
    label: "Ageing & Society",
    id: "ageing-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ageing-and-society.csl"
  },
  {
    label: "Aging and Disease",
    id: "aging-and-disease",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aging-and-disease.csl"
  },
  {
    label: "Aging Cell",
    id: "aging-cell",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aging-cell.csl"
  },
  {
    label: "Aging",
    id: "aging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aging.csl"
  },
  {
    label: "Agora",
    id: "agora",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/agora.csl"
  },
  {
    label: "Agriculturae Conspectus Scientificus",
    id: "agriculturae-conspectus-scientificus",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/agriculturae-conspectus-scientificus.csl"
  },
  {
    label: "AIB studi (Italiano)",
    id: "aib-studi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aib-studi.csl"
  },
  {
    label: "AIDS",
    id: "aids",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aids.csl"
  },
  {
    label: "AIMS Press",
    id: "aims-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aims-press.csl"
  },
  {
    label: "Aix-Marseille Universit\xE9 - D\xE9partement d'\xE9tudes asiatiques (Fran\xE7ais)",
    id: "aix-marseille-universite-departement-d-etudes-asiatiques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aix-marseille-universite-departement-d-etudes-asiatiques.csl"
  },
  {
    label: "Al-Jami'ah - Journal of Islamic Studies",
    id: "al-jamiah-journal-of-islamic-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/al-jamiah-journal-of-islamic-studies.csl"
  },
  {
    label: "Alcohol and Alcoholism",
    id: "alcohol-and-alcoholism",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/alcohol-and-alcoholism.csl"
  },
  {
    label: "Alcoholism: Clinical and Experimental Research",
    id: "alcoholism-clinical-and-experimental-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/alcoholism-clinical-and-experimental-research.csl"
  },
  {
    label: "Alkoholizmus a drogov\xE9 z\xE1vislosti",
    id: "alkoholizmus-a-drogove-zavislosti",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/alkoholizmus-a-drogove-zavislosti.csl"
  },
  {
    label: "Allergology International",
    id: "allergology-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/allergology-international.csl"
  },
  {
    label: "Allergy",
    id: "allergy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/allergy.csl"
  },
  {
    label: "Alternatif Politika",
    id: "alternatif-politika",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/alternatif-politika.csl"
  },
  {
    label: "Alternatives to Animal Experimentation",
    id: "alternatives-to-animal-experimentation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/alternatives-to-animal-experimentation.csl"
  },
  {
    label: "AMBIO",
    id: "ambio",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ambio.csl"
  },
  {
    label: "Ameghiniana",
    id: "ameghiniana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ameghiniana.csl"
  },
  {
    label: "American Anthropological Association",
    id: "american-anthropological-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-anthropological-association.csl"
  },
  {
    label: "American Association for Cancer Research",
    id: "american-association-for-cancer-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-association-for-cancer-research.csl"
  },
  {
    label: "American Association of Petroleum Geologists",
    id: "american-association-of-petroleum-geologists",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-association-of-petroleum-geologists.csl"
  },
  {
    label: "American Chemical Society",
    id: "american-chemical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-chemical-society.csl"
  },
  {
    label: "American Fisheries Society",
    id: "american-fisheries-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-fisheries-society.csl"
  },
  {
    label: "American Geophysical Union",
    id: "american-geophysical-union",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-geophysical-union.csl"
  },
  {
    label: "American Heart Association",
    id: "american-heart-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-heart-association.csl"
  },
  {
    label: "American Institute of Aeronautics and Astronautics",
    id: "american-institute-of-aeronautics-and-astronautics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-institute-of-aeronautics-and-astronautics.csl"
  },
  {
    label: "American Institute of Physics 4th edition",
    id: "american-institute-of-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-institute-of-physics.csl"
  },
  {
    label: "American Journal of Agricultural Economics",
    id: "american-journal-of-agricultural-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-agricultural-economics.csl"
  },
  {
    label: "American Journal of Archaeology",
    id: "american-journal-of-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-archaeology.csl"
  },
  {
    label: "American Journal of Botany",
    id: "american-journal-of-botany",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-botany.csl"
  },
  {
    label: "American Journal of Climate Change",
    id: "american-journal-of-climate-change",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-climate-change.csl"
  },
  {
    label: "American Journal of Clinical Pathology",
    id: "american-journal-of-clinical-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-clinical-pathology.csl"
  },
  {
    label: "American Journal of Enology and Viticulture",
    id: "american-journal-of-enology-and-viticulture",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-enology-and-viticulture.csl"
  },
  {
    label: "American Journal of Epidemiology",
    id: "american-journal-of-epidemiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-epidemiology.csl"
  },
  {
    label: "American Journal of Health Behavior",
    id: "american-journal-of-health-behavior",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-health-behavior.csl"
  },
  {
    label: "American Journal of Hypertension",
    id: "american-journal-of-hypertension",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-hypertension.csl"
  },
  {
    label: "American Journal of Medical Genetics",
    id: "american-journal-of-medical-genetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-medical-genetics.csl"
  },
  {
    label: "American Journal of Neuroradiology",
    id: "american-journal-of-neuroradiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-neuroradiology.csl"
  },
  {
    label: "American Journal of Orthodontics & Dentofacial Orthopedics",
    id: "american-journal-of-orthodontics-and-dentofacial-orthopedics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-orthodontics-and-dentofacial-orthopedics.csl"
  },
  {
    label: "American Journal of Plant Sciences",
    id: "american-journal-of-plant-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-plant-sciences.csl"
  },
  {
    label: "American Journal of Political Science",
    id: "american-journal-of-political-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-political-science.csl"
  },
  {
    label: "American Journal of Respiratory and Critical Care Medicine",
    id: "american-journal-of-respiratory-and-critical-care-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-respiratory-and-critical-care-medicine.csl"
  },
  {
    label: "American Journal of Science",
    id: "american-journal-of-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-science.csl"
  },
  {
    label: "American Journal of Sociology",
    id: "american-journal-of-sociology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-sociology.csl"
  },
  {
    label: "American Journal of Sonography",
    id: "american-journal-of-sonography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-sonography.csl"
  },
  {
    label: "American Journal of Surgical Pathology",
    id: "american-journal-of-surgical-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-surgical-pathology.csl"
  },
  {
    label: "American Journal of Translational Research",
    id: "american-journal-of-translational-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-journal-of-translational-research.csl"
  },
  {
    label: "American Marketing Association",
    id: "american-marketing-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-marketing-association.csl"
  },
  {
    label: "American Medical Association 10th edition",
    id: "american-medical-association-10th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association-10th-edition.csl"
  },
  {
    label: "American Medical Association 11th edition (sorted alphabetically)",
    id: "american-medical-association-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association-alphabetical.csl"
  },
  {
    label: "American Medical Association 11th edition (brackets)",
    id: "american-medical-association-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association-brackets.csl"
  },
  {
    label: 'American Medical Association 11th edition (no "et al.")',
    id: "american-medical-association-no-et-al",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association-no-et-al.csl"
  },
  {
    label: "American Medical Association 11th edition (no URL, sorted alphabetically)",
    id: "american-medical-association-no-url-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association-no-url-alphabetical.csl"
  },
  {
    label: "American Medical Association 11th edition (no URL)",
    id: "american-medical-association-no-url",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association-no-url.csl"
  },
  {
    label: "American Medical Association 11th edition (parentheses)",
    id: "american-medical-association-parentheses",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association-parentheses.csl"
  },
  {
    label: "American Medical Association 11th edition",
    id: "american-medical-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-medical-association.csl"
  },
  {
    label: "American Meteorological Society",
    id: "american-meteorological-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-meteorological-society.csl"
  },
  {
    label: "American Mineralogist",
    id: "american-mineralogist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-mineralogist.csl"
  },
  {
    label: "American Nuclear Society",
    id: "american-nuclear-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-nuclear-society.csl"
  },
  {
    label: "American Physical Society - et al. (if more than 3 authors)",
    id: "american-physical-society-et-al",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-physical-society-et-al.csl"
  },
  {
    label: "American Physical Society (without titles)",
    id: "american-physics-society-without-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-physics-society-without-titles.csl"
  },
  {
    label: "American Physical Society",
    id: "american-physics-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-physics-society.csl"
  },
  {
    label: "American Physiological Society",
    id: "american-physiological-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-physiological-society.csl"
  },
  {
    label: "American Phytopathological Society",
    id: "american-phytopathological-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-phytopathological-society.csl"
  },
  {
    label: "American Political Science Association",
    id: "american-political-science-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-political-science-association.csl"
  },
  {
    label: "American School of Classical Studies at Athens",
    id: "american-school-of-classical-studies-at-athens",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-school-of-classical-studies-at-athens.csl"
  },
  {
    label: "American Society for Horticultural Science",
    id: "american-society-for-horticultural-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-society-for-horticultural-science.csl"
  },
  {
    label: "American Society for Microbiology",
    id: "american-society-for-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-society-for-microbiology.csl"
  },
  {
    label: "American Society for Pharmacology and Experimental Therapeutics",
    id: "american-society-for-pharmacology-and-experimental-therapeutics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-society-for-pharmacology-and-experimental-therapeutics.csl"
  },
  {
    label: "American Society of Agricultural and Biological Engineers",
    id: "american-society-of-agricultural-and-biological-engineers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-society-of-agricultural-and-biological-engineers.csl"
  },
  {
    label: "American Society of Civil Engineers",
    id: "american-society-of-civil-engineers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-society-of-civil-engineers.csl"
  },
  {
    label: "American Society of Mechanical Engineers",
    id: "american-society-of-mechanical-engineers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-society-of-mechanical-engineers.csl"
  },
  {
    label: "American Sociological Association 6th edition",
    id: "american-sociological-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-sociological-association.csl"
  },
  {
    label: "American Statistical Association",
    id: "american-statistical-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-statistical-association.csl"
  },
  {
    label: "American Veterinary Medical Association",
    id: "american-veterinary-medical-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/american-veterinary-medical-association.csl"
  },
  {
    label: "Amerindia",
    id: "amerindia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/amerindia.csl"
  },
  {
    label: "Amphibia-Reptilia",
    id: "amphibia-reptilia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/amphibia-reptilia.csl"
  },
  {
    label: "Amsterdam University Press - Academic",
    id: "amsterdam-university-press-academic",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/amsterdam-university-press-academic.csl"
  },
  {
    label: "Anabases",
    id: "anabases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anabases.csl"
  },
  {
    label: "Anaesthesia",
    id: "anaesthesia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anaesthesia.csl"
  },
  {
    label: "Anais da Academia Brasileira de Ci\xEAncias",
    id: "anais-da-academia-brasileira-de-ciencias",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anais-da-academia-brasileira-de-ciencias.csl"
  },
  {
    label: "Analytical Sciences",
    id: "analytical-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/analytical-sciences.csl"
  },
  {
    label: "Anatomical Sciences Education",
    id: "anatomical-sciences-education",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anatomical-sciences-education.csl"
  },
  {
    label: "Ancilla Iuris",
    id: "ancilla-iuris",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ancilla-iuris.csl"
  },
  {
    label: "Andean Geology",
    id: "andean-geology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/andean-geology.csl"
  },
  {
    label: "Anesthesia and Analgesia",
    id: "anesthesia-and-analgesia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anesthesia-and-analgesia.csl"
  },
  {
    label: "Anesthesiology",
    id: "anesthesiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anesthesiology.csl"
  },
  {
    label: "Angewandte Chemie International Edition",
    id: "angewandte-chemie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/angewandte-chemie.csl"
  },
  {
    label: "Angiologia (Espa\xF1ol)",
    id: "angiologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/angiologia.csl"
  },
  {
    label: "Angiology",
    id: "angiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/angiology.csl"
  },
  {
    label: "Anglia",
    id: "anglia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anglia.csl"
  },
  {
    label: "Animal Conservation",
    id: "animal-conservation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/animal-conservation.csl"
  },
  {
    label: "Animal Migration",
    id: "animal-migration",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/animal-migration.csl"
  },
  {
    label: "Animal Welfare",
    id: "animal-welfare",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/animal-welfare.csl"
  },
  {
    label: "animal",
    id: "animal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/animal.csl"
  },
  {
    label: "Annalen des Naturhistorischen Museums in Wien",
    id: "annalen-des-naturhistorischen-museums-in-wien",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annalen-des-naturhistorischen-museums-in-wien.csl"
  },
  {
    label: "Annales de d\xE9mographie historique",
    id: "annales-de-demographie-historique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annales-de-demographie-historique.csl"
  },
  {
    label: "Annales. Histoire, Sciences sociales (Fran\xE7ais)",
    id: "annales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annales.csl"
  },
  {
    label: "Annals of Allergy, Asthma & Immunology",
    id: "annals-of-allergy-asthma-and-immunology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-allergy-asthma-and-immunology.csl"
  },
  {
    label: "Annals of Applied Biology",
    id: "annals-of-applied-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-applied-biology.csl"
  },
  {
    label: "Annals of Behavioral Medicine",
    id: "annals-of-behavioral-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-behavioral-medicine.csl"
  },
  {
    label: "Annals of Biomedical Engineering",
    id: "annals-of-biomedical-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-biomedical-engineering.csl"
  },
  {
    label: "Annals of Botany",
    id: "annals-of-botany",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-botany.csl"
  },
  {
    label: "Annals of Eye Science",
    id: "annals-of-eye-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-eye-science.csl"
  },
  {
    label: "Annals of Joint",
    id: "annals-of-joint",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-joint.csl"
  },
  {
    label: "Annals of Laboratory Medicine",
    id: "annals-of-laboratory-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-laboratory-medicine.csl"
  },
  {
    label: "Annals of Neurology",
    id: "annals-of-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-neurology.csl"
  },
  {
    label: "Annals of Oncology",
    id: "annals-of-oncology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-oncology.csl"
  },
  {
    label: "Annals of Public and Cooperative Economics",
    id: "annals-of-public-and-cooperative-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-public-and-cooperative-economics.csl"
  },
  {
    label: "Annals of Surgery",
    id: "annals-of-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-surgery.csl"
  },
  {
    label: "Annals of the Association of American Geographers",
    id: "annals-of-the-association-of-american-geographers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-the-association-of-american-geographers.csl"
  },
  {
    label: "Annals of the New York Academy of Sciences",
    id: "annals-of-the-new-york-academy-of-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-the-new-york-academy-of-sciences.csl"
  },
  {
    label: "Annals of Work Exposures and Health",
    id: "annals-of-work-exposures-and-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annals-of-work-exposures-and-health.csl"
  },
  {
    label: "Annual Review of Astronomy and Astrophysics",
    id: "annual-review-of-astronomy-and-astrophysics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-review-of-astronomy-and-astrophysics.csl"
  },
  {
    label: "Annual Review of Linguistics",
    id: "annual-review-of-linguistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-review-of-linguistics.csl"
  },
  {
    label: "Annual Review of Medicine",
    id: "annual-review-of-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-review-of-medicine.csl"
  },
  {
    label: "Annual Review of Nuclear and Particle Science",
    id: "annual-review-of-nuclear-and-particle-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-review-of-nuclear-and-particle-science.csl"
  },
  {
    label: "Annual Reviews (sorted alphabetically)",
    id: "annual-reviews-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-reviews-alphabetical.csl"
  },
  {
    label: "Annual Reviews (author-date)",
    id: "annual-reviews-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-reviews-author-date.csl"
  },
  {
    label: "Annual Reviews (sorted by order of appearance, without titles)",
    id: "annual-reviews-without-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-reviews-without-titles.csl"
  },
  {
    label: "Annual Reviews (sorted by order of appearance)",
    id: "annual-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/annual-reviews.csl"
  },
  {
    label: "Antarctic Science",
    id: "antarctic-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/antarctic-science.csl"
  },
  {
    label: "Anthropologie et Soci\xE9t\xE9s (Fran\xE7ais)",
    id: "anthropologie-et-societes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anthropologie-et-societes.csl"
  },
  {
    label: "Anti-Trafficking Review",
    id: "anti-trafficking-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anti-trafficking-review.csl"
  },
  {
    label: "Anticancer Research",
    id: "anticancer-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/anticancer-research.csl"
  },
  {
    label: "Antipode",
    id: "antipode",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/antipode.csl"
  },
  {
    label: "Antiquit\xE9s africaines",
    id: "antiquites-africaines",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/antiquites-africaines.csl"
  },
  {
    label: "Antiquity",
    id: "antiquity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/antiquity.csl"
  },
  {
    label: "American Psychological Association 5th edition",
    id: "apa-5th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-5th-edition.csl"
  },
  {
    label: "American Psychological Association 6th edition (no ampersand)",
    id: "apa-6th-edition-no-ampersand",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-6th-edition-no-ampersand.csl"
  },
  {
    label: "American Psychological Association 6th edition",
    id: "apa-6th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-6th-edition.csl"
  },
  {
    label: "American Psychological Association 7th edition (annotated bibliography)",
    id: "apa-annotated-bibliography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-annotated-bibliography.csl"
  },
  {
    label: "American Psychological Association 7th edition (curriculum vitae, sorted by descending date)",
    id: "apa-cv",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-cv.csl"
  },
  {
    label: "American Psychological Association 7th edition (Basque/Euskara)",
    id: "apa-eu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-eu.csl"
  },
  {
    label: "American Psychological Association 6th edition (Provost) (Fran\xE7ais - Canada)",
    id: "apa-fr-provost",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-fr-provost.csl"
  },
  {
    label: "American Psychological Association 7th edition (no ampersand)",
    id: "apa-no-ampersand",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-no-ampersand.csl"
  },
  {
    label: "American Psychological Association 6th edition (no DOIs, no issue numbers)",
    id: "apa-no-doi-no-issue",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-no-doi-no-issue.csl"
  },
  {
    label: "American Psychological Association 7th edition (no initials)",
    id: "apa-no-initials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-no-initials.csl"
  },
  {
    label: "American Psychological Association 7th edition (numeric, brackets)",
    id: "apa-numeric-superscript-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-numeric-superscript-brackets.csl"
  },
  {
    label: "American Psychological Association 7th edition (numeric, superscript)",
    id: "apa-numeric-superscript",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-numeric-superscript.csl"
  },
  {
    label: 'American Psychological Association 6th edition ("doi:" DOI prefix)',
    id: "apa-old-doi-prefix",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-old-doi-prefix.csl"
  },
  {
    label: "American Psychological Association 7th edition (single-spaced bibliography)",
    id: "apa-single-spaced",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-single-spaced.csl"
  },
  {
    label: "American Psychological Association 6th edition (T\xFCrk\xE7e)",
    id: "apa-tr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-tr.csl"
  },
  {
    label: "American Psychological Association 7th edition (with abstract)",
    id: "apa-with-abstract",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-with-abstract.csl"
  },
  {
    label: "American Psychological Association 7th edition (default)",
    id: "apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl"
  },
  {
    label: "Aporia: The Nursing Journal",
    id: "aporia-the-nursing-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aporia-the-nursing-journal.csl"
  },
  {
    label: "Applied Clay Science",
    id: "applied-clay-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/applied-clay-science.csl"
  },
  {
    label: "Applied Spectroscopy Reviews",
    id: "applied-spectroscopy-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/applied-spectroscopy-reviews.csl"
  },
  {
    label: "Applied Spectroscopy",
    id: "applied-spectroscopy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/applied-spectroscopy.csl"
  },
  {
    label: "Aquatic Conservation: Marine and Freshwater Ecosystems",
    id: "aquatic-conservation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aquatic-conservation.csl"
  },
  {
    label: "Aquatic Invasions",
    id: "aquatic-invasions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aquatic-invasions.csl"
  },
  {
    label: "Aquatic Living Resources",
    id: "aquatic-living-resources",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aquatic-living-resources.csl"
  },
  {
    label: "Aquitania (Fran\xE7ais)",
    id: "aquitania",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/aquitania.csl"
  },
  {
    label: "Arachne",
    id: "arachne",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arachne.csl"
  },
  {
    label: "Arachnologische Mitteilungen",
    id: "arachnologische-mitteilungen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arachnologische-mitteilungen.csl"
  },
  {
    label: "Arachnology",
    id: "arachnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arachnology.csl"
  },
  {
    label: "\xC1rb\xF3k Hins \xEDslenzka fornleifaf\xE9lags (\xCDslenska)",
    id: "arbok-hins-islenzka-fornleifafelags",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arbok-hins-islenzka-fornleifafelags.csl"
  },
  {
    label: "Arcadia Science",
    id: "arcadia-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arcadia-science.csl"
  },
  {
    label: "Archaeologia Austriaca",
    id: "archaeologia-austriaca",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archaeologia-austriaca.csl"
  },
  {
    label: "Archaeometry",
    id: "archaeometry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archaeometry.csl"
  },
  {
    label: "Archaeonautica",
    id: "archaeonautica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archaeonautica.csl"
  },
  {
    label: "Archeologia Classica (Italiano)",
    id: "archeologia-classica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archeologia-classica.csl"
  },
  {
    label: "Archeologick\xE9 rozhledy",
    id: "archeologicke-rozhledy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archeologicke-rozhledy.csl"
  },
  {
    label: "Arch\xE9ologie m\xE9di\xE9vale (Fran\xE7ais)",
    id: "archeologie-medievale",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archeologie-medievale.csl"
  },
  {
    label: "Arch\xE9ologies et Sciences de l'Antiquit\xE9 (Fran\xE7ais)",
    id: "archeologies-et-sciences-de-lantiquite",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archeologies-et-sciences-de-lantiquite.csl"
  },
  {
    label: "ArcheoSciences (Fran\xE7ais)",
    id: "archeosciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archeosciences.csl"
  },
  {
    label: "Archiv f\xFCr die civilistische Praxis (Deutsch)",
    id: "archiv-fur-die-civilistische-praxis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archiv-fur-die-civilistische-praxis.csl"
  },
  {
    label: "Archiv f\xFCr Geschichte der Philosophie",
    id: "archiv-fur-geschichte-der-philosophie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archiv-fur-geschichte-der-philosophie.csl"
  },
  {
    label: "Archives of Hand and Microsurgery",
    id: "archives-of-hand-and-microsurgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archives-of-hand-and-microsurgery.csl"
  },
  {
    label: "Archives of Medical Research",
    id: "archives-of-medical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archives-of-medical-research.csl"
  },
  {
    label: "Archives of Physical Medicine and Rehabilitation",
    id: "archives-of-physical-medicine-and-rehabilitation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archives-of-physical-medicine-and-rehabilitation.csl"
  },
  {
    label: "Archivos de Bronconeumolog\xEDa",
    id: "archivos-de-bronconeumologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archivos-de-bronconeumologia.csl"
  },
  {
    label: "Archivos de la Sociedad Espa\xF1ola de Oftalmolog\xEDa (Espa\xF1ol)",
    id: "archivos-de-la-sociedad-espanola-de-oftalmologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archivos-de-la-sociedad-espanola-de-oftalmologia.csl"
  },
  {
    label: "Archivum Latinitatis Medii Aevi (Fran\xE7ais)",
    id: "archivum-latinitatis-medii-aevi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/archivum-latinitatis-medii-aevi.csl"
  },
  {
    label: "Arctic, Antarctic, and Alpine Research",
    id: "arctic-antarctic-and-alpine-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arctic-antarctic-and-alpine-research.csl"
  },
  {
    label: "Arctic",
    id: "arctic",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arctic.csl"
  },
  {
    label: "Arhiv za higijenu rada i toksikologiju (Archives of Industrial Hygiene and Toxicology)",
    id: "arhiv-za-higijenu-rada-i-toksikologiju",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arhiv-za-higijenu-rada-i-toksikologiju.csl"
  },
  {
    label: "Arkivoc",
    id: "arkivoc",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arkivoc.csl"
  },
  {
    label: "Art History",
    id: "art-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/art-history.csl"
  },
  {
    label: "Art Libraries Society of North America: ARLIS/NA Reviews",
    id: "art-libraries-society-of-north-america-arlisna-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/art-libraries-society-of-north-america-arlisna-reviews.csl"
  },
  {
    label: "Artery Research",
    id: "artery-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/artery-research.csl"
  },
  {
    label: "Arthritis & Rheumatism",
    id: "arthritis-and-rheumatism",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arthritis-and-rheumatism.csl"
  },
  {
    label: "Arthropod Systematics & Phylogeny",
    id: "arthropod-systematics-and-phylogeny",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arthropod-systematics-and-phylogeny.csl"
  },
  {
    label: "Arts University Bournemouth",
    id: "arts-university-bournemouth",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arts-university-bournemouth.csl"
  },
  {
    label: "Arzneimitteltherapie",
    id: "arzneimitteltherapie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/arzneimitteltherapie.csl"
  },
  {
    label: "American Society of Agronomy, Crop Science Society of America, Soil Science Society of America",
    id: "asa-cssa-sssa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/asa-cssa-sssa.csl"
  },
  {
    label: "ASAIO Journal (American Society for Artificial Internal Organs)",
    id: "asaio-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/asaio-journal.csl"
  },
  {
    label: "Asia & the Pacific Policy Studies",
    id: "asia-and-the-pacific-policy-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/asia-and-the-pacific-policy-studies.csl"
  },
  {
    label: "Asia Pacific Journal of Human Resources",
    id: "asia-pacific-journal-of-human-resources",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/asia-pacific-journal-of-human-resources.csl"
  },
  {
    label: "Asian Journal of Neurosurgery",
    id: "asian-journal-of-neurosurgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/asian-journal-of-neurosurgery.csl"
  },
  {
    label: "Asian Myrmecology",
    id: "asian-myrmecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/asian-myrmecology.csl"
  },
  {
    label: "Asian Studies Review",
    id: "asian-studies-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/asian-studies-review.csl"
  },
  {
    label: "Escola de Comando e Estado-Maior do Ex\xE9rcito - ABNT (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-eceme",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-eceme.csl"
  },
  {
    label: "Escola de Comando e Estado-Maior do Ex\xE9rcito - Instituto Meira Mattos - ABNT (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-instituto-meira-mattos",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-instituto-meira-mattos.csl"
  },
  {
    label: "Instituto de Pesquisa Econ\xF4mica Aplicada - ABNT (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ipea",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ipea.csl"
  },
  {
    label: "Associa\xE7\xE3o Brasileira de Normas T\xE9cnicas (note, Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-note.csl"
  },
  {
    label: "Universidade Federal de Minas Gerais - Faculdade de Ci\xEAncias Econ\xF4micas - ABNT (autoria completa) (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ufmg-face-full",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ufmg-face-full.csl"
  },
  {
    label: "Universidade Federal de Minas Gerais - Faculdade de Ci\xEAncias Econ\xF4micas - ABNT (autoria abreviada) (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ufmg-face-initials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ufmg-face-initials.csl"
  },
  {
    label: "Universidade Federal do Paran\xE1 - ABNT (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ufpr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ufpr.csl"
  },
  {
    label: "Universidade Federal do Rio Grande do Sul - ABNT (autoria abreviada) (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ufrgs-initials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ufrgs-initials.csl"
  },
  {
    label: "Universidade Federal do Rio Grande do Sul - ABNT (autoria abreviada, nota, com Ibid.) (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ufrgs-note-initials-with-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ufrgs-note-initials-with-ibid.csl"
  },
  {
    label: "Universidade Federal do Rio Grande do Sul - ABNT (autoria completa) (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ufrgs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ufrgs.csl"
  },
  {
    label: "Universidade Federal de Sergipe - ABNT (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-ufs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-ufs.csl"
  },
  {
    label: "Universidade Federal do Estado do Rio de Janeiro - Educa\xE7\xE3o Infantil e Pol\xEDticas P\xFAblicas - ABNT (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-unirio-eipp",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-unirio-eipp.csl"
  },
  {
    label: "Universidade de S\xE3o Paulo - Faculdade de Medicina Veterin\xE1ria e Zootecnia - ABNT (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas-usp-fmvz",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas-usp-fmvz.csl"
  },
  {
    label: "Associa\xE7\xE3o Brasileira de Normas T\xE9cnicas (Portugu\xEAs - Brasil)",
    id: "associacao-brasileira-de-normas-tecnicas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-brasileira-de-normas-tecnicas.csl"
  },
  {
    label: "ANPET - Congresso de Pesquisa e Ensino em Transportes (Portugu\xEAs - Brasil)",
    id: "associacao-nacional-de-pesquisa-e-ensino-em-transportes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/associacao-nacional-de-pesquisa-e-ensino-em-transportes.csl"
  },
  {
    label: "Association de Science R\xE9gionale de Langue Fran\xE7aise (Fran\xE7ais)",
    id: "association-de-science-regionale-de-langue-francaise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/association-de-science-regionale-de-langue-francaise.csl"
  },
  {
    label: "Association for Computational Linguistics - Conference Proceedings",
    id: "association-for-computational-linguistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/association-for-computational-linguistics.csl"
  },
  {
    label: "Association for Computing Machinery",
    id: "association-for-computing-machinery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/association-for-computing-machinery.csl"
  },
  {
    label: "Atlande (author-date, Fran\xE7ais)",
    id: "atlande",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/atlande.csl"
  },
  {
    label: "Atlas of Genetics and Cytogenetics in Oncology and Haematology",
    id: "atlas-of-genetics-and-cytogenetics-in-oncology-and-haematology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/atlas-of-genetics-and-cytogenetics-in-oncology-and-haematology.csl"
  },
  {
    label: "Ausonius \xC9ditions (Fran\xE7ais)",
    id: "ausonius-editions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ausonius-editions.csl"
  },
  {
    label: "Austral Ecology",
    id: "austral-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/austral-ecology.csl"
  },
  {
    label: "Austral Entomology",
    id: "austral-entomology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/austral-entomology.csl"
  },
  {
    label: "Australasian Journal of Philosophy",
    id: "australasian-journal-of-philosophy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australasian-journal-of-philosophy.csl"
  },
  {
    label: "Australian Archaeology",
    id: "australian-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-archaeology.csl"
  },
  {
    label: "Australian Critical Care",
    id: "australian-critical-care",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-critical-care.csl"
  },
  {
    label: "Australian Dental Journal",
    id: "australian-dental-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-dental-journal.csl"
  },
  {
    label: "Australian Guide to Legal Citation 3rd edition",
    id: "australian-guide-to-legal-citation-3rd-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-guide-to-legal-citation-3rd-edition.csl"
  },
  {
    label: "Australian Guide to Legal Citation 4th edition",
    id: "australian-guide-to-legal-citation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-guide-to-legal-citation.csl"
  },
  {
    label: "Australian Historical Studies",
    id: "australian-historical-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-historical-studies.csl"
  },
  {
    label: "Australian Journal of Earth Sciences",
    id: "australian-journal-of-earth-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-journal-of-earth-sciences.csl"
  },
  {
    label: "Australian Journal of Grape and Wine Research",
    id: "australian-journal-of-grape-and-wine-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-journal-of-grape-and-wine-research.csl"
  },
  {
    label: "Australian Road Research Board",
    id: "australian-road-research-board",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-road-research-board.csl"
  },
  {
    label: "Australian Veterinary Journal",
    id: "australian-veterinary-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/australian-veterinary-journal.csl"
  },
  {
    label: "Austrian Journal of Development Studies (Journal f\xFCr Entwicklungspolitik)",
    id: "austrian-journal-of-development-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/austrian-journal-of-development-studies.csl"
  },
  {
    label: "Austrian Legal (Deutsch - \xD6sterreich)",
    id: "austrian-legal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/austrian-legal.csl"
  },
  {
    label: "Avian Conservation and Ecology",
    id: "avian-conservation-and-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/avian-conservation-and-ecology.csl"
  },
  {
    label: "Avian Diseases",
    id: "avian-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/avian-diseases.csl"
  },
  {
    label: "Avian Pathology",
    id: "avian-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/avian-pathology.csl"
  },
  {
    label: "Ayer (Espa\xF1ol)",
    id: "ayer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ayer.csl"
  },
  {
    label: "AZR - Abk\xFCrzungs- und Zitierregeln der \xF6sterreichischen Rechtssprache und europarechtlicher Rechtsquellen (Deutsch - \xD6sterreich)",
    id: "azr-abkurzungs-und-zitierregeln-der-osterreichischen-rechtssprache-und-europarechtlicher-rechtsquellen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/azr-abkurzungs-und-zitierregeln-der-osterreichischen-rechtssprache-und-europarechtlicher-rechtsquellen.csl"
  },
  {
    label: "Babes-Bolyai University - Faculty of Orthodox Theology (no ibid., Rom\xE2n\u0103)",
    id: "babes-bolyai-university-faculty-of-orthodox-theology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/babes-bolyai-university-faculty-of-orthodox-theology.csl"
  },
  {
    label: "BABESCH - Annual Papers on Mediterranean Archaeology",
    id: "babesch-annual-papers-on-mediterranean-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/babesch-annual-papers-on-mediterranean-archaeology.csl"
  },
  {
    label: "Baghdad Science Journal",
    id: "baghdad-science-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/baghdad-science-journal.csl"
  },
  {
    label: "Baishideng Publishing Group",
    id: "baishideng-publishing-group",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/baishideng-publishing-group.csl"
  },
  {
    label: "Bakhtiniana: Journal of Discourse Studies",
    id: "bakhtiniana-journal-of-discourse-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bakhtiniana-journal-of-discourse-studies.csl"
  },
  {
    label: "Begell House - APA",
    id: "begell-house-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/begell-house-apa.csl"
  },
  {
    label: "Begell House - Chicago Manual of Style",
    id: "begell-house-chicago-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/begell-house-chicago-author-date.csl"
  },
  {
    label: "Behaviour",
    id: "behaviour",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/behaviour.csl"
  },
  {
    label: "Beilstein Journal of Organic Chemistry",
    id: "beilstein-journal-of-organic-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/beilstein-journal-of-organic-chemistry.csl"
  },
  {
    label: "Beltz - P\xE4dagogik (Deutsch)",
    id: "beltz-padagogik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/beltz-padagogik.csl"
  },
  {
    label: "Berghahn Books (author-date, English - UK)",
    id: "berghahn-books-author-date-en-gb",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/berghahn-books-author-date-en-gb.csl"
  },
  {
    label: "Berlin School of Economics and Law - International Marketing Management",
    id: "berlin-school-of-economics-and-law-international-marketing-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/berlin-school-of-economics-and-law-international-marketing-management.csl"
  },
  {
    label: "Bern University of Applied Sciences - School of Agricultural, Forest and Food Sciences HAFL (author-date)",
    id: "bern-university-of-applied-sciences-school-of-agricultural-forest-and-food-sciences-hafl",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bern-university-of-applied-sciences-school-of-agricultural-forest-and-food-sciences-hafl.csl"
  },
  {
    label: "Betriebswirtschaftliche Forschung und Praxis (Deutsch)",
    id: "betriebswirtschaftliche-forschung-und-praxis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/betriebswirtschaftliche-forschung-und-praxis.csl"
  },
  {
    label: "Biblio 3W (Espa\xF1ol)",
    id: "biblio-3w",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biblio-3w.csl"
  },
  {
    label: "Bibliothecae.it (Italiano)",
    id: "bibliothecae-it",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bibliothecae-it.csl"
  },
  {
    label: "Bibliothek \u2013 Forschung und Praxis",
    id: "bibliothek-forschung-und-praxis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bibliothek-forschung-und-praxis.csl"
  },
  {
    label: "Biblioth\xE8que d'arch\xE9ologie m\xE9diterran\xE9enne et africaine (BiAMA) (Fran\xE7ais)",
    id: "bibliotheque-d-archeologie-mediterraneenne-et-africaine-biama",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bibliotheque-d-archeologie-mediterraneenne-et-africaine-biama.csl"
  },
  {
    label: "Biblioth\xE8que universitaire de m\xE9decine - Vancouver (Fran\xE7ais)",
    id: "bibliotheque-universitaire-de-medecine-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bibliotheque-universitaire-de-medecine-vancouver.csl"
  },
  {
    label: "BibTeX generic citation style",
    id: "bibtex",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bibtex.csl"
  },
  {
    label: "Biens symboliques / Symbolic Goods",
    id: "biens-symboliques-symbolic-goods",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biens-symboliques-symbolic-goods.csl"
  },
  {
    label: "Bio-protocol",
    id: "bio-protocol",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bio-protocol.csl"
  },
  {
    label: "Bioarchaeology International",
    id: "bioarchaeology-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bioarchaeology-international.csl"
  },
  {
    label: "Bioarchaeology of the Near East",
    id: "bioarchaeology-of-the-near-east",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bioarchaeology-of-the-near-east.csl"
  },
  {
    label: "Biochemical Journal",
    id: "biochemical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biochemical-journal.csl"
  },
  {
    label: "Biochemical Society Transactions",
    id: "biochemical-society-transactions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biochemical-society-transactions.csl"
  },
  {
    label: "Biochemistry and Molecular Biology Education",
    id: "biochemistry-and-molecular-biology-education",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biochemistry-and-molecular-biology-education.csl"
  },
  {
    label: "Biochemistry",
    id: "biochemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biochemistry.csl"
  },
  {
    label: "Biochimica et Biophysica Acta",
    id: "biochimica-et-biophysica-acta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biochimica-et-biophysica-acta.csl"
  },
  {
    label: "Bioelectromagnetics",
    id: "bioelectromagnetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bioelectromagnetics.csl"
  },
  {
    label: "Bioinformatics",
    id: "bioinformatics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bioinformatics.csl"
  },
  {
    label: "Biologia",
    id: "biologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biologia.csl"
  },
  {
    label: "Biological and Pharmaceutical Bulletin",
    id: "biological-and-pharmaceutical-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biological-and-pharmaceutical-bulletin.csl"
  },
  {
    label: "Biological Journal of the Linnean Society",
    id: "biological-journal-of-the-linnean-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biological-journal-of-the-linnean-society.csl"
  },
  {
    label: "Biological Psychiatry",
    id: "biological-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biological-psychiatry.csl"
  },
  {
    label: "Biological Reviews",
    id: "biological-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biological-reviews.csl"
  },
  {
    label: "\u0411\u0438\u043E\u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u043C\u0435\u043C\u0431\u0440\u0430\u043D\u044B",
    id: "biologiceskie-membrany",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biologiceskie-membrany.csl"
  },
  {
    label: "Biology of Reproduction",
    id: "biology-of-reproduction",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biology-of-reproduction.csl"
  },
  {
    label: "Biomarkers",
    id: "biomarkers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biomarkers.csl"
  },
  {
    label: "BioMed Central",
    id: "biomed-central",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biomed-central.csl"
  },
  {
    label: "BioMed Research International",
    id: "biomed-research-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biomed-research-international.csl"
  },
  {
    label: "Biometrics",
    id: "biometrics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biometrics.csl"
  },
  {
    label: "Biomolecular Concepts",
    id: "biomolecular-concepts",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biomolecular-concepts.csl"
  },
  {
    label: "Biophysical Journal",
    id: "biophysical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biophysical-journal.csl"
  },
  {
    label: "Biophysics and Physicobiology",
    id: "biophysics-and-physicobiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biophysics-and-physicobiology.csl"
  },
  {
    label: "Biopolymers",
    id: "biopolymers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biopolymers.csl"
  },
  {
    label: "BioResources",
    id: "bioresources",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bioresources.csl"
  },
  {
    label: "BioScience",
    id: "bioscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bioscience.csl"
  },
  {
    label: "BioSocieties",
    id: "biosocieties",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biosocieties.csl"
  },
  {
    label: "Biostatistics",
    id: "biostatistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biostatistics.csl"
  },
  {
    label: "Biota Neotropica",
    id: "biota-neotropica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biota-neotropica.csl"
  },
  {
    label: "BioTechniques",
    id: "biotechniques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biotechniques.csl"
  },
  {
    label: "Biotechnology and Bioengineering",
    id: "biotechnology-and-bioengineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biotechnology-and-bioengineering.csl"
  },
  {
    label: "Biotechnology and Bioprocess Engineering",
    id: "biotechnology-and-bioprocess-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biotechnology-and-bioprocess-engineering.csl"
  },
  {
    label: "Biotropica",
    id: "biotropica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biotropica.csl"
  },
  {
    label: "b.i.t.online (note, Deutsch)",
    id: "bitonline",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bitonline.csl"
  },
  {
    label: "Biuletyn Polskiego Towarzystwa J\u0119zykoznawczego (Polski)",
    id: "biuletyn-polskiego-towarzystwa-jezykoznawczego",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/biuletyn-polskiego-towarzystwa-jezykoznawczego.csl"
  },
  {
    label: "Blood",
    id: "blood",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/blood.csl"
  },
  {
    label: "Bloomsbury Academic",
    id: "bloomsbury-academic",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bloomsbury-academic.csl"
  },
  {
    label: "Bluebook Inline",
    id: "bluebook-inline",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bluebook-inline.csl"
  },
  {
    label: "Bluebook Law Review",
    id: "bluebook-law-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bluebook-law-review.csl"
  },
  {
    label: "BMJ",
    id: "bmj",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bmj.csl"
  },
  {
    label: "Body & Society",
    id: "body-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/body-and-society.csl"
  },
  {
    label: "Bolet\xEDn de la Sociedad Geol\xF3gica Mexicana (Espa\xF1ol - Mexico)",
    id: "boletin-de-la-sociedad-geologica-mexicana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/boletin-de-la-sociedad-geologica-mexicana.csl"
  },
  {
    label: "Bolet\xEDn de Pediatr\xEDa (Espa\xF1ol)",
    id: "boletin-de-pediatria",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/boletin-de-pediatria.csl"
  },
  {
    label: "Bollettino d'archeologia online (Italiano)",
    id: "bollettino-d-archeologia-online",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bollettino-d-archeologia-online.csl"
  },
  {
    label: "Boreal Environment Research",
    id: "boreal-environment-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/boreal-environment-research.csl"
  },
  {
    label: "Bourgogne-Franche-Comt\xE9 Nature (Fran\xE7ais)",
    id: "bourgogne-franche-comte-nature",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bourgogne-franche-comte-nature.csl"
  },
  {
    label: "Brachytherapy",
    id: "brachytherapy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brachytherapy.csl"
  },
  {
    label: "Brain, Behavior and Evolution",
    id: "brain-behavior-and-evolution",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brain-behavior-and-evolution.csl"
  },
  {
    label: "Brazilian Journal of Experimental Design, Data Analysis and Inferential Statistics",
    id: "brazilian-journal-of-experimental-design-data-analysis-and-inferential-statistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brazilian-journal-of-experimental-design-data-analysis-and-inferential-statistics.csl"
  },
  {
    label: "Brazilian Journal of Infectious Diseases",
    id: "brazilian-journal-of-infectious-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brazilian-journal-of-infectious-diseases.csl"
  },
  {
    label: "Brazilian Journal of Psychiatry",
    id: "brazilian-journal-of-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brazilian-journal-of-psychiatry.csl"
  },
  {
    label: "Brazilian Journal of Veterinary Research and Animal Science",
    id: "brazilian-journal-of-veterinary-research-and-animal-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brazilian-journal-of-veterinary-research-and-animal-science.csl"
  },
  {
    label: "Brazilian Oral Research",
    id: "brazilian-oral-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brazilian-oral-research.csl"
  },
  {
    label: "BrewingScience",
    id: "brewingscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/brewingscience.csl"
  },
  {
    label: "Briefings in Bioinformatics",
    id: "briefings-in-bioinformatics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/briefings-in-bioinformatics.csl"
  },
  {
    label: "Bristol University Press",
    id: "bristol-university-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bristol-university-press.csl"
  },
  {
    label: "British Journal of Anaesthesia",
    id: "british-journal-of-anaesthesia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-anaesthesia.csl"
  },
  {
    label: "British Journal of Cancer",
    id: "british-journal-of-cancer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-cancer.csl"
  },
  {
    label: "British Journal of Dermatology",
    id: "british-journal-of-dermatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-dermatology.csl"
  },
  {
    label: "British Journal of Haematology",
    id: "british-journal-of-haematology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-haematology.csl"
  },
  {
    label: "British Journal of Industrial Relations",
    id: "british-journal-of-industrial-relations",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-industrial-relations.csl"
  },
  {
    label: "British Journal of Pharmacology",
    id: "british-journal-of-pharmacology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-pharmacology.csl"
  },
  {
    label: "British Journal of Political Science",
    id: "british-journal-of-political-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-political-science.csl"
  },
  {
    label: "British Journal of Surgery",
    id: "british-journal-of-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/british-journal-of-surgery.csl"
  },
  {
    label: "Budownictwo i Architektura",
    id: "budownictwo-i-architektura-pl",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/budownictwo-i-architektura-pl.csl"
  },
  {
    label: "Building Structure (\u4E2D\u6587)",
    id: "building-structure",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/building-structure.csl"
  },
  {
    label: "Buletin Agrohorti",
    id: "buletin-agrohorti",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/buletin-agrohorti.csl"
  },
  {
    label: "Bulletin de correspondance hell\xE9nique",
    id: "bulletin-de-correspondance-hellenique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-de-correspondance-hellenique.csl"
  },
  {
    label: "Bulletin de la Soci\xE9t\xE9 Entomologique de France",
    id: "bulletin-de-la-societe-entomologique-de-france",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-de-la-societe-entomologique-de-france.csl"
  },
  {
    label: "Bulletin de la Soci\xE9t\xE9 pr\xE9historique fran\xE7aise (Fran\xE7ais)",
    id: "bulletin-de-la-societe-prehistorique-francaise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-de-la-societe-prehistorique-francaise.csl"
  },
  {
    label: "Bulletin du Centre d\u2019\xE9tudes m\xE9di\xE9vales d\u2019Auxerre (Fran\xE7ais)",
    id: "bulletin-du-centre-detudes-medievales-dauxerre",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-du-centre-detudes-medievales-dauxerre.csl"
  },
  {
    label: "Bulletin of Geosciences",
    id: "bulletin-of-geosciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-of-geosciences.csl"
  },
  {
    label: "Bulletin of Marine Science",
    id: "bulletin-of-marine-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-of-marine-science.csl"
  },
  {
    label: "Bulletin of the American Schools of Oriental Research",
    id: "bulletin-of-the-american-schools-of-oriental-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-of-the-american-schools-of-oriental-research.csl"
  },
  {
    label: "Bulletin of the Seismological Society of America",
    id: "bulletin-of-the-seismological-society-of-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bulletin-of-the-seismological-society-of-america.csl"
  },
  {
    label: "Bursa Uluda\u011F \xDCniversitesi - E\u011Fitim Bilimleri Enstit\xFCs\xFC",
    id: "bursa-uludag-universitesi-egitim-bilimleri-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bursa-uludag-universitesi-egitim-bilimleri-enstitusu.csl"
  },
  {
    label: "Bursa Uluda\u011F \xDCniversitesi - Sa\u011Fl\u0131k Bilimleri Enstit\xFCs\xFC",
    id: "bursa-uludag-universitesi-saglik-bilimleri-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/bursa-uludag-universitesi-saglik-bilimleri-enstitusu.csl"
  },
  {
    label: "Business and Human Rights Journal",
    id: "business-and-human-rights-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/business-and-human-rights-journal.csl"
  },
  {
    label: "Business Ethics: A European Review",
    id: "business-ethics-a-european-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/business-ethics-a-european-review.csl"
  },
  {
    label: "BYZANTINA SYMMEIKTA",
    id: "byzantina-symmeikta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/byzantina-symmeikta.csl"
  },
  {
    label: "Byzantine and Modern Greek Studies",
    id: "byzantine-and-modern-greek-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/byzantine-and-modern-greek-studies.csl"
  },
  {
    label: "Cahiers d'ethnomusicologie (Fran\xE7ais)",
    id: "cahiers-d-ethnomusicologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cahiers-d-ethnomusicologie.csl"
  },
  {
    label: "Cahiers du Centre Gustave-Glotz (Fran\xE7ais)",
    id: "cahiers-du-centre-gustave-glotz",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cahiers-du-centre-gustave-glotz.csl"
  },
  {
    label: "Cahiers Mondes Anciens (Fran\xE7ais)",
    id: "cahiers-mondes-anciens",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cahiers-mondes-anciens.csl"
  },
  {
    label: "California Agriculture",
    id: "california-agriculture",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/california-agriculture.csl"
  },
  {
    label: "Cambridge Journal of Economics",
    id: "cambridge-journal-of-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cambridge-journal-of-economics.csl"
  },
  {
    label: "Cambridge University Press, CambridgeA (author-date)",
    id: "cambridge-university-press-author-date-cambridge-a",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cambridge-university-press-author-date-cambridge-a.csl"
  },
  {
    label: "Cambridge University Press, CambridgeB (author-date)",
    id: "cambridge-university-press-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cambridge-university-press-author-date.csl"
  },
  {
    label: "Cambridge University Press - Law (note)",
    id: "cambridge-university-press-law-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cambridge-university-press-law-note.csl"
  },
  {
    label: "Cambridge University Press (note)",
    id: "cambridge-university-press-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cambridge-university-press-note.csl"
  },
  {
    label: "Cambridge University Press (numeric)",
    id: "cambridge-university-press-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cambridge-university-press-numeric.csl"
  },
  {
    label: "Campus adventiste du Sal\xE8ve - Facult\xE9 adventiste de th\xE9ologie (Fran\xE7ais)",
    id: "campus-adventiste-du-saleve-faculte-adventiste-de-theologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/campus-adventiste-du-saleve-faculte-adventiste-de-theologie.csl"
  },
  {
    label: "Canadian Biosystems Engineering",
    id: "canadian-biosystems-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-biosystems-engineering.csl"
  },
  {
    label: "Canadian Geotechnical Journal",
    id: "canadian-geotechnical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-geotechnical-journal.csl"
  },
  {
    label: "Canadian Journal of Chemistry",
    id: "canadian-journal-of-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-chemistry.csl"
  },
  {
    label: "Canadian Journal of Dietetic Practice and Research",
    id: "canadian-journal-of-dietetic-practice-and-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-dietetic-practice-and-research.csl"
  },
  {
    label: "Canadian Journal of Earth Sciences",
    id: "canadian-journal-of-earth-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-earth-sciences.csl"
  },
  {
    label: "Canadian Journal of Economics",
    id: "canadian-journal-of-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-economics.csl"
  },
  {
    label: "Canadian Journal of Fisheries and Aquatic Sciences",
    id: "canadian-journal-of-fisheries-and-aquatic-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-fisheries-and-aquatic-sciences.csl"
  },
  {
    label: "Canadian Journal of Physics",
    id: "canadian-journal-of-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-physics.csl"
  },
  {
    label: "Canadian Journal of Public Health",
    id: "canadian-journal-of-public-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-public-health.csl"
  },
  {
    label: "Canadian Journal of Soil Science",
    id: "canadian-journal-of-soil-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-journal-of-soil-science.csl"
  },
  {
    label: "Canadian Public Policy",
    id: "canadian-public-policy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/canadian-public-policy.csl"
  },
  {
    label: "Cancer Biomarkers",
    id: "cancer-biomarkers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cancer-biomarkers.csl"
  },
  {
    label: "Cancer Drug Resistance",
    id: "cancer-drug-resistance",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cancer-drug-resistance.csl"
  },
  {
    label: "Cancer Translational Medicine",
    id: "cancer-translational-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cancer-translational-medicine.csl"
  },
  {
    label: "Carcinogenesis",
    id: "carcinogenesis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/carcinogenesis.csl"
  },
  {
    label: "Cardiff University - Harvard",
    id: "cardiff-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cardiff-university-harvard.csl"
  },
  {
    label: "Cardiff University - Vancouver",
    id: "cardiff-university-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cardiff-university-vancouver.csl"
  },
  {
    label: "Cardiocore (Espa\xF1ol)",
    id: "cardiocore",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cardiocore.csl"
  },
  {
    label: "Cath Lab Digest",
    id: "cath-lab-digest",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cath-lab-digest.csl"
  },
  {
    label: "Catholic Biblical Association (full note)",
    id: "catholic-biblical-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/catholic-biblical-association.csl"
  },
  {
    label: "Cell journals (numeric)",
    id: "cell-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cell-numeric.csl"
  },
  {
    label: "Cell Research",
    id: "cell-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cell-research.csl"
  },
  {
    label: "Cell Structure and Function",
    id: "cell-structure-and-function",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cell-structure-and-function.csl"
  },
  {
    label: "Cell Transplantation",
    id: "cell-transplantation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cell-transplantation.csl"
  },
  {
    label: "Cell",
    id: "cell",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cell.csl"
  },
  {
    label: "Cellular and Molecular Bioengineering",
    id: "cellular-and-molecular-bioengineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cellular-and-molecular-bioengineering.csl"
  },
  {
    label: "Cellular and Molecular Gastroenterology and Hepatology",
    id: "cellular-and-molecular-gastroenterology-and-hepatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cellular-and-molecular-gastroenterology-and-hepatology.csl"
  },
  {
    label: "Centaurus",
    id: "centaurus",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/centaurus.csl"
  },
  {
    label: "Centre de recherche sur les civilisations de l\u2019Asie orientale (Fran\xE7ais - Auteur, Date)",
    id: "centre-de-recherche-sur-les-civilisations-de-l-asie-orientale-auteur-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/centre-de-recherche-sur-les-civilisations-de-l-asie-orientale-auteur-date.csl"
  },
  {
    label: "Centre de recherche sur les civilisations de l'Asie orientale (Fran\xE7ais - note)",
    id: "centre-de-recherche-sur-les-civilisations-de-l-asie-orientale",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/centre-de-recherche-sur-les-civilisations-de-l-asie-orientale.csl"
  },
  {
    label: "Cerebral Cortex",
    id: "cerebral-cortex",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cerebral-cortex.csl"
  },
  {
    label: "\u010Cesk\xE1 zem\u011Bd\u011Blsk\xE1 univerzita v Praze - Fakulta agrobiologie, potravinov\xFDch a p\u0159\xEDrodn\xEDch zdroj\u016F",
    id: "ceska-zemedelska-univerzita-v-praze-fakulta-agrobiologie-potravinovych-a-prirodnich-zdroju",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ceska-zemedelska-univerzita-v-praze-fakulta-agrobiologie-potravinovych-a-prirodnich-zdroju.csl"
  },
  {
    label: "Changer d'\xE9poque (Fran\xE7ais)",
    id: "changer-d-epoque",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/changer-d-epoque.csl"
  },
  {
    label: "The Chaucer Review",
    id: "chaucer-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chaucer-review.csl"
  },
  {
    label: "Chemical and Pharmaceutical Bulletin",
    id: "chemical-and-pharmaceutical-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chemical-and-pharmaceutical-bulletin.csl"
  },
  {
    label: "Chemical Biology & Drug Design",
    id: "chemical-biology-and-drug-design",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chemical-biology-and-drug-design.csl"
  },
  {
    label: "Chemical Engineering Progress",
    id: "chemical-engineering-progress",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chemical-engineering-progress.csl"
  },
  {
    label: "Chemical Engineering & Technology",
    id: "chemical-engineering-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chemical-engineering-technology.csl"
  },
  {
    label: "Chemical Senses",
    id: "chemical-senses",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chemical-senses.csl"
  },
  {
    label: "Chemie Ingenieur Technik",
    id: "chemie-ingenieur-technik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chemie-ingenieur-technik.csl"
  },
  {
    label: "Chemistry Education Research and Practice",
    id: "chemistry-education-research-and-practice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chemistry-education-research-and-practice.csl"
  },
  {
    label: "Chest",
    id: "chest",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chest.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (note, annotated bibliography)",
    id: "chicago-annotated-bibliography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-annotated-bibliography.csl"
  },
  {
    label: "Chicago Manual of Style 16th edition (author-date)",
    id: "chicago-author-date-16th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date-16th-edition.csl"
  },
  {
    label: "Chicago Manual of Style 16th edition (author-date, Euskara)",
    id: "chicago-author-date-basque",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date-basque.csl"
  },
  {
    label: "Chicago Manual of Style 16th edition (author-date, Deutsch)",
    id: "chicago-author-date-de",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date-de.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (author-date, Fran\xE7ais)",
    id: "chicago-author-date-fr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date-fr.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (author-date)",
    id: "chicago-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date.csl"
  },
  {
    label: "Chicago Manual of Style 16th edition (figures and illustrations)",
    id: "chicago-figures",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-figures.csl"
  },
  {
    label: "Chicago Manual of Style 16th edition (full note)",
    id: "chicago-fullnote-bibliography-16th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-fullnote-bibliography-16th-edition.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (full note, Fran\xE7ais)",
    id: "chicago-fullnote-bibliography-fr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-fullnote-bibliography-fr.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (full note, short title subsequent)",
    id: "chicago-fullnote-bibliography-short-title-subsequent",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-fullnote-bibliography-short-title-subsequent.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (full note, with Ibid.)",
    id: "chicago-fullnote-bibliography-with-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-fullnote-bibliography-with-ibid.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (full note)",
    id: "chicago-fullnote-bibliography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-fullnote-bibliography.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (library list)",
    id: "chicago-library-list",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-library-list.csl"
  },
  {
    label: "Chicago Manual of Style 16th edition (note)",
    id: "chicago-note-bibliography-16th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-note-bibliography-16th-edition.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (note, with Ibid.)",
    id: "chicago-note-bibliography-with-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-note-bibliography-with-ibid.csl"
  },
  {
    label: "Chicago Manual of Style 17th edition (note)",
    id: "chicago-note-bibliography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-note-bibliography.csl"
  },
  {
    label: "CHIMIA",
    id: "chimia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chimia.csl"
  },
  {
    label: "China Information",
    id: "china-information",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/china-information.csl"
  },
  {
    label: "China National Standard GB/T 7714-2015 (author-date, \u4E2D\u6587)",
    id: "china-national-standard-gb-t-7714-2015-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/china-national-standard-gb-t-7714-2015-author-date.csl"
  },
  {
    label: "China National Standard GB/T 7714-2015 (note, \u4E2D\u6587)",
    id: "china-national-standard-gb-t-7714-2015-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/china-national-standard-gb-t-7714-2015-note.csl"
  },
  {
    label: "China National Standard GB/T 7714-2015 (numeric, \u4E2D\u6587)",
    id: "china-national-standard-gb-t-7714-2015-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/china-national-standard-gb-t-7714-2015-numeric.csl"
  },
  {
    label: "China National Standard GB/T 7714-1987 (numeric, \u4E2D\u6587)",
    id: "chinese-gb7714-1987-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chinese-gb7714-1987-numeric.csl"
  },
  {
    label: "China National Standard GB/T 7714-2005 (author-date, \u4E2D\u6587)",
    id: "chinese-gb7714-2005-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chinese-gb7714-2005-author-date.csl"
  },
  {
    label: "China National Standard GB/T 7714-2005 (numeric, \u4E2D\u6587)",
    id: "chinese-gb7714-2005-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chinese-gb7714-2005-numeric.csl"
  },
  {
    label: "Chinese Journal of Aeronautics",
    id: "chinese-journal-of-aeronautics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chinese-journal-of-aeronautics.csl"
  },
  {
    label: "Chinese Medical Journal",
    id: "chinese-medical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chinese-medical-journal.csl"
  },
  {
    label: "Chroniques des activit\xE9s arch\xE9ologiques de l'Ecole fran\xE7aise de Rome",
    id: "chroniques-des-activites-archeologiques-de-l-ecole-francaise-de-rome",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chroniques-des-activites-archeologiques-de-l-ecole-francaise-de-rome.csl"
  },
  {
    label: "Chungara Revista de Antropolog\xEDa Chilena (Espa\xF1ol - Chile)",
    id: "chungara-revista-de-antropologia-chilena",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/chungara-revista-de-antropologia-chilena.csl"
  },
  {
    label: "Circulation Journal",
    id: "circulation-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/circulation-journal.csl"
  },
  {
    label: "Circulation",
    id: "circulation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/circulation.csl"
  },
  {
    label: "Cirugia Cardiovascular (Espa\xF1ol)",
    id: "cirugia-cardiovascular",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cirugia-cardiovascular.csl"
  },
  {
    label: "Citation Compass (Kildekompasset) - APA (note)",
    id: "citation-compass-apa-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/citation-compass-apa-note.csl"
  },
  {
    label: "Citizen Science: Theory and Practice",
    id: "citizen-science-theory-and-practice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/citizen-science-theory-and-practice.csl"
  },
  {
    label: "Civilt\xE0 Italiana (Italiano)",
    id: "civilta-italiana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/civilta-italiana.csl"
  },
  {
    label: "Civitas: Revista de Ci\xEAncias Sociais",
    id: "civitas-revista-de-ciencias-sociais",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/civitas-revista-de-ciencias-sociais.csl"
  },
  {
    label: "Cladistics",
    id: "cladistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cladistics.csl"
  },
  {
    label: "CLARA Architecture/Recherche (Fran\xE7ais)",
    id: "clara-architecture-recherche",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clara-architecture-recherche.csl"
  },
  {
    label: "Clay Minerals",
    id: "clay-minerals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clay-minerals.csl"
  },
  {
    label: "Clays and Clay Minerals",
    id: "clays-and-clay-minerals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clays-and-clay-minerals.csl"
  },
  {
    label: "Climate Change Economics",
    id: "climate-change-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/climate-change-economics.csl"
  },
  {
    label: "Cl\xEDnica e Investigaci\xF3n en Arteriosclerosis (Espa\xF1ol)",
    id: "clinica-e-investigacion-en-arteriosclerosis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinica-e-investigacion-en-arteriosclerosis.csl"
  },
  {
    label: "Clinical Anatomy",
    id: "clinical-anatomy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-anatomy.csl"
  },
  {
    label: "Clinical Dysmorphology",
    id: "clinical-dysmorphology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-dysmorphology.csl"
  },
  {
    label: "Clinical Gastroenterology and Hepatology",
    id: "clinical-gastroenterology-and-hepatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-gastroenterology-and-hepatology.csl"
  },
  {
    label: "Clinical Hemorheology and Microcirculation",
    id: "clinical-hemorheology-and-microcirculation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-hemorheology-and-microcirculation.csl"
  },
  {
    label: "Clinical Infectious Diseases",
    id: "clinical-infectious-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-infectious-diseases.csl"
  },
  {
    label: "Clinical Journal of Sport Medicine",
    id: "clinical-journal-of-sport-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-journal-of-sport-medicine.csl"
  },
  {
    label: "Clinical Journal of the American Society of Nephrology",
    id: "clinical-journal-of-the-american-society-of-nephrology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-journal-of-the-american-society-of-nephrology.csl"
  },
  {
    label: "Clinical Management Issues",
    id: "clinical-management-issues",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-management-issues.csl"
  },
  {
    label: "Clinical Nuclear Medicine",
    id: "clinical-nuclear-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-nuclear-medicine.csl"
  },
  {
    label: "Clinical Oral Implants Research",
    id: "clinical-oral-implants-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-oral-implants-research.csl"
  },
  {
    label: "Clinical Orthopaedics and Related Research",
    id: "clinical-orthopaedics-and-related-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-orthopaedics-and-related-research.csl"
  },
  {
    label: "Clinical Otolaryngology",
    id: "clinical-otolaryngology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-otolaryngology.csl"
  },
  {
    label: "Clinical Pharmacology & Therapeutics",
    id: "clinical-pharmacology-and-therapeutics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-pharmacology-and-therapeutics.csl"
  },
  {
    label: "Clinical Physiology and Functional Imaging",
    id: "clinical-physiology-and-functional-imaging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-physiology-and-functional-imaging.csl"
  },
  {
    label: "Clinical Radiology",
    id: "clinical-radiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-radiology.csl"
  },
  {
    label: "Clinical Spine Surgery",
    id: "clinical-spine-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clinical-spine-surgery.csl"
  },
  {
    label: "Clio Medica",
    id: "clio-medica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/clio-medica.csl"
  },
  {
    label: "CNS & Neurological Disorders - Drug Targets",
    id: "cns-and-neurological-disorders-drug-targets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cns-and-neurological-disorders-drug-targets.csl"
  },
  {
    label: "CNS Spectrums",
    id: "cns-spectrums",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cns-spectrums.csl"
  },
  {
    label: "Cold Spring Harbor Laboratory Press",
    id: "cold-spring-harbor-laboratory-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cold-spring-harbor-laboratory-press.csl"
  },
  {
    label: "Collection de l'Ecole fran\xE7aise de Rome (full note, Fran\xE7ais)",
    id: "collection-de-l-ecole-francaise-de-rome-full-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/collection-de-l-ecole-francaise-de-rome-full-note.csl"
  },
  {
    label: "Collection de l'Ecole fran\xE7aise de Rome (note, Fran\xE7ais)",
    id: "collection-de-l-ecole-francaise-de-rome-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/collection-de-l-ecole-francaise-de-rome-note.csl"
  },
  {
    label: "Collection du Centre Jean-B\xE9rard (Fran\xE7ais)",
    id: "collection-du-centre-jean-berard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/collection-du-centre-jean-berard.csl"
  },
  {
    label: "Collections \xE9lectroniques de l'INHA (author-date, Fran\xE7ais)",
    id: "collections-electroniques-de-l-inha-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/collections-electroniques-de-l-inha-author-date.csl"
  },
  {
    label: "Collections \xE9lectroniques de l'INHA (full note, Fran\xE7ais)",
    id: "collections-electroniques-de-l-inha-full-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/collections-electroniques-de-l-inha-full-note.csl"
  },
  {
    label: "Coll\xE8ge Montmorency (note, Fran\xE7ais - Canada)",
    id: "college-montmorency",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/college-montmorency.csl"
  },
  {
    label: "College of Naturopathic Medicine",
    id: "college-of-naturopathic-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/college-of-naturopathic-medicine.csl"
  },
  {
    label: "Colombian Journal of Anesthesiology",
    id: "colombian-journal-of-anesthesiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/colombian-journal-of-anesthesiology.csl"
  },
  {
    label: "Colorado State University - School of Biomedical Engineering",
    id: "colorado-state-university-school-of-biomedical-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/colorado-state-university-school-of-biomedical-engineering.csl"
  },
  {
    label: "Comisi\xF3n Econ\xF3mica para Am\xE9rica Latina y el Caribe (Espa\xF1ol)",
    id: "comision-economica-para-america-latina-y-el-caribe",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/comision-economica-para-america-latina-y-el-caribe.csl"
  },
  {
    label: "Common Market Law Review",
    id: "common-market-law-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/common-market-law-review.csl"
  },
  {
    label: "Communication et Langages",
    id: "communication-et-langages",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/communication-et-langages.csl"
  },
  {
    label: "Comparativ",
    id: "comparativ",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/comparativ.csl"
  },
  {
    label: "Comparative Politics",
    id: "comparative-politics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/comparative-politics.csl"
  },
  {
    label: "Comparative Population Studies",
    id: "comparative-population-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/comparative-population-studies.csl"
  },
  {
    label: "Computer Supported Cooperative Work",
    id: "computer-supported-cooperative-work",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/computer-supported-cooperative-work.csl"
  },
  {
    label: "Computer und Recht (Deutsch)",
    id: "computer-und-recht",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/computer-und-recht.csl"
  },
  {
    label: "Conservation & Society",
    id: "conservation-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/conservation-and-society.csl"
  },
  {
    label: "Conservation Biology",
    id: "conservation-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/conservation-biology.csl"
  },
  {
    label: "Conservation Letters",
    id: "conservation-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/conservation-letters.csl"
  },
  {
    label: "Conservation Physiology",
    id: "conservation-physiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/conservation-physiology.csl"
  },
  {
    label: "Constructivist Foundations",
    id: "constructivist-foundations",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/constructivist-foundations.csl"
  },
  {
    label: "Contemporary Accounting Research",
    id: "contemporary-accounting-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/contemporary-accounting-research.csl"
  },
  {
    label: "Continuity and Change",
    id: "continuity-and-change",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/continuity-and-change.csl"
  },
  {
    label: "Contributions to the Archaeology of Egypt, Nubia and the Levant",
    id: "contributions-to-the-archaeology-of-egypt-nubia-and-the-levant",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/contributions-to-the-archaeology-of-egypt-nubia-and-the-levant.csl"
  },
  {
    label: "Copeia",
    id: "copeia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/copeia.csl"
  },
  {
    label: "Copernicus Publications",
    id: "copernicus-publications",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/copernicus-publications.csl"
  },
  {
    label: "Coral Reefs",
    id: "coral-reefs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/coral-reefs.csl"
  },
  {
    label: "Cornea",
    id: "cornea",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cornea.csl"
  },
  {
    label: "Corrosion",
    id: "corrosion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/corrosion.csl"
  },
  {
    label: "Council of Science Editors, Citation-Name (numeric, sorted alphabetically)",
    id: "council-of-science-editors-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/council-of-science-editors-alphabetical.csl"
  },
  {
    label: "Council of Science Editors, Name-Year (author-date)",
    id: "council-of-science-editors-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/council-of-science-editors-author-date.csl"
  },
  {
    label: "Council of Science Editors, Citation-Sequence (numeric, brackets)",
    id: "council-of-science-editors-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/council-of-science-editors-brackets.csl"
  },
  {
    label: "Council of Science Editors, Citation-Sequence (numeric)",
    id: "council-of-science-editors",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/council-of-science-editors.csl"
  },
  {
    label: "Cranfield University (numeric)",
    id: "cranfield-university-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cranfield-university-numeric.csl"
  },
  {
    label: "Creativity and Innovation Management",
    id: "creativity-and-innovation-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/creativity-and-innovation-management.csl"
  },
  {
    label: "Critical Care Medicine",
    id: "critical-care-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/critical-care-medicine.csl"
  },
  {
    label: "Critical Reviews in Plant Sciences",
    id: "critical-reviews-in-plant-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/critical-reviews-in-plant-sciences.csl"
  },
  {
    label: "Critical Reviews in Solid State and Materials Sciences",
    id: "critical-reviews-in-solid-state-and-materials-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/critical-reviews-in-solid-state-and-materials-sciences.csl"
  },
  {
    label: "Crop Breeding and Applied Biotechnology",
    id: "crop-breeding-and-applied-biotechnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/crop-breeding-and-applied-biotechnology.csl"
  },
  {
    label: "Crustaceana",
    id: "crustaceana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/crustaceana.csl"
  },
  {
    label: "Cuadernos de Filolog\xEDa Cl\xE1sica. Estudios Griegos e Indoeuropeos (autor-a\xF1o, Espa\xF1ol)",
    id: "cuadernos-de-filologia-clasica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cuadernos-de-filologia-clasica.csl"
  },
  {
    label: "Cultivos Tropicales (Espa\xF1ol)",
    id: "cultivos-tropicales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cultivos-tropicales.csl"
  },
  {
    label: "cultural geographies",
    id: "cultural-geographies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cultural-geographies.csl"
  },
  {
    label: "Cultural Studies of Science Education",
    id: "cultural-studies-of-science-education",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cultural-studies-of-science-education.csl"
  },
  {
    label: "Culture, Medicine, and Psychiatry",
    id: "culture-medicine-and-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/culture-medicine-and-psychiatry.csl"
  },
  {
    label: "Cureus",
    id: "cureus",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cureus.csl"
  },
  {
    label: "Current Alzheimer Research",
    id: "current-alzheimer-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-alzheimer-research.csl"
  },
  {
    label: "Current Gene Therapy",
    id: "current-gene-therapy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-gene-therapy.csl"
  },
  {
    label: "Current Neurology - Aktualno\u015Bci Neurologiczne",
    id: "current-neurology-aktualnosci-neurologiczne",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-neurology-aktualnosci-neurologiczne.csl"
  },
  {
    label: "Current Opinion in Endocrinology, Diabetes and Obesity",
    id: "current-opinion-in-endocrinology-diabetes-and-obesity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-opinion-in-endocrinology-diabetes-and-obesity.csl"
  },
  {
    label: "Current Opinion journals",
    id: "current-opinion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-opinion.csl"
  },
  {
    label: "Current Organic Synthesis",
    id: "current-organic-synthesis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-organic-synthesis.csl"
  },
  {
    label: "Current Pharmaceutical Design",
    id: "current-pharmaceutical-design",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-pharmaceutical-design.csl"
  },
  {
    label: "Current Proteomics",
    id: "current-proteomics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-proteomics.csl"
  },
  {
    label: "Current Protocols journals",
    id: "current-protocols",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-protocols.csl"
  },
  {
    label: "Current Science",
    id: "current-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-science.csl"
  },
  {
    label: "Current Topics in Medicinal Chemistry",
    id: "current-topics-in-medicinal-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/current-topics-in-medicinal-chemistry.csl"
  },
  {
    label: "Currents in Biblical Research",
    id: "currents-in-biblical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/currents-in-biblical-research.csl"
  },
  {
    label: "Cybium",
    id: "cybium",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cybium.csl"
  },
  {
    label: "Cytometry",
    id: "cytometry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/cytometry.csl"
  },
  {
    label: "Czech Journal of International Relations",
    id: "czech-journal-of-international-relations",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/czech-journal-of-international-relations.csl"
  },
  {
    label: "Data Science Journal",
    id: "data-science-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/data-science-journal.csl"
  },
  {
    label: "Database",
    id: "database",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/database.csl"
  },
  {
    label: "De Buck (Nederlands)",
    id: "de-buck",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/de-buck.csl"
  },
  {
    label: "De Montfort University - Harvard",
    id: "de-montfort-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/de-montfort-university-harvard.csl"
  },
  {
    label: "Decision Sciences",
    id: "decision-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/decision-sciences.csl"
  },
  {
    label: "Demographic Research",
    id: "demographic-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/demographic-research.csl"
  },
  {
    label: "der moderne staat (Deutsch)",
    id: "der-moderne-staat",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/der-moderne-staat.csl"
  },
  {
    label: "Dermatology Online Journal",
    id: "dermatology-online-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/dermatology-online-journal.csl"
  },
  {
    label: "Deutsche Gesellschaft f\xFCr Psychologie 5. Auflage (Deutsch)",
    id: "deutsche-gesellschaft-fur-psychologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/deutsche-gesellschaft-fur-psychologie.csl"
  },
  {
    label: "Deutsche Sprache (Deutsch)",
    id: "deutsche-sprache",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/deutsche-sprache.csl"
  },
  {
    label: "Deutsches Arch\xE4ologisches Institut",
    id: "deutsches-archaologisches-institut",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/deutsches-archaologisches-institut.csl"
  },
  {
    label: "Deutsches \xC4rzteblatt",
    id: "deutsches-arzteblatt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/deutsches-arzteblatt.csl"
  },
  {
    label: "Developing World Bioethics",
    id: "developing-world-bioethics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/developing-world-bioethics.csl"
  },
  {
    label: "Development and Change",
    id: "development-and-change",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/development-and-change.csl"
  },
  {
    label: "Development Policy Review",
    id: "development-policy-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/development-policy-review.csl"
  },
  {
    label: "Developmental Dynamics",
    id: "developmental-dynamics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/developmental-dynamics.csl"
  },
  {
    label: "Developmental Medicine & Child Neurology",
    id: "developmental-medicine-and-child-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/developmental-medicine-and-child-neurology.csl"
  },
  {
    label: "Developmental Neurobiology",
    id: "developmental-neurobiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/developmental-neurobiology.csl"
  },
  {
    label: "Diabetologia",
    id: "diabetologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/diabetologia.csl"
  },
  {
    label: "Diagn\xF3stico Prenatal (Espa\xF1ol)",
    id: "diagnostico-prenatal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/diagnostico-prenatal.csl"
  },
  {
    label: "Dialisis y Trasplante (Espa\xF1ol)",
    id: "dialisis-y-trasplante",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/dialisis-y-trasplante.csl"
  },
  {
    label: "Diatom Research",
    id: "diatom-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/diatom-research.csl"
  },
  {
    label: "Die Bachelorarbeit (Samac et al.) (in-text, Deutsch)",
    id: "die-bachelorarbeit-samac-et-al-in-text",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/die-bachelorarbeit-samac-et-al-in-text.csl"
  },
  {
    label: "Die Bachelorarbeit (Samac et al.) (note, Deutsch)",
    id: "die-bachelorarbeit-samac-et-al-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/die-bachelorarbeit-samac-et-al-note.csl"
  },
  {
    label: "Digital Humanities im deutschsprachigen Raum (Deutsch)",
    id: "digital-humanities-im-deutschsprachigen-raum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/digital-humanities-im-deutschsprachigen-raum.csl"
  },
  {
    label: "Digital Scholarship in the Humanities",
    id: "digital-scholarship-in-the-humanities",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/digital-scholarship-in-the-humanities.csl"
  },
  {
    label: "DIN 1505-2 (alphanumeric, Deutsch) - standard superseded by ISO-690",
    id: "din-1505-2-alphanumeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/din-1505-2-alphanumeric.csl"
  },
  {
    label: "DIN 1505-2 (numeric, sorted alphabetically, Deutsch) - standard superseded by ISO-690",
    id: "din-1505-2-numeric-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/din-1505-2-numeric-alphabetical.csl"
  },
  {
    label: "DIN 1505-2 (numeric, Deutsch) - standard superseded by ISO-690",
    id: "din-1505-2-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/din-1505-2-numeric.csl"
  },
  {
    label: "DIN 1505-2 (author-date, Deutsch) - standard superseded by ISO-690",
    id: "din-1505-2",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/din-1505-2.csl"
  },
  {
    label: "Diplo",
    id: "diplo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/diplo.csl"
  },
  {
    label: "Disability and Rehabilitation",
    id: "disability-and-rehabilitation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/disability-and-rehabilitation.csl"
  },
  {
    label: "Discovery Medicine",
    id: "discovery-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/discovery-medicine.csl"
  },
  {
    label: "DNA Research",
    id: "dna-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/dna-research.csl"
  },
  {
    label: "Documents d'arch\xE9ologie fran\xE7aise (Fran\xE7ais)",
    id: "documents-d-archeologie-francaise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/documents-d-archeologie-francaise.csl"
  },
  {
    label: "Donau-Universit\xE4t Krems - Department f\xFCr E-Governance in Wirtschaft und Verwaltung (Deutsch - \xD6sterreich)",
    id: "donau-universitat-krems-department-fur-e-governance-in-wirthschaft-und-verwaltung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/donau-universitat-krems-department-fur-e-governance-in-wirthschaft-und-verwaltung.csl"
  },
  {
    label: "Drug Development Research",
    id: "drug-development-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/drug-development-research.csl"
  },
  {
    label: "Drug Testing and Analysis",
    id: "drug-testing-and-analysis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/drug-testing-and-analysis.csl"
  },
  {
    label: "Drugs of Today",
    id: "drugs-of-today",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/drugs-of-today.csl"
  },
  {
    label: "Durban University of Technology - Harvard",
    id: "durban-university-of-technology-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/durban-university-of-technology-harvard.csl"
  },
  {
    label: "E3S Web of Conferences",
    id: "e3s-web-of-conferences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/e3s-web-of-conferences.csl"
  },
  {
    label: "Ear and Hearing",
    id: "ear-and-hearing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ear-and-hearing.csl"
  },
  {
    label: "Early Christianity",
    id: "early-christianity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/early-christianity.csl"
  },
  {
    label: "Early Medieval Europe",
    id: "early-medieval-europe",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/early-medieval-europe.csl"
  },
  {
    label: "Early Music History",
    id: "early-music-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/early-music-history.csl"
  },
  {
    label: "Earth Surface Processes and Landforms",
    id: "earth-surface-processes-and-landforms",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/earth-surface-processes-and-landforms.csl"
  },
  {
    label: "Earthquake Engineering & Structural Dynamics",
    id: "earthquake-engineering-and-structural-dynamics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/earthquake-engineering-and-structural-dynamics.csl"
  },
  {
    label: "Earthquake Spectra",
    id: "earthquake-spectra",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/earthquake-spectra.csl"
  },
  {
    label: "Ecclesial Practices",
    id: "ecclesial-practices",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecclesial-practices.csl"
  },
  {
    label: "\xC9cole de technologie sup\xE9rieure - APA (Fran\xE7ais - Canada)",
    id: "ecole-de-technologie-superieure-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecole-de-technologie-superieure-apa.csl"
  },
  {
    label: "\xC9cole Pratique des Hautes \xC9tudes - Sciences historiques et philologiques (Fran\xE7ais)",
    id: "ecole-pratique-des-hautes-etudes-sciences-historiques-et-philologiques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecole-pratique-des-hautes-etudes-sciences-historiques-et-philologiques.csl"
  },
  {
    label: "Ecological Entomology",
    id: "ecological-entomology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecological-entomology.csl"
  },
  {
    label: "Ecological Restoration",
    id: "ecological-restoration",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecological-restoration.csl"
  },
  {
    label: "Ecology and Society",
    id: "ecology-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecology-and-society.csl"
  },
  {
    label: "Ecology Letters",
    id: "ecology-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecology-letters.csl"
  },
  {
    label: "Ecology of Freshwater Fish",
    id: "ecology-of-freshwater-fish",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecology-of-freshwater-fish.csl"
  },
  {
    label: "Ecology",
    id: "ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecology.csl"
  },
  {
    label: "Econometrica",
    id: "econometrica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/econometrica.csl"
  },
  {
    label: "Econom\xEDa y Pol\xEDtica (Espa\xF1ol - Chile)",
    id: "economia-y-politica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/economia-y-politica.csl"
  },
  {
    label: "Economic Commission for Latin America and the Caribbean",
    id: "economic-commission-for-latin-america-and-the-caribbean",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/economic-commission-for-latin-america-and-the-caribbean.csl"
  },
  {
    label: "Economic Geology",
    id: "economic-geology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/economic-geology.csl"
  },
  {
    label: "\xC9conomie et Statistique (Fran\xE7ais)",
    id: "economie-et-statistique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/economie-et-statistique.csl"
  },
  {
    label: "\xC9coscience",
    id: "ecoscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecoscience.csl"
  },
  {
    label: "Ecosistemas (Espa\xF1ol)",
    id: "ecosistemas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecosistemas.csl"
  },
  {
    label: "Ecosystems",
    id: "ecosystems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ecosystems.csl"
  },
  {
    label: "Edward Elgar Publishing - Business and Social Sciences",
    id: "edward-elgar-business-and-social-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/edward-elgar-business-and-social-sciences.csl"
  },
  {
    label: "Effective Altruism Wiki",
    id: "effective-altruism-wiki",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/effective-altruism-wiki.csl"
  },
  {
    label: "Egretta (Deutsch - \xD6sterreich)",
    id: "egretta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/egretta.csl"
  },
  {
    label: "Einaudi (Italiano)",
    id: "einaudi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/einaudi.csl"
  },
  {
    label: "Eksploatacja i Niezawodnosc - Maintenance and Reliability",
    id: "eksploatacja-i-niezawodnosc",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eksploatacja-i-niezawodnosc.csl"
  },
  {
    label: "Profesional de la informaci\xF3n (Espa\xF1ol)",
    id: "el-profesional-de-la-informacion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/el-profesional-de-la-informacion.csl"
  },
  {
    label: "Electrophoresis",
    id: "electrophoresis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/electrophoresis.csl"
  },
  {
    label: "Elementa",
    id: "elementa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elementa.csl"
  },
  {
    label: "eLife",
    id: "elife",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elife.csl"
  },
  {
    label: "Elsevier - American Chemical Society",
    id: "elsevier-american-chemical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-american-chemical-society.csl"
  },
  {
    label: "Elsevier - Harvard (without titles)",
    id: "elsevier-harvard-without-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-harvard-without-titles.csl"
  },
  {
    label: "Elsevier - Harvard (with titles)",
    id: "elsevier-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-harvard.csl"
  },
  {
    label: "Elsevier - Harvard 2",
    id: "elsevier-harvard2",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-harvard2.csl"
  },
  {
    label: "Elsevier - Vancouver (author-date)",
    id: "elsevier-vancouver-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-vancouver-author-date.csl"
  },
  {
    label: "Elsevier - Vancouver",
    id: "elsevier-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-vancouver.csl"
  },
  {
    label: "Elsevier (numeric, with titles, sorted alphabetically)",
    id: "elsevier-with-titles-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-with-titles-alphabetical.csl"
  },
  {
    label: "Elsevier (numeric, with titles)",
    id: "elsevier-with-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-with-titles.csl"
  },
  {
    label: "Elsevier (numeric, without titles)",
    id: "elsevier-without-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/elsevier-without-titles.csl"
  },
  {
    label: "EMBnet.journal",
    id: "embnet-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/embnet-journal.csl"
  },
  {
    label: "EMBO Press",
    id: "embo-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/embo-press.csl"
  },
  {
    label: "Emerald - Harvard",
    id: "emerald-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/emerald-harvard.csl"
  },
  {
    label: "Emu - Austral Ornithology",
    id: "emu-austral-ornithology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/emu-austral-ornithology.csl"
  },
  {
    label: "Endocrine Connections",
    id: "endocrine-connections",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/endocrine-connections.csl"
  },
  {
    label: "Endocrine Journal",
    id: "endocrine-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/endocrine-journal.csl"
  },
  {
    label: "Endocrine Press",
    id: "endocrine-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/endocrine-press.csl"
  },
  {
    label: "Endoscopia (Espa\xF1ol)",
    id: "endoscopia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/endoscopia.csl"
  },
  {
    label: "Energy Research & Social Science",
    id: "energy-research-and-social-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/energy-research-and-social-science.csl"
  },
  {
    label: "eNeuro",
    id: "eneuro",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eneuro.csl"
  },
  {
    label: "Enfermer\xEDa Cl\xEDnica (Espa\xF1ol)",
    id: "enfermeria-clinica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/enfermeria-clinica.csl"
  },
  {
    label: "Enfermer\xEDa Intensiva (Espa\xF1ol)",
    id: "enfermeria-intensiva",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/enfermeria-intensiva.csl"
  },
  {
    label: "Engineered Regeneration",
    id: "engineered-regeneration",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/engineered-regeneration.csl"
  },
  {
    label: "Engineering in Life Sciences",
    id: "engineering-in-life-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/engineering-in-life-sciences.csl"
  },
  {
    label: "Engineering, Technology & Applied Science Research",
    id: "engineering-technology-and-applied-science-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/engineering-technology-and-applied-science-research.csl"
  },
  {
    label: "ENS de Lyon - Centre d'ing\xE9nierie documentaire (Fran\xE7ais)",
    id: "ens-de-lyon-centre-d-ingenierie-documentaire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ens-de-lyon-centre-d-ingenierie-documentaire.csl"
  },
  {
    label: "ENTECHO (\u010Ce\u0161tina)",
    id: "entecho",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/entecho.csl"
  },
  {
    label: "Entomologia Experimentalis et Applicata",
    id: "entomologia-experimentalis-et-applicata",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/entomologia-experimentalis-et-applicata.csl"
  },
  {
    label: "Entomological Review",
    id: "entomological-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/entomological-review.csl"
  },
  {
    label: "Entomological Society of America",
    id: "entomological-society-of-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/entomological-society-of-america.csl"
  },
  {
    label: "Environment and Planning",
    id: "environment-and-planning",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environment-and-planning.csl"
  },
  {
    label: "Environment and Urbanization",
    id: "environment-and-urbanization",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environment-and-urbanization.csl"
  },
  {
    label: "Environmental & Engineering Geoscience",
    id: "environmental-and-engineering-geoscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environmental-and-engineering-geoscience.csl"
  },
  {
    label: "Environmental Chemistry",
    id: "environmental-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environmental-chemistry.csl"
  },
  {
    label: "Environmental Conservation",
    id: "environmental-conservation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environmental-conservation.csl"
  },
  {
    label: "Environmental Health Perspectives",
    id: "environmental-health-perspectives",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environmental-health-perspectives.csl"
  },
  {
    label: "Environmental Microbiology",
    id: "environmental-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environmental-microbiology.csl"
  },
  {
    label: "Environmental Values",
    id: "environmental-values",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environmental-values.csl"
  },
  {
    label: "Environnement, Risques & Sant\xE9",
    id: "environnement-risques-et-sante",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/environnement-risques-et-sante.csl"
  },
  {
    label: "Ephemerides Theologicae Lovanienses",
    id: "ephemerides-theologicae-lovanienses",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ephemerides-theologicae-lovanienses.csl"
  },
  {
    label: "\xC9pid\xE9miologie et Sant\xE9 Animale",
    id: "epidemiologie-et-sante-animale",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/epidemiologie-et-sante-animale.csl"
  },
  {
    label: "Epidemiology & Infection",
    id: "epidemiology-and-infection",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/epidemiology-and-infection.csl"
  },
  {
    label: "Epilepsia",
    id: "epilepsia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/epilepsia.csl"
  },
  {
    label: "Equine Veterinary Education",
    id: "equine-veterinary-education",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/equine-veterinary-education.csl"
  },
  {
    label: "Equine Veterinary Journal",
    id: "equine-veterinary-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/equine-veterinary-journal.csl"
  },
  {
    label: "Ergo",
    id: "ergo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ergo.csl"
  },
  {
    label: "ergoscience",
    id: "ergoscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ergoscience.csl"
  },
  {
    label: "Errata: Publica\xE7\xE3o sobre processos editoriais (Portugu\xEAs - Brasil)",
    id: "errata",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/errata.csl"
  },
  {
    label: "Escuela Nacional de Antropolog\xEDa e Historia (autor-fecha, Espa\xF1ol - M\xE9xico)",
    id: "escuela-nacional-de-antropologia-e-historia-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/escuela-nacional-de-antropologia-e-historia-author-date.csl"
  },
  {
    label: "Escuela Nacional de Antropolog\xEDa e Historia (nota completa, Espa\xF1ol - M\xE9xico)",
    id: "escuela-nacional-de-antropologia-e-historia-full-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/escuela-nacional-de-antropologia-e-historia-full-note.csl"
  },
  {
    label: "Escuela Nacional de Antropolog\xEDa e Historia (nota corta, Espa\xF1ol - M\xE9xico)",
    id: "escuela-nacional-de-antropologia-e-historia-short-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/escuela-nacional-de-antropologia-e-historia-short-note.csl"
  },
  {
    label: "Estonian Journal of Earth Sciences",
    id: "estonian-journal-of-earth-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/estonian-journal-of-earth-sciences.csl"
  },
  {
    label: "Estuaries and Coasts",
    id: "estuaries-and-coasts",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/estuaries-and-coasts.csl"
  },
  {
    label: "Estudios de Cultura Maya (Espa\xF1ol - M\xE9xico)",
    id: "estudios-de-cultura-maya",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/estudios-de-cultura-maya.csl"
  },
  {
    label: "Estudios de Fon\xE9tica Experimental",
    id: "estudios-de-fonetica-experimental",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/estudios-de-fonetica-experimental.csl"
  },
  {
    label: "Estudios Hisp\xE1nicos (Espa\xF1ol)",
    id: "estudios-hispanicos",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/estudios-hispanicos.csl"
  },
  {
    label: "Ethics (for book reviews)",
    id: "ethics-book-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ethics-book-reviews.csl"
  },
  {
    label: "Ethnobiology and Conservation",
    id: "ethnobiology-and-conservation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ethnobiology-and-conservation.csl"
  },
  {
    label: "Ethnobiology Letters",
    id: "ethnobiology-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ethnobiology-letters.csl"
  },
  {
    label: "ethnographiques.org (Fran\xE7ais)",
    id: "ethnographiques-org",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ethnographiques-org.csl"
  },
  {
    label: "Ethnologie fran\xE7aise (Fran\xE7ais)",
    id: "ethnologie-francaise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ethnologie-francaise.csl"
  },
  {
    label: "Ethnomusicology",
    id: "ethnomusicology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ethnomusicology.csl"
  },
  {
    label: "ETRI Journal",
    id: "etri-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/etri-journal.csl"
  },
  {
    label: "\xC9TS - \xC9cole de technologie sup\xE9rieure (Fran\xE7ais - Canada)",
    id: "ets-ecole-de-technologie-superieure",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ets-ecole-de-technologie-superieure.csl"
  },
  {
    label: "EUNOM\xCDA. Revista en Cultura de la Legalidad (Espa\xF1ol)",
    id: "eunomia-revista-en-cultura-de-la-legalidad",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eunomia-revista-en-cultura-de-la-legalidad.csl"
  },
  {
    label: "Eurasian Journal of Medical Investigation",
    id: "eurasian-journal-of-medical-investigation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eurasian-journal-of-medical-investigation.csl"
  },
  {
    label: "Eurasian Journal of Medicine and Oncology",
    id: "eurasian-journal-of-medicine-and-oncology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eurasian-journal-of-medicine-and-oncology.csl"
  },
  {
    label: "EuroIntervention",
    id: "eurointervention",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eurointervention.csl"
  },
  {
    label: "Europace",
    id: "europace",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/europace.csl"
  },
  {
    label: "European Cells & Materials",
    id: "european-cells-and-materials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-cells-and-materials.csl"
  },
  {
    label: "European Journal for Philosophy of Religion",
    id: "european-journal-for-philosophy-of-religion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-for-philosophy-of-religion.csl"
  },
  {
    label: "European Journal of Anaesthesiology",
    id: "european-journal-of-anaesthesiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-anaesthesiology.csl"
  },
  {
    label: "European Journal of Clinical Microbiology & Infectious Diseases",
    id: "european-journal-of-clinical-microbiology-and-infectious-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-clinical-microbiology-and-infectious-diseases.csl"
  },
  {
    label: "European Journal of Emergency Medicine",
    id: "european-journal-of-emergency-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-emergency-medicine.csl"
  },
  {
    label: "European Journal of Endocrinology",
    id: "european-journal-of-endocrinology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-endocrinology.csl"
  },
  {
    label: "European Journal of Entomology",
    id: "european-journal-of-entomology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-entomology.csl"
  },
  {
    label: "European Journal of Human Genetics",
    id: "european-journal-of-human-genetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-human-genetics.csl"
  },
  {
    label: "European Journal of Immunology",
    id: "european-journal-of-immunology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-immunology.csl"
  },
  {
    label: "European Journal of Information Systems",
    id: "european-journal-of-information-systems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-information-systems.csl"
  },
  {
    label: "European Journal of International Law",
    id: "european-journal-of-international-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-international-law.csl"
  },
  {
    label: "European Journal of Microbiology & Immunology",
    id: "european-journal-of-microbiology-and-immunology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-microbiology-and-immunology.csl"
  },
  {
    label: "European Journal of Neuroscience",
    id: "european-journal-of-neuroscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-neuroscience.csl"
  },
  {
    label: "European Journal of Ophthalmology",
    id: "european-journal-of-ophthalmology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-ophthalmology.csl"
  },
  {
    label: "European Journal of Paediatric Neurology",
    id: "european-journal-of-paediatric-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-paediatric-neurology.csl"
  },
  {
    label: "European Journal of Pain",
    id: "european-journal-of-pain",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-pain.csl"
  },
  {
    label: "European Journal of Political Research",
    id: "european-journal-of-political-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-political-research.csl"
  },
  {
    label: "European Journal of Public Health",
    id: "european-journal-of-public-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-public-health.csl"
  },
  {
    label: "European Journal of Soil Science",
    id: "european-journal-of-soil-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-soil-science.csl"
  },
  {
    label: "European Journal of Taxonomy",
    id: "european-journal-of-taxonomy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-taxonomy.csl"
  },
  {
    label: "European Journal of Theology",
    id: "european-journal-of-theology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-theology.csl"
  },
  {
    label: "European Journal of Ultrasound (Ultraschall in der Medizin)",
    id: "european-journal-of-ultrasound",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-ultrasound.csl"
  },
  {
    label: "European Journal of Vascular and Endovascular Surgery",
    id: "european-journal-of-vascular-and-endovascular-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-journal-of-vascular-and-endovascular-surgery.csl"
  },
  {
    label: "European Respiratory Journal",
    id: "european-respiratory-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-respiratory-journal.csl"
  },
  {
    label: "European Retail Research",
    id: "european-retail-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-retail-research.csl"
  },
  {
    label: "European Review of Agricultural Economics",
    id: "european-review-of-agricultural-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-review-of-agricultural-economics.csl"
  },
  {
    label: "European Review of International Studies",
    id: "european-review-of-international-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-review-of-international-studies.csl"
  },
  {
    label: "European Society of Cardiology",
    id: "european-society-of-cardiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-society-of-cardiology.csl"
  },
  {
    label: "European Union - Interinstitutional Style Guide (author-date)",
    id: "european-union-interinstitutional-style-guide-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-union-interinstitutional-style-guide-author-date.csl"
  },
  {
    label: "European Union - Interinstitutional Style Guide (note)",
    id: "european-union-interinstitutional-style-guide",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/european-union-interinstitutional-style-guide.csl"
  },
  {
    label: "EVA Berlin Konferenz (Deutsch)",
    id: "eva-berlin-konferenz",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eva-berlin-konferenz.csl"
  },
  {
    label: "Evidence-Based Complementary and Alternative Medicine",
    id: "evidence-based-complementary-and-alternative-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/evidence-based-complementary-and-alternative-medicine.csl"
  },
  {
    label: "Evolution & Development",
    id: "evolution-and-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/evolution-and-development.csl"
  },
  {
    label: "Evolution Letters",
    id: "evolution-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/evolution-letters.csl"
  },
  {
    label: "Evolution",
    id: "evolution",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/evolution.csl"
  },
  {
    label: "Evolutionary Anthropology",
    id: "evolutionary-anthropology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/evolutionary-anthropology.csl"
  },
  {
    label: "Evolutionary Ecology Research",
    id: "evolutionary-ecology-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/evolutionary-ecology-research.csl"
  },
  {
    label: "EXCLI Journal",
    id: "excli-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/excli-journal.csl"
  },
  {
    label: "exercer (Fran\xE7ais)",
    id: "exercer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/exercer.csl"
  },
  {
    label: "Experimental Biology and Medicine",
    id: "experimental-biology-and-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/experimental-biology-and-medicine.csl"
  },
  {
    label: "Experimental Biomedical Research",
    id: "experimental-biomedical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/experimental-biomedical-research.csl"
  },
  {
    label: "Experimental Dermatology",
    id: "experimental-dermatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/experimental-dermatology.csl"
  },
  {
    label: "Expert Reviews in Molecular Medicine",
    id: "expert-reviews-in-molecular-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/expert-reviews-in-molecular-medicine.csl"
  },
  {
    label: "Exploration of Targeted Anti-tumor Therapy",
    id: "exploration-of-targeted-anti-tumor-therapy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/exploration-of-targeted-anti-tumor-therapy.csl"
  },
  {
    label: "eXPRESS Polymer Letters",
    id: "express-polymer-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/express-polymer-letters.csl"
  },
  {
    label: "Extracellular Vesicles and Circulating Nucleic Acids",
    id: "extracellular-vesicles-and-circulating-nucleic-acids",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/extracellular-vesicles-and-circulating-nucleic-acids.csl"
  },
  {
    label: "Eye",
    id: "eye",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/eye.csl"
  },
  {
    label: "Fachhochschule Kiel - Fachbereich Medien (Deutsch)",
    id: "fachhochschule-kiel-fachbereich-medien",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fachhochschule-kiel-fachbereich-medien.csl"
  },
  {
    label: "Fachhochschule S\xFCdwestfalen (Deutsch)",
    id: "fachhochschule-sudwestfalen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fachhochschule-sudwestfalen.csl"
  },
  {
    label: "Fachhochschule Vorarlberg (author-date)",
    id: "fachhochschule-vorarlberg-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fachhochschule-vorarlberg-author-date.csl"
  },
  {
    label: "Fachhochschule Vorarlberg (note)",
    id: "fachhochschule-vorarlberg-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fachhochschule-vorarlberg-note.csl"
  },
  {
    label: "Facial Plastic Surgery Clinics of North America",
    id: "facial-plastic-surgery-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/facial-plastic-surgery-clinics-of-north-america.csl"
  },
  {
    label: "Facolt\xE0 Teologica dell'Italia Settentrionale - Milano (titoli di riviste non abbreviati, Italiano)",
    id: "facolta-teologica-dell-italia-settentrionale-milano",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/facolta-teologica-dell-italia-settentrionale-milano.csl"
  },
  {
    label: "Family Business Review",
    id: "family-business-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/family-business-review.csl"
  },
  {
    label: "Farmeconomia. Health Economics and Therapeutic Pathways",
    id: "farmeconomia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/farmeconomia.csl"
  },
  {
    label: "Fatigue & Fracture of Engineering Materials & Structures",
    id: "fatigue-and-fracture-of-engineering-materials-and-structures",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fatigue-and-fracture-of-engineering-materials-and-structures.csl"
  },
  {
    label: "Feminist Economics",
    id: "feminist-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/feminist-economics.csl"
  },
  {
    label: "Feminist Theory",
    id: "feminist-theory",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/feminist-theory.csl"
  },
  {
    label: "Ferdinand Porsche Fernfachhochschule (Deutsch - \xD6sterreich)",
    id: "ferdinand-porsche-fern-fachhochschule",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ferdinand-porsche-fern-fachhochschule.csl"
  },
  {
    label: "Fertility and Sterility",
    id: "fertility-and-sterility",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fertility-and-sterility.csl"
  },
  {
    label: "Finance and Society",
    id: "finance-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/finance-and-society.csl"
  },
  {
    label: "FinanzArchiv - Public Finance Analysis",
    id: "finanzarchiv",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/finanzarchiv.csl"
  },
  {
    label: "Fine Focus",
    id: "fine-focus",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fine-focus.csl"
  },
  {
    label: "First Break",
    id: "first-break",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/first-break.csl"
  },
  {
    label: "First Monday",
    id: "first-monday",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/first-monday.csl"
  },
  {
    label: "Fishery Bulletin",
    id: "fishery-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fishery-bulletin.csl"
  },
  {
    label: "Flavour and Fragrance Journal",
    id: "flavour-and-fragrance-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/flavour-and-fragrance-journal.csl"
  },
  {
    label: "Florida Entomologist",
    id: "florida-entomologist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/florida-entomologist.csl"
  },
  {
    label: "Focaal\u2014Journal of Global and Historical Anthropology",
    id: "focaal-journal-of-global-and-historical-anthropology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/focaal-journal-of-global-and-historical-anthropology.csl"
  },
  {
    label: "Sascha Foerster - Geisteswissenschaft (Deutsch)",
    id: "foerster-geisteswissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/foerster-geisteswissenschaft.csl"
  },
  {
    label: "FOLD&R (Fasti On Line Documents & Research)",
    id: "fold-and-r",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fold-and-r.csl"
  },
  {
    label: "Folia Biologica",
    id: "folia-biologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/folia-biologica.csl"
  },
  {
    label: "Folia Morphologia",
    id: "folia-morphologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/folia-morphologia.csl"
  },
  {
    label: "Food and Agriculture Organization of the United Nations (numeric)",
    id: "food-and-agriculture-organization-of-the-united-nations-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/food-and-agriculture-organization-of-the-united-nations-numeric.csl"
  },
  {
    label: "Food and Agriculture Organization of the United Nations",
    id: "food-and-agriculture-organization-of-the-united-nations",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/food-and-agriculture-organization-of-the-united-nations.csl"
  },
  {
    label: "Food Science and Biotechnology",
    id: "food-science-and-biotechnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/food-science-and-biotechnology.csl"
  },
  {
    label: "Forensic Anthropology",
    id: "forensic-anthropology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/forensic-anthropology.csl"
  },
  {
    label: "Forensic Science Review",
    id: "forensic-science-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/forensic-science-review.csl"
  },
  {
    label: "Forest Science",
    id: "forest-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/forest-science.csl"
  },
  {
    label: "Forschungsjournal Soziale Bewegungen FJSB(German)",
    id: "forschungsjournal-soziale-bewegungen-fjsb",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/forschungsjournal-soziale-bewegungen-fjsb.csl"
  },
  {
    label: "Forum: Qualitative Social Research (English)",
    id: "forum-qualitative-social-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/forum-qualitative-social-research.csl"
  },
  {
    label: "Forum: Qualitative Sozialforschung (Deutsch)",
    id: "forum-qualitative-sozialforschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/forum-qualitative-sozialforschung.csl"
  },
  {
    label: "Frattura ed Integrit\xE0 Strutturale - Fracture and Structural Integrity",
    id: "frattura-ed-integrita-strutturale-fracture-and-structural-integrity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frattura-ed-integrita-strutturale-fracture-and-structural-integrity.csl"
  },
  {
    label: "Free Radical Research",
    id: "free-radical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/free-radical-research.csl"
  },
  {
    label: "Freie Hochschule Stuttgart (Deutsch)",
    id: "freie-hochschule-stuttgart",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/freie-hochschule-stuttgart.csl"
  },
  {
    label: "Freie Universit\xE4t Berlin - Geographische Wissenschaften (Deutsch)",
    id: "freie-universitat-berlin-geographische-wissenschaften",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/freie-universitat-berlin-geographische-wissenschaften.csl"
  },
  {
    label: "French Politics",
    id: "french-politics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/french-politics.csl"
  },
  {
    label: "France (tous les auteurs, num\xE9rotation, Fran\xE7ais)",
    id: "french1",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/french1.csl"
  },
  {
    label: "France (auteurs et al., num\xE9rotation, Fran\xE7ais)",
    id: "french2",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/french2.csl"
  },
  {
    label: "France (tous les auteurs, auteur-date, Fran\xE7ais)",
    id: "french3",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/french3.csl"
  },
  {
    label: "France (auteurs et al., auteur-date, Fran\xE7ais)",
    id: "french4",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/french4.csl"
  },
  {
    label: "Freshwater Biology",
    id: "freshwater-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/freshwater-biology.csl"
  },
  {
    label: "Freshwater Crayfish",
    id: "freshwater-crayfish",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/freshwater-crayfish.csl"
  },
  {
    label: "Freshwater Science",
    id: "freshwater-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/freshwater-science.csl"
  },
  {
    label: "Friedrich-Schiller-Universit\xE4t Jena - Medizinische Fakult\xE4t (Deutsch)",
    id: "friedrich-schiller-universitat-jena-medizinische-fakultat",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/friedrich-schiller-universitat-jena-medizinische-fakultat.csl"
  },
  {
    label: "Frontiers in Bioscience",
    id: "frontiers-in-bioscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frontiers-in-bioscience.csl"
  },
  {
    label: "Frontiers in Ecology and the Environment",
    id: "frontiers-in-ecology-and-the-environment",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frontiers-in-ecology-and-the-environment.csl"
  },
  {
    label: "Frontiers in Optics",
    id: "frontiers-in-optics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frontiers-in-optics.csl"
  },
  {
    label: "Frontiers in Physics",
    id: "frontiers-in-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frontiers-in-physics.csl"
  },
  {
    label: "Frontiers medical journals",
    id: "frontiers-medical-journals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frontiers-medical-journals.csl"
  },
  {
    label: "Frontiers of Biogeography",
    id: "frontiers-of-biogeography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frontiers-of-biogeography.csl"
  },
  {
    label: "Frontiers journals",
    id: "frontiers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/frontiers.csl"
  },
  {
    label: "Fundamental and Applied Limnology",
    id: "fundamental-and-applied-limnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/fundamental-and-applied-limnology.csl"
  },
  {
    label: "Future Medicine journals",
    id: "future-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/future-medicine.csl"
  },
  {
    label: "Future Science Group",
    id: "future-science-group",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/future-science-group.csl"
  },
  {
    label: "G. Giappichelli Editore (Italiano)",
    id: "g-giappichelli-editore",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/g-giappichelli-editore.csl"
  },
  {
    label: "G3: Genes, Genomes, Genetics",
    id: "g3",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/g3.csl"
  },
  {
    label: "Gaceta Sanitaria",
    id: "gaceta-sanitaria",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gaceta-sanitaria.csl"
  },
  {
    label: "GAIA",
    id: "gaia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gaia.csl"
  },
  {
    label: "Galatasaray \xDCniversitesi Sosyal Bilimler Enstit\xFCs\xFC",
    id: "galatasaray-universitesi-sosyal-bilimler-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/galatasaray-universitesi-sosyal-bilimler-enstitusu.csl"
  },
  {
    label: "Gallia Pr\xE9histoire (Fran\xE7ais)",
    id: "gallia-prehistoire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gallia-prehistoire.csl"
  },
  {
    label: "Gallia (Fran\xE7ais)",
    id: "gallia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gallia.csl"
  },
  {
    label: "Gastroenterology",
    id: "gastroenterology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gastroenterology.csl"
  },
  {
    label: "Gastrointestinal Endoscopy Clinics of North America",
    id: "gastrointestinal-endoscopy-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gastrointestinal-endoscopy-clinics-of-north-america.csl"
  },
  {
    label: "Gastrointestinal Intervention",
    id: "gastrointestinal-intervention",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gastrointestinal-intervention.csl"
  },
  {
    label: "Gazeta M\xE9dica",
    id: "gazeta-medica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gazeta-medica.csl"
  },
  {
    label: "Geistes- und Kulturwissenschaften (Heilmann) (Deutsch)",
    id: "geistes-und-kulturwissenschaften-heilmann",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geistes-und-kulturwissenschaften-heilmann.csl"
  },
  {
    label: "Gender & Society",
    id: "gender-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gender-and-society.csl"
  },
  {
    label: "Generic Style Rules for Linguistics",
    id: "generic-style-rules-for-linguistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/generic-style-rules-for-linguistics.csl"
  },
  {
    label: "Genes, Brain and Behavior",
    id: "genes-brain-and-behavior",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/genes-brain-and-behavior.csl"
  },
  {
    label: "Genes to Cells",
    id: "genes-to-cells",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/genes-to-cells.csl"
  },
  {
    label: "Gen\xE8ses: Sciences sociales et histoire (Fran\xE7ais)",
    id: "geneses",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geneses.csl"
  },
  {
    label: "Genetics and Molecular Biology",
    id: "genetics-and-molecular-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/genetics-and-molecular-biology.csl"
  },
  {
    label: "Genetics",
    id: "genetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/genetics.csl"
  },
  {
    label: "Genome Biology and Evolution",
    id: "genome-biology-and-evolution",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/genome-biology-and-evolution.csl"
  },
  {
    label: "Genomics & Informatics",
    id: "genomics-and-informatics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/genomics-and-informatics.csl"
  },
  {
    label: "Geoarchaeology",
    id: "geoarchaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geoarchaeology.csl"
  },
  {
    label: "Geobiology",
    id: "geobiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geobiology.csl"
  },
  {
    label: "Geochemical Perspectives Letters",
    id: "geochemical-perspectives-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geochemical-perspectives-letters.csl"
  },
  {
    label: "Geochimica et Cosmochimica Acta",
    id: "geochimica-et-cosmochimica-acta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geochimica-et-cosmochimica-acta.csl"
  },
  {
    label: "Geochronometria",
    id: "geochronometria",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geochronometria.csl"
  },
  {
    label: "Geografia Fisica e Dinamica Quaternaria",
    id: "geografia-fisica-e-dinamica-quaternaria",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geografia-fisica-e-dinamica-quaternaria.csl"
  },
  {
    label: "Geografie Sborn\xEDk \u010CGS",
    id: "geografie-sbornik-cgs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geografie-sbornik-cgs.csl"
  },
  {
    label: "Geographical Analysis",
    id: "geographical-analysis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geographical-analysis.csl"
  },
  {
    label: "G\xE9ographie et cultures (Fran\xE7ais)",
    id: "geographie-et-cultures",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geographie-et-cultures.csl"
  },
  {
    label: "Geographische Zeitschrift",
    id: "geographische-zeitschrift",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geographische-zeitschrift.csl"
  },
  {
    label: "Geological Magazine",
    id: "geological-magazine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geological-magazine.csl"
  },
  {
    label: "Geophysical Journal International",
    id: "geophysical-journal-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geophysical-journal-international.csl"
  },
  {
    label: "Geophysics",
    id: "geophysics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geophysics.csl"
  },
  {
    label: "Geopolitics",
    id: "geopolitics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geopolitics.csl"
  },
  {
    label: "Georg-August-Universit\xE4t G\xF6ttingen - Institut f\xFCr Ethnologie und Ethnologische Sammlung (Deutsch)",
    id: "georg-august-universitat-gottingen-institut-fur-ethnologie-und-ethnologische-sammlung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/georg-august-universitat-gottingen-institut-fur-ethnologie-und-ethnologische-sammlung.csl"
  },
  {
    label: "Geriatrics & Gerontology International",
    id: "geriatrics-and-gerontology-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geriatrics-and-gerontology-international.csl"
  },
  {
    label: "G\xE9riatrie et Psychologie Neuropsychiatrie du Vieillissement",
    id: "geriatrie-et-psychologie-neuropsychiatrie-du-vieillissement",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geriatrie-et-psychologie-neuropsychiatrie-du-vieillissement.csl"
  },
  {
    label: "German Council of Economic Experts",
    id: "german-council-of-economic-experts",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/german-council-of-economic-experts.csl"
  },
  {
    label: "German Journal of Agricultural Economics",
    id: "german-journal-of-agricultural-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/german-journal-of-agricultural-economics.csl"
  },
  {
    label: "German Yearbook of International Law",
    id: "german-yearbook-of-international-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/german-yearbook-of-international-law.csl"
  },
  {
    label: "Geschichte und Gesellschaft",
    id: "geschichte-und-gesellschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/geschichte-und-gesellschaft.csl"
  },
  {
    label: "Gesellschaft fur Popularmusikforschung (Deutsch)",
    id: "gesellschaft-fur-popularmusikforschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gesellschaft-fur-popularmusikforschung.csl"
  },
  {
    label: "Gewerblicher Rechtsschutz und Urheberrecht (Deutsch)",
    id: "gewerblicher-rechtsschutz-und-urheberrecht",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gewerblicher-rechtsschutz-und-urheberrecht.csl"
  },
  {
    label: "GigaScience",
    id: "gigascience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gigascience.csl"
  },
  {
    label: "Global Ecology and Biogeography",
    id: "global-ecology-and-biogeography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/global-ecology-and-biogeography.csl"
  },
  {
    label: "Glossa",
    id: "glossa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/glossa.csl"
  },
  {
    label: "Gnosis: Journal of Gnostic Studies",
    id: "gnosis-journal-of-gnostic-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gnosis-journal-of-gnostic-studies.csl"
  },
  {
    label: "Russian GOST R 7.0.5-2008 (numeric, sorted alphabetically, \u0420\u0443\u0301\u0441\u0441\u043A\u0438\u0439)",
    id: "gost-r-7-0-5-2008-numeric-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gost-r-7-0-5-2008-numeric-alphabetical.csl"
  },
  {
    label: "Russian GOST R 7.0.5-2008 (numeric)",
    id: "gost-r-7-0-5-2008-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gost-r-7-0-5-2008-numeric.csl"
  },
  {
    label: "Russian GOST R 7.0.5-2008 (\u0420\u0443\u0301\u0441\u0441\u043A\u0438\u0439)",
    id: "gost-r-7-0-5-2008",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/gost-r-7-0-5-2008.csl"
  },
  {
    label: "Government and Opposition",
    id: "government-and-opposition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/government-and-opposition.csl"
  },
  {
    label: "Grasas y Aceites",
    id: "grasas-y-aceites",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/grasas-y-aceites.csl"
  },
  {
    label: "Griffith College - Harvard",
    id: "griffith-college-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/griffith-college-harvard.csl"
  },
  {
    label: "Groundwater",
    id: "groundwater",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/groundwater.csl"
  },
  {
    label: "Groupe d'anthropologie et d'arch\xE9ologie fun\xE9raire (Fran\xE7ais)",
    id: "groupe-danthropologie-et-darcheologie-funeraire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/groupe-danthropologie-et-darcheologie-funeraire.csl"
  },
  {
    label: "Guide des citations, r\xE9f\xE9rences et abr\xE9viations juridiques 6e \xE9dition (Fran\xE7ais)",
    id: "guide-des-citations-references-et-abreviations-juridiques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/guide-des-citations-references-et-abreviations-juridiques.csl"
  },
  {
    label: "Guide pour la r\xE9daction et la pr\xE9sentation des th\xE8ses \xE0 l'usage des doctorants (Fran\xE7ais)",
    id: "guide-pour-la-redaction-et-la-presentation-des-theses-a-lusage-des-doctorants",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/guide-pour-la-redaction-et-la-presentation-des-theses-a-lusage-des-doctorants.csl"
  },
  {
    label: "Haaga-Helia ammattikorkeakoulu - Harvard",
    id: "haaga-helia-university-of-applied-sciences-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/haaga-helia-university-of-applied-sciences-harvard.csl"
  },
  {
    label: "Haematologica",
    id: "haematologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/haematologica.csl"
  },
  {
    label: "Haemophilia",
    id: "haemophilia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/haemophilia.csl"
  },
  {
    label: "Haffner Style Manual",
    id: "haffner-style-manual",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/haffner-style-manual.csl"
  },
  {
    label: "Hainan Medical University Journal Publisher",
    id: "hainan-medical-university-journal-publisher",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hainan-medical-university-journal-publisher.csl"
  },
  {
    label: "Hamburg School of Food Science (diploma, Deutsch)",
    id: "hamburg-school-of-food-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hamburg-school-of-food-science.csl"
  },
  {
    label: "HAND",
    id: "hand",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hand.csl"
  },
  {
    label: "Handbook of Clinical Neurology",
    id: "handbook-of-clinical-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/handbook-of-clinical-neurology.csl"
  },
  {
    label: "Anglia Ruskin University - Harvard",
    id: "harvard-anglia-ruskin-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-anglia-ruskin-university.csl"
  },
  {
    label: "Bournemouth University - Harvard",
    id: "harvard-bournemouth-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-bournemouth-university.csl"
  },
  {
    label: "Cape Peninsula University of Technology - Harvard",
    id: "harvard-cape-peninsula-university-of-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-cape-peninsula-university-of-technology.csl"
  },
  {
    label: "Cite Them Right 10th edition - Harvard",
    id: "harvard-cite-them-right-10th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-cite-them-right-10th-edition.csl"
  },
  {
    label: "Cite Them Right 11th edition - Harvard",
    id: "harvard-cite-them-right-11th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-cite-them-right-11th-edition.csl"
  },
  {
    label: 'Cite Them Right 12th edition - Harvard (no "et al.")',
    id: "harvard-cite-them-right-no-et-al",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-cite-them-right-no-et-al.csl"
  },
  {
    label: "Cite Them Right 12th edition - Harvard",
    id: "harvard-cite-them-right",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-cite-them-right.csl"
  },
  {
    label: "Coventry University - Harvard",
    id: "harvard-coventry-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-coventry-university.csl"
  },
  {
    label: "Cranfield University - Harvard",
    id: "harvard-cranfield-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-cranfield-university.csl"
  },
  {
    label: "Deakin University - Harvard",
    id: "harvard-deakin-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-deakin-university.csl"
  },
  {
    label: "Dundalk Institute of Technology - Harvard",
    id: "harvard-dundalk-institute-of-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-dundalk-institute-of-technology.csl"
  },
  {
    label: "Durham University Business School - Harvard",
    id: "harvard-durham-university-business-school",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-durham-university-business-school.csl"
  },
  {
    label: "Edge Hill University - Harvard",
    id: "harvard-edge-hill-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-edge-hill-university.csl"
  },
  {
    label: "European Archaeology - Harvard",
    id: "harvard-european-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-european-archaeology.csl"
  },
  {
    label: "Fachhochschule Salzburg - Harvard",
    id: "harvard-fachhochschule-salzburg",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-fachhochschule-salzburg.csl"
  },
  {
    label: "Falmouth University - Harvard",
    id: "harvard-falmouth-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-falmouth-university.csl"
  },
  {
    label: "Gesellschaft f\xFCr Bildung und Forschung in Europa - Harvard (Deutsch)",
    id: "harvard-gesellschaft-fur-bildung-und-forschung-in-europa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-gesellschaft-fur-bildung-und-forschung-in-europa.csl"
  },
  {
    label: "Imperial College London - Harvard",
    id: "harvard-imperial-college-london",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-imperial-college-london.csl"
  },
  {
    label: "Institut f\xFCr Praxisforschung - Harvard (Bahr & Frackmann) (Deutsch)",
    id: "harvard-institut-fur-praxisforschung-de",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-institut-fur-praxisforschung-de.csl"
  },
  {
    label: "King's College London - Harvard",
    id: "harvard-kings-college-london",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-kings-college-london.csl"
  },
  {
    label: "Leeds Beckett University - Harvard",
    id: "harvard-leeds-beckett-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-leeds-beckett-university.csl"
  },
  {
    label: "Leeds Metropolitan University - Harvard",
    id: "harvard-leeds-metropolitan-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-leeds-metropolitan-university.csl"
  },
  {
    label: "University of Limerick (Cite it Right) - Harvard",
    id: "harvard-limerick",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-limerick.csl"
  },
  {
    label: "London South Bank University - Harvard",
    id: "harvard-london-south-bank-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-london-south-bank-university.csl"
  },
  {
    label: "Manchester Business School - Harvard",
    id: "harvard-manchester-business-school",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-manchester-business-school.csl"
  },
  {
    label: "Manchester Metropolitan University - Harvard",
    id: "harvard-manchester-metropolitan-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-manchester-metropolitan-university.csl"
  },
  {
    label: "Melbourne Polytechnic - Harvard",
    id: "harvard-melbourne-polytechnic",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-melbourne-polytechnic.csl"
  },
  {
    label: "Newcastle University - Harvard",
    id: "harvard-newcastle-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-newcastle-university.csl"
  },
  {
    label: "North-West University - Harvard",
    id: "harvard-north-west-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-north-west-university.csl"
  },
  {
    label: "Pontificia Universidad Cat\xF3lica del Ecuador (Espa\xF1ol) - Harvard",
    id: "harvard-pontificia-universidad-catolica-del-ecuador",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-pontificia-universidad-catolica-del-ecuador.csl"
  },
  {
    label: "Robert Gordon University - Harvard",
    id: "harvard-robert-gordon-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-robert-gordon-university.csl"
  },
  {
    label: "Staffordshire University - Harvard",
    id: "harvard-staffordshire-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-staffordshire-university.csl"
  },
  {
    label: "Stellenbosch University - Harvard",
    id: "harvard-stellenbosch-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-stellenbosch-university.csl"
  },
  {
    label: "Swinburne University of Technology - Harvard",
    id: "harvard-swinburne-university-of-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-swinburne-university-of-technology.csl"
  },
  {
    label: "The University of Northampton - Harvard",
    id: "harvard-the-university-of-northampton",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-the-university-of-northampton.csl"
  },
  {
    label: "The University of Sheffield - School of East Asian Studies - Harvard",
    id: "harvard-the-university-of-sheffield-school-of-east-asian-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-the-university-of-sheffield-school-of-east-asian-studies.csl"
  },
  {
    label: "The University of Sheffield - Town and Regional Planning - Harvard",
    id: "harvard-the-university-of-sheffield-town-and-regional-planning",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-the-university-of-sheffield-town-and-regional-planning.csl"
  },
  {
    label: "Theologisches Seminar Adelshofen - Harvard (Deutsch)",
    id: "harvard-theologisches-seminar-adelshofen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-theologisches-seminar-adelshofen.csl"
  },
  {
    label: "Universiti Teknologi Malaysia - Harvard",
    id: "harvard-universiti-teknologi-malaysia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-universiti-teknologi-malaysia.csl"
  },
  {
    label: "Universiti Tunku Abdul Rahman - Harvard",
    id: "harvard-universiti-tunku-abdul-rahman",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-universiti-tunku-abdul-rahman.csl"
  },
  {
    label: "University for the Creative Arts - Harvard",
    id: "harvard-university-for-the-creative-arts",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-for-the-creative-arts.csl"
  },
  {
    label: "University of Abertay Dundee - Harvard",
    id: "harvard-university-of-abertay-dundee",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-abertay-dundee.csl"
  },
  {
    label: "University of Bath - Harvard",
    id: "harvard-university-of-bath",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-bath.csl"
  },
  {
    label: "University of Birmingham - Harvard",
    id: "harvard-university-of-birmingham",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-birmingham.csl"
  },
  {
    label: "University of Brighton School of Environment & Technology - Harvard",
    id: "harvard-university-of-brighton-school-of-environment-and-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-brighton-school-of-environment-and-technology.csl"
  },
  {
    label: "University of Cape Town - Harvard",
    id: "harvard-university-of-cape-town",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-cape-town.csl"
  },
  {
    label: "University of Exeter - Geography - Harvard",
    id: "harvard-university-of-exeter-geography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-exeter-geography.csl"
  },
  {
    label: "University of Greenwich - Harvard",
    id: "harvard-university-of-greenwich",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-greenwich.csl"
  },
  {
    label: "University of Kent - Harvard",
    id: "harvard-university-of-kent",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-kent.csl"
  },
  {
    label: "University of Leeds - Harvard",
    id: "harvard-university-of-leeds",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-leeds.csl"
  },
  {
    label: "University of Technology Sydney - Harvard",
    id: "harvard-university-of-technology-sydney",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-technology-sydney.csl"
  },
  {
    label: "University of the West of England (Bristol) - Harvard",
    id: "harvard-university-of-the-west-of-england",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-the-west-of-england.csl"
  },
  {
    label: "University of the West of Scotland - Harvard",
    id: "harvard-university-of-the-west-of-scotland",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-the-west-of-scotland.csl"
  },
  {
    label: "University of Westminster - Harvard",
    id: "harvard-university-of-westminster",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-westminster.csl"
  },
  {
    label: "University of Wolverhampton - Harvard",
    id: "harvard-university-of-wolverhampton",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-wolverhampton.csl"
  },
  {
    label: "University of Worcester - Harvard",
    id: "harvard-university-of-worcester",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-university-of-worcester.csl"
  },
  {
    label: "Xi'an Jiaotong-Liverpool University (XJTLU) - Harvard",
    id: "harvard-xi-an-jiaotong-liverpool-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-xi-an-jiaotong-liverpool-university.csl"
  },
  {
    label: "York St John University - Harvard (pre September 2019 entry)",
    id: "harvard-york-st-john-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-york-st-john-university.csl"
  },
  {
    label: "Haute \xE9cole de gestion de Gen\xE8ve - ISO 690",
    id: "haute-ecole-de-gestion-de-geneve-iso-690",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/haute-ecole-de-gestion-de-geneve-iso-690.csl"
  },
  {
    label: "Haute Ecole p\xE9dagogique Fribourg (Fran\xE7ais)",
    id: "haute-ecole-pedagogique-fribourg",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/haute-ecole-pedagogique-fribourg.csl"
  },
  {
    label: "Hawaii International Conference on System Sciences Proceedings",
    id: "hawaii-international-conference-on-system-sciences-proceedings",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hawaii-international-conference-on-system-sciences-proceedings.csl"
  },
  {
    label: "Health and Human Rights Journal",
    id: "health-and-human-rights-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-and-human-rights-journal.csl"
  },
  {
    label: "Health & Social Care in the Community",
    id: "health-and-social-care-in-the-community",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-and-social-care-in-the-community.csl"
  },
  {
    label: "Health Economics, Policy and Law",
    id: "health-economics-policy-and-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-economics-policy-and-law.csl"
  },
  {
    label: "Health Economics",
    id: "health-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-economics.csl"
  },
  {
    label: "Health Education England - Harvard",
    id: "health-education-england-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-education-england-harvard.csl"
  },
  {
    label: "Health Education Research",
    id: "health-education-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-education-research.csl"
  },
  {
    label: "Health Physics",
    id: "health-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-physics.csl"
  },
  {
    label: "Health Policy and Planning",
    id: "health-policy-and-planning",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-policy-and-planning.csl"
  },
  {
    label: "Health Reform Observer - Observatoire des R\xE9formes de Sant\xE9",
    id: "health-reform-observer-observatoire-des-reformes-de-sante",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-reform-observer-observatoire-des-reformes-de-sante.csl"
  },
  {
    label: "Health, Sports & Rehabilitation Medicine",
    id: "health-sports-and-rehabilitation-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/health-sports-and-rehabilitation-medicine.csl"
  },
  {
    label: "Heart Failure Clinics",
    id: "heart-failure-clinics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/heart-failure-clinics.csl"
  },
  {
    label: "Heart Rhythm",
    id: "heart-rhythm",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/heart-rhythm.csl"
  },
  {
    label: "Heidelberg University - Faculty of Medicine (Universit\xE4t Heidelberg - Medizinische Fakult\xE4t Heidelberg)",
    id: "heidelberg-university-faculty-of-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/heidelberg-university-faculty-of-medicine.csl"
  },
  {
    label: "Heiliger Dienst (Deutsch)",
    id: "heiliger-dienst",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/heiliger-dienst.csl"
  },
  {
    label: "Helvetica Chimica Acta",
    id: "helvetica-chimica-acta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/helvetica-chimica-acta.csl"
  },
  {
    label: "Hematology/Oncology Clinics of North America",
    id: "hematology-oncology-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hematology-oncology-clinics-of-north-america.csl"
  },
  {
    label: "Hemijska industrija",
    id: "hemijska-industrija",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hemijska-industrija.csl"
  },
  {
    label: "Henoch",
    id: "henoch",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/henoch.csl"
  },
  {
    label: "Hepatology",
    id: "hepatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hepatology.csl"
  },
  {
    label: "Heredity",
    id: "heredity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/heredity.csl"
  },
  {
    label: "Herpetologica",
    id: "herpetologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/herpetologica.csl"
  },
  {
    label: "Hiob Ludolf Centre for Ethiopian Studies (long names)",
    id: "hiob-ludolf-centre-for-ethiopian-studies-long-names",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hiob-ludolf-centre-for-ethiopian-studies-long-names.csl"
  },
  {
    label: "Hiob Ludolf Centre for Ethiopian Studies (with URL/DOI)",
    id: "hiob-ludolf-centre-for-ethiopian-studies-with-url-doi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hiob-ludolf-centre-for-ethiopian-studies-with-url-doi.csl"
  },
  {
    label: "Hiob Ludolf Centre for Ethiopian Studies",
    id: "hiob-ludolf-centre-for-ethiopian-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hiob-ludolf-centre-for-ethiopian-studies.csl"
  },
  {
    label: "Hipertensi\xF3n y Riesgo Vascular (Espa\xF1ol)",
    id: "hipertension-y-riesgo-vascular",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hipertension-y-riesgo-vascular.csl"
  },
  {
    label: "Histoire@Politique. Politique, culture, soci\xE9t\xE9 (Fran\xE7ais)",
    id: "histoire-at-politique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/histoire-at-politique.csl"
  },
  {
    label: "Histoire & Mesure (Fran\xE7ais)",
    id: "histoire-et-mesure",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/histoire-et-mesure.csl"
  },
  {
    label: "Histopathology",
    id: "histopathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/histopathology.csl"
  },
  {
    label: "historia-scribere (Deutsch)",
    id: "historia-scribere",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/historia-scribere.csl"
  },
  {
    label: "Historical Materialism",
    id: "historical-materialism",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/historical-materialism.csl"
  },
  {
    label: "Historical Social Research",
    id: "historical-social-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/historical-social-research.csl"
  },
  {
    label: "historioPLUS (Deutsch - \xD6sterreich)",
    id: "historio-plus",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/historio-plus.csl"
  },
  {
    label: "History and Theory",
    id: "history-and-theory",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/history-and-theory.csl"
  },
  {
    label: "History Australia",
    id: "history-australia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/history-australia.csl"
  },
  {
    label: "History of the Human Sciences",
    id: "history-of-the-human-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/history-of-the-human-sciences.csl"
  },
  {
    label: "Hochschule Bonn-Rhein-Sieg (Harvard, Deutsch)",
    id: "hochschule-bonn-rhein-sieg",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hochschule-bonn-rhein-sieg.csl"
  },
  {
    label: "Hochschule f\xFCr Soziale Arbeit FHNW (Deutsch - Schweiz)",
    id: "hochschule-fur-soziale-arbeit-fhnw",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hochschule-fur-soziale-arbeit-fhnw.csl"
  },
  {
    label: "Hochschule f\xFCr Wirtschaft und Recht Berlin (Deutsch)",
    id: "hochschule-fur-wirtschaft-und-recht-berlin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hochschule-fur-wirtschaft-und-recht-berlin.csl"
  },
  {
    label: "Hochschule Hannover - Soziale Arbeit (Deutsch)",
    id: "hochschule-hannover-soziale-arbeit",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hochschule-hannover-soziale-arbeit.csl"
  },
  {
    label: "Hochschule M\xFCnchen - Fakult\xE4t f\xFCr Angewandte Sozialwissenschaften (Deutsch)",
    id: "hochschule-munchen-fakultat-fur-angewandte-sozialwissenschaften",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hochschule-munchen-fakultat-fur-angewandte-sozialwissenschaften.csl"
  },
  {
    label: "Hochschule Osnabr\xFCck - Fakult\xE4t Agrarwissenschaften und Landschaftsarchitektur (Deutsch)",
    id: "hochschule-osnabruck-fakultat-agrarwissenschaften-und-landschaftsarchitektur",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hochschule-osnabruck-fakultat-agrarwissenschaften-und-landschaftsarchitektur.csl"
  },
  {
    label: "Hochschule Pforzheim - Fakult\xE4t f\xFCr Wirtschaft und Recht (Deutsch)",
    id: "hochschule-pforzheim-fakultat-fur-wirtschaft-und-recht",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hochschule-pforzheim-fakultat-fur-wirtschaft-und-recht.csl"
  },
  {
    label: "Hong Kong Journal of Radiology",
    id: "hong-kong-journal-of-radiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hong-kong-journal-of-radiology.csl"
  },
  {
    label: "Hospital a Domicilio",
    id: "hospital-a-domicilio",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hospital-a-domicilio.csl"
  },
  {
    label: "Housing Studies",
    id: "housing-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/housing-studies.csl"
  },
  {
    label: "HPB",
    id: "hpb",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hpb.csl"
  },
  {
    label: "Human Brain Mapping",
    id: "human-brain-mapping",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-brain-mapping.csl"
  },
  {
    label: "Human Ecology",
    id: "human-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-ecology.csl"
  },
  {
    label: "Human Molecular Genetics",
    id: "human-molecular-genetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-molecular-genetics.csl"
  },
  {
    label: "Human Mutation",
    id: "human-mutation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-mutation.csl"
  },
  {
    label: "Human Reproduction Update",
    id: "human-reproduction-update",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-reproduction-update.csl"
  },
  {
    label: "Human Reproduction",
    id: "human-reproduction",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-reproduction.csl"
  },
  {
    label: "Human Resource Management Journal",
    id: "human-resource-management-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-resource-management-journal.csl"
  },
  {
    label: "Human Rights Law Review",
    id: "human-rights-law-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-rights-law-review.csl"
  },
  {
    label: "Human-Wildlife Interactions",
    id: "human-wildlife-interactions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/human-wildlife-interactions.csl"
  },
  {
    label: "Humanistica Lovaniensia. Journal of Neo-Latin Studies",
    id: "humanistica-lovaniensia-journal-of-neo-latin-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/humanistica-lovaniensia-journal-of-neo-latin-studies.csl"
  },
  {
    label: "Humboldt State University - Environmental Resources Engineering",
    id: "humboldt-state-university-environmental-resources-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/humboldt-state-university-environmental-resources-engineering.csl"
  },
  {
    label: "Hydrobiologia",
    id: "hydrobiologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hydrobiologia.csl"
  },
  {
    label: "Hydrological Processes",
    id: "hydrological-processes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hydrological-processes.csl"
  },
  {
    label: "Hydrological Sciences Journal",
    id: "hydrological-sciences-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hydrological-sciences-journal.csl"
  },
  {
    label: "Hypertension Research",
    id: "hypertension-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hypertension-research.csl"
  },
  {
    label: "Hypotheses in the Life Sciences",
    id: "hypotheses-in-the-life-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hypotheses-in-the-life-sciences.csl"
  },
  {
    label: "Hystrix, the Italian Journal of Mammalogy",
    id: "hystrix-the-italian-journal-of-mammalogy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/hystrix-the-italian-journal-of-mammalogy.csl"
  },
  {
    label: "IAINU Tuban - Fakultas Tarbiyah (Bahasa Indonesia)",
    id: "iainutuban-tarbiyah",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iainutuban-tarbiyah.csl"
  },
  {
    label: "IAWA Journal",
    id: "iawa-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iawa-journal.csl"
  },
  {
    label: "I.B. Tauris (note)",
    id: "ib-tauris-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ib-tauris-note.csl"
  },
  {
    label: "Ibis",
    id: "ibis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ibis.csl"
  },
  {
    label: "ICES Journal of Marine Science",
    id: "ices-journal-of-marine-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ices-journal-of-marine-science.csl"
  },
  {
    label: "Id\u0151j\xE1r\xE1s - Quarterly Journal of the Hungarian Meteorological Service",
    id: "idojaras-quarterly-journal-of-the-hungarian-meteorological-service",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/idojaras-quarterly-journal-of-the-hungarian-meteorological-service.csl"
  },
  {
    label: "IE Comunicaciones",
    id: "ie-comunicaciones",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ie-comunicaciones.csl"
  },
  {
    label: "IEEE Transactions on Medical Imaging",
    id: "ieee-transactions-on-medical-imaging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ieee-transactions-on-medical-imaging.csl"
  },
  {
    label: "IEEE (with URL)",
    id: "ieee-with-url",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ieee-with-url.csl"
  },
  {
    label: "IEEE",
    id: "ieee",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ieee.csl"
  },
  {
    label: "iForest",
    id: "iforest",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iforest.csl"
  },
  {
    label: "Igaku Toshokan (\u65E5\u672C\u8A9E)",
    id: "igaku-toshokan",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/igaku-toshokan.csl"
  },
  {
    label: "IICA-CATIE (Espa\xF1ol)",
    id: "iica-catie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iica-catie.csl"
  },
  {
    label: "Ilahiyat Studies (full note)",
    id: "ilahiyat-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ilahiyat-studies.csl"
  },
  {
    label: "Im Gespr\xE4ch - Hefte der Martin Buber-Gesellschaft (Deutsch)",
    id: "im-gesprach",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/im-gesprach.csl"
  },
  {
    label: "INContext: Studies in Translation and Interculturalism",
    id: "incontext-studies-in-translation-and-interculturalism",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/incontext-studies-in-translation-and-interculturalism.csl"
  },
  {
    label: "Indian Dermatology Online Journal",
    id: "indian-dermatology-online-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/indian-dermatology-online-journal.csl"
  },
  {
    label: "Indian Journal of Medical Research",
    id: "indian-journal-of-medical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/indian-journal-of-medical-research.csl"
  },
  {
    label: "Indian Journal of Orthopaedics",
    id: "indian-journal-of-orthopaedics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/indian-journal-of-orthopaedics.csl"
  },
  {
    label: "Indian Journal of Physics",
    id: "indian-journal-of-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/indian-journal-of-physics.csl"
  },
  {
    label: "Indian Journal of Traditional Knowledge",
    id: "indian-journal-of-traditional-knowledge",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/indian-journal-of-traditional-knowledge.csl"
  },
  {
    label: "INDIANA",
    id: "indiana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/indiana.csl"
  },
  {
    label: "Indoor Air",
    id: "indoor-air",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/indoor-air.csl"
  },
  {
    label: "Industrial Relations",
    id: "industrial-relations",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/industrial-relations.csl"
  },
  {
    label: "Infectio (Espa\xF1ol)",
    id: "infectio",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/infectio.csl"
  },
  {
    label: "Infectious Disease Clinics of North America",
    id: "infectious-disease-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/infectious-disease-clinics-of-north-america.csl"
  },
  {
    label: "Inflammatory Bowel Diseases",
    id: "inflammatory-bowel-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/inflammatory-bowel-diseases.csl"
  },
  {
    label: "Influenza and Other Respiratory Viruses",
    id: "influenza-and-other-respiratory-viruses",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/influenza-and-other-respiratory-viruses.csl"
  },
  {
    label: "infoclio.ch (Kurzbelege, Deutsch - Schweiz)",
    id: "infoclio-de-kurzbelege",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/infoclio-de-kurzbelege.csl"
  },
  {
    label: "infoclio.ch (Deutsch - Schweiz)",
    id: "infoclio-de",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/infoclio-de.csl"
  },
  {
    label: "infoclio.ch (sans majuscules, Fran\xE7ais)",
    id: "infoclio-fr-nocaps",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/infoclio-fr-nocaps.csl"
  },
  {
    label: "infoclio.ch (petites majuscules, Fran\xE7ais)",
    id: "infoclio-fr-smallcaps",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/infoclio-fr-smallcaps.csl"
  },
  {
    label: "Infomin",
    id: "infomin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/infomin.csl"
  },
  {
    label: "Informal Logic",
    id: "informal-logic",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/informal-logic.csl"
  },
  {
    label: "Ingenier\xEDa Agr\xEDcola (Espa\xF1ol)",
    id: "ingenieria-agricola",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ingenieria-agricola.csl"
  },
  {
    label: "Innovations & Th\xE9rapeutiques en Oncologie",
    id: "innovations-therapeutiques-en-oncologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/innovations-therapeutiques-en-oncologie.csl"
  },
  {
    label: "INSTAP Academic Press",
    id: "instap-academic-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/instap-academic-press.csl"
  },
  {
    label: "Institut fran\xE7ais d'arch\xE9ologie orientale - Arab Studies (English)",
    id: "institut-francais-darcheologie-orientale-arab-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-francais-darcheologie-orientale-arab-studies.csl"
  },
  {
    label: "Institut fran\xE7ais d'arch\xE9ologie orientale - Egyptology (English)",
    id: "institut-francais-darcheologie-orientale-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-francais-darcheologie-orientale-en.csl"
  },
  {
    label: "Institut fran\xE7ais d'arch\xE9ologie orientale - \xE9tudes arabes (Fran\xE7ais)",
    id: "institut-francais-darcheologie-orientale-etudes-arabes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-francais-darcheologie-orientale-etudes-arabes.csl"
  },
  {
    label: "Institut fran\xE7ais d'arch\xE9ologie orientale - arch\xE9ologie et \xE9gyptologie (Fran\xE7ais)",
    id: "institut-francais-darcheologie-orientale",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-francais-darcheologie-orientale.csl"
  },
  {
    label: "Institut national de la recherche scientifique - Sciences sociales (author-date, Fran\xE7ais)",
    id: "institut-national-de-la-recherche-scientifique-sciences-sociales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-national-de-la-recherche-scientifique-sciences-sociales.csl"
  },
  {
    label: "Institut national de recherches arch\xE9ologiques pr\xE9ventives (Fran\xE7ais)",
    id: "institut-national-de-recherches-archeologiques-preventives",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-national-de-recherches-archeologiques-preventives.csl"
  },
  {
    label: "Institut national de sant\xE9 publique du Qu\xE9bec - NAPP (Fran\xE7ais - Canada)",
    id: "institut-national-de-sante-publique-du-quebec-napp",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-national-de-sante-publique-du-quebec-napp.csl"
  },
  {
    label: "Institut national de sant\xE9 publique du Qu\xE9bec - TOPO (Fran\xE7ais - Canada)",
    id: "institut-national-de-sante-publique-du-quebec-topo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-national-de-sante-publique-du-quebec-topo.csl"
  },
  {
    label: "Institut Pertanian Bogor: Pedoman Penulisan Karya Ilmiah Edisi ke-3 (Bahasa Indonesia)",
    id: "institut-pertanian-bogor",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-pertanian-bogor.csl"
  },
  {
    label: "Institut Teknologi Bandung - Sekolah Pascasarjana",
    id: "institut-teknologi-bandung-sekolah-pascasarjana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institut-teknologi-bandung-sekolah-pascasarjana.csl"
  },
  {
    label: "Institute for Operations Research and the Management Sciences",
    id: "institute-for-operations-research-and-the-management-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institute-for-operations-research-and-the-management-sciences.csl"
  },
  {
    label: "Institute of Mathematical Statistics journals",
    id: "institute-of-mathematical-statistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institute-of-mathematical-statistics.csl"
  },
  {
    label: "Institute of Mathematics and its Applications",
    id: "institute-of-mathematics-and-its-applications",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institute-of-mathematics-and-its-applications.csl"
  },
  {
    label: "Institute of Physics - Harvard",
    id: "institute-of-physics-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institute-of-physics-harvard.csl"
  },
  {
    label: "Institute of Physics (numeric)",
    id: "institute-of-physics-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/institute-of-physics-numeric.csl"
  },
  {
    label: "Instituto Brasileiro de Informa\xE7\xE3o em Ci\xEAncia e Tecnologia - ABNT (autoria abreviada)",
    id: "instituto-brasileiro-de-informacao-em-ciencia-e-tecnologia-abnt-initials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/instituto-brasileiro-de-informacao-em-ciencia-e-tecnologia-abnt-initials.csl"
  },
  {
    label: "Instituto Brasileiro de Informa\xE7\xE3o em Ci\xEAncia e Tecnologia - ABNT (autoria completa)",
    id: "instituto-brasileiro-de-informacao-em-ciencia-e-tecnologia-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/instituto-brasileiro-de-informacao-em-ciencia-e-tecnologia-abnt.csl"
  },
  {
    label: "Instituto de Investigaciones sobre la Universidad y la Educaci\xF3n - Moderno (autor-fecha, Espa\xF1ol)",
    id: "instituto-de-investigaciones-sobre-la-universidad-y-la-educacion-moderno",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/instituto-de-investigaciones-sobre-la-universidad-y-la-educacion-moderno.csl"
  },
  {
    label: "Instituto de Pesquisas Energ\xE9ticas e Nucleares (Portugu\xEAs - Brasil)",
    id: "instituto-de-pesquisas-energeticas-e-nucleares",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/instituto-de-pesquisas-energeticas-e-nucleares.csl"
  },
  {
    label: "Instituto de Pesquisas Tecnol\xF3gicas (Portugu\xEAs - Brasil)",
    id: "instituto-de-pesquisas-tecnologicas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/instituto-de-pesquisas-tecnologicas.csl"
  },
  {
    label: "Instituto Superior de Teolog\xEDa de las Islas Canarias (Espa\xF1ol)",
    id: "instituto-superior-de-teologia-de-las-islas-canarias",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/instituto-superior-de-teologia-de-las-islas-canarias.csl"
  },
  {
    label: "Integrated Science Publishing journals",
    id: "integrated-science-publishing-journals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/integrated-science-publishing-journals.csl"
  },
  {
    label: "Integrative & Comparative Biology",
    id: "integrative-and-comparative-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/integrative-and-comparative-biology.csl"
  },
  {
    label: "Intellect Newgen Books",
    id: "intellect-newgen-books",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/intellect-newgen-books.csl"
  },
  {
    label: "Inter-Research Science Center",
    id: "inter-research-science-center",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/inter-research-science-center.csl"
  },
  {
    label: "INTER: Romanian Review for Theological and Religious Studies",
    id: "inter-ro",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/inter-ro.csl"
  },
  {
    label: "Interaction Design & Architecture(s)",
    id: "interaction-design-and-architectures",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/interaction-design-and-architectures.csl"
  },
  {
    label: "Interactive CardioVascular and Thoracic Surgery",
    id: "interactive-cardiovascular-and-thoracic-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/interactive-cardiovascular-and-thoracic-surgery.csl"
  },
  {
    label: "Interdisziplin\xE4re Anthropologie (Deutsch)",
    id: "interdisziplinare-anthropologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/interdisziplinare-anthropologie.csl"
  },
  {
    label: "Interdisziplin\xE4re Zeitschrift f\xFCr Technologie und Lernen (Deutsch)",
    id: "interdisziplinare-zeitschrift-fur-technologie-und-lernen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/interdisziplinare-zeitschrift-fur-technologie-und-lernen.csl"
  },
  {
    label: "Interkulturelle Germanistik G\xF6ttingen (Deutsch)",
    id: "interkulturelle-germanistik-gottingen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/interkulturelle-germanistik-gottingen.csl"
  },
  {
    label: "International Atomic Energy Agency",
    id: "international-atomic-energy-agency",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-atomic-energy-agency.csl"
  },
  {
    label: "International Biodeterioration & Biodegradation",
    id: "international-biodeterioration-and-biodegradation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-biodeterioration-and-biodegradation.csl"
  },
  {
    label: "International Brazilian Journal Of Urology",
    id: "international-brazilian-journal-of-urology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-brazilian-journal-of-urology.csl"
  },
  {
    label: "International Conference on Information Systems Development",
    id: "international-conference-on-information-systems-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-conference-on-information-systems-development.csl"
  },
  {
    label: "International Development Policy",
    id: "international-development-policy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-development-policy.csl"
  },
  {
    label: "International Energy Agency - Organisation for Economic Co-operation and Development",
    id: "international-energy-agency-organisation-for-economic-co-operation-and-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-energy-agency-organisation-for-economic-co-operation-and-development.csl"
  },
  {
    label: "International Islamic University Malaysia - Ahmad Ibrahim Kulliyyah of Laws",
    id: "international-islamic-university-malaysia-ahmad-ibrahim-kulliyyah-of-laws",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-islamic-university-malaysia-ahmad-ibrahim-kulliyyah-of-laws.csl"
  },
  {
    label: "International Journal for Numerical Methods in Biomedical Engineering",
    id: "international-journal-for-numerical-methods-in-biomedical-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-for-numerical-methods-in-biomedical-engineering.csl"
  },
  {
    label: "International Journal of Audiology",
    id: "international-journal-of-audiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-audiology.csl"
  },
  {
    label: "International Journal of Automotive Technology",
    id: "international-journal-of-automotive-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-automotive-technology.csl"
  },
  {
    label: "International Journal of Cancer",
    id: "international-journal-of-cancer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-cancer.csl"
  },
  {
    label: "International Journal of Circuit Theory and Applications",
    id: "international-journal-of-circuit-theory-and-applications",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-circuit-theory-and-applications.csl"
  },
  {
    label: "International Journal of Climatology",
    id: "international-journal-of-climatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-climatology.csl"
  },
  {
    label: "International Journal of Clinical Research",
    id: "international-journal-of-clinical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-clinical-research.csl"
  },
  {
    label: "International Journal of Cosmetic Science",
    id: "international-journal-of-cosmetic-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-cosmetic-science.csl"
  },
  {
    label: "International Journal of Electrochemical Science",
    id: "international-journal-of-electrochemical-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-electrochemical-science.csl"
  },
  {
    label: "International Journal of Electronic Commerce",
    id: "international-journal-of-electronic-commerce",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-electronic-commerce.csl"
  },
  {
    label: "International Journal of Epidemiology",
    id: "international-journal-of-epidemiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-epidemiology.csl"
  },
  {
    label: "International Journal of Exercise Science",
    id: "international-journal-of-exercise-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-exercise-science.csl"
  },
  {
    label: "International Journal of Food Science & Technology",
    id: "international-journal-of-food-science-and-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-food-science-and-technology.csl"
  },
  {
    label: "International Journal of Geriatric Psychiatry",
    id: "international-journal-of-geriatric-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-geriatric-psychiatry.csl"
  },
  {
    label: "International Journal of Humanoid Robotics",
    id: "international-journal-of-humanoid-robotics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-humanoid-robotics.csl"
  },
  {
    label: "International Journal of Language & Communication Disorders",
    id: "international-journal-of-language-and-communication-disorders",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-language-and-communication-disorders.csl"
  },
  {
    label: "International Journal of Learner Corpus Research",
    id: "international-journal-of-learner-corpus-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-learner-corpus-research.csl"
  },
  {
    label: "International Journal of Lexicography",
    id: "international-journal-of-lexicography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-lexicography.csl"
  },
  {
    label: "International Journal of Management Reviews",
    id: "international-journal-of-management-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-management-reviews.csl"
  },
  {
    label: "International Journal of Nuclear Security",
    id: "international-journal-of-nuclear-security",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-nuclear-security.csl"
  },
  {
    label: "International Journal of Obstetric Anesthesia",
    id: "international-journal-of-obstetric-anesthesia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-obstetric-anesthesia.csl"
  },
  {
    label: "International Journal of Occupational Medicine and Environmental Health",
    id: "international-journal-of-occupational-medicine-and-environmental-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-occupational-medicine-and-environmental-health.csl"
  },
  {
    label: "International Journal of Oral and Maxillofacial Surgery",
    id: "international-journal-of-oral-and-maxillofacial-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-oral-and-maxillofacial-surgery.csl"
  },
  {
    label: "International Journal of Osteoarchaeology",
    id: "international-journal-of-osteoarchaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-osteoarchaeology.csl"
  },
  {
    label: "International Journal of Plant Sciences",
    id: "international-journal-of-plant-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-plant-sciences.csl"
  },
  {
    label: "International Journal of Polymer Analysis and Characterization",
    id: "international-journal-of-polymer-analysis-and-characterization",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-polymer-analysis-and-characterization.csl"
  },
  {
    label: "International Journal of Polymeric Materials and Polymeric Biomaterials",
    id: "international-journal-of-polymeric-materials-and-polymeric-biomaterials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-polymeric-materials-and-polymeric-biomaterials.csl"
  },
  {
    label: "International Journal of Population Data Science",
    id: "international-journal-of-population-data-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-population-data-science.csl"
  },
  {
    label: "International Journal of Quantum Chemistry",
    id: "international-journal-of-quantum-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-quantum-chemistry.csl"
  },
  {
    label: "International Journal of Radiation Oncology, Biology, Physics",
    id: "international-journal-of-radiation-oncology-biology-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-radiation-oncology-biology-physics.csl"
  },
  {
    label: "International Journal of Research in Exercise Physiology",
    id: "international-journal-of-research-in-exercise-physiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-research-in-exercise-physiology.csl"
  },
  {
    label: "International Journal of Simulation Modelling",
    id: "international-journal-of-simulation-modelling",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-simulation-modelling.csl"
  },
  {
    label: "International Journal of Spatial Data Infrastructures Research",
    id: "international-journal-of-spatial-data-infrastructures-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-spatial-data-infrastructures-research.csl"
  },
  {
    label: "International Journal of Sport Medicine",
    id: "international-journal-of-sports-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-sports-medicine.csl"
  },
  {
    label: "International Journal of Urban and Regional Research",
    id: "international-journal-of-urban-and-regional-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-urban-and-regional-research.csl"
  },
  {
    label: "International Journal of Wildland Fire",
    id: "international-journal-of-wildland-fire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-journal-of-wildland-fire.csl"
  },
  {
    label: "International Microbiology",
    id: "international-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-microbiology.csl"
  },
  {
    label: "International Organization",
    id: "international-organization",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-organization.csl"
  },
  {
    label: "International Pig Veterinary Society Congress Proceedings",
    id: "international-pig-veterinary-society-congress-proceedings",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-pig-veterinary-society-congress-proceedings.csl"
  },
  {
    label: "International Review of the Red Cross",
    id: "international-review-of-the-red-cross",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-review-of-the-red-cross.csl"
  },
  {
    label: "International Security",
    id: "international-security",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-security.csl"
  },
  {
    label: "International Studies Association",
    id: "international-studies-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-studies-association.csl"
  },
  {
    label: "International Union of Crystallography journals",
    id: "international-union-of-crystallography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-union-of-crystallography.csl"
  },
  {
    label: "International Union of Forest Research Organizations - Headquarters",
    id: "international-union-of-forest-research-organizations-headquarters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/international-union-of-forest-research-organizations-headquarters.csl"
  },
  {
    label: "Internet Archaeology",
    id: "internet-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/internet-archaeology.csl"
  },
  {
    label: "Interpreting",
    id: "interpreting",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/interpreting.csl"
  },
  {
    label: "Inventaire g\xE9n\xE9ral du patrimoine culturel - ISO-690 (full note, with Ibid., Fran\xE7ais)",
    id: "inventaire-general-du-patrimoine-culturel-iso-690-full-note-with-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/inventaire-general-du-patrimoine-culturel-iso-690-full-note-with-ibid.csl"
  },
  {
    label: "Inventaire g\xE9n\xE9ral du patrimoine culturel - ISO-690 (full note, Fran\xE7ais)",
    id: "inventaire-general-du-patrimoine-culturel-iso-690-full-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/inventaire-general-du-patrimoine-culturel-iso-690-full-note.csl"
  },
  {
    label: "Inventaire g\xE9n\xE9ral du patrimoine culturel - ISO-690 (note, Fran\xE7ais)",
    id: "inventaire-general-du-patrimoine-culturel-iso-690-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/inventaire-general-du-patrimoine-culturel-iso-690-note.csl"
  },
  {
    label: "Invertebrate Biology",
    id: "invertebrate-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/invertebrate-biology.csl"
  },
  {
    label: "Investigative Radiology",
    id: "investigative-radiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/investigative-radiology.csl"
  },
  {
    label: "InVisu",
    id: "invisu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/invisu.csl"
  },
  {
    label: "IOS Press (books)",
    id: "ios-press-books",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ios-press-books.csl"
  },
  {
    label: "IPAG Business School - APA",
    id: "ipag-business-school-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ipag-business-school-apa.csl"
  },
  {
    label: "Iran Manual of Style - \u0634\u06CC\u0648\u0647\u200C\u0646\u0627\u0645\u0647 \u0627\u06CC\u0631\u0627\u0646 (\u0641\u0627\u0631\u0633\u06CC)",
    id: "iran-manual-of-style",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iran-manual-of-style.csl"
  },
  {
    label: "Iranian Journal of Basic Medical Sciences",
    id: "iranian-journal-of-basic-medical-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iranian-journal-of-basic-medical-sciences.csl"
  },
  {
    label: "Iranian Journal of Pharmaceutical Research",
    id: "iranian-journal-of-pharmaceutical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iranian-journal-of-pharmaceutical-research.csl"
  },
  {
    label: "Irish Historical Studies",
    id: "irish-historical-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/irish-historical-studies.csl"
  },
  {
    label: "Isabella Stewart Gardner Museum",
    id: "isabella-stewart-gardner-museum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/isabella-stewart-gardner-museum.csl"
  },
  {
    label: "Isara - ISO-690 (auteur-date, fran\xE7ais)",
    id: "isara-iso-690",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/isara-iso-690.csl"
  },
  {
    label: "\u0130SNAD At\u0131f Sistemi 2. Edisyon (dipnotlu)",
    id: "isnad-dipnotlu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/isnad-dipnotlu.csl"
  },
  {
    label: "\u0130SNAD At\u0131f Sistemi 2. Edisyon (metini\xE7i)",
    id: "isnad-metinici",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/isnad-metinici.csl"
  },
  {
    label: "\u0130SNAD At\u0131f Sistemi 1. Edisyon (dipnotlu)",
    id: "isnad",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/isnad.csl"
  },
  {
    label: "ISO-690 (author-date, \u010Ce\u0161tina)",
    id: "iso690-author-date-cs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-cs.csl"
  },
  {
    label: "ISO-690 (author-date, Deutsch)",
    id: "iso690-author-date-de",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-de.csl"
  },
  {
    label: "ISO-690 (author-date, English)",
    id: "iso690-author-date-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-en.csl"
  },
  {
    label: "ISO-690 (author-date, Espa\xF1ol)",
    id: "iso690-author-date-es",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-es.csl"
  },
  {
    label: "ISO-690 (author-date, no abstract, Fran\xE7ais)",
    id: "iso690-author-date-fr-no-abstract",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-fr-no-abstract.csl"
  },
  {
    label: "ISO-690 (author-date, Fran\xE7ais)",
    id: "iso690-author-date-fr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-fr.csl"
  },
  {
    label: "ISO-690 (author-date, Portugu\xEAs - Brasil)",
    id: "iso690-author-date-pt-br",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-pt-br.csl"
  },
  {
    label: "ISO-690 (author-date, Sloven\u010Dina)",
    id: "iso690-author-date-sk",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-author-date-sk.csl"
  },
  {
    label: "ISO-690 (full note, \u010Ce\u0161tina)",
    id: "iso690-full-note-cs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-full-note-cs.csl"
  },
  {
    label: "ISO-690 (full note, Sloven\u010Dina)",
    id: "iso690-full-note-sk",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-full-note-sk.csl"
  },
  {
    label: "ISO-690 (full note, with Ibid., Rom\xE2n\u0103)",
    id: "iso690-full-note-with-ibid-ro",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-full-note-with-ibid-ro.csl"
  },
  {
    label: "ISO-690 (note, without bibliography, \u010Ce\u0161tina)",
    id: "iso690-note-cs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-note-cs.csl"
  },
  {
    label: "ISO-690 (note, no abstract, Fran\xE7ais)",
    id: "iso690-note-fr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-note-fr.csl"
  },
  {
    label: "ISO-690 (numeric, brackets, \u010Ce\u0161tina)",
    id: "iso690-numeric-brackets-cs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-numeric-brackets-cs.csl"
  },
  {
    label: "ISO-690 (numeric, parentheses, \u010Ce\u0161tina)",
    id: "iso690-numeric-cs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-numeric-cs.csl"
  },
  {
    label: "ISO-690 (numeric, English)",
    id: "iso690-numeric-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-numeric-en.csl"
  },
  {
    label: "ISO-690 (numeric, Fran\xE7ais)",
    id: "iso690-numeric-fr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-numeric-fr.csl"
  },
  {
    label: "ISO-690 (numeric, Lietuvi\u0173 kalba)",
    id: "iso690-numeric-lt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-numeric-lt.csl"
  },
  {
    label: "ISO-690 (numeric, Sloven\u010Dina)",
    id: "iso690-numeric-sk",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iso690-numeric-sk.csl"
  },
  {
    label: "Israel Medical Association Journal",
    id: "israel-medical-association-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/israel-medical-association-journal.csl"
  },
  {
    label: "\u0130stanbul Medical Journal",
    id: "istanbul-medical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/istanbul-medical-journal.csl"
  },
  {
    label: "\u0130stanbul \xDCniversitesi Sosyal Bilimler Enstit\xFCs\xFC (T\xFCrk\xE7e)",
    id: "istanbul-universitesi-sosyal-bilimler-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/istanbul-universitesi-sosyal-bilimler-enstitusu.csl"
  },
  {
    label: "Italian Journal of Agronomy",
    id: "italian-journal-of-agronomy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/italian-journal-of-agronomy.csl"
  },
  {
    label: "Italus Hortus",
    id: "italus-hortus",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/italus-hortus.csl"
  },
  {
    label: "Ithaque (Fran\xE7ais - Canada)",
    id: "ithaque",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ithaque.csl"
  },
  {
    label: "IUBMB Life",
    id: "iubmb-life",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/iubmb-life.csl"
  },
  {
    label: "Ius Ecclesiae",
    id: "ius-ecclesiae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ius-ecclesiae.csl"
  },
  {
    label: "\u0130zmir Katip \xC7elebi \xDCniversitesi - Sosyal Bilimler Enstit\xFCs\xFC (T\xFCrk\xE7e)",
    id: "izmir-katip-celebi-universitesi-sosyal-bilimler-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/izmir-katip-celebi-universitesi-sosyal-bilimler-enstitusu.csl"
  },
  {
    label: "JACC: Cardiovascular Imaging",
    id: "jacc-cardiovascular-imaging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jacc-cardiovascular-imaging.csl"
  },
  {
    label: "JACC: Cardiovascular Interventions",
    id: "jacc-cardiovascular-interventions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jacc-cardiovascular-interventions.csl"
  },
  {
    label: "Jahrbuch der \xD6sterreichischen Byzantinischen Gesellschaft",
    id: "jahrbuch-der-osterreichischen-byzantinischen-gesellschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jahrbuch-der-osterreichischen-byzantinischen-gesellschaft.csl"
  },
  {
    label: "Jahrbuch f\xFCr evangelikale Theologie (Deutsch)",
    id: "jahrbuch-fur-evangelikale-theologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jahrbuch-fur-evangelikale-theologie.csl"
  },
  {
    label: "Japanese Journal of Applied Physics",
    id: "japanese-journal-of-applied-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/japanese-journal-of-applied-physics.csl"
  },
  {
    label: "Javnost - The Public",
    id: "javnost-the-public",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/javnost-the-public.csl"
  },
  {
    label: "JCI Insight",
    id: "jci-insight",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jci-insight.csl"
  },
  {
    label: "JCOM: Journal of Science Communication",
    id: "jcom-journal-of-science-communication",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jcom-journal-of-science-communication.csl"
  },
  {
    label: "John Benjamins Publishing Company - Iconicity in Language and Literature",
    id: "john-benjamins-publishing-company-iconicity-in-language-and-literature",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/john-benjamins-publishing-company-iconicity-in-language-and-literature.csl"
  },
  {
    label: "John Benjamins Publishing Company - Linguistik Aktuell/Linguistics Today",
    id: "john-benjamins-publishing-company-linguistik-aktuell-linguistics-today",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/john-benjamins-publishing-company-linguistik-aktuell-linguistics-today.csl"
  },
  {
    label: "Johnson Matthey Technology Review",
    id: "johnson-matthey-technology-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/johnson-matthey-technology-review.csl"
  },
  {
    label: "Journal and Proceedings of the Royal Society of New South Wales",
    id: "journal-and-proceedings-of-the-royal-society-of-new-south-wales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-and-proceedings-of-the-royal-society-of-new-south-wales.csl"
  },
  {
    label: "Journal de la Soci\xE9t\xE9 des am\xE9ricanistes",
    id: "journal-de-la-societe-des-americanistes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-de-la-societe-des-americanistes.csl"
  },
  {
    label: "Journal de la Soci\xE9t\xE9 des Oc\xE9anistes",
    id: "journal-de-la-societe-des-oceanistes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-de-la-societe-des-oceanistes.csl"
  },
  {
    label: "Journal for the History of Astronomy",
    id: "journal-for-the-history-of-astronomy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-for-the-history-of-astronomy.csl"
  },
  {
    label: "Journal for the Study of the New Testament",
    id: "journal-for-the-study-of-the-new-testament",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-for-the-study-of-the-new-testament.csl"
  },
  {
    label: "Journal for Veterinary Medicine, Biotechnology and Biosafety",
    id: "journal-for-veterinary-medicine-biotechnology-and-biosafety",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-for-veterinary-medicine-biotechnology-and-biosafety.csl"
  },
  {
    label: "Journal f\xFCr Kulturpflanzen - Journal of Cultivated Plants",
    id: "journal-fur-kulturpflanzen-journal-of-cultivated-plants",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-fur-kulturpflanzen-journal-of-cultivated-plants.csl"
  },
  {
    label: "Journal f\xFCr Kunstgeschichte",
    id: "journal-fur-kunstgeschichte",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-fur-kunstgeschichte.csl"
  },
  {
    label: "Journal f\xFCr Medienlinguistik (Deutsch)",
    id: "journal-fur-medienlinguistik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-fur-medienlinguistik.csl"
  },
  {
    label: "Journal of Accounting Research",
    id: "journal-of-accounting-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-accounting-research.csl"
  },
  {
    label: "Journal of Acoustics",
    id: "journal-of-acoustics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-acoustics.csl"
  },
  {
    label: "Journal of Adolescent Health",
    id: "journal-of-adolescent-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-adolescent-health.csl"
  },
  {
    label: "Journal of Advertising Research",
    id: "journal-of-advertising-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-advertising-research.csl"
  },
  {
    label: "Journal of Agricultural and Applied Economics",
    id: "journal-of-agricultural-and-applied-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-agricultural-and-applied-economics.csl"
  },
  {
    label: "Journal of Agricultural and Resource Economics",
    id: "journal-of-agricultural-and-resource-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-agricultural-and-resource-economics.csl"
  },
  {
    label: "Journal of Alzheimer's Disease",
    id: "journal-of-alzheimers-disease",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-alzheimers-disease.csl"
  },
  {
    label: "Journal of Analytical Toxicology",
    id: "journal-of-analytical-toxicology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-analytical-toxicology.csl"
  },
  {
    label: "Journal of Animal Physiology and Animal Nutrition",
    id: "journal-of-animal-physiology-and-animal-nutrition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-animal-physiology-and-animal-nutrition.csl"
  },
  {
    label: "Journal of Animal Science",
    id: "journal-of-animal-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-animal-science.csl"
  },
  {
    label: "Journal of Antimicrobial Chemotherapy",
    id: "journal-of-antimicrobial-chemotherapy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-antimicrobial-chemotherapy.csl"
  },
  {
    label: "Journal of AOAC International",
    id: "journal-of-aoac-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-aoac-international.csl"
  },
  {
    label: "Journal of Applied Animal Science",
    id: "journal-of-applied-animal-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-applied-animal-science.csl"
  },
  {
    label: "Journal of Applied Clinical Medical Physics",
    id: "journal-of-applied-clinical-medical-physics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-applied-clinical-medical-physics.csl"
  },
  {
    label: "Journal of Applied Entomology",
    id: "journal-of-applied-entomology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-applied-entomology.csl"
  },
  {
    label: "Journal of Applied Pharmaceutical Research",
    id: "journal-of-applied-pharmaceutical-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-applied-pharmaceutical-research.csl"
  },
  {
    label: "Journal of Applied Philosophy",
    id: "journal-of-applied-philosophy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-applied-philosophy.csl"
  },
  {
    label: "Journal of Applied Polymer Science",
    id: "journal-of-applied-polymer-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-applied-polymer-science.csl"
  },
  {
    label: "Journal of Archaeological Research",
    id: "journal-of-archaeological-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-archaeological-research.csl"
  },
  {
    label: "Journal of Atrial Fibrillation",
    id: "journal-of-atrial-fibrillation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-atrial-fibrillation.csl"
  },
  {
    label: "Journal of Australian Strength & Conditioning",
    id: "journal-of-australian-strength-and-conditioning",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-australian-strength-and-conditioning.csl"
  },
  {
    label: "Journal of Avian Biology",
    id: "journal-of-avian-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-avian-biology.csl"
  },
  {
    label: "Journal of Basic Microbiology",
    id: "journal-of-basic-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-basic-microbiology.csl"
  },
  {
    label: "The Journal of Biological Chemistry",
    id: "journal-of-biological-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-biological-chemistry.csl"
  },
  {
    label: "Journal of Biological Regulators & Homeostatic Agents",
    id: "journal-of-biological-regulators-and-homeostatic-agents",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-biological-regulators-and-homeostatic-agents.csl"
  },
  {
    label: "Journal of Biomedical Materials Research Part A",
    id: "journal-of-biomedical-materials-research-part-a",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-biomedical-materials-research-part-a.csl"
  },
  {
    label: "Journal of Biosciences",
    id: "journal-of-biosciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-biosciences.csl"
  },
  {
    label: "Journal of Bone and Mineral Research",
    id: "journal-of-bone-and-mineral-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-bone-and-mineral-research.csl"
  },
  {
    label: "Journal of Brachial Plexus and Peripheral Nerve Injury",
    id: "journal-of-brachial-plexus-and-peripheral-nerve-injury",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-brachial-plexus-and-peripheral-nerve-injury.csl"
  },
  {
    label: "Journal of Breast Cancer",
    id: "journal-of-breast-cancer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-breast-cancer.csl"
  },
  {
    label: "Journal of Burn Care & Research",
    id: "journal-of-burn-care-and-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-burn-care-and-research.csl"
  },
  {
    label: "Journal of Business Logistics",
    id: "journal-of-business-logistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-business-logistics.csl"
  },
  {
    label: "Journal of Cachexia, Sarcopenia and Muscle",
    id: "journal-of-cachexia-sarcopenia-and-muscle",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-cachexia-sarcopenia-and-muscle.csl"
  },
  {
    label: "Journal of Cardiothoracic and Vascular Anesthesia",
    id: "journal-of-cardiothoracic-and-vascular-anesthesia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-cardiothoracic-and-vascular-anesthesia.csl"
  },
  {
    label: "Journal of Cellular and Molecular Medicine",
    id: "journal-of-cellular-and-molecular-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-cellular-and-molecular-medicine.csl"
  },
  {
    label: "Journal of Cellular Biochemistry",
    id: "journal-of-cellular-biochemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-cellular-biochemistry.csl"
  },
  {
    label: "Journal of Chemistry and Chemical Engineering",
    id: "journal-of-chemistry-and-chemical-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-chemistry-and-chemical-engineering.csl"
  },
  {
    label: "Journal of Chemometrics",
    id: "journal-of-chemometrics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-chemometrics.csl"
  },
  {
    label: "Journal of Clinical and Translational Science",
    id: "journal-of-clinical-and-translational-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-clinical-and-translational-science.csl"
  },
  {
    label: "Journal of Clinical Neurology",
    id: "journal-of-clinical-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-clinical-neurology.csl"
  },
  {
    label: "Journal of Clinical Neurophysiology",
    id: "journal-of-clinical-neurophysiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-clinical-neurophysiology.csl"
  },
  {
    label: "Journal of Clinical Oncology",
    id: "journal-of-clinical-oncology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-clinical-oncology.csl"
  },
  {
    label: "Journal of Clinical Rheumatology",
    id: "journal-of-clinical-rheumatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-clinical-rheumatology.csl"
  },
  {
    label: "Journal of Clinical Sleep Medicine",
    id: "journal-of-clinical-sleep-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-clinical-sleep-medicine.csl"
  },
  {
    label: "Journal of Combinatorics",
    id: "journal-of-combinatorics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-combinatorics.csl"
  },
  {
    label: "Journal of Common Market Studies",
    id: "journal-of-common-market-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-common-market-studies.csl"
  },
  {
    label: "Journal of Comparative Pathology",
    id: "journal-of-comparative-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-comparative-pathology.csl"
  },
  {
    label: "Journal of Computational Chemistry",
    id: "journal-of-computational-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-computational-chemistry.csl"
  },
  {
    label: "Journal of Computer Applications in Archaeology",
    id: "journal-of-computer-applications-in-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-computer-applications-in-archaeology.csl"
  },
  {
    label: "Journal of Computer Assisted Tomography",
    id: "journal-of-computer-assisted-tomography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-computer-assisted-tomography.csl"
  },
  {
    label: "Journal of Computer Information Systems",
    id: "journal-of-computer-information-systems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-computer-information-systems.csl"
  },
  {
    label: "Journal of Consumer Research",
    id: "journal-of-consumer-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-consumer-research.csl"
  },
  {
    label: "Journal of Contemporary Medicine",
    id: "journal-of-contemporary-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-contemporary-medicine.csl"
  },
  {
    label: "Journal of Contemporary Water Research and Education",
    id: "journal-of-contemporary-water-research-and-education",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-contemporary-water-research-and-education.csl"
  },
  {
    label: "Journal of Crohn's and Colitis Supplements",
    id: "journal-of-crohns-and-colitis-supplements",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-crohns-and-colitis-supplements.csl"
  },
  {
    label: "Journal of Crohn's and Colitis",
    id: "journal-of-crohns-and-colitis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-crohns-and-colitis.csl"
  },
  {
    label: "Journal of Dairy Research",
    id: "journal-of-dairy-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-dairy-research.csl"
  },
  {
    label: "Journal of Dairy Science",
    id: "journal-of-dairy-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-dairy-science.csl"
  },
  {
    label: "Journal of Dental Research",
    id: "journal-of-dental-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-dental-research.csl"
  },
  {
    label: "Journal of Dental Traumatology",
    id: "journal-of-dental-traumatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-dental-traumatology.csl"
  },
  {
    label: "Journal of Early Christian Studies",
    id: "journal-of-early-christian-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-early-christian-studies.csl"
  },
  {
    label: "Journal of Economic Impact",
    id: "journal-of-economic-impact",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-economic-impact.csl"
  },
  {
    label: "Journal of Egyptian History",
    id: "journal-of-egyptian-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-egyptian-history.csl"
  },
  {
    label: "Journal of Elections, Public Opinion & Parties",
    id: "journal-of-elections-public-opinion-and-parties",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-elections-public-opinion-and-parties.csl"
  },
  {
    label: "Journal of Endodontics",
    id: "journal-of-endodontics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-endodontics.csl"
  },
  {
    label: "Journal of Environmental Science and Health, Part B",
    id: "journal-of-environmental-science-and-health-part-b",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-environmental-science-and-health-part-b.csl"
  },
  {
    label: "Journal of Ethnobiology",
    id: "journal-of-ethnobiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-ethnobiology.csl"
  },
  {
    label: "Journal of European Public Policy",
    id: "journal-of-european-public-policy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-european-public-policy.csl"
  },
  {
    label: "Journal of Evolution and Health",
    id: "journal-of-evolution-and-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-evolution-and-health.csl"
  },
  {
    label: "Journal of Evolutionary Biology",
    id: "journal-of-evolutionary-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-evolutionary-biology.csl"
  },
  {
    label: "Journal of Experimental Botany",
    id: "journal-of-experimental-botany",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-experimental-botany.csl"
  },
  {
    label: "Journal of Field Ornithology",
    id: "journal-of-field-ornithology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-field-ornithology.csl"
  },
  {
    label: "Journal of Finance",
    id: "journal-of-finance",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-finance.csl"
  },
  {
    label: "Journal of Financial and Quantitative Analysis",
    id: "journal-of-financial-and-quantitative-analysis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-financial-and-quantitative-analysis.csl"
  },
  {
    label: "Journal of Fish Biology",
    id: "journal-of-fish-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-fish-biology.csl"
  },
  {
    label: "Journal of Food Protection",
    id: "journal-of-food-protection",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-food-protection.csl"
  },
  {
    label: "Journal of Foraminiferal Research",
    id: "journal-of-foraminiferal-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-foraminiferal-research.csl"
  },
  {
    label: "Journal of Forensic Sciences",
    id: "journal-of-forensic-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-forensic-sciences.csl"
  },
  {
    label: "Journal of Frailty & Aging",
    id: "journal-of-frailty-and-aging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-frailty-and-aging.csl"
  },
  {
    label: "Journal of Geriatric Psychiatry and Neurology",
    id: "journal-of-geriatric-psychiatry-and-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-geriatric-psychiatry-and-neurology.csl"
  },
  {
    label: "Journal of Glaciology",
    id: "journal-of-glaciology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-glaciology.csl"
  },
  {
    label: "Journal of Global Health",
    id: "journal-of-global-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-global-health.csl"
  },
  {
    label: "Journal of Health Care for the Poor and Underserved",
    id: "journal-of-health-care-for-the-poor-and-underserved",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-health-care-for-the-poor-and-underserved.csl"
  },
  {
    label: "Journal of Hearing Science",
    id: "journal-of-hearing-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-hearing-science.csl"
  },
  {
    label: "Journal of Historical Linguistics",
    id: "journal-of-historical-linguistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-historical-linguistics.csl"
  },
  {
    label: "Journal of Human Evolution",
    id: "journal-of-human-evolution",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-human-evolution.csl"
  },
  {
    label: "Journal of Human Nutrition and Dietetics",
    id: "journal-of-human-nutrition-and-dietetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-human-nutrition-and-dietetics.csl"
  },
  {
    label: "Journal of Human Rights",
    id: "journal-of-human-rights",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-human-rights.csl"
  },
  {
    label: "Journal of Hypertension",
    id: "journal-of-hypertension",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-hypertension.csl"
  },
  {
    label: "Journal of Industrial and Engineering Chemistry",
    id: "journal-of-industrial-and-engineering-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-industrial-and-engineering-chemistry.csl"
  },
  {
    label: "Journal of Industrial Ecology",
    id: "journal-of-industrial-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-industrial-ecology.csl"
  },
  {
    label: "Journal of Infection",
    id: "journal-of-infection",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-infection.csl"
  },
  {
    label: "Journal of Infectious Diseases",
    id: "journal-of-infectious-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-infectious-diseases.csl"
  },
  {
    label: "Journal of Information Technology",
    id: "journal-of-information-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-information-technology.csl"
  },
  {
    label: "Journal of Institutional and Theoretical Economics",
    id: "journal-of-institutional-and-theoretical-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-institutional-and-theoretical-economics.csl"
  },
  {
    label: "Journal of Instrumentation",
    id: "journal-of-instrumentation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-instrumentation.csl"
  },
  {
    label: "Journal of Integrated OMICS",
    id: "journal-of-integrated-omics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-integrated-omics.csl"
  },
  {
    label: "Journal of Interactive Marketing",
    id: "journal-of-interactive-marketing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-interactive-marketing.csl"
  },
  {
    label: "Journal of Intercultural Studies",
    id: "journal-of-intercultural-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-intercultural-studies.csl"
  },
  {
    label: "Journal of Internal Medicine",
    id: "journal-of-internal-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-internal-medicine.csl"
  },
  {
    label: "Journal of International Business Studies",
    id: "journal-of-international-business-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-international-business-studies.csl"
  },
  {
    label: "Journal of International Economic Law",
    id: "journal-of-international-economic-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-international-economic-law.csl"
  },
  {
    label: "Journal of International Peacekeeping",
    id: "journal-of-international-peacekeeping",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-international-peacekeeping.csl"
  },
  {
    label: "Journal of International Relations and Development",
    id: "journal-of-international-relations-and-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-international-relations-and-development.csl"
  },
  {
    label: "Journal of Investigative Dermatology",
    id: "journal-of-investigative-dermatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-investigative-dermatology.csl"
  },
  {
    label: "Journal of Jewish Studies",
    id: "journal-of-jewish-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-jewish-studies.csl"
  },
  {
    label: "Journal of Korean Neurosurgical Society",
    id: "journal-of-korean-neurosurgical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-korean-neurosurgical-society.csl"
  },
  {
    label: "Journal of Law, Medicine & Ethics",
    id: "journal-of-law-medicine-ethics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-law-medicine-ethics.csl"
  },
  {
    label: "Journal of Leukocyte Biology",
    id: "journal-of-leukocyte-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-leukocyte-biology.csl"
  },
  {
    label: "Journal of Limnology",
    id: "journal-of-limnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-limnology.csl"
  },
  {
    label: "Journal of Linguistics",
    id: "journal-of-linguistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-linguistics.csl"
  },
  {
    label: "Journal of Lipid Research",
    id: "journal-of-lipid-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-lipid-research.csl"
  },
  {
    label: "Journal of Lithic Studies",
    id: "journal-of-lithic-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-lithic-studies.csl"
  },
  {
    label: "Journal Of Magnetic Resonance Imaging",
    id: "journal-of-magnetic-resonance-imaging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-magnetic-resonance-imaging.csl"
  },
  {
    label: "Journal of Mammalogy",
    id: "journal-of-mammalogy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-mammalogy.csl"
  },
  {
    label: "Journal of Management Information Systems",
    id: "journal-of-management-information-systems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-management-information-systems.csl"
  },
  {
    label: "Journal of Management Studies",
    id: "journal-of-management-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-management-studies.csl"
  },
  {
    label: "Journal of Management",
    id: "journal-of-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-management.csl"
  },
  {
    label: "Journal of Materials Research",
    id: "journal-of-materials-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-materials-research.csl"
  },
  {
    label: "Journal of Mechanical Science and Technology",
    id: "journal-of-mechanical-science-and-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-mechanical-science-and-technology.csl"
  },
  {
    label: "Journal of Medical Genetics",
    id: "journal-of-medical-genetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-medical-genetics.csl"
  },
  {
    label: "Journal of Medical Internet Research",
    id: "journal-of-medical-internet-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-medical-internet-research.csl"
  },
  {
    label: "Journal of Microbiology and Biotechnology",
    id: "journal-of-microbiology-and-biotechnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-microbiology-and-biotechnology.csl"
  },
  {
    label: "Journal of Microbiology",
    id: "journal-of-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-microbiology.csl"
  },
  {
    label: "Journal of Midwifery Science",
    id: "journal-of-midwifery-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-midwifery-science.csl"
  },
  {
    label: "Journal of Minimally Invasive Gynecology",
    id: "journal-of-minimally-invasive-gynecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-minimally-invasive-gynecology.csl"
  },
  {
    label: "Journal of Molecular Cell Biology",
    id: "journal-of-molecular-cell-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-molecular-cell-biology.csl"
  },
  {
    label: "Journal of Molecular Endocrinology",
    id: "journal-of-molecular-endocrinology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-molecular-endocrinology.csl"
  },
  {
    label: "Journal of Molecular Recognition",
    id: "journal-of-molecular-recognition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-molecular-recognition.csl"
  },
  {
    label: "Journal of Molecular Signaling",
    id: "journal-of-molecular-signaling",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-molecular-signaling.csl"
  },
  {
    label: "Journal of Move and Therapeutic Science",
    id: "journal-of-move-and-therapeutic-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-move-and-therapeutic-science.csl"
  },
  {
    label: "Journal of Musculoskeletal Research",
    id: "journal-of-musculoskeletal-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-musculoskeletal-research.csl"
  },
  {
    label: "Journal of Music Technology and Education",
    id: "journal-of-music-technology-and-education",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-music-technology-and-education.csl"
  },
  {
    label: "Journal of Nanoscience and Nanotechnology",
    id: "journal-of-nanoscience-and-nanotechnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-nanoscience-and-nanotechnology.csl"
  },
  {
    label: "Journal of Natural History",
    id: "journal-of-natural-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-natural-history.csl"
  },
  {
    label: "Journal of Neolithic Archaeology",
    id: "journal-of-neolithic-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-neolithic-archaeology.csl"
  },
  {
    label: "Journal of Neurochemistry",
    id: "journal-of-neurochemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-neurochemistry.csl"
  },
  {
    label: "Journal of Neuroendocrinology",
    id: "journal-of-neuroendocrinology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-neuroendocrinology.csl"
  },
  {
    label: "Journal of Neuroimaging",
    id: "journal-of-neuroimaging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-neuroimaging.csl"
  },
  {
    label: "Journal of Neurological Disorders",
    id: "journal-of-neurological-disorders",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-neurological-disorders.csl"
  },
  {
    label: "Journal of Neurophysiology",
    id: "journal-of-neurophysiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-neurophysiology.csl"
  },
  {
    label: "Journal of Neuroscience and Neuroengineering",
    id: "journal-of-neuroscience-and-neuroengineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-neuroscience-and-neuroengineering.csl"
  },
  {
    label: "Journal of New Zealand Grasslands",
    id: "journal-of-new-zealand-grasslands",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-new-zealand-grasslands.csl"
  },
  {
    label: "Journal of Nutrition",
    id: "journal-of-nutrition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-nutrition.csl"
  },
  {
    label: "Journal of Occupational and Environmental Medicine",
    id: "journal-of-occupational-and-environmental-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-occupational-and-environmental-medicine.csl"
  },
  {
    label: "Journal of Oil Palm Research",
    id: "journal-of-oil-palm-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-oil-palm-research.csl"
  },
  {
    label: "Journal of Open Research Software",
    id: "journal-of-open-research-software",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-open-research-software.csl"
  },
  {
    label: "Journal of Oral and Maxillofacial Surgery",
    id: "journal-of-oral-and-maxillofacial-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-oral-and-maxillofacial-surgery.csl"
  },
  {
    label: "Journal of Orthopaedic Research",
    id: "journal-of-orthopaedic-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-orthopaedic-research.csl"
  },
  {
    label: "Journal of Orthopaedic Trauma",
    id: "journal-of-orthopaedic-trauma",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-orthopaedic-trauma.csl"
  },
  {
    label: "Journal of Orthopaedics, Trauma and Rehabilitation",
    id: "journal-of-orthopaedics-trauma-and-rehabilitation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-orthopaedics-trauma-and-rehabilitation.csl"
  },
  {
    label: "Journal of Paleontology",
    id: "journal-of-paleontology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-paleontology.csl"
  },
  {
    label: "Journal of Peace Research",
    id: "journal-of-peace-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-peace-research.csl"
  },
  {
    label: "Journal of Pediatric Gastroenterology and Nutrition",
    id: "journal-of-pediatric-gastroenterology-and-nutrition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-pediatric-gastroenterology-and-nutrition.csl"
  },
  {
    label: "Journal of Peptide Science",
    id: "journal-of-peptide-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-peptide-science.csl"
  },
  {
    label: "Journal of Perinatal Medicine",
    id: "journal-of-perinatal-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-perinatal-medicine.csl"
  },
  {
    label: "Journal of Periodontal Research",
    id: "journal-of-periodontal-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-periodontal-research.csl"
  },
  {
    label: "Journal of Petrology",
    id: "journal-of-petrology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-petrology.csl"
  },
  {
    label: "Journal of Pharmacy and Pharmacology",
    id: "journal-of-pharmacy-and-pharmacology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-pharmacy-and-pharmacology.csl"
  },
  {
    label: "Journal of Phycology",
    id: "journal-of-phycology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-phycology.csl"
  },
  {
    label: "Journal of Physical Therapy Science",
    id: "journal-of-physical-therapy-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-physical-therapy-science.csl"
  },
  {
    label: "Journal of Plankton Research",
    id: "journal-of-plankton-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-plankton-research.csl"
  },
  {
    label: "Journal of Plant Ecology",
    id: "journal-of-plant-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-plant-ecology.csl"
  },
  {
    label: "Journal of Plant Nutrition and Soil Science",
    id: "journal-of-plant-nutrition-and-soil-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-plant-nutrition-and-soil-science.csl"
  },
  {
    label: "Journal of Plant Protection Research",
    id: "journal-of-plant-protection-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-plant-protection-research.csl"
  },
  {
    label: "Journal of Political Ideologies",
    id: "journal-of-political-ideologies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-political-ideologies.csl"
  },
  {
    label: "Journal of Political Philosophy",
    id: "journal-of-political-philosophy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-political-philosophy.csl"
  },
  {
    label: "Journal of Pollination Ecology",
    id: "journal-of-pollination-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-pollination-ecology.csl"
  },
  {
    label: "Journal of Polymer Science Part A: Polymer Chemistry",
    id: "journal-of-polymer-science-part-a-polymer-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-polymer-science-part-a-polymer-chemistry.csl"
  },
  {
    label: "Journal of Porphyrins and Phthalocyanines",
    id: "journal-of-porphyrins-and-phthalocyanines",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-porphyrins-and-phthalocyanines.csl"
  },
  {
    label: "Journal of Product Innovation Management",
    id: "journal-of-product-innovation-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-product-innovation-management.csl"
  },
  {
    label: "Journal of Prosthodontics",
    id: "journal-of-prosthodontics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-prosthodontics.csl"
  },
  {
    label: "Journal of Psychiatric and Mental Health Nursing",
    id: "journal-of-psychiatric-and-mental-health-nursing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-psychiatric-and-mental-health-nursing.csl"
  },
  {
    label: "Journal of Psychiatry & Neuroscience",
    id: "journal-of-psychiatry-and-neuroscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-psychiatry-and-neuroscience.csl"
  },
  {
    label: "Journal of Raman Spectroscopy",
    id: "journal-of-raman-spectroscopy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-raman-spectroscopy.csl"
  },
  {
    label: "Journal of Reconstructive Microsurgery",
    id: "journal-of-reconstructive-microsurgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-reconstructive-microsurgery.csl"
  },
  {
    label: "Journal of Refugee Studies",
    id: "journal-of-refugee-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-refugee-studies.csl"
  },
  {
    label: "Journal of Retailing",
    id: "journal-of-retailing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-retailing.csl"
  },
  {
    label: "Journal of Rheumatology",
    id: "journal-of-rheumatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-rheumatology.csl"
  },
  {
    label: "Journal of Roman Archaeology (A)",
    id: "journal-of-roman-archaeology-a",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-roman-archaeology-a.csl"
  },
  {
    label: "Journal of Roman Archaeology (B)",
    id: "journal-of-roman-archaeology-b",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-roman-archaeology-b.csl"
  },
  {
    label: "Journal of Science and Medicine in Sport",
    id: "journal-of-science-and-medicine-in-sport",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-science-and-medicine-in-sport.csl"
  },
  {
    label: "Journal of Separation Science",
    id: "journal-of-separation-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-separation-science.csl"
  },
  {
    label: "Journal of Shoulder and Elbow Surgery",
    id: "journal-of-shoulder-and-elbow-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-shoulder-and-elbow-surgery.csl"
  },
  {
    label: "Journal of Simulation",
    id: "journal-of-simulation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-simulation.csl"
  },
  {
    label: "Journal of Sleep Research",
    id: "journal-of-sleep-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-sleep-research.csl"
  },
  {
    label: "Journal of Small Animal Practice",
    id: "journal-of-small-animal-practice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-small-animal-practice.csl"
  },
  {
    label: "Journal of Small Business Management",
    id: "journal-of-small-business-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-small-business-management.csl"
  },
  {
    label: "Journal of Social Archaeology",
    id: "journal-of-social-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-social-archaeology.csl"
  },
  {
    label: "Journal of Social Philosophy",
    id: "journal-of-social-philosophy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-social-philosophy.csl"
  },
  {
    label: "Journal of Soil and Water Conservation",
    id: "journal-of-soil-and-water-conservation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-soil-and-water-conservation.csl"
  },
  {
    label: "Journal of Soil Science and Plant Nutrition",
    id: "journal-of-soil-science-and-plant-nutrition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-soil-science-and-plant-nutrition.csl"
  },
  {
    label: "Journal of Sport and Health Science",
    id: "journal-of-sport-and-health-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-sport-and-health-science.csl"
  },
  {
    label: "Journal of Sports Science & Medicine",
    id: "journal-of-sports-science-and-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-sports-science-and-medicine.csl"
  },
  {
    label: "Journal of Strength and Conditioning Research",
    id: "journal-of-strength-and-conditioning-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-strength-and-conditioning-research.csl"
  },
  {
    label: "Journal of Stroke",
    id: "journal-of-stroke",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-stroke.csl"
  },
  {
    label: "Journal of Structural Geology",
    id: "journal-of-structural-geology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-structural-geology.csl"
  },
  {
    label: "Journal of Studies on Alcohol and Drugs",
    id: "journal-of-studies-on-alcohol-and-drugs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-studies-on-alcohol-and-drugs.csl"
  },
  {
    label: "Journal of Surgery and Medicine",
    id: "journal-of-surgery-and-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-surgery-and-medicine.csl"
  },
  {
    label: "Journal of Surgical Oncology",
    id: "journal-of-surgical-oncology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-surgical-oncology.csl"
  },
  {
    label: "Journal of Systematic Palaeontology",
    id: "journal-of-systematic-palaeontology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-systematic-palaeontology.csl"
  },
  {
    label: "Journal of the Air & Waste Management Association",
    id: "journal-of-the-air-and-waste-management-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-air-and-waste-management-association.csl"
  },
  {
    label: "Journal of the American Academy of Audiology",
    id: "journal-of-the-american-academy-of-audiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-academy-of-audiology.csl"
  },
  {
    label: "Journal of the American Academy of Orthopaedic Surgeons",
    id: "journal-of-the-american-academy-of-orthopaedic-surgeons",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-academy-of-orthopaedic-surgeons.csl"
  },
  {
    label: "Journal of the American Animal Hospital Association",
    id: "journal-of-the-american-animal-hospital-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-animal-hospital-association.csl"
  },
  {
    label: "Journal of the American Association of Laboratory Animal Science",
    id: "journal-of-the-american-association-of-laboratory-animal-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-association-of-laboratory-animal-science.csl"
  },
  {
    label: "Journal of the American Ceramic Society",
    id: "journal-of-the-american-ceramic-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-ceramic-society.csl"
  },
  {
    label: "Journal of the American College of Cardiology",
    id: "journal-of-the-american-college-of-cardiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-college-of-cardiology.csl"
  },
  {
    label: "Journal of the American College of Surgeons",
    id: "journal-of-the-american-college-of-surgeons",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-college-of-surgeons.csl"
  },
  {
    label: "Journal of the American Heart Association",
    id: "journal-of-the-american-heart-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-heart-association.csl"
  },
  {
    label: "Journal of the American Philosophical Association",
    id: "journal-of-the-american-philosophical-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-philosophical-association.csl"
  },
  {
    label: "Journal of the American Society of Brewing Chemists",
    id: "journal-of-the-american-society-of-brewing-chemists",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-society-of-brewing-chemists.csl"
  },
  {
    label: "Journal of the American Society of Nephrology",
    id: "journal-of-the-american-society-of-nephrology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-society-of-nephrology.csl"
  },
  {
    label: "Journal of the American Water Resources Association",
    id: "journal-of-the-american-water-resources-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-american-water-resources-association.csl"
  },
  {
    label: "Journal of the Association for Information Systems",
    id: "journal-of-the-association-for-information-systems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-association-for-information-systems.csl"
  },
  {
    label: "Journal of the Association of Environmental and Resource Economists",
    id: "journal-of-the-association-of-environmental-and-resource-economists",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-association-of-environmental-and-resource-economists.csl"
  },
  {
    label: "Journal of the Botanical Research Institute of Texas",
    id: "journal-of-the-botanical-research-institute-of-texas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-botanical-research-institute-of-texas.csl"
  },
  {
    label: "Journal of the Brazilian Chemical Society",
    id: "journal-of-the-brazilian-chemical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-brazilian-chemical-society.csl"
  },
  {
    label: "Journal of The Electrochemical Society",
    id: "journal-of-the-electrochemical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-electrochemical-society.csl"
  },
  {
    label: "Journal of the European Academy of Dermatology and Venereology",
    id: "journal-of-the-european-academy-of-dermatology-and-venereology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-european-academy-of-dermatology-and-venereology.csl"
  },
  {
    label: "Journal of the History of Collections",
    id: "journal-of-the-history-of-collections",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-history-of-collections.csl"
  },
  {
    label: "Journal of the Indian Law Institute",
    id: "journal-of-the-indian-law-institute",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-indian-law-institute.csl"
  },
  {
    label: "Journal of the Korean Society of Civil Engineers",
    id: "journal-of-the-korean-society-of-civil-engineers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-korean-society-of-civil-engineers.csl"
  },
  {
    label: "Journal of the Marine Biological Association of the United Kingdom",
    id: "journal-of-the-marine-biological-association-of-the-united-kingdom",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-marine-biological-association-of-the-united-kingdom.csl"
  },
  {
    label: "Journal of the Royal Anthropological Institute",
    id: "journal-of-the-royal-anthropological-institute",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-royal-anthropological-institute.csl"
  },
  {
    label: "Journal of the Royal Society of Western Australia",
    id: "journal-of-the-royal-society-of-western-australia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-royal-society-of-western-australia.csl"
  },
  {
    label: "Journal of the Royal Statistical Society",
    id: "journal-of-the-royal-statistical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-royal-statistical-society.csl"
  },
  {
    label: "Journal of the Science of Food and Agriculture",
    id: "journal-of-the-science-of-food-and-agriculture",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-science-of-food-and-agriculture.csl"
  },
  {
    label: "Journal of the Serbian Chemical Society",
    id: "journal-of-the-serbian-chemical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-serbian-chemical-society.csl"
  },
  {
    label: "Journal of the Warburg and Courtauld Institutes",
    id: "journal-of-the-warburg-and-courtauld-institutes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-the-warburg-and-courtauld-institutes.csl"
  },
  {
    label: "Journal of Thermal Spray Technology",
    id: "journal-of-thermal-spray-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-thermal-spray-technology.csl"
  },
  {
    label: "Journal of Threatened Taxa",
    id: "journal-of-threatened-taxa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-threatened-taxa.csl"
  },
  {
    label: "Journal of Thrombosis and Haemostasis",
    id: "journal-of-thrombosis-and-haemostasis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-thrombosis-and-haemostasis.csl"
  },
  {
    label: "Journal of Tropical Ecology",
    id: "journal-of-tropical-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-tropical-ecology.csl"
  },
  {
    label: "Journal of Tropical Life Science",
    id: "journal-of-tropical-life-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-tropical-life-science.csl"
  },
  {
    label: "Journal of Universal Computer Science",
    id: "journal-of-universal-computer-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-universal-computer-science.csl"
  },
  {
    label: "Journal of Urban and Environmental Engineering",
    id: "journal-of-urban-and-environmental-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-urban-and-environmental-engineering.csl"
  },
  {
    label: "Journal of Urban Technology",
    id: "journal-of-urban-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-urban-technology.csl"
  },
  {
    label: "The Journal of Value Inquiry",
    id: "journal-of-value-inquiry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-value-inquiry.csl"
  },
  {
    label: "Journal of Vegetation Science",
    id: "journal-of-vegetation-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-vegetation-science.csl"
  },
  {
    label: "Journal of Vertebrate Biology",
    id: "journal-of-vertebrate-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-vertebrate-biology.csl"
  },
  {
    label: "Journal of Vertebrate Paleontology",
    id: "journal-of-vertebrate-paleontology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-vertebrate-paleontology.csl"
  },
  {
    label: "Journal of Vestibular Research",
    id: "journal-of-vestibular-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-vestibular-research.csl"
  },
  {
    label: "Journal of Veterinary Diagnostic Investigation",
    id: "journal-of-veterinary-diagnostic-investigation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-veterinary-diagnostic-investigation.csl"
  },
  {
    label: "Journal of Visualized Experiments",
    id: "journal-of-visualized-experiments",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-visualized-experiments.csl"
  },
  {
    label: "Journal of Water Sanitation and Hygiene for Development",
    id: "journal-of-water-sanitation-and-hygiene-for-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-water-sanitation-and-hygiene-for-development.csl"
  },
  {
    label: "Journal of Wildlife Diseases",
    id: "journal-of-wildlife-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-wildlife-diseases.csl"
  },
  {
    label: "Journal of Zoo and Wildlife Medicine",
    id: "journal-of-zoo-and-wildlife-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-zoo-and-wildlife-medicine.csl"
  },
  {
    label: "Journal of Zoo Biology",
    id: "journal-of-zoo-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-zoo-biology.csl"
  },
  {
    label: "Journal of Zoology",
    id: "journal-of-zoology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-of-zoology.csl"
  },
  {
    label: "Journal on Efficiency and Responsibility in Education and Science",
    id: "journal-on-efficiency-and-responsibility-in-education-and-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journal-on-efficiency-and-responsibility-in-education-and-science.csl"
  },
  {
    label: "Journalistica (Dansk)",
    id: "journalistica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/journalistica.csl"
  },
  {
    label: "Jurisprudence (\u010Ce\u0161tina)",
    id: "jurisprudence",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jurisprudence.csl"
  },
  {
    label: "Juristische Schulung (Deutsch)",
    id: "juristische-schulung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/juristische-schulung.csl"
  },
  {
    label: "Juristische Zitierweise - \xD6ffentliches Recht (Deutsch)",
    id: "juristische-zitierweise-offentliches-recht",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/juristische-zitierweise-offentliches-recht.csl"
  },
  {
    label: "Juristische Zitierweise Schweizer (Ryser B\xFCschi et al.) (Deutsch - Schweiz)",
    id: "juristische-zitierweise-schweizer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/juristische-zitierweise-schweizer.csl"
  },
  {
    label: "Juristische Zitierweise (St\xFCber) (Deutsch)",
    id: "juristische-zitierweise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/juristische-zitierweise.csl"
  },
  {
    label: "Jurnal Ilmu dan Teknologi Hasil Ternak",
    id: "jurnal-ilmu-dan-teknologi-hasil-ternak",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jurnal-ilmu-dan-teknologi-hasil-ternak.csl"
  },
  {
    label: "Jurnal Pangan dan Agroindustri (Bahasa Indonesia)",
    id: "jurnal-pangan-dan-agroindustri",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jurnal-pangan-dan-agroindustri.csl"
  },
  {
    label: "Jurnal Sains Farmasi & Klinis",
    id: "jurnal-sains-farmasi-dan-klinis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jurnal-sains-farmasi-dan-klinis.csl"
  },
  {
    label: "Jurnal Teknik Mesin Indonesia (Bahasa Indonesia)",
    id: "jurnal-teknik-mesin-indonesia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jurnal-teknik-mesin-indonesia.csl"
  },
  {
    label: "Jyv\xE4skyl\xE4n yliopisto - Kemian laitos (Suomi)",
    id: "jyvaskylan-yliopisto-kemian-laitos",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/jyvaskylan-yliopisto-kemian-laitos.csl"
  },
  {
    label: "Karabuk University - Graduate School of Natural and Applied Sciences",
    id: "karabuk-university-graduate-school-of-natural-and-applied-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/karabuk-university-graduate-school-of-natural-and-applied-sciences.csl"
  },
  {
    label: "Karger journals (author-date)",
    id: "karger-journals-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/karger-journals-author-date.csl"
  },
  {
    label: "Karger journals",
    id: "karger-journals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/karger-journals.csl"
  },
  {
    label: "Karlstad Universitet - Harvard (Svenska)",
    id: "karlstad-universitet-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/karlstad-universitet-harvard.csl"
  },
  {
    label: "Karstenia",
    id: "karstenia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/karstenia.csl"
  },
  {
    label: "Keel ja Kirjandus (Eesti keel)",
    id: "keel-ja-kirjandus",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/keel-ja-kirjandus.csl"
  },
  {
    label: "Kidney Research and Clinical Practice",
    id: "kidney-research-and-clinical-practice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kidney-research-and-clinical-practice.csl"
  },
  {
    label: "Kindheit und Entwicklung",
    id: "kindheit-und-entwicklung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kindheit-und-entwicklung.csl"
  },
  {
    label: "KIT Karlsruher Institut f\xFCr Technologie Germanistik NDL Neuere Deutsche Literaturwissenschaft (German)",
    id: "kit-karlsruher-institut-fur-technologie-germanistik-ndl-neuere-deutsche-literaturwissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kit-karlsruher-institut-fur-technologie-germanistik-ndl-neuere-deutsche-literaturwissenschaft.csl"
  },
  {
    label: "Klinische P\xE4diatrie",
    id: "klinische-padiatrie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/klinische-padiatrie.csl"
  },
  {
    label: "Knee Surgery & Related Research",
    id: "knee-surgery-and-related-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/knee-surgery-and-related-research.csl"
  },
  {
    label: "Knee Surgery, Sports Traumatology, Arthroscopy",
    id: "knee-surgery-sports-traumatology-arthroscopy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/knee-surgery-sports-traumatology-arthroscopy.csl"
  },
  {
    label: "Knowledge & Management of Aquatic Ecosystems",
    id: "knowledge-and-management-of-aquatic-ecosystems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/knowledge-and-management-of-aquatic-ecosystems.csl"
  },
  {
    label: "K\xF6lner Zeitschrift f\xFCr Soziologie und Sozialpsychologie (Deutsch)",
    id: "kolner-zeitschrift-fur-soziologie-und-sozialpsychologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kolner-zeitschrift-fur-soziologie-und-sozialpsychologie.csl"
  },
  {
    label: "Kommunikation und Recht (Deutsch)",
    id: "kommunikation-und-recht",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kommunikation-und-recht.csl"
  },
  {
    label: "KONA Powder and Particle Journal",
    id: "kona-powder-and-particle-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kona-powder-and-particle-journal.csl"
  },
  {
    label: "Korean Journal of Anesthesiology",
    id: "korean-journal-of-anesthesiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/korean-journal-of-anesthesiology.csl"
  },
  {
    label: "Korean Journal of Radiology",
    id: "korean-journal-of-radiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/korean-journal-of-radiology.csl"
  },
  {
    label: "Kritische Ausgabe (Deutsch)",
    id: "kritische-ausgabe",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kritische-ausgabe.csl"
  },
  {
    label: "KSCE Journal of Civil Engineering",
    id: "ksce-journal-of-civil-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ksce-journal-of-civil-engineering.csl"
  },
  {
    label: "KTH Royal Institute of Technology - School of Computer Science and Communication (Svenska)",
    id: "kth-royal-institute-of-technology-school-of-computer-science-and-communication-sv",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kth-royal-institute-of-technology-school-of-computer-science-and-communication-sv.csl"
  },
  {
    label: "KTH Royal Institute of Technology - School of Computer Science and Communication",
    id: "kth-royal-institute-of-technology-school-of-computer-science-and-communication",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kth-royal-institute-of-technology-school-of-computer-science-and-communication.csl"
  },
  {
    label: "Kunstakademie M\xFCnster (Deutsch)",
    id: "kunstakademie-munster",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/kunstakademie-munster.csl"
  },
  {
    label: "L'homme \u2013 Revue fran\xE7aise d'anthropologie",
    id: "l-homme",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/l-homme.csl"
  },
  {
    label: "la Nouvelle Revue du Travail (Fran\xE7ais)",
    id: "la-nouvelle-revue-du-travail",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/la-nouvelle-revue-du-travail.csl"
  },
  {
    label: "La Revue des Sciences de Gestion (Fran\xE7ais)",
    id: "la-revue-des-sciences-de-gestion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/la-revue-des-sciences-de-gestion.csl"
  },
  {
    label: "La Trobe University - APA 6th edition",
    id: "la-trobe-university-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/la-trobe-university-apa.csl"
  },
  {
    label: "La Trobe University - Harvard",
    id: "la-trobe-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/la-trobe-university-harvard.csl"
  },
  {
    label: "Laboratory Animal Science Professional",
    id: "laboratory-animal-science-professional",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/laboratory-animal-science-professional.csl"
  },
  {
    label: "Lancaster University - Harvard",
    id: "lancaster-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lancaster-university-harvard.csl"
  },
  {
    label: "Land Degradation & Development",
    id: "land-degradation-and-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/land-degradation-and-development.csl"
  },
  {
    label: "Landes Bioscience Journals",
    id: "landes-bioscience-journals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/landes-bioscience-journals.csl"
  },
  {
    label: "Language in Society",
    id: "language-in-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/language-in-society.csl"
  },
  {
    label: "Language",
    id: "language",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/language.csl"
  },
  {
    label: "L\u2019Ann\xE9e sociologique (Fran\xE7ais)",
    id: "lannee-sociologique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lannee-sociologique.csl"
  },
  {
    label: "Latin American Perspectives",
    id: "latin-american-perspectives",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/latin-american-perspectives.csl"
  },
  {
    label: "Latin American Research Review",
    id: "latin-american-research-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/latin-american-research-review.csl"
  },
  {
    label: "Lauterbornia - Internationale Zeitschrift f\xFCr Faunistik und Floristik des S\xFC\xDFwassers (Deutsch)",
    id: "lauterbornia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lauterbornia.csl"
  },
  {
    label: "Law & Society Review",
    id: "law-and-society-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/law-and-society-review.csl"
  },
  {
    label: "Manual of Legal Citation (\u6CD5\u5B66\u6CE8\u5F15\u624B\u518C, \u4E2D\u6587)",
    id: "law-citation-manual",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/law-citation-manual.csl"
  },
  {
    label: "Law, Technology and Humans",
    id: "law-technology-and-humans",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/law-technology-and-humans.csl"
  },
  {
    label: "LCGC",
    id: "lcgc",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lcgc.csl"
  },
  {
    label: "Le Mouvement Social (Fran\xE7ais)",
    id: "le-mouvement-social",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/le-mouvement-social.csl"
  },
  {
    label: "Le tapuscrit (\xC9cole des hautes \xE9tudes en sciences sociales) (author-date, Fran\xE7ais)",
    id: "le-tapuscrit-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/le-tapuscrit-author-date.csl"
  },
  {
    label: "Le tapuscrit (\xC9cole des hautes \xE9tudes en sciences sociales) (note, Fran\xE7ais)",
    id: "le-tapuscrit-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/le-tapuscrit-note.csl"
  },
  {
    label: "Leiden Journal of International Law",
    id: "leiden-journal-of-international-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/leiden-journal-of-international-law.csl"
  },
  {
    label: "Leidraad voor juridische auteurs 2019 (Nederlands)",
    id: "leidraad-voor-juridische-auteurs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/leidraad-voor-juridische-auteurs.csl"
  },
  {
    label: "Leonardo",
    id: "leonardo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/leonardo.csl"
  },
  {
    label: "Les Cahiers du journalisme (Fran\xE7ais)",
    id: "les-cahiers-du-journalisme",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/les-cahiers-du-journalisme.csl"
  },
  {
    label: "Les Journ\xE9es de la Recherche Avicole (Fran\xE7ais)",
    id: "les-journees-de-la-recherche-avicole",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/les-journees-de-la-recherche-avicole.csl"
  },
  {
    label: "Les Journ\xE9es de la Recherche Porcine (Fran\xE7ais)",
    id: "les-journees-de-la-recherche-porcine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/les-journees-de-la-recherche-porcine.csl"
  },
  {
    label: "Les Mondes du travail (Fran\xE7ais)",
    id: "les-mondes-du-travail",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/les-mondes-du-travail.csl"
  },
  {
    label: "Les nouvelles de l'arch\xE9ologie (Fran\xE7ais)",
    id: "les-nouvelles-de-l-archeologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/les-nouvelles-de-l-archeologie.csl"
  },
  {
    label: "Lethaia",
    id: "lethaia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lethaia.csl"
  },
  {
    label: "Letters in Applied Microbiology",
    id: "letters-in-applied-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/letters-in-applied-microbiology.csl"
  },
  {
    label: "Lettres et Sciences Humaines (biblio et notes, Fran\xE7ais)",
    id: "lettres-et-sciences-humaines-fr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lettres-et-sciences-humaines-fr.csl"
  },
  {
    label: "Leviathan (Deutsch)",
    id: "leviathan",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/leviathan.csl"
  },
  {
    label: "Lien social et Politiques (Fran\xE7ais)",
    id: "lien-social-et-politiques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lien-social-et-politiques.csl"
  },
  {
    label: "Life Science Alliance",
    id: "life-science-alliance",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/life-science-alliance.csl"
  },
  {
    label: "Limnetica",
    id: "limnetica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/limnetica.csl"
  },
  {
    label: "Limnology and Oceanography",
    id: "limnology-and-oceanography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/limnology-and-oceanography.csl"
  },
  {
    label: "Liver International",
    id: "liver-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/liver-international.csl"
  },
  {
    label: "Liverpool John Moores University - Harvard",
    id: "liverpool-john-moores-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/liverpool-john-moores-university-harvard.csl"
  },
  {
    label: "Guide des r\xE9f\xE9rences pour la r\xE9daction juridique 7e \xE9dition (Notes compl\xE8tes) (Guide Lluelles, no Ibid., Fran\xE7ais - Canada)",
    id: "lluelles-no-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lluelles-no-ibid.csl"
  },
  {
    label: "Guide des r\xE9f\xE9rences pour la r\xE9daction juridique 7e \xE9dition (Guide Lluelles, Fran\xE7ais - Canada)",
    id: "lluelles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lluelles.csl"
  },
  {
    label: "London Metropolitan University - Harvard",
    id: "london-metropolitan-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/london-metropolitan-university-harvard.csl"
  },
  {
    label: "London Review of International Law",
    id: "london-review-of-international-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/london-review-of-international-law.csl"
  },
  {
    label: "London South Bank University (numeric)",
    id: "london-south-bank-university-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/london-south-bank-university-numeric.csl"
  },
  {
    label: "Lund University School of Economics and Management",
    id: "lund-university-school-of-economics-and-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/lund-university-school-of-economics-and-management.csl"
  },
  {
    label: "Macromolecular Reaction Engineering",
    id: "macromolecular-reaction-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/macromolecular-reaction-engineering.csl"
  },
  {
    label: "Magnetic Resonance in Medical Sciences",
    id: "magnetic-resonance-in-medical-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/magnetic-resonance-in-medical-sciences.csl"
  },
  {
    label: "Magnetic Resonance Materials in Physics, Biology and Medicine",
    id: "magnetic-resonance-materials-in-physics-biology-and-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/magnetic-resonance-materials-in-physics-biology-and-medicine.csl"
  },
  {
    label: "Maison de l'Orient et de la M\xE9diterran\xE9e (English)",
    id: "maison-de-l-orient-et-de-la-mediterranee-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/maison-de-l-orient-et-de-la-mediterranee-en.csl"
  },
  {
    label: "Maison de l'Orient et de la M\xE9diterran\xE9e (Fran\xE7ais)",
    id: "maison-de-l-orient-et-de-la-mediterranee",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/maison-de-l-orient-et-de-la-mediterranee.csl"
  },
  {
    label: "Malaysian Orthopaedic Journal",
    id: "malaysian-orthopaedic-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/malaysian-orthopaedic-journal.csl"
  },
  {
    label: "Mammal Review",
    id: "mammal-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mammal-review.csl"
  },
  {
    label: "Mammalia",
    id: "mammalia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mammalia.csl"
  },
  {
    label: "Mammalogy Notes",
    id: "mammalogy-notes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mammalogy-notes.csl"
  },
  {
    label: "Management & Avenir (Fran\xE7ais)",
    id: "management-et-avenir",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/management-et-avenir.csl"
  },
  {
    label: "Management international",
    id: "management-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/management-international.csl"
  },
  {
    label: "Management of Biological Invasions",
    id: "management-of-biological-invasions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/management-of-biological-invasions.csl"
  },
  {
    label: "Manchester University Press monographs (author-date)",
    id: "manchester-university-press-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/manchester-university-press-author-date.csl"
  },
  {
    label: "Manchester University Press monographs (note)",
    id: "manchester-university-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/manchester-university-press.csl"
  },
  {
    label: "Marine Biology",
    id: "marine-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/marine-biology.csl"
  },
  {
    label: "Marine Mammal Science",
    id: "marine-mammal-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/marine-mammal-science.csl"
  },
  {
    label: "Marine Ornithology",
    id: "marine-ornithology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/marine-ornithology.csl"
  },
  {
    label: "Marine Turtle Newsletter",
    id: "marine-turtle-newsletter",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/marine-turtle-newsletter.csl"
  },
  {
    label: "Marmara \xDCniversitesi - T\xFCrkiyat Ara\u015Ft\u0131rmalar\u0131 Enstit\xFCs\xFC (T\xFCrk\xE7e)",
    id: "marmara-universitesi-turkiyat-arastirmalari-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/marmara-universitesi-turkiyat-arastirmalari-enstitusu.csl"
  },
  {
    label: "Mary Ann Liebert - Harvard",
    id: "mary-ann-liebert-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mary-ann-liebert-harvard.csl"
  },
  {
    label: "Mary Ann Liebert - Vancouver",
    id: "mary-ann-liebert-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mary-ann-liebert-vancouver.csl"
  },
  {
    label: "Masarykova univerzita - Pr\xE1vnick\xE1 fakulta",
    id: "masarykova-univerzita-pravnicka-fakulta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/masarykova-univerzita-pravnicka-fakulta.csl"
  },
  {
    label: "Mastozoologia Neotropical",
    id: "mastozoologia-neotropical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mastozoologia-neotropical.csl"
  },
  {
    label: "Materials Express",
    id: "materials-express",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/materials-express.csl"
  },
  {
    label: "Mathematical Geosciences",
    id: "mathematical-geosciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mathematical-geosciences.csl"
  },
  {
    label: "Mathematics and Computers in Simulation",
    id: "mathematics-and-computers-in-simulation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mathematics-and-computers-in-simulation.csl"
  },
  {
    label: "McDonald Institute Monographs",
    id: "mcdonald-institute-monographs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mcdonald-institute-monographs.csl"
  },
  {
    label: "Canadian Guide to Uniform Legal Citation 9th edition (McGill Guide)",
    id: "mcgill-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mcgill-en.csl"
  },
  {
    label: "Manuel canadien de la r\xE9f\xE9rence juridique 9e \xE9dition (Guide McGill, Fran\xE7ais - Canada)",
    id: "mcgill-fr",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mcgill-fr.csl"
  },
  {
    label: "M\xE9decine Intensive R\xE9animation",
    id: "medecine-intensive-reanimation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medecine-intensive-reanimation.csl"
  },
  {
    label: "m\xE9decine/sciences",
    id: "medecine-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medecine-sciences.csl"
  },
  {
    label: "Media, Culture & Society",
    id: "media-culture-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/media-culture-and-society.csl"
  },
  {
    label: "Mediaeval Studies",
    id: "mediaeval-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mediaeval-studies.csl"
  },
  {
    label: "Medical Dosimetry",
    id: "medical-dosimetry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medical-dosimetry.csl"
  },
  {
    label: "Medical History",
    id: "medical-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medical-history.csl"
  },
  {
    label: "Medicina Cl\xEDnica (Espa\xF1ol)",
    id: "medicina-clinica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medicina-clinica.csl"
  },
  {
    label: "Medicina delle Dipendenze - Italian Journal of the Addictions (Italiano)",
    id: "medicina-delle-dipendenze-italian-journal-of-the-addictions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medicina-delle-dipendenze-italian-journal-of-the-addictions.csl"
  },
  {
    label: "Medicinal Research Reviews",
    id: "medicinal-research-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medicinal-research-reviews.csl"
  },
  {
    label: "Medicine & Science in Sports & Exercise",
    id: "medicine-and-science-in-sports-and-exercise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medicine-and-science-in-sports-and-exercise.csl"
  },
  {
    label: "Medicine Publishing",
    id: "medicine-publishing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medicine-publishing.csl"
  },
  {
    label: "Medicinski razgledi",
    id: "medicinski-razgledi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medicinski-razgledi.csl"
  },
  {
    label: "Medicinskiy Akademicheskiy Zhurnal",
    id: "medicinskiy-akademicheskiy-zhurnal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medicinskiy-akademicheskiy-zhurnal.csl"
  },
  {
    label: "Mediterranean Journal of Chemistry",
    id: "mediterranean-journal-of-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mediterranean-journal-of-chemistry.csl"
  },
  {
    label: "Mediterranean Journal of Infection, Microbes and Antimicrobials",
    id: "mediterranean-journal-of-infection-microbes-and-antimicrobials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mediterranean-journal-of-infection-microbes-and-antimicrobials.csl"
  },
  {
    label: "Mediterranean Politics",
    id: "mediterranean-politics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mediterranean-politics.csl"
  },
  {
    label: "Medizinische Hochschule Hannover",
    id: "medizinische-hochschule-hannover",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medizinische-hochschule-hannover.csl"
  },
  {
    label: "Medizinische Universit\xE4t Innsbruck - Vancouver (Deutsch)",
    id: "medizinische-universitat-innsbruck-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/medizinische-universitat-innsbruck-vancouver.csl"
  },
  {
    label: "Melbourne School of Theology",
    id: "melbourne-school-of-theology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/melbourne-school-of-theology.csl"
  },
  {
    label: "Mem\xF3rias do Instituto Oswaldo Cruz",
    id: "memorias-do-instituto-oswaldo-cruz",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/memorias-do-instituto-oswaldo-cruz.csl"
  },
  {
    label: "Mercator-Institut f\xFCr Sprachf\xF6rderung und Deutsch als Zweitsprache (Deutsch)",
    id: "mercator-institut-fur-sprachforderung-und-deutsch-als-zweitsprache",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mercator-institut-fur-sprachforderung-und-deutsch-als-zweitsprache.csl"
  },
  {
    label: "Mercatus Center",
    id: "mercatus-center",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mercatus-center.csl"
  },
  {
    label: "Meta",
    id: "meta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/meta.csl"
  },
  {
    label: "Metallurgical and Materials Transactions A",
    id: "metallurgical-and-materials-transactions-a",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/metallurgical-and-materials-transactions-a.csl"
  },
  {
    label: "Metallurgical and Materials Transactions",
    id: "metallurgical-and-materials-transactions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/metallurgical-and-materials-transactions.csl"
  },
  {
    label: "Meteoritics & Planetary Science",
    id: "meteoritics-and-planetary-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/meteoritics-and-planetary-science.csl"
  },
  {
    label: "Meteorological Applications",
    id: "meteorological-applications",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/meteorological-applications.csl"
  },
  {
    label: "Method & Theory in the Study of Religion",
    id: "method-and-theory-in-the-study-of-religion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/method-and-theory-in-the-study-of-religion.csl"
  },
  {
    label: "Methods of Information in Medicine",
    id: "methods-of-information-in-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/methods-of-information-in-medicine.csl"
  },
  {
    label: "Metropol Verlag (Deutsch)",
    id: "metropol-verlag",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/metropol-verlag.csl"
  },
  {
    label: "Metropolia Ammattikorkeakoulu - Harvard (Suomi)",
    id: "metropolia-university-of-applied-sciences-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/metropolia-university-of-applied-sciences-harvard.csl"
  },
  {
    label: "M\xE9tropolitiques (Fran\xE7ais)",
    id: "metropolitiques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/metropolitiques.csl"
  },
  {
    label: "Microbial Cell",
    id: "microbial-cell",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/microbial-cell.csl"
  },
  {
    label: "Microbiology Society",
    id: "microbiology-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/microbiology-society.csl"
  },
  {
    label: "Microbiome Research Reports",
    id: "microbiome-research-reports",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/microbiome-research-reports.csl"
  },
  {
    label: "Microcirculation",
    id: "microcirculation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/microcirculation.csl"
  },
  {
    label: "Microscopy and Microanalysis",
    id: "microscopy-and-microanalysis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/microscopy-and-microanalysis.csl"
  },
  {
    label: "Middle East Critique",
    id: "middle-east-critique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/middle-east-critique.csl"
  },
  {
    label: "Midwestern Baptist Theological Seminary",
    id: "midwestern-baptist-theological-seminary",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/midwestern-baptist-theological-seminary.csl"
  },
  {
    label: "Mimbar Hukum",
    id: "mimbar-hukum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mimbar-hukum.csl"
  },
  {
    label: "Mimesis Edizioni (Italiano)",
    id: "mimesis-edizioni",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mimesis-edizioni.csl"
  },
  {
    label: "Mind & Language",
    id: "mind-and-language",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mind-and-language.csl"
  },
  {
    label: "Mineralogical Magazine",
    id: "mineralogical-magazine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mineralogical-magazine.csl"
  },
  {
    label: "MIS Quarterly",
    id: "mis-quarterly",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mis-quarterly.csl"
  },
  {
    label: "Modern Chinese Literature and Culture",
    id: "modern-chinese-literature-and-culture",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-chinese-literature-and-culture.csl"
  },
  {
    label: "Modern Humanities Research Association 3rd edition (author-date)",
    id: "modern-humanities-research-association-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-humanities-research-association-author-date.csl"
  },
  {
    label: "Modern Humanities Research Association 3rd edition (note with bibliography)",
    id: "modern-humanities-research-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-humanities-research-association.csl"
  },
  {
    label: "Modern Language Association 6th edition (note)",
    id: "modern-language-association-6th-edition-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association-6th-edition-note.csl"
  },
  {
    label: "Modern Language Association 7th edition (underline)",
    id: "modern-language-association-7th-edition-underline",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association-7th-edition-underline.csl"
  },
  {
    label: "Modern Language Association 7th edition (with URL)",
    id: "modern-language-association-7th-edition-with-url",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association-7th-edition-with-url.csl"
  },
  {
    label: "Modern Language Association 7th edition",
    id: "modern-language-association-7th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association-7th-edition.csl"
  },
  {
    label: "Modern Language Association 8th edition",
    id: "modern-language-association-8th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association-8th-edition.csl"
  },
  {
    label: "Modern Language Association 9th edition",
    id: "modern-language-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-language-association.csl"
  },
  {
    label: "Modern Pathology",
    id: "modern-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-pathology.csl"
  },
  {
    label: "Modern Phytomorphology",
    id: "modern-phytomorphology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/modern-phytomorphology.csl"
  },
  {
    label: "Mohr Siebeck - Recht (Deutsch - \xD6sterreich)",
    id: "mohr-siebeck-recht",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mohr-siebeck-recht.csl"
  },
  {
    label: "Molecular & Cellular Proteomics",
    id: "molecular-and-cellular-proteomics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-and-cellular-proteomics.csl"
  },
  {
    label: "Molecular Biology and Evolution",
    id: "molecular-biology-and-evolution",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-biology-and-evolution.csl"
  },
  {
    label: "Molecular Biology of the Cell",
    id: "molecular-biology-of-the-cell",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-biology-of-the-cell.csl"
  },
  {
    label: "Molecular Biology",
    id: "molecular-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-biology.csl"
  },
  {
    label: "Molecular Metabolism",
    id: "molecular-metabolism",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-metabolism.csl"
  },
  {
    label: "Molecular Microbiology",
    id: "molecular-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-microbiology.csl"
  },
  {
    label: "Molecular Nutrition & Food Research",
    id: "molecular-nutrition-and-food-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-nutrition-and-food-research.csl"
  },
  {
    label: "Molecular Oncology",
    id: "molecular-oncology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-oncology.csl"
  },
  {
    label: "Molecular Plant-Microbe Interactions",
    id: "molecular-plant-microbe-interactions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-plant-microbe-interactions.csl"
  },
  {
    label: "Molecular Plant Pathology",
    id: "molecular-plant-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-plant-pathology.csl"
  },
  {
    label: "Molecular Plant",
    id: "molecular-plant",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-plant.csl"
  },
  {
    label: "Molecular Psychiatry (letters to the editor)",
    id: "molecular-psychiatry-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-psychiatry-letters.csl"
  },
  {
    label: "Molecular Psychiatry",
    id: "molecular-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/molecular-psychiatry.csl"
  },
  {
    label: "Monash University - CSIRO",
    id: "monash-university-csiro",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/monash-university-csiro.csl"
  },
  {
    label: "Mondes en d\xE9veloppement (Fran\xE7ais)",
    id: "mondes-en-developpement",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mondes-en-developpement.csl"
  },
  {
    label: "Monographs of the Palaeontographical Society",
    id: "monographs-of-the-palaeontographical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/monographs-of-the-palaeontographical-society.csl"
  },
  {
    label: "Moorlands College",
    id: "moorlands-college",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/moorlands-college.csl"
  },
  {
    label: "Mots (French)",
    id: "mots",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mots.csl"
  },
  {
    label: "MRS Bulletin",
    id: "mrs-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mrs-bulletin.csl"
  },
  {
    label: "Multidisciplinary Digital Publishing Institute",
    id: "multidisciplinary-digital-publishing-institute",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/multidisciplinary-digital-publishing-institute.csl"
  },
  {
    label: "Multilingual Matters",
    id: "multilingual-matters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/multilingual-matters.csl"
  },
  {
    label: "Multimed (Espa\xF1ol)",
    id: "multimed",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/multimed.csl"
  },
  {
    label: "Multiple Sclerosis Journal",
    id: "multiple-sclerosis-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/multiple-sclerosis-journal.csl"
  },
  {
    label: "Muscle & Nerve",
    id: "muscle-and-nerve",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/muscle-and-nerve.csl"
  },
  {
    label: "Mus\xE9um national d'Histoire naturelle",
    id: "museum-national-dhistoire-naturelle",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/museum-national-dhistoire-naturelle.csl"
  },
  {
    label: "Music Theory Spectrum",
    id: "music-theory-spectrum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/music-theory-spectrum.csl"
  },
  {
    label: "Mutagenesis",
    id: "mutagenesis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mutagenesis.csl"
  },
  {
    label: "Mycobiology",
    id: "mycobiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mycobiology.csl"
  },
  {
    label: "Mycologia",
    id: "mycologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/mycologia.csl"
  },
  {
    label: "Myrmecological News",
    id: "myrmecological-news",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/myrmecological-news.csl"
  },
  {
    label: "Nano Biomedicine and Engineering",
    id: "nano-biomedicine-and-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nano-biomedicine-and-engineering.csl"
  },
  {
    label: "natbib - plainnat (author-date)",
    id: "natbib-plainnat-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/natbib-plainnat-author-date.csl"
  },
  {
    label: "National Archives of Australia",
    id: "national-archives-of-australia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-archives-of-australia.csl"
  },
  {
    label: "National Institute of Health Research",
    id: "national-institute-of-health-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-institute-of-health-research.csl"
  },
  {
    label: "National Institute of Organisation Dynamics Australia - Harvard",
    id: "national-institute-of-organisation-dynamics-australia-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-institute-of-organisation-dynamics-australia-harvard.csl"
  },
  {
    label: "National Institute of Technology Karnataka",
    id: "national-institute-of-technology-karnataka",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-institute-of-technology-karnataka.csl"
  },
  {
    label: "National Institute of Technology, Tiruchirappalli",
    id: "national-institute-of-technology-tiruchirappalli",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-institute-of-technology-tiruchirappalli.csl"
  },
  {
    label: "National Library of Medicine (grant proposals with PMCID/PMID)",
    id: "national-library-of-medicine-grant-proposals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-library-of-medicine-grant-proposals.csl"
  },
  {
    label: "National Marine Fisheries Service - National Environmental Policy Act",
    id: "national-marine-fisheries-service-national-environmental-policy-act",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-marine-fisheries-service-national-environmental-policy-act.csl"
  },
  {
    label: "National Natural Science Foundation of China (\u4E2D\u6587)",
    id: "national-natural-science-foundation-of-china",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-natural-science-foundation-of-china.csl"
  },
  {
    label: "National Science Foundation (grant proposals)",
    id: "national-science-foundation-grant-proposals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-science-foundation-grant-proposals.csl"
  },
  {
    label: "National University of Singapore - Department of Geography - Harvard",
    id: "national-university-of-singapore-department-of-geography-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/national-university-of-singapore-department-of-geography-harvard.csl"
  },
  {
    label: "Nations and Nationalism",
    id: "nations-and-nationalism",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nations-and-nationalism.csl"
  },
  {
    label: "Natur und Landschaft (Deutsch)",
    id: "natur-und-landschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/natur-und-landschaft.csl"
  },
  {
    label: "Natura Croatica",
    id: "natura-croatica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/natura-croatica.csl"
  },
  {
    label: "Nature Neuroscience (brief communications)",
    id: "nature-neuroscience-brief-communications",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nature-neuroscience-brief-communications.csl"
  },
  {
    label: 'Nature (no "et al.")',
    id: "nature-no-et-al",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nature-no-et-al.csl"
  },
  {
    label: "Nature (no superscript)",
    id: "nature-no-superscript",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nature-no-superscript.csl"
  },
  {
    label: "Nature Publishing Group - Vancouver",
    id: "nature-publishing-group-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nature-publishing-group-vancouver.csl"
  },
  {
    label: "Nature",
    id: "nature",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nature.csl"
  },
  {
    label: "Natures Sciences Soci\xE9t\xE9s",
    id: "natures-sciences-societes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/natures-sciences-societes.csl"
  },
  {
    label: "Nauplius",
    id: "nauplius",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nauplius.csl"
  },
  {
    label: "Navigation",
    id: "navigation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/navigation.csl"
  },
  {
    label: "NCCR Mediality. Medienwandel - Medienwechsel - Medienwissen (Deutsch)",
    id: "nccr-mediality",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nccr-mediality.csl"
  },
  {
    label: "Necmettin Erbakan \xDCniversitesi Fen ve M\xFChendislik Bilimleri Dergisi (T\xFCrk\xE7e)",
    id: "necmettin-erbakan-universitesi-fen-ve-muhendislik-bilimleri-dergisi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/necmettin-erbakan-universitesi-fen-ve-muhendislik-bilimleri-dergisi.csl"
  },
  {
    label: "NeHeT (Fran\xE7ais)",
    id: "nehet",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nehet.csl"
  },
  {
    label: "NEJM Catalyst Innovations in Care Delivery",
    id: "nejm-catalyst-innovations-in-care-delivery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nejm-catalyst-innovations-in-care-delivery.csl"
  },
  {
    label: "Nephrology Dialysis Transplantation",
    id: "nephrology-dialysis-transplantation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nephrology-dialysis-transplantation.csl"
  },
  {
    label: "Netherlands Journal of Geosciences - Geologie en Mijnbouw",
    id: "netherlands-journal-of-geosciences-geologie-en-mijnbouw",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/netherlands-journal-of-geosciences-geologie-en-mijnbouw.csl"
  },
  {
    label: "Neue Juristische Wochenschrift (Deutsch)",
    id: "neue-juristische-wochenschrift",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neue-juristische-wochenschrift.csl"
  },
  {
    label: "Neue Kriminalpolitik (Deutsch)",
    id: "neue-kriminalpolitik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neue-kriminalpolitik.csl"
  },
  {
    label: "Neural Plasticity",
    id: "neural-plasticity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neural-plasticity.csl"
  },
  {
    label: "Neuroendocrinology Letters",
    id: "neuroendocrinology-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neuroendocrinology-letters.csl"
  },
  {
    label: "Neuroimaging Clinics of North America",
    id: "neuroimaging-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neuroimaging-clinics-of-north-america.csl"
  },
  {
    label: "Neurolog\xEDa Argentina (Espa\xF1ol)",
    id: "neurologia-argentina",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neurologia-argentina.csl"
  },
  {
    label: "Neurolog\xEDa (Espa\xF1ol)",
    id: "neurologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neurologia.csl"
  },
  {
    label: "Neurology India",
    id: "neurology-india",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neurology-india.csl"
  },
  {
    label: "Neurology",
    id: "neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neurology.csl"
  },
  {
    label: "Neuropsychopharmacology",
    id: "neuropsychopharmacology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neuropsychopharmacology.csl"
  },
  {
    label: "Neurorehabilitation and Neural Repair",
    id: "neurorehabilitation-and-neural-repair",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neurorehabilitation-and-neural-repair.csl"
  },
  {
    label: "NeuroReport",
    id: "neuroreport",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neuroreport.csl"
  },
  {
    label: "Neurospine",
    id: "neurospine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neurospine.csl"
  },
  {
    label: "Neurosurgery Clinics of North America",
    id: "neurosurgery-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/neurosurgery-clinics-of-north-america.csl"
  },
  {
    label: "New Hart's Rules: The Oxford Style Guide (author-date)",
    id: "new-harts-rules-the-oxford-style-guide-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-harts-rules-the-oxford-style-guide-author-date.csl"
  },
  {
    label: "New Hart's Rules: The Oxford Style Guide",
    id: "new-harts-rules-the-oxford-style-guide",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-harts-rules-the-oxford-style-guide.csl"
  },
  {
    label: "New Phytologist",
    id: "new-phytologist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-phytologist.csl"
  },
  {
    label: "New Solutions",
    id: "new-solutions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-solutions.csl"
  },
  {
    label: "New Testament Studies",
    id: "new-testament-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-testament-studies.csl"
  },
  {
    label: "New Zealand Dental Journal",
    id: "new-zealand-dental-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-zealand-dental-journal.csl"
  },
  {
    label: "New Zealand Journal of Forestry Science",
    id: "new-zealand-journal-of-forestry-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-zealand-journal-of-forestry-science.csl"
  },
  {
    label: "New Zealand Journal of History",
    id: "new-zealand-journal-of-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-zealand-journal-of-history.csl"
  },
  {
    label: "New Zealand Plant Protection",
    id: "new-zealand-plant-protection",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-zealand-plant-protection.csl"
  },
  {
    label: "New Zealand Veterinary Journal",
    id: "new-zealand-veterinary-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/new-zealand-veterinary-journal.csl"
  },
  {
    label: "NIST Technical Publications - Journal of Research of NIST",
    id: "nist-technical-publication-journal-of-research-of-nist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nist-technical-publication-journal-of-research-of-nist.csl"
  },
  {
    label: "Nordic Pulp & Paper Research Journal",
    id: "nordic-pulp-and-paper-research-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nordic-pulp-and-paper-research-journal.csl"
  },
  {
    label: "Norma Portuguesa 405 (Portugu\xEAs)",
    id: "norma-portuguesa-405",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/norma-portuguesa-405.csl"
  },
  {
    label: "Norois (Fran\xE7ais)",
    id: "norois",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/norois.csl"
  },
  {
    label: "Norsk APA-manual - APA 7th edition (note)",
    id: "norsk-apa-manual-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/norsk-apa-manual-note.csl"
  },
  {
    label: "Norsk APA-manual - APA 7th edition (author-date)",
    id: "norsk-apa-manual",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/norsk-apa-manual.csl"
  },
  {
    label: "Norsk henvisningsstandard for rettsvitenskapelige tekster (Norsk - Bokm\xE5l)",
    id: "norsk-henvisningsstandard-for-rettsvitenskapelige-tekster",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/norsk-henvisningsstandard-for-rettsvitenskapelige-tekster.csl"
  },
  {
    label: "North Pacific Anadromous Fish Commission Bulletin",
    id: "north-pacific-anadromous-fish-commission-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/north-pacific-anadromous-fish-commission-bulletin.csl"
  },
  {
    label: "Northeastern Naturalist",
    id: "northeastern-naturalist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/northeastern-naturalist.csl"
  },
  {
    label: "Nottingham Trent University Library - Harvard",
    id: "nottingham-trent-university-library-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nottingham-trent-university-library-harvard.csl"
  },
  {
    label: "Nouvelles perspectives en sciences sociales (Fran\xE7ais - Canada)",
    id: "nouvelles-perspectives-en-sciences-sociales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nouvelles-perspectives-en-sciences-sociales.csl"
  },
  {
    label: "Novasinergia",
    id: "novasinergia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/novasinergia.csl"
  },
  {
    label: "Nowa Audiofonologia (Polski)",
    id: "nowa-audiofonologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nowa-audiofonologia.csl"
  },
  {
    label: "Nuclear Receptor Signaling",
    id: "nuclear-receptor-signaling",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nuclear-receptor-signaling.csl"
  },
  {
    label: "Nucleic Acids Research - Web Server Issue",
    id: "nucleic-acids-research-web-server-issue",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nucleic-acids-research-web-server-issue.csl"
  },
  {
    label: "Nucleic Acids Research",
    id: "nucleic-acids-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nucleic-acids-research.csl"
  },
  {
    label: "Nutrition Research Reviews",
    id: "nutrition-research-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nutrition-research-reviews.csl"
  },
  {
    label: "NyS - Nydanske Sprogstudier (Dansk)",
    id: "nys-nydanske-sprogstudier",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/nys-nydanske-sprogstudier.csl"
  },
  {
    label: "Obafemi Awolowo University - Faculty of Technology",
    id: "obafemi-awolowo-university-faculty-of-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/obafemi-awolowo-university-faculty-of-technology.csl"
  },
  {
    label: "Obesity",
    id: "obesity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/obesity.csl"
  },
  {
    label: "Obstetrics & Gynecology Science",
    id: "obstetrics-and-gynecology-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/obstetrics-and-gynecology-science.csl"
  },
  {
    label: "Occupational Medicine",
    id: "occupational-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/occupational-medicine.csl"
  },
  {
    label: "Ocean and Coastal Research",
    id: "ocean-and-coastal-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ocean-and-coastal-research.csl"
  },
  {
    label: "Oceanography",
    id: "oceanography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oceanography.csl"
  },
  {
    label: "Oecologia Australis",
    id: "oecologia-australis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oecologia-australis.csl"
  },
  {
    label: "Offa - Berichte und Mitteilungen zur Arch\xE4ologie",
    id: "offa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/offa.csl"
  },
  {
    label: "Oikos",
    id: "oikos",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oikos.csl"
  },
  {
    label: "Oil Shale",
    id: "oil-shale",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oil-shale.csl"
  },
  {
    label: "OncoImmunology",
    id: "oncoimmunology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oncoimmunology.csl"
  },
  {
    label: "Oncotarget",
    id: "oncotarget",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oncotarget.csl"
  },
  {
    label: "Open Gender Journal",
    id: "open-gender-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/open-gender-journal.csl"
  },
  {
    label: "Open Window - Harvard",
    id: "open-window",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/open-window.csl"
  },
  {
    label: "Operative Dentistry",
    id: "operative-dentistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/operative-dentistry.csl"
  },
  {
    label: "Ophthalmic Genetics",
    id: "ophthalmic-genetics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ophthalmic-genetics.csl"
  },
  {
    label: "Ophthalmology Retina",
    id: "ophthalmology-retina",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ophthalmology-retina.csl"
  },
  {
    label: "Ophthalmology",
    id: "ophthalmology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ophthalmology.csl"
  },
  {
    label: "Optics Express",
    id: "optics-express",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/optics-express.csl"
  },
  {
    label: "Optics Letters",
    id: "optics-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/optics-letters.csl"
  },
  {
    label: "Opto-Electronic Advances",
    id: "opto-electronic-advances",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/opto-electronic-advances.csl"
  },
  {
    label: "Optometry & Vision Science",
    id: "optometry-and-vision-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/optometry-and-vision-science.csl"
  },
  {
    label: "Opuscula",
    id: "opuscula",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/opuscula.csl"
  },
  {
    label: "Oral Diseases",
    id: "oral-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oral-diseases.csl"
  },
  {
    label: "Organic Geochemistry",
    id: "organic-geochemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/organic-geochemistry.csl"
  },
  {
    label: "Organised Sound",
    id: "organised-sound",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/organised-sound.csl"
  },
  {
    label: "Organization Studies",
    id: "organization-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/organization-studies.csl"
  },
  {
    label: "Organization",
    id: "organization",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/organization.csl"
  },
  {
    label: "Organon",
    id: "organon",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/organon.csl"
  },
  {
    label: "Ornitolog\xEDa Neotropical",
    id: "ornitologia-neotropical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ornitologia-neotropical.csl"
  },
  {
    label: "Orthopedic Clinics of North America",
    id: "orthopedic-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/orthopedic-clinics-of-north-america.csl"
  },
  {
    label: "Oryx",
    id: "oryx",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oryx.csl"
  },
  {
    label: "OSCOLA (Oxford University Standard for Citation of Legal Authorities) (no Ibid.)",
    id: "oscola-no-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oscola-no-ibid.csl"
  },
  {
    label: "OSCOLA (Oxford University Standard for Citation of Legal Authorities)",
    id: "oscola",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oscola.csl"
  },
  {
    label: "\xD6sterreichische Zeitschrift f\xFCr Politikwissenschaft (Deutsch - \xD6sterreich)",
    id: "osterreichische-zeitschrift-fur-politikwissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/osterreichische-zeitschrift-fur-politikwissenschaft.csl"
  },
  {
    label: "Otto-von-Guericke-Universit\xE4t Magdeburg - Medizinische Fakult\xE4t (numeric)",
    id: "otto-von-guricke-universitat-magdeburg-medizinische-fakultat-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/otto-von-guricke-universitat-magdeburg-medizinische-fakultat-numeric.csl"
  },
  {
    label: "O.W. Barth Verlag (Deutsch)",
    id: "owbarth-verlag",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/owbarth-verlag.csl"
  },
  {
    label: "Oxford Art Journal",
    id: "oxford-art-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-art-journal.csl"
  },
  {
    label: "Oxford Centre for Mission Studies - Harvard",
    id: "oxford-centre-for-mission-studies-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-centre-for-mission-studies-harvard.csl"
  },
  {
    label: "Oxford Studies in Ancient Philosophy",
    id: "oxford-studies-in-ancient-philosophy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-studies-in-ancient-philosophy.csl"
  },
  {
    label: "Oxford Studies on the Roman Economy",
    id: "oxford-studies-on-the-roman-economy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-studies-on-the-roman-economy.csl"
  },
  {
    label: "The University of New South Wales - Oxford",
    id: "oxford-the-university-of-new-south-wales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-the-university-of-new-south-wales.csl"
  },
  {
    label: "Oxford University Press HUMSOC",
    id: "oxford-university-press-humsoc",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-university-press-humsoc.csl"
  },
  {
    label: "Oxford University Press (note)",
    id: "oxford-university-press-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-university-press-note.csl"
  },
  {
    label: "Oxford University Press SciMed (author-date)",
    id: "oxford-university-press-scimed-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-university-press-scimed-author-date.csl"
  },
  {
    label: "Oxford University Press SciMed (numeric)",
    id: "oxford-university-press-scimed-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxford-university-press-scimed-numeric.csl"
  },
  {
    label: "Oxidation of Metals",
    id: "oxidation-of-metals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/oxidation-of-metals.csl"
  },
  {
    label: "Pacific Conservation Biology",
    id: "pacific-conservation-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pacific-conservation-biology.csl"
  },
  {
    label: "Pacific Science",
    id: "pacific-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pacific-science.csl"
  },
  {
    label: "P\xE4dagogische Hochschule Bern - Institut Vorschulstufe und Primarstufe",
    id: "padagogische-hochschule-bern-institut-vorschulstufe-und-primarstufe",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/padagogische-hochschule-bern-institut-vorschulstufe-und-primarstufe.csl"
  },
  {
    label: "P\xE4dagogische Hochschule Fachhochschule Nordwestschweiz (Deutsch - Schweiz)",
    id: "padagogische-hochschule-fachhochschule-nordwestschweiz",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/padagogische-hochschule-fachhochschule-nordwestschweiz.csl"
  },
  {
    label: "P\xE4dagogische Hochschule Heidelberg (Deutsch)",
    id: "padagogische-hochschule-heidelberg",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/padagogische-hochschule-heidelberg.csl"
  },
  {
    label: "P\xE4dagogische Hochschule Vorarlberg (Deutsch)",
    id: "padagogische-hochschule-vorarlberg",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/padagogische-hochschule-vorarlberg.csl"
  },
  {
    label: "Paediatric and Perinatal Epidemiology",
    id: "paediatric-and-perinatal-epidemiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/paediatric-and-perinatal-epidemiology.csl"
  },
  {
    label: "Pain Medicine",
    id: "pain-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pain-medicine.csl"
  },
  {
    label: "PAIN",
    id: "pain",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pain.csl"
  },
  {
    label: "Pakistan Journal of Agricultural Sciences",
    id: "pakistan-journal-of-agricultural-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pakistan-journal-of-agricultural-sciences.csl"
  },
  {
    label: "Pakistan Veterinary Journal",
    id: "pakistani-veterinary-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pakistani-veterinary-journal.csl"
  },
  {
    label: "Palaeodiversity",
    id: "palaeodiversity",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/palaeodiversity.csl"
  },
  {
    label: "Palaeontographica Abteilung B: Palaeobotany - Palaeophytology",
    id: "palaeontographica-abteilung-b-palaeobotany-palaeophytology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/palaeontographica-abteilung-b-palaeobotany-palaeophytology.csl"
  },
  {
    label: "Palaeontologia Electronica",
    id: "palaeontologia-electronica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/palaeontologia-electronica.csl"
  },
  {
    label: "Palaeontology",
    id: "palaeontology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/palaeontology.csl"
  },
  {
    label: "Palaeovertebrata",
    id: "palaeovertebrata",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/palaeovertebrata.csl"
  },
  {
    label: "Palaios",
    id: "palaios",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/palaios.csl"
  },
  {
    label: "Paleobiology",
    id: "paleobiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/paleobiology.csl"
  },
  {
    label: "Pallas (French)",
    id: "pallas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pallas.csl"
  },
  {
    label: "Parasite",
    id: "parasite",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/parasite.csl"
  },
  {
    label: "Parasitology",
    id: "parasitology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/parasitology.csl"
  },
  {
    label: "Past & Present",
    id: "past-and-present",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/past-and-present.csl"
  },
  {
    label: "Pediatric Allergy and Immunology",
    id: "pediatric-allergy-and-immunology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-allergy-and-immunology.csl"
  },
  {
    label: "Pediatric Anesthesia",
    id: "pediatric-anesthesia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-anesthesia.csl"
  },
  {
    label: "Pediatric Blood & Cancer",
    id: "pediatric-blood-and-cancer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-blood-and-cancer.csl"
  },
  {
    label: "Pediatric Infectious Disease Journal",
    id: "pediatric-infectious-disease-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-infectious-disease-journal.csl"
  },
  {
    label: "Pediatric Physical Therapy",
    id: "pediatric-physical-therapy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-physical-therapy.csl"
  },
  {
    label: "Pediatric Practice and Research",
    id: "pediatric-practice-and-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-practice-and-research.csl"
  },
  {
    label: "Pediatric Pulmonology",
    id: "pediatric-pulmonology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-pulmonology.csl"
  },
  {
    label: "Pediatric Research",
    id: "pediatric-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-research.csl"
  },
  {
    label: "Pediatric Urology Case Reports",
    id: "pediatric-urology-case-reports",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pediatric-urology-case-reports.csl"
  },
  {
    label: "Pedosphere",
    id: "pedosphere",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pedosphere.csl"
  },
  {
    label: "PeerJ",
    id: "peerj",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/peerj.csl"
  },
  {
    label: "Pensoft Journals",
    id: "pensoft-journals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pensoft-journals.csl"
  },
  {
    label: "Periodicum Biologorum",
    id: "periodicum-biologorum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/periodicum-biologorum.csl"
  },
  {
    label: "Periodontology 2000",
    id: "periodontology-2000",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/periodontology-2000.csl"
  },
  {
    label: "Permafrost and Periglacial Processes",
    id: "permafrost-and-periglacial-processes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/permafrost-and-periglacial-processes.csl"
  },
  {
    label: "Perspectives on Sexual and Reproductive Health",
    id: "perspectives-on-sexual-and-reproductive-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/perspectives-on-sexual-and-reproductive-health.csl"
  },
  {
    label: "Pesquisa Agropecu\xE1ria Brasileira (Portugu\xEAs - Brasil)",
    id: "pesquisa-agropecuaria-brasileira",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pesquisa-agropecuaria-brasileira.csl"
  },
  {
    label: "Pest Management Science",
    id: "pest-management-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pest-management-science.csl"
  },
  {
    label: "Petit Chicago (author-date, Fran\xE7ais - Canada)",
    id: "petit-chicago-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/petit-chicago-author-date.csl"
  },
  {
    label: "Pharmacoepidemiology and Drug Safety",
    id: "pharmacoepidemiology-and-drug-safety",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pharmacoepidemiology-and-drug-safety.csl"
  },
  {
    label: "Philippika (Deutsch)",
    id: "philippika",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/philippika.csl"
  },
  {
    label: "Philipps-Universit\xE4t Marburg - Erziehungswissenschaften (note, Deutsch)",
    id: "philipps-universitat-marburg-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/philipps-universitat-marburg-note.csl"
  },
  {
    label: "Philosophia Scienti\xE6",
    id: "philosophia-scientiae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/philosophia-scientiae.csl"
  },
  {
    label: "Philosophiques (Fran\xE7ais)",
    id: "philosophiques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/philosophiques.csl"
  },
  {
    label: "Philosophy & Public Affairs",
    id: "philosophy-and-public-affairs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/philosophy-and-public-affairs.csl"
  },
  {
    label: "Photochemistry and Photobiology",
    id: "photochemistry-and-photobiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/photochemistry-and-photobiology.csl"
  },
  {
    label: "Photosynthetica",
    id: "photosynthetica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/photosynthetica.csl"
  },
  {
    label: "Phycological Research",
    id: "phycological-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/phycological-research.csl"
  },
  {
    label: "Phyllomedusa",
    id: "phyllomedusa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/phyllomedusa.csl"
  },
  {
    label: "Physiologia Plantarum",
    id: "physiologia-plantarum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/physiologia-plantarum.csl"
  },
  {
    label: "Physiological and Biochemical Zoology",
    id: "physiological-and-biochemical-zoology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/physiological-and-biochemical-zoology.csl"
  },
  {
    label: "Physiotherapy Theory and Practice",
    id: "physiotherapy-theory-and-practice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/physiotherapy-theory-and-practice.csl"
  },
  {
    label: "Phytopathologia Mediterranea",
    id: "phytopathologia-mediterranea",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/phytopathologia-mediterranea.csl"
  },
  {
    label: "Phytotaxa",
    id: "phytotaxa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/phytotaxa.csl"
  },
  {
    label: "Pisa University Press",
    id: "pisa-university-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pisa-university-press.csl"
  },
  {
    label: "Planning Practice & Research",
    id: "planning-practice-and-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/planning-practice-and-research.csl"
  },
  {
    label: "Plant & Cell Physiology",
    id: "plant-and-cell-physiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-and-cell-physiology.csl"
  },
  {
    label: "Plant Biology",
    id: "plant-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-biology.csl"
  },
  {
    label: "Plant Biotechnology Journal",
    id: "plant-biotechnology-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-biotechnology-journal.csl"
  },
  {
    label: "Plant, Cell & Environment",
    id: "plant-cell-and-environment",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-cell-and-environment.csl"
  },
  {
    label: "Plant Genetic Resources - Characterization and Utilization",
    id: "plant-genetic-resources-characterization-and-utilization",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-genetic-resources-characterization-and-utilization.csl"
  },
  {
    label: "Plant Pathology",
    id: "plant-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-pathology.csl"
  },
  {
    label: "Plant Physiology",
    id: "plant-physiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-physiology.csl"
  },
  {
    label: "Plant Species Biology",
    id: "plant-species-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plant-species-biology.csl"
  },
  {
    label: "Public Library of Science",
    id: "plos",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/plos.csl"
  },
  {
    label: "Proceedings of the National Academy of Sciences of the United States of America",
    id: "pnas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pnas.csl"
  },
  {
    label: "Podzemn\xE1 voda (Sloven\u010Dina)",
    id: "podzemna-voda",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/podzemna-voda.csl"
  },
  {
    label: "Polar Research",
    id: "polar-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/polar-research.csl"
  },
  {
    label: "Polish Archives of Internal Medicine",
    id: "polish-archives-of-internal-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/polish-archives-of-internal-medicine.csl"
  },
  {
    label: "Polish Legal (Polski)",
    id: "polish-legal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/polish-legal.csl"
  },
  {
    label: "Politeknik Negeri Manado - Jurnal Pusat Penelitian dan Pengabdian Kepada Masyarakat (Bahasa Indonesia)",
    id: "politeknik-negeri-manado-jurnal-p3m",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/politeknik-negeri-manado-jurnal-p3m.csl"
  },
  {
    label: "Political Studies",
    id: "political-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/political-studies.csl"
  },
  {
    label: "Politique Europ\xE9enne",
    id: "politique-europeenne",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/politique-europeenne.csl"
  },
  {
    label: "Politische Vierteljahresschrift (Deutsch)",
    id: "politische-vierteljahresschrift",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/politische-vierteljahresschrift.csl"
  },
  {
    label: "Politix (Fran\xE7ais)",
    id: "politix",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/politix.csl"
  },
  {
    label: "Polygraphia (Italiano)",
    id: "polygraphia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/polygraphia.csl"
  },
  {
    label: "Polymer Reviews",
    id: "polymer-reviews",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/polymer-reviews.csl"
  },
  {
    label: "Pontifical Athenaeum Regina Apostolorum",
    id: "pontifical-athenaeum-regina-apostolorum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pontifical-athenaeum-regina-apostolorum.csl"
  },
  {
    label: "Pontifical Biblical Institute",
    id: "pontifical-biblical-institute",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pontifical-biblical-institute.csl"
  },
  {
    label: "Pontifical Gregorian University (Italiano)",
    id: "pontifical-gregorian-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pontifical-gregorian-university.csl"
  },
  {
    label: "Population, Space and Place",
    id: "population-space-and-place",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/population-space-and-place.csl"
  },
  {
    label: "Population (Fran\xE7ais)",
    id: "population",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/population.csl"
  },
  {
    label: "Post\u0119py Higieny i Medycyny Do\u015Bwiadczalnej (Polski)",
    id: "postepy-higieny-i-medycyny-doswiadczalnej",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/postepy-higieny-i-medycyny-doswiadczalnej.csl"
  },
  {
    label: "Poultry Science",
    id: "poultry-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/poultry-science.csl"
  },
  {
    label: "Pour R\xE9ussir de Dionne 6\xE8me \xE9dition (note, Fran\xE7ais - Canada)",
    id: "pour-reussir-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pour-reussir-note.csl"
  },
  {
    label: "Pr\xE1vn\xEDk (\u010Ce\u0161tina)",
    id: "pravnik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pravnik.csl"
  },
  {
    label: "Praxis (Deutsch - Schweiz)",
    id: "praxis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/praxis.csl"
  },
  {
    label: "Pr\xE9histoires m\xE9diterran\xE9ennes",
    id: "prehistoires-mediterraneennes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/prehistoires-mediterraneennes.csl"
  },
  {
    label: "Prehospital Emergency Care",
    id: "prehospital-emergency-care",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/prehospital-emergency-care.csl"
  },
  {
    label: "Preslia - The Journal of the Czech Botanical Society",
    id: "preslia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/preslia.csl"
  },
  {
    label: "Presses universitaires de Paris Nanterre (note, Fran\xE7ais)",
    id: "presses-universitaires-de-paris-nanterre",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/presses-universitaires-de-paris-nanterre.csl"
  },
  {
    label: "Presses Universitaires de Rennes - Arch\xE9ologie et Culture (Fran\xE7ais)",
    id: "presses-universitaires-de-rennes-archeologie-et-culture",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/presses-universitaires-de-rennes-archeologie-et-culture.csl"
  },
  {
    label: "Presses Universitaires de Rennes (Fran\xE7ais)",
    id: "presses-universitaires-de-rennes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/presses-universitaires-de-rennes.csl"
  },
  {
    label: "Presses universitaires de Strasbourg (note, Fran\xE7ais)",
    id: "presses-universitaires-de-strasbourg-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/presses-universitaires-de-strasbourg-note.csl"
  },
  {
    label: "Primary Care: Clinics in Office Practice",
    id: "primary-care-clinics-in-office-practice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/primary-care-clinics-in-office-practice.csl"
  },
  {
    label: "Proceedings of the Estonian Academy of Sciences (author-date)",
    id: "proceedings-of-the-estonian-academy-of-sciences-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/proceedings-of-the-estonian-academy-of-sciences-author-date.csl"
  },
  {
    label: "Proceedings of the Estonian Academy of Sciences (numeric)",
    id: "proceedings-of-the-estonian-academy-of-sciences-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/proceedings-of-the-estonian-academy-of-sciences-numeric.csl"
  },
  {
    label: "Proceedings of the Joint International Grassland & International Rangeland Congress 2021",
    id: "proceedings-of-the-joint-international-grassland-and-international-rangeland-congress-2021",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/proceedings-of-the-joint-international-grassland-and-international-rangeland-congress-2021.csl"
  },
  {
    label: "Proceedings of the Royal Society B",
    id: "proceedings-of-the-royal-society-b",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/proceedings-of-the-royal-society-b.csl"
  },
  {
    label: "Processing and Application of Ceramics",
    id: "processing-and-application-of-ceramics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/processing-and-application-of-ceramics.csl"
  },
  {
    label: "Production and Operations Management",
    id: "production-and-operations-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/production-and-operations-management.csl"
  },
  {
    label: "ProInflow (note, \u010Ce\u0161tina)",
    id: "proinflow",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/proinflow.csl"
  },
  {
    label: "Protein Engineering Design and Selection",
    id: "protein-engineering-design-and-selection",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/protein-engineering-design-and-selection.csl"
  },
  {
    label: "Protein Science",
    id: "protein-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/protein-science.csl"
  },
  {
    label: "PROTEOMICS",
    id: "proteomics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/proteomics.csl"
  },
  {
    label: "Psychiatric Clinics of North America",
    id: "psychiatric-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/psychiatric-clinics-of-north-america.csl"
  },
  {
    label: "Psychiatric Services",
    id: "psychiatric-services",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/psychiatric-services.csl"
  },
  {
    label: "Psychiatry and Clinical Neurosciences",
    id: "psychiatry-and-clinical-neurosciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/psychiatry-and-clinical-neurosciences.csl"
  },
  {
    label: "Psychological Medicine",
    id: "psychological-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/psychological-medicine.csl"
  },
  {
    label: "Psychosomatic Medicine",
    id: "psychosomatic-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/psychosomatic-medicine.csl"
  },
  {
    label: "Psychosomatics",
    id: "psychosomatics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/psychosomatics.csl"
  },
  {
    label: "Public Health Nutrition",
    id: "public-health-nutrition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/public-health-nutrition.csl"
  },
  {
    label: "Publicatiewijzer voor de Archeologie (Nederlands)",
    id: "publicatiewijzer-voor-de-archeologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/publicatiewijzer-voor-de-archeologie.csl"
  },
  {
    label: "Pure and Applied Geophysics",
    id: "pure-and-applied-geophysics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/pure-and-applied-geophysics.csl"
  },
  {
    label: "Qeios",
    id: "qeios",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/qeios.csl"
  },
  {
    label: "Quaderni degli Avogadro Colloquia",
    id: "quaderni-degli-avogadro-colloquia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/quaderni-degli-avogadro-colloquia.csl"
  },
  {
    label: "Quaderni Materialisti (Italiano)",
    id: "quaderni-materialisti",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/quaderni-materialisti.csl"
  },
  {
    label: "Quaderni (Italiano)",
    id: "quaderni",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/quaderni.csl"
  },
  {
    label: "Quaternaire (Fran\xE7ais)",
    id: "quaternaire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/quaternaire.csl"
  },
  {
    label: "Quaternary International",
    id: "quaternary-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/quaternary-international.csl"
  },
  {
    label: "Queen Margaret University - Harvard",
    id: "queen-margaret-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/queen-margaret-university-harvard.csl"
  },
  {
    label: "R&D Management",
    id: "r-and-d-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/r-and-d-management.csl"
  },
  {
    label: "Radiation Protection Dosimetry",
    id: "radiation-protection-dosimetry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/radiation-protection-dosimetry.csl"
  },
  {
    label: "Radiochimica Acta",
    id: "radiochimica-acta",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/radiochimica-acta.csl"
  },
  {
    label: "RadioGraphics",
    id: "radiographics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/radiographics.csl"
  },
  {
    label: "Radiography",
    id: "radiography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/radiography.csl"
  },
  {
    label: "Radiologic Clinics of North America",
    id: "radiologic-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/radiologic-clinics-of-north-america.csl"
  },
  {
    label: "Radiology",
    id: "radiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/radiology.csl"
  },
  {
    label: "Radiopaedia.org",
    id: "radiopaedia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/radiopaedia.csl"
  },
  {
    label: "Raffles Bulletin of Zoology",
    id: "raffles-bulletin-of-zoology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/raffles-bulletin-of-zoology.csl"
  },
  {
    label: "Raptor Journal",
    id: "raptor-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/raptor-journal.csl"
  },
  {
    label: "Rassegna degli Archivi di Stato (bibliografia generale o ragionata commentata, sorted chronological, italiano)",
    id: "rassegna-degli-archivi-di-stato-bibliografia-generale",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rassegna-degli-archivi-di-stato-bibliografia-generale.csl"
  },
  {
    label: "Rassegna degli Archivi di Stato (citazioni estese, italiano)",
    id: "rassegna-degli-archivi-di-stato",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rassegna-degli-archivi-di-stato.csl"
  },
  {
    label: "Recent Patents on Drug Delivery & Formulation",
    id: "recent-patents-on-drug-delivery-and-formulation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/recent-patents-on-drug-delivery-and-formulation.csl"
  },
  {
    label: "Recherches en Sciences de Gestion (Fran\xE7ais)",
    id: "recherches-en-sciences-de-gestion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/recherches-en-sciences-de-gestion.csl"
  },
  {
    label: "Refugee Survey Quarterly",
    id: "refugee-survey-quarterly",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/refugee-survey-quarterly.csl"
  },
  {
    label: "Register Studies",
    id: "register-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/register-studies.csl"
  },
  {
    label: "Religion in the Roman Empire",
    id: "religion-in-the-roman-empire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/religion-in-the-roman-empire.csl"
  },
  {
    label: "Renewable Agriculture and Food Systems",
    id: "renewable-agriculture-and-food-systems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/renewable-agriculture-and-food-systems.csl"
  },
  {
    label: "Reports of Practical Oncology and Radiotherapy",
    id: "reports-of-practical-oncology-and-radiotherapy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/reports-of-practical-oncology-and-radiotherapy.csl"
  },
  {
    label: "Representation",
    id: "representation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/representation.csl"
  },
  {
    label: "Reproduction, Fertility and Development",
    id: "reproduction-fertility-and-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/reproduction-fertility-and-development.csl"
  },
  {
    label: "Reproduction",
    id: "reproduction",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/reproduction.csl"
  },
  {
    label: "Research and Education Promotion Association",
    id: "research-and-education-promotion-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/research-and-education-promotion-association.csl"
  },
  {
    label: "Research in Plant Disease",
    id: "research-in-plant-disease",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/research-in-plant-disease.csl"
  },
  {
    label: "Research Institute for Nature and Forest (Instituut voor Natuur- en Bosonderzoek)",
    id: "research-institute-for-nature-and-forest",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/research-institute-for-nature-and-forest.csl"
  },
  {
    label: "Research on Biomedical Engineering",
    id: "research-on-biomedical-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/research-on-biomedical-engineering.csl"
  },
  {
    label: "Respiratory Care Journal",
    id: "respiratory-care-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/respiratory-care-journal.csl"
  },
  {
    label: "Restoration Ecology",
    id: "restoration-ecology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/restoration-ecology.csl"
  },
  {
    label: "Retina",
    id: "retina",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/retina.csl"
  },
  {
    label: "REVER - Revista de Estudos da Religi\xE3o",
    id: "rever-revista-de-estudos-da-religiao",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rever-revista-de-estudos-da-religiao.csl"
  },
  {
    label: "Review of International Studies",
    id: "review-of-international-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/review-of-international-studies.csl"
  },
  {
    label: "Review of Political Economy",
    id: "review-of-political-economy",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/review-of-political-economy.csl"
  },
  {
    label: "Reviews of Modern Physics (with titles)",
    id: "reviews-of-modern-physics-with-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/reviews-of-modern-physics-with-titles.csl"
  },
  {
    label: "Revista Argentina de Antropologia Biologica (Espa\xF1ol)",
    id: "revista-argentina-de-antropologia-biologica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-argentina-de-antropologia-biologica.csl"
  },
  {
    label: "Revista B\xEDblica (Espa\xF1ol)",
    id: "revista-biblica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-biblica.csl"
  },
  {
    label: "Revista Brasileira de Ci\xEAncia do Solo",
    id: "revista-brasileira-de-ciencia-do-solo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-brasileira-de-ciencia-do-solo.csl"
  },
  {
    label: "Revista Chilena de Derecho y Tecnolog\xEDa (Espa\xF1ol - Chile)",
    id: "revista-chilena-de-derecho-y-tecnologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-chilena-de-derecho-y-tecnologia.csl"
  },
  {
    label: "Revista Ciencias T\xE9cnicas Agropecuarias (Espa\xF1ol)",
    id: "revista-ciencias-tecnicas-agropecuarias",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-ciencias-tecnicas-agropecuarias.csl"
  },
  {
    label: "Revista Cubana de Meteorologia",
    id: "revista-cubana-de-meteorologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-cubana-de-meteorologia.csl"
  },
  {
    label: "Revista da Sociedade Brasileira de Medicina Tropical",
    id: "revista-da-sociedade-brasileira-de-medicina-tropical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-da-sociedade-brasileira-de-medicina-tropical.csl"
  },
  {
    label: "Revista de Biolog\xEDa Marina y Oceanograf\xEDa",
    id: "revista-de-biologia-marina-y-oceanografia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-de-biologia-marina-y-oceanografia.csl"
  },
  {
    label: "Revista de Biolog\xEDa Tropical (International Journal of Tropical Biology and Conservation)",
    id: "revista-de-biologia-tropical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-de-biologia-tropical.csl"
  },
  {
    label: "Revista de Filolog\xEDa Espa\xF1ola (Espa\xF1ol)",
    id: "revista-de-filologia-espanola",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-de-filologia-espanola.csl"
  },
  {
    label: "Revista do Instituto de Medicina Tropical de S\xE3o Paulo",
    id: "revista-do-instituto-de-medicina-tropical-de-sao-paulo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-do-instituto-de-medicina-tropical-de-sao-paulo.csl"
  },
  {
    label: "Revista Espanola de Nutricion Humana y Dietetica (Espa\xF1ol)",
    id: "revista-espanola-de-nutricion-humana-y-dietetica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-espanola-de-nutricion-humana-y-dietetica.csl"
  },
  {
    label: "Revista FAVE - Secci\xF3n Ciencias Agrarias (Espa\xF1ol)",
    id: "revista-fave-seccion-ciencias-agrarias",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-fave-seccion-ciencias-agrarias.csl"
  },
  {
    label: "Revista Ladinia",
    id: "revista-ladinia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-ladinia.csl"
  },
  {
    label: "Revista Latinoamericana de Metalurgia y Materiales",
    id: "revista-latinoamericana-de-metalurgia-y-materiales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-latinoamericana-de-metalurgia-y-materiales.csl"
  },
  {
    label: "Revista Latinoamericana de Recursos Naturales",
    id: "revista-latinoamericana-de-recursos-naturales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-latinoamericana-de-recursos-naturales.csl"
  },
  {
    label: "Revista Mat\xE9ria",
    id: "revista-materia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-materia.csl"
  },
  {
    label: "Revista N\xF3esis",
    id: "revista-noesis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-noesis.csl"
  },
  {
    label: "Revista Peruana de Medicina Experimental y Salud P\xFAblica (Espa\xF1ol)",
    id: "revista-peruana-de-medicina-experimental-y-salud-publica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-peruana-de-medicina-experimental-y-salud-publica.csl"
  },
  {
    label: "Revista Portuguesa de Arqueologia",
    id: "revista-portuguesa-de-arqueologia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-portuguesa-de-arqueologia.csl"
  },
  {
    label: "Revista Virtual de Qu\xEDmica (Portugu\xEAs - Brasil)",
    id: "revista-virtual-de-quimica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revista-virtual-de-quimica.csl"
  },
  {
    label: "Revue arch\xE9ologique de l\u2019Est (Fran\xE7ais)",
    id: "revue-archeologique-de-lest",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-archeologique-de-lest.csl"
  },
  {
    label: "Revue arch\xE9ologique de Narbonnaise (French)",
    id: "revue-archeologique-de-narbonnaise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-archeologique-de-narbonnaise.csl"
  },
  {
    label: "Revue arch\xE9ologique du Centre de la France (Fran\xE7ais)",
    id: "revue-archeologique-du-centre-de-la-france",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-archeologique-du-centre-de-la-france.csl"
  },
  {
    label: "Revue Arch\xE9ologique (Fran\xE7ais)",
    id: "revue-archeologique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-archeologique.csl"
  },
  {
    label: "Revue d'\xE9levage et de m\xE9decine v\xE9t\xE9rinaire des pays tropicaux (Fran\xE7ais)",
    id: "revue-d-elevage-et-de-medecine-veterinaire-des-pays-tropicaux",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-d-elevage-et-de-medecine-veterinaire-des-pays-tropicaux.csl"
  },
  {
    label: "Revue de M\xE9decine V\xE9t\xE9rinaire (Fran\xE7ais)",
    id: "revue-de-medecine-veterinaire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-de-medecine-veterinaire.csl"
  },
  {
    label: "Revue de Qumr\xE2n",
    id: "revue-de-qumran",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-de-qumran.csl"
  },
  {
    label: "Revue des \xC9tudes Byzantines",
    id: "revue-des-etudes-byzantines",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-des-etudes-byzantines.csl"
  },
  {
    label: "Revue des Nouvelles Technologies de l'Information (Fran\xE7ais)",
    id: "revue-des-nouvelles-technologies-de-l-information",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-des-nouvelles-technologies-de-l-information.csl"
  },
  {
    label: "Revue d'histoire des sciences humaines (Fran\xE7ais)",
    id: "revue-dhistoire-des-sciences-humaines",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-dhistoire-des-sciences-humaines.csl"
  },
  {
    label: "Revue d'histoire moderne et contemporaine (Fran\xE7ais)",
    id: "revue-dhistoire-moderne-et-contemporaine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-dhistoire-moderne-et-contemporaine.csl"
  },
  {
    label: "Revue Europe\u0301enne des Migrations Internationales",
    id: "revue-europeenne-des-migrations-internationales",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-europeenne-des-migrations-internationales.csl"
  },
  {
    label: "Revue foresti\xE8re fran\xE7aise (Fran\xE7ais)",
    id: "revue-forestiere-francaise",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-forestiere-francaise.csl"
  },
  {
    label: "Revue fran\xE7aise d'administration publique (Fran\xE7ais)",
    id: "revue-francaise-d-administration-publique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-francaise-d-administration-publique.csl"
  },
  {
    label: "Revue fran\xE7aise de gestion (Fran\xE7ais)",
    id: "revue-francaise-de-gestion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-francaise-de-gestion.csl"
  },
  {
    label: "Revue fran\xE7aise de sociologie (Fran\xE7ais)",
    id: "revue-francaise-de-sociologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-francaise-de-sociologie.csl"
  },
  {
    label: "Revue Internationale d'Urbanisme (Fran\xE7ais)",
    id: "revue-internationale-durbanisme",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/revue-internationale-durbanisme.csl"
  },
  {
    label: "Rhinology",
    id: "rhinology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rhinology.csl"
  },
  {
    label: "Rhodora",
    id: "rhodora",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rhodora.csl"
  },
  {
    label: "Risk Analysis",
    id: "risk-analysis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/risk-analysis.csl"
  },
  {
    label: "Riti\xF0: t\xEDmarit Hugv\xEDsindastofnunar (\xCDslenska)",
    id: "ritid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ritid.csl"
  },
  {
    label: "Rivista Italiana di Paleontologia e Stratigrafia",
    id: "rivista-italiana-di-paleontologia-e-stratigrafia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rivista-italiana-di-paleontologia-e-stratigrafia.csl"
  },
  {
    label: "RMIT University - Harvard",
    id: "rmit-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rmit-university-harvard.csl"
  },
  {
    label: "R\xF6Fo: Fortschritte auf dem Gebiet der R\xF6ntgenstrahlen und bildgebenden Verfahren",
    id: "rofo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rofo.csl"
  },
  {
    label: "Romanian Humanities (Rom\xE2n\u0103)",
    id: "romanian-humanities",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/romanian-humanities.csl"
  },
  {
    label: "ROSE School",
    id: "rose-school",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rose-school.csl"
  },
  {
    label: "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0438\u0439 \u0444\u0438\u0437\u0438\u043E\u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0439 \u0436\u0443\u0440\u043D\u0430\u043B \u0438\u043C. \u0418.\u041C. \u0421\u0435\u0447\u0435\u043D\u043E\u0432\u0430 (\u0420\u0443\u0301\u0441\u0441\u043A\u0438\u0439)",
    id: "rossiiskii-fiziologicheskii-zhurnal-imeni-i-m-sechenova",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rossiiskii-fiziologicheskii-zhurnal-imeni-i-m-sechenova.csl"
  },
  {
    label: "Royal College of Nursing - Harvard",
    id: "royal-college-of-nursing-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/royal-college-of-nursing-harvard.csl"
  },
  {
    label: "Royal Society of Chemistry (with titles)",
    id: "royal-society-of-chemistry-with-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/royal-society-of-chemistry-with-titles.csl"
  },
  {
    label: "Royal Society of Chemistry",
    id: "royal-society-of-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/royal-society-of-chemistry.csl"
  },
  {
    label: "RTF Scan",
    id: "rtf-scan",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/rtf-scan.csl"
  },
  {
    label: "Ruhr-Universit\xE4t Bochum - Lehrstuhl f\xFCr Industrial Sales and Service Engineering",
    id: "ruhr-universitat-bochum-lehrstuhl-fur-industrial-sales-and-service-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ruhr-universitat-bochum-lehrstuhl-fur-industrial-sales-and-service-engineering.csl"
  },
  {
    label: "Ruhr-Universit\xE4t Bochum - Medizinische Fakult\xE4t (numerisch, Deutsch)",
    id: "ruhr-universitat-bochum-medizinische-fakultat-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ruhr-universitat-bochum-medizinische-fakultat-numeric.csl"
  },
  {
    label: "SAGE - Harvard",
    id: "sage-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sage-harvard.csl"
  },
  {
    label: "SAGE - Vancouver (brackets)",
    id: "sage-vancouver-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sage-vancouver-brackets.csl"
  },
  {
    label: "SAGE - Vancouver",
    id: "sage-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sage-vancouver.csl"
  },
  {
    label: "Sa\u011Fl\u0131k Bilimleri \xDCniversitesi",
    id: "saglik-bilimleri-universitesi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/saglik-bilimleri-universitesi.csl"
  },
  {
    label: "Saint Paul University - Faculty of Canon Law",
    id: "saint-paul-university-faculty-of-canon-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/saint-paul-university-faculty-of-canon-law.csl"
  },
  {
    label: "San Francisco Estuary & Watershed Science",
    id: "san-francisco-estuary-and-watershed-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/san-francisco-estuary-and-watershed-science.csl"
  },
  {
    label: "Sanamed",
    id: "sanamed",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sanamed.csl"
  },
  {
    label: "Scandinavian Journal of Infectious Diseases",
    id: "scandinavian-journal-of-infectious-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scandinavian-journal-of-infectious-diseases.csl"
  },
  {
    label: "Scandinavian Journal of Information Systems",
    id: "scandinavian-journal-of-information-systems",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scandinavian-journal-of-information-systems.csl"
  },
  {
    label: "Scandinavian Journal of Medicine & Science in Sports",
    id: "scandinavian-journal-of-medicine-and-science-in-sports",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scandinavian-journal-of-medicine-and-science-in-sports.csl"
  },
  {
    label: "Scandinavian Journal of Rheumatology",
    id: "scandinavian-journal-of-rheumatology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scandinavian-journal-of-rheumatology.csl"
  },
  {
    label: "Scandinavian Journal of Work, Environment & Health",
    id: "scandinavian-journal-of-work-environment-and-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scandinavian-journal-of-work-environment-and-health.csl"
  },
  {
    label: "Scandinavian Political Studies",
    id: "scandinavian-political-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scandinavian-political-studies.csl"
  },
  {
    label: "Science and Technology for the Built Environment",
    id: "science-and-technology-for-the-built-environment",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science-and-technology-for-the-built-environment.csl"
  },
  {
    label: "Science China Chemistry",
    id: "science-china-chemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science-china-chemistry.csl"
  },
  {
    label: "SCIENCE CHINA Earth Sciences",
    id: "science-china-earth-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science-china-earth-sciences.csl"
  },
  {
    label: "SCIENCE CHINA Life Sciences",
    id: "science-china-life-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science-china-life-sciences.csl"
  },
  {
    label: "SCIENCE CHINA Materials",
    id: "science-china-materials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science-china-materials.csl"
  },
  {
    label: "Science Translational Medicine",
    id: "science-translational-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science-translational-medicine.csl"
  },
  {
    label: "Science (without titles)",
    id: "science-without-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science-without-titles.csl"
  },
  {
    label: "Science",
    id: "science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/science.csl"
  },
  {
    label: "ScienceAsia",
    id: "scienceasia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scienceasia.csl"
  },
  {
    label: "Sciences Po - Ecole de la recherche (author-date, Fran\xE7ais)",
    id: "sciences-po-ecole-doctorale-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sciences-po-ecole-doctorale-author-date.csl"
  },
  {
    label: "Sciences Po - \xC9cole de la recherche (note, Fran\xE7ais)",
    id: "sciences-po-ecole-doctorale-note-french",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sciences-po-ecole-doctorale-note-french.csl"
  },
  {
    label: "Scientia Agriculturae Bohemica",
    id: "scientia-agriculturae-bohemica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scientia-agriculturae-bohemica.csl"
  },
  {
    label: "Scientia Iranica",
    id: "scientia-iranica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scientia-iranica.csl"
  },
  {
    label: "Scientific Online Letters on the Atmosphere",
    id: "scientific-online-letters-on-the-atmosphere",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scientific-online-letters-on-the-atmosphere.csl"
  },
  {
    label: "Scientific Review Engineering and Environmental Sciences (Przegl\u0105d Naukowy In\u017Cynieria i Kszta\u0142towanie \u015Arodowiska)",
    id: "scientific-review-engineering-and-environmental-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scientific-review-engineering-and-environmental-sciences.csl"
  },
  {
    label: "Scrinium",
    id: "scrinium",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/scrinium.csl"
  },
  {
    label: "Sedimentology",
    id: "sedimentology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sedimentology.csl"
  },
  {
    label: "Seed Science and Technology",
    id: "seed-science-and-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/seed-science-and-technology.csl"
  },
  {
    label: "Seed Science Research",
    id: "seed-science-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/seed-science-research.csl"
  },
  {
    label: "Seismological Research Letters",
    id: "seismological-research-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/seismological-research-letters.csl"
  },
  {
    label: "Sekolah Tinggi Meteorologi Klimatologi dan Geofisika (Bahasa Indonesia)",
    id: "sekolah-tinggi-meteorologi-klimatologi-dan-geofisika",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sekolah-tinggi-meteorologi-klimatologi-dan-geofisika.csl"
  },
  {
    label: "S\xE9minaire Saint-Sulpice - Ecole Th\xE9ologie (Fran\xE7ais)",
    id: "seminaire-saint-sulpice-ecole-theologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/seminaire-saint-sulpice-ecole-theologie.csl"
  },
  {
    label: "Seminars in Pediatric Neurology",
    id: "seminars-in-pediatric-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/seminars-in-pediatric-neurology.csl"
  },
  {
    label: "Vancouver - Serbian Archives of Medicine",
    id: "serbian-archives-of-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/serbian-archives-of-medicine.csl"
  },
  {
    label: "Serdica Journal of Computing",
    id: "serdica-journal-of-computing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/serdica-journal-of-computing.csl"
  },
  {
    label: "Service M\xE9dical de l'Assurance Maladie (Fran\xE7ais)",
    id: "service-medical-de-l-assurance-maladie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/service-medical-de-l-assurance-maladie.csl"
  },
  {
    label: "Sexual Development",
    id: "sexual-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sexual-development.csl"
  },
  {
    label: "Sexual Health",
    id: "sexual-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sexual-health.csl"
  },
  {
    label: "Sheffield Hallam University - History",
    id: "sheffield-hallam-university-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sheffield-hallam-university-history.csl"
  },
  {
    label: "Shock",
    id: "shock",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/shock.csl"
  },
  {
    label: "Silva Fennica",
    id: "silva-fennica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/silva-fennica.csl"
  },
  {
    label: "Sinergie Italian Journal of Management",
    id: "sinergie-italian-journal-of-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sinergie-italian-journal-of-management.csl"
  },
  {
    label: "SIST02 (\u65E5\u672C\u8A9E)",
    id: "sist02",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sist02.csl"
  },
  {
    label: "Sken\xE8. Journal of Theatre and Drama Studies",
    id: "skene-journal-of-theatre-and-drama-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/skene-journal-of-theatre-and-drama-studies.csl"
  },
  {
    label: "Slovensko dru\u0161tvo za medicinsko informatiko",
    id: "slovensko-drustvo-za-medicinsko-informatiko",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/slovensko-drustvo-za-medicinsko-informatiko.csl"
  },
  {
    label: "Small",
    id: "small",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/small.csl"
  },
  {
    label: "Smithsonian Institution Scholarly Press (author-date)",
    id: "smithsonian-institution-scholarly-press-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/smithsonian-institution-scholarly-press-author-date.csl"
  },
  {
    label: "Smithsonian Institution Scholarly Press - Botany (author-date)",
    id: "smithsonian-institution-scholarly-press-botany",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/smithsonian-institution-scholarly-press-botany.csl"
  },
  {
    label: "Smithsonian Institution Scholarly Press (note)",
    id: "smithsonian-institution-scholarly-press-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/smithsonian-institution-scholarly-press-note.csl"
  },
  {
    label: "Smyrna T\u0131p Dergisi (T\xFCrk\xE7e)",
    id: "smyrna-tip-dergisi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/smyrna-tip-dergisi.csl"
  },
  {
    label: "SN Computer Science",
    id: "sn-computer-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sn-computer-science.csl"
  },
  {
    label: "Social Anthropology/Anthropologie Sociale",
    id: "social-anthropology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/social-anthropology.csl"
  },
  {
    label: "Social Cognitive and Affective Neuroscience",
    id: "social-cognitive-and-affective-neuroscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/social-cognitive-and-affective-neuroscience.csl"
  },
  {
    label: "Social Science History",
    id: "social-science-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/social-science-history.csl"
  },
  {
    label: "Sociedade Brasileira de Computa\xE7\xE3o",
    id: "sociedade-brasileira-de-computacao",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sociedade-brasileira-de-computacao.csl"
  },
  {
    label: "Soci\xE9t\xE9 Arch\xE9ologique de Bordeaux (Fran\xE7ais)",
    id: "societe-archeologique-de-bordeaux",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/societe-archeologique-de-bordeaux.csl"
  },
  {
    label: "Soci\xE9t\xE9 Fran\xE7aise d\u2019\xC9tude de la C\xE9ramique Antique en Gaule (Fran\xE7ais)",
    id: "societe-francaise-detude-de-la-ceramique-antique-en-gaule",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/societe-francaise-detude-de-la-ceramique-antique-en-gaule.csl"
  },
  {
    label: "Soci\xE9t\xE9 Nationale des Groupements Techniques V\xE9t\xE9rinaires (Fran\xE7ais)",
    id: "societe-nationale-des-groupements-techniques-veterinaires",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/societe-nationale-des-groupements-techniques-veterinaires.csl"
  },
  {
    label: "Soci\xE9t\xE9s Contemporaines",
    id: "societes-contemporaines",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/societes-contemporaines.csl"
  },
  {
    label: "Society for American Archaeology",
    id: "society-for-american-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/society-for-american-archaeology.csl"
  },
  {
    label: "Society for Historical Archaeology",
    id: "society-for-historical-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/society-for-historical-archaeology.csl"
  },
  {
    label: "Society for Laboratory Automation and Screening",
    id: "society-for-laboratory-automation-and-screening",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/society-for-laboratory-automation-and-screening.csl"
  },
  {
    label: "Society of Automotive Engineers Technical Papers (numeric)",
    id: "society-of-automotive-engineers-technical-papers-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/society-of-automotive-engineers-technical-papers-numeric.csl"
  },
  {
    label: "Society of Biblical Literature 1st edition (full note)",
    id: "society-of-biblical-literature-1st-edition-fullnote-bibliography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/society-of-biblical-literature-1st-edition-fullnote-bibliography.csl"
  },
  {
    label: "Society of Biblical Literature 2nd edition (author-date)",
    id: "society-of-biblical-literature-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/society-of-biblical-literature-author-date.csl"
  },
  {
    label: "Society of Biblical Literature 2nd edition (full note)",
    id: "society-of-biblical-literature-fullnote-bibliography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/society-of-biblical-literature-fullnote-bibliography.csl"
  },
  {
    label: "Socio-Economic Review",
    id: "socio-economic-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/socio-economic-review.csl"
  },
  {
    label: "Sociologia Ruralis",
    id: "sociologia-ruralis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sociologia-ruralis.csl"
  },
  {
    label: "Sociologia Urbana e Rurale (Italian)",
    id: "sociologia-urbana-e-rurale",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sociologia-urbana-e-rurale.csl"
  },
  {
    label: "Sociology of Health & Illness",
    id: "sociology-of-health-and-illness",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sociology-of-health-and-illness.csl"
  },
  {
    label: "S\xF6dert\xF6rns h\xF6gskola - Harvard (with Ibid.)",
    id: "sodertorns-hogskola-harvard-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sodertorns-hogskola-harvard-ibid.csl"
  },
  {
    label: "S\xF6dert\xF6rns h\xF6gskola - Harvard",
    id: "sodertorns-hogskola-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sodertorns-hogskola-harvard.csl"
  },
  {
    label: "S\xF6dert\xF6rns h\xF6gskola - Oxford",
    id: "sodertorns-hogskola-oxford",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sodertorns-hogskola-oxford.csl"
  },
  {
    label: "Soil Biology and Biochemistry",
    id: "soil-biology-and-biochemistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/soil-biology-and-biochemistry.csl"
  },
  {
    label: "Soil Science and Plant Nutrition",
    id: "soil-science-and-plant-nutrition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/soil-science-and-plant-nutrition.csl"
  },
  {
    label: "Solent University - Harvard",
    id: "solent-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/solent-university-harvard.csl"
  },
  {
    label: "Solutions",
    id: "solutions",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/solutions.csl"
  },
  {
    label: "Sorbonne Student Law Review - Revue juridique des \xE9tudiants de la Sorbonne",
    id: "sorbonne-student-law-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sorbonne-student-law-review.csl"
  },
  {
    label: "South African Actuarial Journal",
    id: "south-african-actuarial-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/south-african-actuarial-journal.csl"
  },
  {
    label: "South African Journal of Animal Science",
    id: "south-african-journal-of-animal-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/south-african-journal-of-animal-science.csl"
  },
  {
    label: "South African Journal of Enology and Viticulture",
    id: "south-african-journal-of-enology-and-viticulture",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/south-african-journal-of-enology-and-viticulture.csl"
  },
  {
    label: "South African Journal of Geology",
    id: "south-african-journal-of-geology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/south-african-journal-of-geology.csl"
  },
  {
    label: "South African Law Journal",
    id: "south-african-law-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/south-african-law-journal.csl"
  },
  {
    label: "South African Medical Journal",
    id: "south-african-medical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/south-african-medical-journal.csl"
  },
  {
    label: "South African Theological Seminary",
    id: "south-african-theological-seminary",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/south-african-theological-seminary.csl"
  },
  {
    label: "Southeastern Geographer",
    id: "southeastern-geographer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/southeastern-geographer.csl"
  },
  {
    label: "Southern African Journal of Critical Care",
    id: "southern-african-journal-of-critical-care",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/southern-african-journal-of-critical-care.csl"
  },
  {
    label: "Soziale Welt (Deutsch)",
    id: "soziale-welt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/soziale-welt.csl"
  },
  {
    label: "Sozialp\xE4dagogisches Institut Berlin - Walter May (Deutsch)",
    id: "sozialpadagogisches-institut-berlin-walter-may",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sozialpadagogisches-institut-berlin-walter-may.csl"
  },
  {
    label: "Sozialwissenschaften (Heilmann) (Deutsch)",
    id: "sozialwissenschaften-heilmann",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sozialwissenschaften-heilmann.csl"
  },
  {
    label: "Soziologie (Deutsch)",
    id: "soziologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/soziologie.csl"
  },
  {
    label: "Soziologiemagazin (Deutsch)",
    id: "soziologiemagazin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/soziologiemagazin.csl"
  },
  {
    label: "Spandidos Publications",
    id: "spandidos-publications",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spandidos-publications.csl"
  },
  {
    label: "Spanish Legal (Espa\xF1ol)",
    id: "spanish-legal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spanish-legal.csl"
  },
  {
    label: "Spectroscopy Letters",
    id: "spectroscopy-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spectroscopy-letters.csl"
  },
  {
    label: "Speculum",
    id: "speculum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/speculum.csl"
  },
  {
    label: "SPIE BiOS",
    id: "spie-bios",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spie-bios.csl"
  },
  {
    label: "SPIE journals",
    id: "spie-journals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spie-journals.csl"
  },
  {
    label: "SPIE Conference Proceedings",
    id: "spie-proceedings",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spie-proceedings.csl"
  },
  {
    label: "Spine",
    id: "spine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spine.csl"
  },
  {
    label: "SPIP - Cite plugin",
    id: "spip-cite",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/spip-cite.csl"
  },
  {
    label: "Sports Health",
    id: "sports-health",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sports-health.csl"
  },
  {
    label: 'Springer - Basic (author-date, no "et al.", with issue numbers)',
    id: "springer-basic-author-date-no-et-al-with-issue",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-basic-author-date-no-et-al-with-issue.csl"
  },
  {
    label: 'Springer - Basic (author-date, no "et al.")',
    id: "springer-basic-author-date-no-et-al",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-basic-author-date-no-et-al.csl"
  },
  {
    label: "Springer - Basic (author-date)",
    id: "springer-basic-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-basic-author-date.csl"
  },
  {
    label: 'Springer - Basic (numeric, brackets, no "et al.", alphabetical)',
    id: "springer-basic-brackets-no-et-al-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-basic-brackets-no-et-al-alphabetical.csl"
  },
  {
    label: 'Springer - Basic (numeric, brackets, no "et al.")',
    id: "springer-basic-brackets-no-et-al",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-basic-brackets-no-et-al.csl"
  },
  {
    label: "Springer - Basic (numeric, brackets)",
    id: "springer-basic-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-basic-brackets.csl"
  },
  {
    label: "Springer - Basic (note)",
    id: "springer-basic-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-basic-note.csl"
  },
  {
    label: "Springer - Fachzeitschriften Medizin Psychologie (Deutsch)",
    id: "springer-fachzeitschriften-medizin-psychologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-fachzeitschriften-medizin-psychologie.csl"
  },
  {
    label: "Springer - Humanities (author-date)",
    id: "springer-humanities-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-humanities-author-date.csl"
  },
  {
    label: "Springer - Humanities (numeric, brackets)",
    id: "springer-humanities-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-humanities-brackets.csl"
  },
  {
    label: "Springer - IMIS Series Migrationsgesellschaften",
    id: "springer-imis-series-migrationsgesellschaften",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-imis-series-migrationsgesellschaften.csl"
  },
  {
    label: "Springer - Lecture Notes in Computer Science (sorted alphabetically)",
    id: "springer-lecture-notes-in-computer-science-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-lecture-notes-in-computer-science-alphabetical.csl"
  },
  {
    label: "Springer - Lecture Notes in Computer Science",
    id: "springer-lecture-notes-in-computer-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-lecture-notes-in-computer-science.csl"
  },
  {
    label: "Springer - MathPhys (author-date)",
    id: "springer-mathphys-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-mathphys-author-date.csl"
  },
  {
    label: "Springer - MathPhys (numeric, brackets)",
    id: "springer-mathphys-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-mathphys-brackets.csl"
  },
  {
    label: "Springer - Physics (author-date)",
    id: "springer-physics-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-physics-author-date.csl"
  },
  {
    label: "Springer - Physics (numeric, brackets)",
    id: "springer-physics-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-physics-brackets.csl"
  },
  {
    label: "Springer - SocPsych (author-date)",
    id: "springer-socpsych-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-socpsych-author-date.csl"
  },
  {
    label: "Springer - SocPsych (numeric, brackets)",
    id: "springer-socpsych-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-socpsych-brackets.csl"
  },
  {
    label: "Springer - Vancouver (author-date)",
    id: "springer-vancouver-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-vancouver-author-date.csl"
  },
  {
    label: "Springer - Vancouver (brackets)",
    id: "springer-vancouver-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-vancouver-brackets.csl"
  },
  {
    label: "Springer - Vancouver",
    id: "springer-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-vancouver.csl"
  },
  {
    label: "Springer VS (author-date, Deutsch)",
    id: "springer-vs-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springer-vs-author-date.csl"
  },
  {
    label: "SpringerProtocols",
    id: "springerprotocols",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/springerprotocols.csl"
  },
  {
    label: "St Patrick's College",
    id: "st-patricks-college",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/st-patricks-college.csl"
  },
  {
    label: "Stanovni\u0161tvo",
    id: "stanovnistvo",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/stanovnistvo.csl"
  },
  {
    label: "Statistika: Statistics and Economy Journal",
    id: "statistika-statistics-and-economy-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/statistika-statistics-and-economy-journal.csl"
  },
  {
    label: "Stavebn\xED obzor (\u010Ce\u0161tina)",
    id: "stavebni-obzor",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/stavebni-obzor.csl"
  },
  {
    label: "Steel Research International",
    id: "steel-research-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/steel-research-international.csl"
  },
  {
    label: "Steinbeis-Hochschule - School of Management & Innovation (Deutsch)",
    id: "steinbeis-hochschule-school-of-management-and-innovation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/steinbeis-hochschule-school-of-management-and-innovation.csl"
  },
  {
    label: "Stellenbosch Law Review",
    id: "stellenbosch-law-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/stellenbosch-law-review.csl"
  },
  {
    label: "Stem Cell Reports",
    id: "stem-cell-reports",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/stem-cell-reports.csl"
  },
  {
    label: "Stem Cells",
    id: "stem-cells",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/stem-cells.csl"
  },
  {
    label: "Strategic Design Research Journal",
    id: "strategic-design-research-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/strategic-design-research-journal.csl"
  },
  {
    label: "Strategic Entrepreneurship Journal",
    id: "strategic-entrepreneurship-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/strategic-entrepreneurship-journal.csl"
  },
  {
    label: "Strategic Management Journal",
    id: "strategic-management-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/strategic-management-journal.csl"
  },
  {
    label: "Stroke",
    id: "stroke",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/stroke.csl"
  },
  {
    label: "Structural Control and Health Monitoring",
    id: "structural-control-and-health-monitoring",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/structural-control-and-health-monitoring.csl"
  },
  {
    label: "Studi e materiali di storia delle religioni (Italiano)",
    id: "studi-e-materiali-di-storia-delle-religioni",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/studi-e-materiali-di-storia-delle-religioni.csl"
  },
  {
    label: "Studi Slavistici Rivista dell\u2019Associazione Italiana degli Slavisti",
    id: "studi-slavistici-rivista-dellassociazione-italiana-degli-slavisti",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/studi-slavistici-rivista-dellassociazione-italiana-degli-slavisti.csl"
  },
  {
    label: "Studia BAS (Polski)",
    id: "studia-bas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/studia-bas.csl"
  },
  {
    label: "Studies in the History of Gardens & Designed Landscapes",
    id: "studies-in-the-history-of-gardens-and-designed-landscapes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/studies-in-the-history-of-gardens-and-designed-landscapes.csl"
  },
  {
    label: "Studii Teologice",
    id: "studii-teologice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/studii-teologice.csl"
  },
  {
    label: "Hochschule der Medien Stuttgart (Deutsch)",
    id: "stuttgart-media-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/stuttgart-media-university.csl"
  },
  {
    label: "Style Manual - Australian Government (note)",
    id: "style-manual-australian-government-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/style-manual-australian-government-note.csl"
  },
  {
    label: "Style Manual - Australian Government (author-date)",
    id: "style-manual-australian-government",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/style-manual-australian-government.csl"
  },
  {
    label: "Style manual for authors, editors and printers 6th edition (Snooks & Co.) (author-date)",
    id: "style-manual-for-authors-editors-and-printers-6th-edition-snooks-co",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/style-manual-for-authors-editors-and-printers-6th-edition-snooks-co.csl"
  },
  {
    label: "sub\\urban - Zeitschrift f\xFCr kritische Stadtforschung (Deutsch)",
    id: "suburban-zeitschrift-fur-kritische-stadtforschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/suburban-zeitschrift-fur-kritische-stadtforschung.csl"
  },
  {
    label: "Sunway College Johor Bahru - Harvard",
    id: "sunway-college-johor-bahru",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sunway-college-johor-bahru.csl"
  },
  {
    label: "Suomen antropologi: Journal of the Finnish Anthropological Society",
    id: "suomen-antropologi-journal-of-the-finnish-anthropological-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/suomen-antropologi-journal-of-the-finnish-anthropological-society.csl"
  },
  {
    label: "Surgical Clinics of North America",
    id: "surgical-clinics-of-north-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/surgical-clinics-of-north-america.csl"
  },
  {
    label: "Surgical Neurology International",
    id: "surgical-neurology-international",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/surgical-neurology-international.csl"
  },
  {
    label: "Surgical Pathology Clinics",
    id: "surgical-pathology-clinics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/surgical-pathology-clinics.csl"
  },
  {
    label: "Survey of Ophthalmology",
    id: "survey-of-ophthalmology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/survey-of-ophthalmology.csl"
  },
  {
    label: "Svensk exegetisk \xE5rsbok (full note)",
    id: "svensk-exegetisk-arsbok",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/svensk-exegetisk-arsbok.csl"
  },
  {
    label: "Swedish Legal (Svenska)",
    id: "swedish-legal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/swedish-legal.csl"
  },
  {
    label: "Swiss Political Science Review",
    id: "swiss-political-science-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/swiss-political-science-review.csl"
  },
  {
    label: "Sylwan (Polski)",
    id: "sylwan",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/sylwan.csl"
  },
  {
    label: "Synthesis",
    id: "synthesis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/synthesis.csl"
  },
  {
    label: "System Dynamics Review",
    id: "system-dynamics-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/system-dynamics-review.csl"
  },
  {
    label: "Systematic and Applied Microbiology",
    id: "systematic-and-applied-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/systematic-and-applied-microbiology.csl"
  },
  {
    label: "Systematic Biology",
    id: "systematic-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/systematic-biology.csl"
  },
  {
    label: "Szociol\xF3giai Szemle (Magyar)",
    id: "szociologiai-szemle",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/szociologiai-szemle.csl"
  },
  {
    label: "T\xE1bula (Espa\xF1ol)",
    id: "tabula",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tabula.csl"
  },
  {
    label: "Tagungsberichte der Historischen Kommission f\xFCr ost- und westpreu\xDFische Landesforschung (Deutsch)",
    id: "tagungsberichte-der-historischen-kommission-fur-ost-und-westpreussische-landesforschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tagungsberichte-der-historischen-kommission-fur-ost-und-westpreussische-landesforschung.csl"
  },
  {
    label: "TATuP - Zeitschrift f\xFCr Technikfolgenabsch\xE4tzung in Theorie und Praxis",
    id: "tatup-zeitschrift-fur-technikfolgenabschatzung-in-theorie-und-praxis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tatup-zeitschrift-fur-technikfolgenabschatzung-in-theorie-und-praxis.csl"
  },
  {
    label: "Taxon",
    id: "taxon",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taxon.csl"
  },
  {
    label: "Taylor & Francis - American Chemical Society",
    id: "taylor-and-francis-acs",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-acs.csl"
  },
  {
    label: "Taylor & Francis - American Institute of Physics",
    id: "taylor-and-francis-aip",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-aip.csl"
  },
  {
    label: "Taylor & Francis - AMA",
    id: "taylor-and-francis-ama",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-ama.csl"
  },
  {
    label: "Taylor & Francis - Chicago Manual of Style (author-date)",
    id: "taylor-and-francis-chicago-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-chicago-author-date.csl"
  },
  {
    label: "Taylor & Francis - US Chicago Manual of Style B (author-date)",
    id: "taylor-and-francis-chicago-b-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-chicago-b-author-date.csl"
  },
  {
    label: "Taylor & Francis - Chicago F",
    id: "taylor-and-francis-chicago-f",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-chicago-f.csl"
  },
  {
    label: "Taylor & Francis - Council of Science Editors (author-date)",
    id: "taylor-and-francis-council-of-science-editors-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-council-of-science-editors-author-date.csl"
  },
  {
    label: "Taylor & Francis - Council of Science Editors (numeric)",
    id: "taylor-and-francis-council-of-science-editors-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-council-of-science-editors-numeric.csl"
  },
  {
    label: "Taylor & Francis - Harvard X",
    id: "taylor-and-francis-harvard-x",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-harvard-x.csl"
  },
  {
    label: "Taylor & Francis - National Library of Medicine",
    id: "taylor-and-francis-national-library-of-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-national-library-of-medicine.csl"
  },
  {
    label: "Taylor & Francis - Numeric Q",
    id: "taylor-and-francis-numeric-q",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-numeric-q.csl"
  },
  {
    label: "Taylor & Francis - Vancouver/National Library of Medicine",
    id: "taylor-and-francis-vancouver-national-library-of-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/taylor-and-francis-vancouver-national-library-of-medicine.csl"
  },
  {
    label: "Techniques&Culture (Fran\xE7ais)",
    id: "techniques-et-culture",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/techniques-et-culture.csl"
  },
  {
    label: "Technische Universit\xE4t Dortmund - AG Virtual Machining (Deutsch)",
    id: "technische-universitat-dortmund-ag-virtual-machining",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dortmund-ag-virtual-machining.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Betriebswirtschaftslehre/Logistik (author-date)",
    id: "technische-universitat-dresden-betriebswirtschaftslehre-logistik-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-betriebswirtschaftslehre-logistik-author-date.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Betriebswirtschaftslehre/Marketing (author-date)",
    id: "technische-universitat-dresden-betriebswirtschaftslehre-marketing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-betriebswirtschaftslehre-marketing.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Betriebswirtschaftslehre/Rechnungswesen/Controlling (Deutsch)",
    id: "technische-universitat-dresden-betriebswirtschaftslehre-rechnungswesen-controlling",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-betriebswirtschaftslehre-rechnungswesen-controlling.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Erziehungswissenschaften (author-date)",
    id: "technische-universitat-dresden-erziehungswissenschaften-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-erziehungswissenschaften-author-date.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Finanzwirtschaft und Finanzdienstleistungen (author-date, with short titles)",
    id: "technische-universitat-dresden-finanzwirtschaft-und-finanzdienstleistungen-author-date-with-short-titles",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-finanzwirtschaft-und-finanzdienstleistungen-author-date-with-short-titles.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Finanzwirtschaft und Finanzdienstleistungen (author-date)",
    id: "technische-universitat-dresden-finanzwirtschaft-und-finanzdienstleistungen-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-finanzwirtschaft-und-finanzdienstleistungen-author-date.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Finanzwirtschaft und Finanzdienstleistungen (note)",
    id: "technische-universitat-dresden-finanzwirtschaft-und-finanzdienstleistungen-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-finanzwirtschaft-und-finanzdienstleistungen-note.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Forstwissenschaft (author-date, Deutsch)",
    id: "technische-universitat-dresden-forstwissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-forstwissenschaft.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Historische Musikwissenschaft (note, Deutsch)",
    id: "technische-universitat-dresden-historische-musikwissenschaft-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-historische-musikwissenschaft-note.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Kunstgeschichte (note, Deutsch)",
    id: "technische-universitat-dresden-kunstgeschichte-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-kunstgeschichte-note.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Linguistik (Deutsch)",
    id: "technische-universitat-dresden-linguistik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-linguistik.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Medienwissenschaft und Neuere Deutsche Literatur (note, Deutsch)",
    id: "technische-universitat-dresden-medienwissenschaft-und-neuere-deutsche-literatur-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-medienwissenschaft-und-neuere-deutsche-literatur-note.csl"
  },
  {
    label: "Technische Universit\xE4t Dresden - Wirtschaftswissenschaften (Deutsch)",
    id: "technische-universitat-dresden-wirtschaftswissenschaften",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-dresden-wirtschaftswissenschaften.csl"
  },
  {
    label: "Technische Universit\xE4t M\xFCnchen - Controlling (Deutsch)",
    id: "technische-universitat-munchen-controlling",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-munchen-controlling.csl"
  },
  {
    label: "Technische Universit\xE4t M\xFCnchen - Unternehmensf\xFChrung (Deutsch)",
    id: "technische-universitat-munchen-unternehmensfuhrung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-munchen-unternehmensfuhrung.csl"
  },
  {
    label: "Technische Universit\xE4t Wien (dissertation) (Deutsch)",
    id: "technische-universitat-wien",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/technische-universitat-wien.csl"
  },
  {
    label: "Teologia Catalunya",
    id: "teologia-catalunya",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/teologia-catalunya.csl"
  },
  {
    label: "Termedia Neuropsychiatria i Neuropsychologia/Neuropsychiatry and Neuropsychology",
    id: "termedia-neuropsychiatria-i-neuropsychologia-neuropsychiatry-and-neuropsychology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/termedia-neuropsychiatria-i-neuropsychologia-neuropsychiatry-and-neuropsychology.csl"
  },
  {
    label: "Terra Nova",
    id: "terra-nova",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/terra-nova.csl"
  },
  {
    label: "Tetrahedron Letters",
    id: "tetrahedron-letters",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tetrahedron-letters.csl"
  },
  {
    label: "Textual Cultures",
    id: "textual-cultures",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/textual-cultures.csl"
  },
  {
    label: "Textual Practice",
    id: "textual-practice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/textual-practice.csl"
  },
  {
    label: "TGM Wien Diplomarbeit (Deutsch)",
    id: "tgm-wien-diplom",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tgm-wien-diplom.csl"
  },
  {
    label: "TGM Wien Diplomarbeit \xD6NORM (Deutsch - \xD6sterreich)",
    id: "tgm-wien-diplomarbeit-onorm",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tgm-wien-diplomarbeit-onorm.csl"
  },
  {
    label: "The Accounting Review",
    id: "the-accounting-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-accounting-review.csl"
  },
  {
    label: "The American Journal of Bioethics",
    id: "the-american-journal-of-bioethics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-bioethics.csl"
  },
  {
    label: "The American Journal of Cardiology",
    id: "the-american-journal-of-cardiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-cardiology.csl"
  },
  {
    label: "The American Journal of Dermatopathology",
    id: "the-american-journal-of-dermatopathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-dermatopathology.csl"
  },
  {
    label: "The American Journal of Gastroenterology",
    id: "the-american-journal-of-gastroenterology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-gastroenterology.csl"
  },
  {
    label: "The American Journal of Geriatric Psychiatry",
    id: "the-american-journal-of-geriatric-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-geriatric-psychiatry.csl"
  },
  {
    label: "The American Journal of Pathology",
    id: "the-american-journal-of-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-pathology.csl"
  },
  {
    label: "The American Journal of Psychiatry",
    id: "the-american-journal-of-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-psychiatry.csl"
  },
  {
    label: "The American Journal of Tropical Medicine and Hygiene",
    id: "the-american-journal-of-tropical-medicine-and-hygiene",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-journal-of-tropical-medicine-and-hygiene.csl"
  },
  {
    label: "The American Midland Naturalist",
    id: "the-american-midland-naturalist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-midland-naturalist.csl"
  },
  {
    label: "The American Naturalist",
    id: "the-american-naturalist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-american-naturalist.csl"
  },
  {
    label: "The Angle Orthodontist",
    id: "the-angle-orthodontist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-angle-orthodontist.csl"
  },
  {
    label: "The Astrophysical Journal",
    id: "the-astrophysical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-astrophysical-journal.csl"
  },
  {
    label: "The Auk",
    id: "the-auk",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-auk.csl"
  },
  {
    label: "The Australian Journal of Agricultural and Resource Economics",
    id: "the-australian-journal-of-agricultural-and-resource-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-australian-journal-of-agricultural-and-resource-economics.csl"
  },
  {
    label: "The Biological Bulletin",
    id: "the-biological-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-biological-bulletin.csl"
  },
  {
    label: "The Bone & Joint Journal",
    id: "the-bone-and-joint-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-bone-and-joint-journal.csl"
  },
  {
    label: "The Botanical Review",
    id: "the-botanical-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-botanical-review.csl"
  },
  {
    label: "The Bovine Practitioner",
    id: "the-bovine-practitioner",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-bovine-practitioner.csl"
  },
  {
    label: "The British Journal for the Philosophy of Science",
    id: "the-british-journal-for-the-philosophy-of-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-british-journal-for-the-philosophy-of-science.csl"
  },
  {
    label: "The British Journal of Cardiology",
    id: "the-british-journal-of-cardiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-british-journal-of-cardiology.csl"
  },
  {
    label: "The British Journal of Criminology",
    id: "the-british-journal-of-criminology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-british-journal-of-criminology.csl"
  },
  {
    label: "The British Journal of Psychiatry",
    id: "the-british-journal-of-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-british-journal-of-psychiatry.csl"
  },
  {
    label: "The British Journal of Sociology",
    id: "the-british-journal-of-sociology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-british-journal-of-sociology.csl"
  },
  {
    label: "The Canadian Geographer (Le G\xE9ographe canadien)",
    id: "the-canadian-geographer",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-canadian-geographer.csl"
  },
  {
    label: "The Canadian Journal of Chemical Engineering",
    id: "the-canadian-journal-of-chemical-engineering",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-canadian-journal-of-chemical-engineering.csl"
  },
  {
    label: "The Canadian Journal of Psychiatry",
    id: "the-canadian-journal-of-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-canadian-journal-of-psychiatry.csl"
  },
  {
    label: "The Cancer Journal",
    id: "the-cancer-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-cancer-journal.csl"
  },
  {
    label: "The Chemical Society of Japan",
    id: "the-chemical-society-of-japan",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-chemical-society-of-japan.csl"
  },
  {
    label: "The Chinese Journal of International Politics",
    id: "the-chinese-journal-of-international-politics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-chinese-journal-of-international-politics.csl"
  },
  {
    label: "The Company of Biologists",
    id: "the-company-of-biologists",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-company-of-biologists.csl"
  },
  {
    label: "The Depositional Record",
    id: "the-depositional-record",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-depositional-record.csl"
  },
  {
    label: "The Design Journal",
    id: "the-design-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-design-journal.csl"
  },
  {
    label: "The Economic History Review",
    id: "the-economic-history-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-economic-history-review.csl"
  },
  {
    label: "The European Research Journal",
    id: "the-european-research-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-european-research-journal.csl"
  },
  {
    label: "The FASEB Journal",
    id: "the-faseb-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-faseb-journal.csl"
  },
  {
    label: "The FEBS Journal",
    id: "the-febs-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-febs-journal.csl"
  },
  {
    label: "The Geological Society of America",
    id: "the-geological-society-of-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-geological-society-of-america.csl"
  },
  {
    label: "The Geological Society of London",
    id: "the-geological-society-of-london",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-geological-society-of-london.csl"
  },
  {
    label: "The Hastings Center Report",
    id: "the-hastings-center-report",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-hastings-center-report.csl"
  },
  {
    label: "The Historical Journal",
    id: "the-historical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-historical-journal.csl"
  },
  {
    label: "The Holocene",
    id: "the-holocene",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-holocene.csl"
  },
  {
    label: "The Horticulture Journal",
    id: "the-horticulture-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-horticulture-journal.csl"
  },
  {
    label: "The Institute of Electronics, Information and Communication Engineers (\u96FB\u5B50\u60C5\u5831\u901A\u4FE1\u5B66\u4F1A)",
    id: "the-institute-of-electronics-information-and-communication-engineers",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-institute-of-electronics-information-and-communication-engineers.csl"
  },
  {
    label: "The Institution of Engineering and Technology",
    id: "the-institution-of-engineering-and-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-institution-of-engineering-and-technology.csl"
  },
  {
    label: "The International Journal of Developmental Biology",
    id: "the-international-journal-of-developmental-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-international-journal-of-developmental-biology.csl"
  },
  {
    label: "The International Journal of Psychoanalysis",
    id: "the-international-journal-of-psychoanalysis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-international-journal-of-psychoanalysis.csl"
  },
  {
    label: "The International Journal of Tuberculosis and Lung Disease",
    id: "the-international-journal-of-tuberculosis-and-lung-disease",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-international-journal-of-tuberculosis-and-lung-disease.csl"
  },
  {
    label: "The ISME Journal",
    id: "the-isme-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-isme-journal.csl"
  },
  {
    label: "The Journal of Adhesive Dentistry",
    id: "the-journal-of-adhesive-dentistry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-adhesive-dentistry.csl"
  },
  {
    label: "The Journal of Agricultural Science",
    id: "the-journal-of-agricultural-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-agricultural-science.csl"
  },
  {
    label: "The Journal of Clinical Ethics",
    id: "the-journal-of-clinical-ethics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-clinical-ethics.csl"
  },
  {
    label: "The Journal of Clinical Investigation",
    id: "the-journal-of-clinical-investigation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-clinical-investigation.csl"
  },
  {
    label: "The Journal of Comparative Law",
    id: "the-journal-of-comparative-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-comparative-law.csl"
  },
  {
    label: "The Journal of Comparative Neurology",
    id: "the-journal-of-comparative-neurology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-comparative-neurology.csl"
  },
  {
    label: "The Journal of Egyptian Archaeology",
    id: "the-journal-of-egyptian-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-egyptian-archaeology.csl"
  },
  {
    label: "The Journal of Eukaryotic Microbiology",
    id: "the-journal-of-eukaryotic-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-eukaryotic-microbiology.csl"
  },
  {
    label: "The Journal of Foot & Ankle Surgery",
    id: "the-journal-of-foot-and-ankle-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-foot-and-ankle-surgery.csl"
  },
  {
    label: "The Journal of Hand Surgery Asian-Pacific Volume",
    id: "the-journal-of-hand-surgery-asian-pacific-volume",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-hand-surgery-asian-pacific-volume.csl"
  },
  {
    label: "The Journal of Hand Surgery (European Volume)",
    id: "the-journal-of-hand-surgery-european-volume",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-hand-surgery-european-volume.csl"
  },
  {
    label: "The Journal of Hellenic Studies",
    id: "the-journal-of-hellenic-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-hellenic-studies.csl"
  },
  {
    label: "The Journal of Immunology",
    id: "the-journal-of-immunology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-immunology.csl"
  },
  {
    label: "The Journal of Infection in Developing Countries",
    id: "the-journal-of-infection-in-developing-countries",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-infection-in-developing-countries.csl"
  },
  {
    label: "The Journal of Juristic Papyrology",
    id: "the-journal-of-juristic-papyrology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-juristic-papyrology.csl"
  },
  {
    label: "The Journal of Laryngology & Otology",
    id: "the-journal-of-laryngology-and-otology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-laryngology-and-otology.csl"
  },
  {
    label: "The Journal of Modern History",
    id: "the-journal-of-modern-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-modern-history.csl"
  },
  {
    label: "The Journal of Molecular Diagnostics",
    id: "the-journal-of-molecular-diagnostics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-molecular-diagnostics.csl"
  },
  {
    label: "The Journal of Nervous and Mental Disease",
    id: "the-journal-of-nervous-and-mental-disease",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-nervous-and-mental-disease.csl"
  },
  {
    label: "The Journal of Neuropsychiatry and Clinical Neurosciences",
    id: "the-journal-of-neuropsychiatry-and-clinical-neurosciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-neuropsychiatry-and-clinical-neurosciences.csl"
  },
  {
    label: "The Journal of Neuroscience",
    id: "the-journal-of-neuroscience",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-neuroscience.csl"
  },
  {
    label: "The Journal of Nuclear Medicine",
    id: "the-journal-of-nuclear-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-nuclear-medicine.csl"
  },
  {
    label: "The Journal of Nutrition, Health & Aging",
    id: "the-journal-of-nutrition-health-and-aging",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-nutrition-health-and-aging.csl"
  },
  {
    label: "The Journal of Pain",
    id: "the-journal-of-pain",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-pain.csl"
  },
  {
    label: "The Journal of Parasitology",
    id: "the-journal-of-parasitology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-parasitology.csl"
  },
  {
    label: "The Journal of Pathology",
    id: "the-journal-of-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-pathology.csl"
  },
  {
    label: "The Journal of Peasant Studies",
    id: "the-journal-of-peasant-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-peasant-studies.csl"
  },
  {
    label: "The Journal of Physiology",
    id: "the-journal-of-physiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-physiology.csl"
  },
  {
    label: "The Journal of Pure and Applied Chemistry Research",
    id: "the-journal-of-pure-and-applied-chemistry-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-pure-and-applied-chemistry-research.csl"
  },
  {
    label: "The Journal of Roman Studies",
    id: "the-journal-of-roman-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-roman-studies.csl"
  },
  {
    label: "The Journal of the Acoustical Society of America (numeric)",
    id: "the-journal-of-the-acoustical-society-of-america-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-the-acoustical-society-of-america-numeric.csl"
  },
  {
    label: "The Journal of the Acoustical Society of America (author-date)",
    id: "the-journal-of-the-acoustical-society-of-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-the-acoustical-society-of-america.csl"
  },
  {
    label: "The Journal of the Torrey Botanical Society",
    id: "the-journal-of-the-torrey-botanical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-the-torrey-botanical-society.csl"
  },
  {
    label: "The Journal of Transport History",
    id: "the-journal-of-transport-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-transport-history.csl"
  },
  {
    label: "The Journal of Trauma and Acute Care Surgery",
    id: "the-journal-of-trauma-and-acute-care-surgery",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-trauma-and-acute-care-surgery.csl"
  },
  {
    label: "The Journal of Urology",
    id: "the-journal-of-urology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-urology.csl"
  },
  {
    label: "The Journal of Veterinary Medical Science",
    id: "the-journal-of-veterinary-medical-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-veterinary-medical-science.csl"
  },
  {
    label: "The Journal of Wildlife Management",
    id: "the-journal-of-wildlife-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journal-of-wildlife-management.csl"
  },
  {
    label: "The Journals of Gerontology, Series A: Biological Sciences and Medical Sciences",
    id: "the-journals-of-gerontology-series-a",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-journals-of-gerontology-series-a.csl"
  },
  {
    label: "The Korean Journal of Gastroenterology",
    id: "the-korean-journal-of-gastroenterology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-korean-journal-of-gastroenterology.csl"
  },
  {
    label: "The Korean Journal of Internal Medicine",
    id: "the-korean-journal-of-internal-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-korean-journal-of-internal-medicine.csl"
  },
  {
    label: "The Korean Journal of Mycology",
    id: "the-korean-journal-of-mycology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-korean-journal-of-mycology.csl"
  },
  {
    label: "The Lancet",
    id: "the-lancet",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-lancet.csl"
  },
  {
    label: "The Lichenologist",
    id: "the-lichenologist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-lichenologist.csl"
  },
  {
    label: "The National Medical Journal of India",
    id: "the-national-medical-journal-of-india",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-national-medical-journal-of-india.csl"
  },
  {
    label: "The Neuroscientist",
    id: "the-neuroscientist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-neuroscientist.csl"
  },
  {
    label: "The New England Journal of Medicine",
    id: "the-new-england-journal-of-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-new-england-journal-of-medicine.csl"
  },
  {
    label: "The Oncologist",
    id: "the-oncologist",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-oncologist.csl"
  },
  {
    label: "The Open University - A251 - Arts Course",
    id: "the-open-university-a251",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-open-university-a251.csl"
  },
  {
    label: "The Open University - Harvard",
    id: "the-open-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-open-university-harvard.csl"
  },
  {
    label: "The Open University - M801 - Research Project and Dissertation",
    id: "the-open-university-m801",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-open-university-m801.csl"
  },
  {
    label: "The Open University (numeric, superscript)",
    id: "the-open-university-numeric-superscript",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-open-university-numeric-superscript.csl"
  },
  {
    label: "The Open University (numeric)",
    id: "the-open-university-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-open-university-numeric.csl"
  },
  {
    label: "The Open University - S390",
    id: "the-open-university-s390",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-open-university-s390.csl"
  },
  {
    label: "The Optical Society",
    id: "the-optical-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-optical-society.csl"
  },
  {
    label: "The Pan African Medical Journal",
    id: "the-pan-african-medical-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-pan-african-medical-journal.csl"
  },
  {
    label: "The Plant Cell",
    id: "the-plant-cell",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-plant-cell.csl"
  },
  {
    label: "The Plant Genome",
    id: "the-plant-genome",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-plant-genome.csl"
  },
  {
    label: "The Plant Journal",
    id: "the-plant-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-plant-journal.csl"
  },
  {
    label: "The Quarterly Journal of Economics",
    id: "the-quarterly-journal-of-economics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-quarterly-journal-of-economics.csl"
  },
  {
    label: "The Review of Financial Studies",
    id: "the-review-of-financial-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-review-of-financial-studies.csl"
  },
  {
    label: "The Rockefeller University Press",
    id: "the-rockefeller-university-press",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-rockefeller-university-press.csl"
  },
  {
    label: "The Saudi Journal for Dental Research",
    id: "the-saudi-journal-for-dental-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-saudi-journal-for-dental-research.csl"
  },
  {
    label: "The Scandinavian Journal of Clinical & Laboratory Investigation",
    id: "the-scandinavian-journal-of-clinical-and-laboratory-investigation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-scandinavian-journal-of-clinical-and-laboratory-investigation.csl"
  },
  {
    label: "\u6771\u4EAC\u5927\u5B66\u6CD5\u79D1\u5927\u5B66\u9662\u30ED\u30FC\u30EC\u30D3\u30E5\u30FC (The University of Tokyo Law Review) (\u65E5\u672C\u8A9E)",
    id: "the-university-of-tokyo-law-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-university-of-tokyo-law-review.csl"
  },
  {
    label: "The University of Western Australia - Harvard",
    id: "the-university-of-western-australia-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-university-of-western-australia-harvard.csl"
  },
  {
    label: "The University of Winchester - Harvard",
    id: "the-university-of-winchester-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-university-of-winchester-harvard.csl"
  },
  {
    label: "The World Journal of Biological Psychiatry",
    id: "the-world-journal-of-biological-psychiatry",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/the-world-journal-of-biological-psychiatry.csl"
  },
  {
    label: "Theologie und Philosophie (Deutsch)",
    id: "theologie-und-philosophie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/theologie-und-philosophie.csl"
  },
  {
    label: "Theory, Culture & Society",
    id: "theory-culture-and-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/theory-culture-and-society.csl"
  },
  {
    label: "Theranostics",
    id: "theranostics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/theranostics.csl"
  },
  {
    label: "Th\xE8se de Sorbonne Universit\xE9 (Sciences Humaines et Sociales, Fran\xE7ais)",
    id: "theses-de-sorbonne-universite",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/theses-de-sorbonne-universite.csl"
  },
  {
    label: "Thieme-German (Deutsch)",
    id: "thieme-german",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/thieme-german.csl"
  },
  {
    label: "Thomson Reuters - Legal, Tax & Accounting Australia",
    id: "thomson-reuters-legal-tax-and-accounting-australia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/thomson-reuters-legal-tax-and-accounting-australia.csl"
  },
  {
    label: "Thrombosis and Haemostasis",
    id: "thrombosis-and-haemostasis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/thrombosis-and-haemostasis.csl"
  },
  {
    label: "Tijdschrift voor economische en sociale geografie",
    id: "tijdschrift-voor-economische-en-sociale-geografie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tijdschrift-voor-economische-en-sociale-geografie.csl"
  },
  {
    label: "Tijdschrift voor Geneeskunde en Gezondheidszorg (Nederlands)",
    id: "tijdschrift-voor-geneeskunde",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tijdschrift-voor-geneeskunde.csl"
  },
  {
    label: "Topoi Orient-Occident (auteur-date, Fran\xE7ais)",
    id: "topoi-orient-occident-auteur-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/topoi-orient-occident-auteur-date.csl"
  },
  {
    label: "Topoi Orient-Occident (classique, Fran\xE7ais)",
    id: "topoi-orient-occident-classique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/topoi-orient-occident-classique.csl"
  },
  {
    label: "Toxicological Sciences",
    id: "toxicological-sciences",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/toxicological-sciences.csl"
  },
  {
    label: "Trabajos de Prehistoria (Espa\xF1ol)",
    id: "trabajos-de-prehistoria",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/trabajos-de-prehistoria.csl"
  },
  {
    label: "Trac\xE9s: Revue de Sciences Humaines (Fran\xE7ais)",
    id: "traces",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/traces.csl"
  },
  {
    label: "Traffic Injury Prevention",
    id: "traffic-injury-prevention",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/traffic-injury-prevention.csl"
  },
  {
    label: "Traffic",
    id: "traffic",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/traffic.csl"
  },
  {
    label: "Trames",
    id: "trames",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/trames.csl"
  },
  {
    label: "Transactions of the American Philological Association",
    id: "transactions-of-the-american-philological-association",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transactions-of-the-american-philological-association.csl"
  },
  {
    label: "Transactions of the Materials Research Society of Japan",
    id: "transactions-of-the-materials-research-society-of-japan",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transactions-of-the-materials-research-society-of-japan.csl"
  },
  {
    label: "Transboundary and Emerging Diseases",
    id: "transboundary-and-emerging-diseases",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transboundary-and-emerging-diseases.csl"
  },
  {
    label: "Transnational Environmental Law",
    id: "transnational-environmental-law",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transnational-environmental-law.csl"
  },
  {
    label: "Transplantation",
    id: "transplantation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transplantation.csl"
  },
  {
    label: "Transport",
    id: "transport",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transport.csl"
  },
  {
    label: "Transportation Research Record: Journal of the Transportation Research Board",
    id: "transportation-research-record",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transportation-research-record.csl"
  },
  {
    label: "Transposition. Musique et sciences sociales",
    id: "transposition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transposition.csl"
  },
  {
    label: "Transversalit\xE9s (Fran\xE7ais)",
    id: "transversalites",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/transversalites.csl"
  },
  {
    label: "Travail et Emploi (Fran\xE7ais)",
    id: "travail-et-emploi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/travail-et-emploi.csl"
  },
  {
    label: "Tree Physiology",
    id: "tree-physiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tree-physiology.csl"
  },
  {
    label: "Trends in Glycoscience and Glycotechnology",
    id: "trends-in-glycoscience-and-glycotechnology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/trends-in-glycoscience-and-glycotechnology.csl"
  },
  {
    label: "Trends journals",
    id: "trends-journals",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/trends-journals.csl"
  },
  {
    label: "Triangle (Fran\xE7ais)",
    id: "triangle",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/triangle.csl"
  },
  {
    label: "Trinity College Dublin - Zoology Botany Environmental Sciences - Harvard",
    id: "trinity-college-dublin-zoology-botany-environmental-sciences-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/trinity-college-dublin-zoology-botany-environmental-sciences-harvard.csl"
  },
  {
    label: "Tropical Animal Health and Production",
    id: "tropical-animal-health-and-production",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tropical-animal-health-and-production.csl"
  },
  {
    label: "Tsaqafah",
    id: "tsaqafah",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tsaqafah.csl"
  },
  {
    label: "Turabian 9th edition (author-date)",
    id: "turabian-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/turabian-author-date.csl"
  },
  {
    label: "Turabian 8th edition (full note)",
    id: "turabian-fullnote-bibliography-8th-edition",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/turabian-fullnote-bibliography-8th-edition.csl"
  },
  {
    label: "Turabian 8th edition (full note, no ibid)",
    id: "turabian-fullnote-bibliography-no-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/turabian-fullnote-bibliography-no-ibid.csl"
  },
  {
    label: "Turcica",
    id: "turcica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/turcica.csl"
  },
  {
    label: "T\xDCB\u0130TAK (T\xFCrkiye Bilimsel ve Teknolojik Ara\u015Ft\u0131rma Kurumu) (T\xFCrk\xE7e)",
    id: "turkiye-bilimsel-ve-teknolojik-arastirma-kurumu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/turkiye-bilimsel-ve-teknolojik-arastirma-kurumu.csl"
  },
  {
    label: "Twentieth-Century Music",
    id: "twentieth-century-music",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/twentieth-century-music.csl"
  },
  {
    label: "Tyndale Bulletin",
    id: "tyndale-bulletin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/tyndale-bulletin.csl"
  },
  {
    label: "U Schy\u0142ku Staro\u017Cytno\u015Bci (Polski)",
    id: "u-schylku-starozytnosci",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/u-schylku-starozytnosci.csl"
  },
  {
    label: "UCL Institute of Education - Harvard",
    id: "ucl-institute-of-education-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ucl-institute-of-education-harvard.csl"
  },
  {
    label: "UCL University College - APA (Dansk)",
    id: "ucl-university-college-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ucl-university-college-apa.csl"
  },
  {
    label: "UCL University College - Harvard (Dansk)",
    id: "ucl-university-college-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ucl-university-college-harvard.csl"
  },
  {
    label: "UCL University College - Vancouver (English)",
    id: "ucl-university-college-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ucl-university-college-vancouver.csl"
  },
  {
    label: "UCLouvain - Centre Charles De Visscher pour le droit international et europ\xE9en (French)",
    id: "uclouvain-centre-charles-de-visscher-pour-le-droit-international-et-europeen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uclouvain-centre-charles-de-visscher-pour-le-droit-international-et-europeen.csl"
  },
  {
    label: "Ugeskrift for L\xE6ger (Dansk)",
    id: "ugeskrift-for-laeger",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ugeskrift-for-laeger.csl"
  },
  {
    label: "Ultrasound in Medicine and Biology",
    id: "ultrasound-in-medicine-and-biology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ultrasound-in-medicine-and-biology.csl"
  },
  {
    label: "Ul\xFAa. Revista de Historia, Sociedad y Cultura",
    id: "ulua-revista-de-historia-sociedad-y-cultura",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/ulua-revista-de-historia-sociedad-y-cultura.csl"
  },
  {
    label: "Uluda\u011F \xDCniversitesi - Sosyal Bilimler Enstit\xFCs\xFC (author-date, T\xFCrk\xE7e)",
    id: "uludag-universitesi-sosyal-bilimler-enstitusu-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uludag-universitesi-sosyal-bilimler-enstitusu-author-date.csl"
  },
  {
    label: "Uluda\u011F \xDCniversitesi - Sosyal Bilimler Enstit\xFCs\xFC (full note, with Ibid., T\xFCrk\xE7e)",
    id: "uludag-universitesi-sosyal-bilimler-enstitusu-full-note-with-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uludag-universitesi-sosyal-bilimler-enstitusu-full-note-with-ibid.csl"
  },
  {
    label: "Uluda\u011F \xDCniversitesi - Sosyal Bilimler Enstit\xFCs\xFC (full note, T\xFCrk\xE7e)",
    id: "uludag-universitesi-sosyal-bilimler-enstitusu-full-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uludag-universitesi-sosyal-bilimler-enstitusu-full-note.csl"
  },
  {
    label: "Uluda\u011F \xDCniversitesi - Sosyal Bilimler Enstit\xFCs\xFC - \u0130lahiyat Fak\xFCltesi (full note, with Ibid., T\xFCrk\xE7e)",
    id: "uludag-universitesi-sosyal-bilimler-enstitusu-ilahiyat-fakultesi-full-note-with-ibid",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uludag-universitesi-sosyal-bilimler-enstitusu-ilahiyat-fakultesi-full-note-with-ibid.csl"
  },
  {
    label: "Uluda\u011F \xDCniversitesi - Sosyal Bilimler Enstit\xFCs\xFC - \u0130lahiyat Fak\xFCltesi (full note, T\xFCrk\xE7e)",
    id: "uludag-universitesi-sosyal-bilimler-enstitusu-ilahiyat-fakultesi-full-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uludag-universitesi-sosyal-bilimler-enstitusu-ilahiyat-fakultesi-full-note.csl"
  },
  {
    label: "UNESCO International Institute for Educational Planning",
    id: "unesco-international-institute-for-educational-planning",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/unesco-international-institute-for-educational-planning.csl"
  },
  {
    label: "Uni Fribourg Theologie (Deutsch)",
    id: "uni-fribourg-theologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uni-fribourg-theologie.csl"
  },
  {
    label: "Unified Stylesheet for Linguistics (de Gruyter Literature)",
    id: "unified-style-sheet-for-linguistics-de-gruyter-literature",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/unified-style-sheet-for-linguistics-de-gruyter-literature.csl"
  },
  {
    label: "Unified style sheet for linguistics",
    id: "unified-style-sheet-for-linguistics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/unified-style-sheet-for-linguistics.csl"
  },
  {
    label: "United Nations Conference on Trade and Development",
    id: "united-nations-conference-on-trade-and-development",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/united-nations-conference-on-trade-and-development.csl"
  },
  {
    label: "United Nations Development Programme ICCA Legal Review",
    id: "united-nations-development-programme-icca-legal-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/united-nations-development-programme-icca-legal-review.csl"
  },
  {
    label: "United Nations Framework Convention on Climate Change",
    id: "united-nations-framework-convention-on-climate-change",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/united-nations-framework-convention-on-climate-change.csl"
  },
  {
    label: "United States International Trade Commission",
    id: "united-states-international-trade-commission",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/united-states-international-trade-commission.csl"
  },
  {
    label: "Universidad Aut\xF3noma de Ciudad Ju\xE1rez - Estilo Latino Human\xEDstico",
    id: "universidad-autonoma-cidudad-juarez-estilo-latino-humanistico",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidad-autonoma-cidudad-juarez-estilo-latino-humanistico.csl"
  },
  {
    label: "Universidad de Le\xF3n (Espa\xF1a) - Harvard",
    id: "universidad-de-leon-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidad-de-leon-harvard.csl"
  },
  {
    label: "Universidad Evang\xE9lica del Paraguay (Espa\xF1ol)",
    id: "universidad-evangelica-del-paraguay",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidad-evangelica-del-paraguay.csl"
  },
  {
    label: "Universidade de S\xE3o Paulo - Escola de Comunica\xE7\xF5es e Artes - ABNT (Portugu\xEAs - Brasil)",
    id: "universidade-de-sao-paulo-escola-de-comunicacoes-e-artes-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-de-sao-paulo-escola-de-comunicacoes-e-artes-abnt.csl"
  },
  {
    label: "Universidade de S\xE3o Paulo - Instituto de Matem\xE1tica e Estat\xEDstica",
    id: "universidade-de-sao-paulo-instituto-de-matematica-e-estatistica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-de-sao-paulo-instituto-de-matematica-e-estatistica.csl"
  },
  {
    label: "Universidade do Estado do Rio de Janeiro - ABNT (Portugu\xEAs - Brasil)",
    id: "universidade-do-estado-do-rio-de-janeiro-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-do-estado-do-rio-de-janeiro-abnt.csl"
  },
  {
    label: "Universidade do Porto - Faculdade de Engenharia - Chicago Manual of Style 17th (author-date) (Portugu\xEAs - Portugal)",
    id: "universidade-do-porto-faculdade-de-engenharia-chicago-pt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-do-porto-faculdade-de-engenharia-chicago-pt.csl"
  },
  {
    label: "Universidade do Porto - Faculdade de Engenharia - Chicago Manual of Style 17th (author-date)",
    id: "universidade-do-porto-faculdade-de-engenharia-chicago",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-do-porto-faculdade-de-engenharia-chicago.csl"
  },
  {
    label: "Universidade do Porto - Faculdade de Psicologia e de Ci\xEAncias da Educa\xE7\xE3o - APA",
    id: "universidade-do-porto-faculdade-de-psicologia-e-de-ciencias-da-educacao",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-do-porto-faculdade-de-psicologia-e-de-ciencias-da-educacao.csl"
  },
  {
    label: "Universidade Estadual de Alagoas - UNEAL [ABNT] (Portuguese - Brazil)",
    id: "universidade-estadual-de-alagoas-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-estadual-de-alagoas-abnt.csl"
  },
  {
    label: "Universidade Estadual do Oeste do Paran\xE1 - Programa Institucional de Bolsas de Inicia\xE7\xE3o Cient\xEDfica (Portugu\xEAs - Brasil)",
    id: "universidade-estadual-do-oeste-do-parana-programa-institucional-de-bolsas-de-iniciacao-cientifica",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-estadual-do-oeste-do-parana-programa-institucional-de-bolsas-de-iniciacao-cientifica.csl"
  },
  {
    label: "Universidade Estadual Paulista - Campus de Dracena - ABNT (autoria abreviada) (Portugu\xEAs - Brasil)",
    id: "universidade-estadual-paulista-campus-de-dracena-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-estadual-paulista-campus-de-dracena-abnt.csl"
  },
  {
    label: "Universidade Estadual Paulista - Faculdade de Engenharia de Guaratingueta - ABNT (Portugu\xEAs - Brasil)",
    id: "universidade-estadual-paulista-faculdade-de-engenharia-de-guaratingueta-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-estadual-paulista-faculdade-de-engenharia-de-guaratingueta-abnt.csl"
  },
  {
    label: "Universidade Federal de Juiz de Fora (Portugu\xEAs - Brasil)",
    id: "universidade-federal-de-juiz-de-fora",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-federal-de-juiz-de-fora.csl"
  },
  {
    label: "Universidade Federal de Pernambuco - ABNT (Portugu\xEAs - Brasil)",
    id: "universidade-federal-de-pernambuco-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-federal-de-pernambuco-abnt.csl"
  },
  {
    label: "Universidade Federal de Sergipe - Departamento de Engenharia de Produ\xE7\xE3o - ABNT (Portugu\xEAs - Brasil)",
    id: "universidade-federal-de-sergipe-departamento-de-engenharia-de-producao-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-federal-de-sergipe-departamento-de-engenharia-de-producao-abnt.csl"
  },
  {
    label: "Universidade Federal do Esp\xEDrito Santo - ABNT (autoria abreviada) (Portugu\xEAs - Brasil)",
    id: "universidade-federal-do-espirito-santo-abnt-initials",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-federal-do-espirito-santo-abnt-initials.csl"
  },
  {
    label: "Universidade Federal do Esp\xEDrito Santo - ABNT (autoria completa) (Portugu\xEAs - Brasil)",
    id: "universidade-federal-do-espirito-santo-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-federal-do-espirito-santo-abnt.csl"
  },
  {
    label: "Universidade Federal do Rio de Janeiro - Instituto Alberto Luiz Coimbra de P\xF3s-Gradua\xE7\xE3o e Pesquisa de Engenharia - ABNT (Portugu\xEAs - Brasil)",
    id: "universidade-federal-do-rio-de-janeiro-instituto-alberto-luiz-coimbra-de-pos-graduacao-e-pesquisa-de-engenharia-abnt",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universidade-federal-do-rio-de-janeiro-instituto-alberto-luiz-coimbra-de-pos-graduacao-e-pesquisa-de-engenharia-abnt.csl"
  },
  {
    label: "Universit\xE0 Cattolica del Sacro Cuore (note, Italiano)",
    id: "universita-cattolica-del-sacro-cuore",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universita-cattolica-del-sacro-cuore.csl"
  },
  {
    label: "University of Bologna - Liberal Arts College (Universit\xE0 di Bologna - Facolt\xE0 di Lettere e Filosofia) (Italiano)",
    id: "universita-di-bologna-lettere",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universita-di-bologna-lettere.csl"
  },
  {
    label: "Universit\xE0 Pontificia Salesiana (Italiano)",
    id: "universita-pontificia-salesiana-it",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universita-pontificia-salesiana-it.csl"
  },
  {
    label: "Universit\xE0 Pontificia Salesiana",
    id: "universita-pontificia-salesiana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universita-pontificia-salesiana.csl"
  },
  {
    label: "Universitas Gadjah Mada - Departemen Sejarah (Bahasa Indonesia)",
    id: "universitas-gadjah-mada-departemen-sejarah",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitas-gadjah-mada-departemen-sejarah.csl"
  },
  {
    label: "Universitas Negeri Semarang - Fakultas Matematika dan Ilmu Pengetahuan Alam (Bahasa Indonesia)",
    id: "universitas-negeri-semarang-fakultas-matematika-dan-ilmu-pengetahuan-alam",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitas-negeri-semarang-fakultas-matematika-dan-ilmu-pengetahuan-alam.csl"
  },
  {
    label: "Universitas Negeri Yogyakarta - Program Pascasarjana (Bahasa Indonesia)",
    id: "universitas-negeri-yogyakarta-program-pascasarjana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitas-negeri-yogyakarta-program-pascasarjana.csl"
  },
  {
    label: "Universit\xE4t Basel - Deutsche Sprachwissenschaft",
    id: "universitat-basel-deutsche-sprachwissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-basel-deutsche-sprachwissenschaft.csl"
  },
  {
    label: "Universit\xE4t Basel - Iberoromanistik (Espa\xF1ol)",
    id: "universitat-basel-iberoromanistik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-basel-iberoromanistik.csl"
  },
  {
    label: "Universit\xE4t Bern - Institut f\xFCr Musikwissenschaft (note, Deutsch)",
    id: "universitat-bern-institut-fur-musikwissenschaft-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-bern-institut-fur-musikwissenschaft-note.csl"
  },
  {
    label: "Universit\xE4t Bern - Institut f\xFCr Sozialanthropologie (Deutsch - Schweiz)",
    id: "universitat-bern-institut-fur-sozialanthropologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-bern-institut-fur-sozialanthropologie.csl"
  },
  {
    label: "Universit\xE4t Bremen - Institut f\xFCr Politikwissenschaft (Deutsch)",
    id: "universitat-bremen-institut-fur-politikwissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-bremen-institut-fur-politikwissenschaft.csl"
  },
  {
    label: "Universit\xE4t Bremen - Lehrstuhl f\xFCr innovatives Markenmanagement (Deutsch)",
    id: "universitat-bremen-lehrstuhl-fur-innovatives-markenmanagement",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-bremen-lehrstuhl-fur-innovatives-markenmanagement.csl"
  },
  {
    label: "Albert-Ludwigs-Universit\xE4t Freiburg - Geschichte (Deutsch)",
    id: "universitat-freiburg-geschichte",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-freiburg-geschichte.csl"
  },
  {
    label: "Universit\xE4t Heidelberg - Historisches Seminar (Deutsch)",
    id: "universitat-heidelberg-historisches-seminar",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-heidelberg-historisches-seminar.csl"
  },
  {
    label: "Universit\xE4t Heidelberg - Medizinische Fakult\xE4t Mannheim (numerisch, Deutsch)",
    id: "universitat-heidelberg-medizinische-fakultat-mannheim-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-heidelberg-medizinische-fakultat-mannheim-numeric.csl"
  },
  {
    label: "Universit\xE4t Mainz - Geographisches Institut (Deutsch)",
    id: "universitat-mainz-geographisches-institut",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-mainz-geographisches-institut.csl"
  },
  {
    label: "Universit\xE4t Mannheim - Germanistische Linguistik (Deutsch)",
    id: "universitat-mannheim-germanistische-linguistik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-mannheim-germanistische-linguistik.csl"
  },
  {
    label: "Universit\xE4t Stuttgart - Planung und Partizipation (Deutsch)",
    id: "universitat-stuttgart-planung-und-partizipation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-stuttgart-planung-und-partizipation.csl"
  },
  {
    label: "Universit\xE4t Wien - Institut f\xFCr Geschichte",
    id: "universitat-wien-institut-fur-geschichte",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-wien-institut-fur-geschichte.csl"
  },
  {
    label: "Universit\xE4t zu K\xF6ln - Seminar f\xFCr ABWL und Finanzierungslehre (Deutsch)",
    id: "universitat-zu-koln-seminar-fur-abwl-und-finanzierungslehre",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitat-zu-koln-seminar-fur-abwl-und-finanzierungslehre.csl"
  },
  {
    label: "Universit\xE4tsmedizin G\xF6ttingen (Deutsch)",
    id: "universitatsmedizin-gottingen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitatsmedizin-gottingen.csl"
  },
  {
    label: "Universit\xE9 Catholique de Louvain - Histoire (Fran\xE7ais)",
    id: "universite-catholique-de-louvain-histoire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-catholique-de-louvain-histoire.csl"
  },
  {
    label: "Universit\xE9 Cheikh Anta Diop - Facult\xE9 de M\xE9decine de Pharmacie et d'Odontologie (Fran\xE7ais)",
    id: "universite-cheikh-anta-diop-faculte-de-medecine-de-pharmacie-et-dodontologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-cheikh-anta-diop-faculte-de-medecine-de-pharmacie-et-dodontologie.csl"
  },
  {
    label: "Universit\xE9 de Bordeaux - \xC9cole doctorale de droit (Fran\xE7ais)",
    id: "universite-de-bordeaux-ecole-doctorale-de-droit",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-bordeaux-ecole-doctorale-de-droit.csl"
  },
  {
    label: "Universit\xE9 de Gen\xE8ve - D\xE9partement de langue et de litt\xE9rature fran\xE7aises modernes (Fran\xE7ais)",
    id: "universite-de-geneve-departement-de-langue-et-de-litterature-francaises-modernes",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-geneve-departement-de-langue-et-de-litterature-francaises-modernes.csl"
  },
  {
    label: "Universit\xE9 de Lausanne - Histoire (Fran\xE7ais)",
    id: "universite-de-lausanne-histoire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-lausanne-histoire.csl"
  },
  {
    label: "Universit\xE9 de Li\xE8ge - Droit (classement par cat\xE9gorie, Fran\xE7ais)",
    id: "universite-de-liege-droit-par-categorie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-liege-droit-par-categorie.csl"
  },
  {
    label: "Universit\xE9 de Li\xE8ge - Droit (Fran\xE7ais)",
    id: "universite-de-liege-droit",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-liege-droit.csl"
  },
  {
    label: "Universit\xE9 de Li\xE8ge - Histoire (Fran\xE7ais)",
    id: "universite-de-liege-histoire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-liege-histoire.csl"
  },
  {
    label: "Universit\xE9 de Montr\xE9al - APA (Fran\xE7ais - Canada)",
    id: "universite-de-montreal-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-montreal-apa.csl"
  },
  {
    label: "Universit\xE9 de Montr\xE9al - Facult\xE9 de musique (Fran\xE7ais - Canada)",
    id: "universite-de-montreal-faculte-de-musique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-montreal-faculte-de-musique.csl"
  },
  {
    label: "Universit\xE9 de Picardie Jules Verne (Amiens) - Th\xE8se de UFR de M\xE9decine",
    id: "universite-de-picardie-jules-verne-ufr-de-medecine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-picardie-jules-verne-ufr-de-medecine.csl"
  },
  {
    label: "Universit\xE9 de Sherbrooke - D\xE9partement de g\xE9omatique (Fran\xE7ais - Canada)",
    id: "universite-de-sherbrooke-departement-de-geomatique",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-sherbrooke-departement-de-geomatique.csl"
  },
  {
    label: "Universit\xE9 de Sherbrooke - Facult\xE9 d'\xE9ducation (Fran\xE7ais - Canada)",
    id: "universite-de-sherbrooke-faculte-d-education",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-sherbrooke-faculte-d-education.csl"
  },
  {
    label: "Universit\xE9 de Sherbrooke - Histoire (Fran\xE7ais - Canada)",
    id: "universite-de-sherbrooke-histoire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-de-sherbrooke-histoire.csl"
  },
  {
    label: "Universit\xE9 du Qu\xE9bec \xE0 Montr\xE9al - D\xE9partement d\u2019histoire (Fran\xE7ais - Canada)",
    id: "universite-du-quebec-a-montreal-departement-dhistoire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-du-quebec-a-montreal-departement-dhistoire.csl"
  },
  {
    label: "Universit\xE9 du Qu\xE9bec \xE0 Montr\xE9al - \xC9tudes litt\xE9raires et s\xE9miologie (Fran\xE7ais - Canada)",
    id: "universite-du-quebec-a-montreal-etudes-litteraires-et-semiologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-du-quebec-a-montreal-etudes-litteraires-et-semiologie.csl"
  },
  {
    label: "Universit\xE9 du Qu\xE9bec \xE0 Montr\xE9al - APA - pr\xE9noms (Fran\xE7ais - Canada)",
    id: "universite-du-quebec-a-montreal-prenoms",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-du-quebec-a-montreal-prenoms.csl"
  },
  {
    label: "Universit\xE9 du Qu\xE9bec \xE0 Montr\xE9al - APA (Fran\xE7ais - Canada)",
    id: "universite-du-quebec-a-montreal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-du-quebec-a-montreal.csl"
  },
  {
    label: "Universit\xE9 Laval - D\xE9partement des sciences historiques (Fran\xE7ais - Canada)",
    id: "universite-laval-departement-des-sciences-historiques",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-laval-departement-des-sciences-historiques.csl"
  },
  {
    label: "Universit\xE9 Laval - D\xE9partement d'information et de communication (Fran\xE7ais - Canada)",
    id: "universite-laval-departement-dinformation-et-de-communication",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-laval-departement-dinformation-et-de-communication.csl"
  },
  {
    label: "Universit\xE9 Laval - Facult\xE9 de th\xE9ologie et de sciences religieuses (Fran\xE7ais - Canada)",
    id: "universite-laval-faculte-de-theologie-et-de-sciences-religieuses",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-laval-faculte-de-theologie-et-de-sciences-religieuses.csl"
  },
  {
    label: "Universit\xE9 libre de Bruxelles - Histoire (Fran\xE7ais)",
    id: "universite-libre-de-bruxelles-histoire",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-libre-de-bruxelles-histoire.csl"
  },
  {
    label: "Universit\xE9 Nangui Abrogoua - Sciences de la Nature - APA (Fran\xE7ais)",
    id: "universite-nangui-abrogoua-sciences-de-la-nature-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universite-nangui-abrogoua-sciences-de-la-nature-apa.csl"
  },
  {
    label: "Universiteit Utrecht - Onderzoeksgids Geschiedenis (Nederlands)",
    id: "universiteit-utrecht-onderzoeksgids-geschiedenis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universiteit-utrecht-onderzoeksgids-geschiedenis.csl"
  },
  {
    label: "Universitetet i Oslo - Rettsvitenskap (Norsk - Bokm\xE5l)",
    id: "universitetet-i-oslo-rettsvitenskap",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universitetet-i-oslo-rettsvitenskap.csl"
  },
  {
    label: "Universiti Kebangsaan Malaysia (Malay)",
    id: "universiti-kebangsaan-malaysia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/universiti-kebangsaan-malaysia.csl"
  },
  {
    label: "University College Dublin - School of History & Archives",
    id: "university-college-dublin-school-of-history-and-archives",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-college-dublin-school-of-history-and-archives.csl"
  },
  {
    label: "University College Lilleb\xE6lt - APA (Dansk)",
    id: "university-college-lillebaelt-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-college-lillebaelt-apa.csl"
  },
  {
    label: "University for the Creative Arts (figures and illustrations)",
    id: "university-for-the-creative-arts-figures",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-for-the-creative-arts-figures.csl"
  },
  {
    label: "University of Aberdeen - School of Education - Harvard",
    id: "university-of-aberdeen-school-of-education-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-aberdeen-school-of-education-harvard.csl"
  },
  {
    label: "University of Aleppo - Faculty of Medicine",
    id: "university-of-aleppo-faculty-of-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-aleppo-faculty-of-medicine.csl"
  },
  {
    label: "University of Auckland - History",
    id: "university-of-auckland-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-auckland-history.csl"
  },
  {
    label: "University of Bradford - Harvard",
    id: "university-of-bradford-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-bradford-harvard.csl"
  },
  {
    label: "University of Cambridge - Faculty of History",
    id: "university-of-cambridge-faculty-of-history",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-cambridge-faculty-of-history.csl"
  },
  {
    label: "University of Gothenburg - APA 7th edition (Swedish legislations)",
    id: "university-of-gothenburg-apa-7th-edition-swedish-legislations",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-gothenburg-apa-7th-edition-swedish-legislations.csl"
  },
  {
    label: "University of Gothenburg - APA 6th edition (Swedish legislations)",
    id: "university-of-gothenburg-apa-swedish-legislations",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-gothenburg-apa-swedish-legislations.csl"
  },
  {
    label: "Helsingin yliopisto - Teologinen tiedekunta (Suomi)",
    id: "university-of-helsinki-faculty-of-theology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-helsinki-faculty-of-theology.csl"
  },
  {
    label: "University of Hull Harvard",
    id: "university-of-hull-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-hull-harvard.csl"
  },
  {
    label: "University of Lincoln - Harvard",
    id: "university-of-lincoln-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-lincoln-harvard.csl"
  },
  {
    label: "University of New England, Australia (note)",
    id: "university-of-new-england-australia-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-new-england-australia-note.csl"
  },
  {
    label: "University of Pretoria - Harvard (Theology and Religion)",
    id: "university-of-pretoria-harvard-theology-religion",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-pretoria-harvard-theology-religion.csl"
  },
  {
    label: "University of Roehampton - Harvard",
    id: "university-of-roehampton-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-roehampton-harvard.csl"
  },
  {
    label: "University of South Africa - Harvard",
    id: "university-of-south-africa-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-south-africa-harvard.csl"
  },
  {
    label: "University of South Australia 2017 - Harvard",
    id: "university-of-south-australia-2017-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-south-australia-2017-harvard.csl"
  },
  {
    label: "University of South Australia 2011 - Harvard",
    id: "university-of-south-australia-harvard-2011",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-south-australia-harvard-2011.csl"
  },
  {
    label: "University of South Australia 2013 - Harvard",
    id: "university-of-south-australia-harvard-2013",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-south-australia-harvard-2013.csl"
  },
  {
    label: "University of South Wales - Harvard",
    id: "university-of-south-wales-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-south-wales-harvard.csl"
  },
  {
    label: "University of Tasmania - Simplified Author-date",
    id: "university-of-tasmania-simplified-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-tasmania-simplified-author-date.csl"
  },
  {
    label: "University of York - APA 6th edition",
    id: "university-of-york-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-apa.csl"
  },
  {
    label: "University of York - Chicago Manual of Style 16th edition",
    id: "university-of-york-chicago",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-chicago.csl"
  },
  {
    label: "University of York - Harvard - Archaeology",
    id: "university-of-york-harvard-archaeology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-harvard-archaeology.csl"
  },
  {
    label: "University of York - Harvard - Environment",
    id: "university-of-york-harvard-environment",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-harvard-environment.csl"
  },
  {
    label: "University of York - Harvard",
    id: "university-of-york-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-harvard.csl"
  },
  {
    label: "University of York - IEEE",
    id: "university-of-york-ieee",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-ieee.csl"
  },
  {
    label: "University of York - Modern Humanities Research Association 3rd edition",
    id: "university-of-york-mhra",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-mhra.csl"
  },
  {
    label: "University of York - Modern Language Association 8th edition",
    id: "university-of-york-mla",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-mla.csl"
  },
  {
    label: "University of York - OSCOLA",
    id: "university-of-york-oscola",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-oscola.csl"
  },
  {
    label: "University of York - Vancouver",
    id: "university-of-york-vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-york-vancouver.csl"
  },
  {
    label: "University of Zabol (\u0641\u0627\u0631\u0633\u06CC)",
    id: "university-of-zabol-fa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-zabol-fa.csl"
  },
  {
    label: "University of Zabol (English)",
    id: "university-of-zabol",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/university-of-zabol.csl"
  },
  {
    label: "Univerza na Primorskem - Fakulteta za vede o zdravju - APA (Sloven\u0161\u010Dina)",
    id: "univerza-na-primorskem-fakulteta-za-vede-o-zdravju-apa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/univerza-na-primorskem-fakulteta-za-vede-o-zdravju-apa.csl"
  },
  {
    label: "Uniwersytet im. Adama Mickiewicza w Poznaniu - Wydzia\u0142 Anglistyki (English)",
    id: "uniwersytet-im-adama-mickiewicza-w-poznaniu-wydzial-anglistyki",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uniwersytet-im-adama-mickiewicza-w-poznaniu-wydzial-anglistyki.csl"
  },
  {
    label: "Uniwersytet Kardyna\u0142a Stefana Wyszy\u0144skiego w Warszawie (autor-rok, Polski)",
    id: "uniwersytet-kardynala-stefana-wyszynskiego-w-warszawie-autor-rok",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uniwersytet-kardynala-stefana-wyszynskiego-w-warszawie-autor-rok.csl"
  },
  {
    label: "Uniwersytet Kardyna\u0142a Stefana Wyszy\u0144skiego w Warszawie (przypis, Polski)",
    id: "uniwersytet-kardynala-stefana-wyszynskiego-w-warszawie-przypis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uniwersytet-kardynala-stefana-wyszynskiego-w-warszawie-przypis.csl"
  },
  {
    label: "Uppsala universitet - Historia",
    id: "uppsala-universitet-historia",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uppsala-universitet-historia.csl"
  },
  {
    label: "Uppsala universitet, Institutionen f\xF6r biologisk grundutbildning",
    id: "uppsala-universitet-institutionen-for-biologisk-grundutbildning",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uppsala-universitet-institutionen-for-biologisk-grundutbildning.csl"
  },
  {
    label: "Uppsala University Library - Harvard",
    id: "uppsala-university-library-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uppsala-university-library-harvard.csl"
  },
  {
    label: "Urad RS za makroekonomske analize in razvoj (Sloven\u0161\u010Dina)",
    id: "urad-rs-za-makroekonomske-analize-in-razvoj",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/urad-rs-za-makroekonomske-analize-in-razvoj.csl"
  },
  {
    label: "Urban Geography",
    id: "urban-geography",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/urban-geography.csl"
  },
  {
    label: "Urban Habitats",
    id: "urban-habitats",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/urban-habitats.csl"
  },
  {
    label: "Urban Studies",
    id: "urban-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/urban-studies.csl"
  },
  {
    label: "Urbani izziv (Urban Challenge) (English)",
    id: "urbani-izziv-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/urbani-izziv-en.csl"
  },
  {
    label: "Urbani izziv (Urban Challenge) (Sloven\u0161\u010Dina)",
    id: "urbani-izziv",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/urbani-izziv.csl"
  },
  {
    label: "Urological Science",
    id: "urological-science",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/urological-science.csl"
  },
  {
    label: "U.S. Geological Survey",
    id: "us-geological-survey",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/us-geological-survey.csl"
  },
  {
    label: "USDA Forest Service - Pacific Northwest Research Station",
    id: "usda-forest-service-pacific-northwest-research-station",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/usda-forest-service-pacific-northwest-research-station.csl"
  },
  {
    label: "User Modeling and User-Adapted Interaction",
    id: "user-modeling-and-user-adapted-interaction",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/user-modeling-and-user-adapted-interaction.csl"
  },
  {
    label: "\u0423\u0441\u043F\u0435\u0445\u0438 \u0433\u0435\u0440\u043E\u043D\u0442\u043E\u043B\u043E\u0433\u0438\u0438 (\u0420\u0443\u0301\u0441\u0441\u043A\u0438\u0439)",
    id: "uspekhi-gerontologii",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/uspekhi-gerontologii.csl"
  },
  {
    label: "Utah Geological Survey",
    id: "utah-geological-survey",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/utah-geological-survey.csl"
  },
  {
    label: "Van Y\xFCz\xFCnc\xFC Y\u0131l \xDCniversitesi Fen Bilimleri Enstit\xFCs\xFC - Tez Yaz\u0131m Stili (T\xFCrk\xE7e)",
    id: "van-yuzuncu-yil-universitesi-fen-bilimleri-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/van-yuzuncu-yil-universitesi-fen-bilimleri-enstitusu.csl"
  },
  {
    label: "Vancouver (sorted alphabetically)",
    id: "vancouver-alphabetical",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-alphabetical.csl"
  },
  {
    label: "Vancouver (author-date)",
    id: "vancouver-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-author-date.csl"
  },
  {
    label: 'Vancouver (brackets, no "et al.")',
    id: "vancouver-brackets-no-et-al",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-brackets-no-et-al.csl"
  },
  {
    label: "Vancouver (brackets, only year in date, no issue numbers)",
    id: "vancouver-brackets-only-year-no-issue",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-brackets-only-year-no-issue.csl"
  },
  {
    label: "Vancouver (brackets)",
    id: "vancouver-brackets",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-brackets.csl"
  },
  {
    label: "Vancouver (Fran\xE7ais - Canada)",
    id: "vancouver-fr-ca",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-fr-ca.csl"
  },
  {
    label: "Imperial College London - Vancouver",
    id: "vancouver-imperial-college-london",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-imperial-college-london.csl"
  },
  {
    label: "Vancouver (superscript, brackets, only year in date)",
    id: "vancouver-superscript-brackets-only-year",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-superscript-brackets-only-year.csl"
  },
  {
    label: "Vancouver (superscript, only year in date, no issue numbers)",
    id: "vancouver-superscript-only-year",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-superscript-only-year.csl"
  },
  {
    label: "Vancouver (superscript)",
    id: "vancouver-superscript",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver-superscript.csl"
  },
  {
    label: "Vancouver",
    id: "vancouver",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver.csl"
  },
  {
    label: "Veterinaria Italiana",
    id: "veterinaria-italiana",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinaria-italiana.csl"
  },
  {
    label: "Veterinary Clinical Pathology",
    id: "veterinary-clinical-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinary-clinical-pathology.csl"
  },
  {
    label: "Veterinary Medicine Austria (Wiener Tier\xE4rztliche Monatsschrift)",
    id: "veterinary-medicine-austria",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinary-medicine-austria.csl"
  },
  {
    label: "Veterinary Microbiology",
    id: "veterinary-microbiology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinary-microbiology.csl"
  },
  {
    label: "Veterinary Pathology",
    id: "veterinary-pathology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinary-pathology.csl"
  },
  {
    label: "Veterinary Radiology & Ultrasound",
    id: "veterinary-radiology-and-ultrasound",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinary-radiology-and-ultrasound.csl"
  },
  {
    label: "Veterinary Record Open",
    id: "veterinary-record-open",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinary-record-open.csl"
  },
  {
    label: "Veterinary Record",
    id: "veterinary-record",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/veterinary-record.csl"
  },
  {
    label: "Victoria University - Harvard",
    id: "victoria-university-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/victoria-university-harvard.csl"
  },
  {
    label: "Vienna Legal",
    id: "vienna-legal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vienna-legal.csl"
  },
  {
    label: "Vietnam Ministry of Education and Training (English)",
    id: "vietnam-ministry-of-education-and-training-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vietnam-ministry-of-education-and-training-en.csl"
  },
  {
    label: "Vietnam Ministry of Education and Training (Ti\u1EBFng Vi\u1EC7t)",
    id: "vietnam-ministry-of-education-and-training-vi",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vietnam-ministry-of-education-and-training-vi.csl"
  },
  {
    label: "Vigiliae Christianae",
    id: "vigiliae-christianae",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vigiliae-christianae.csl"
  },
  {
    label: "Vilnius Gediminas Technical University (Lietuvi\u0173 kalba)",
    id: "vilnius-gediminas-technical-university",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vilnius-gediminas-technical-university.csl"
  },
  {
    label: "Vingti\xE8me Si\xE8cle. Revue d'histoire (Fran\xE7ais)",
    id: "vingtieme-siecle",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vingtieme-siecle.csl"
  },
  {
    label: "Vita Latina (auteurs anciens, Fran\xE7ais)",
    id: "vita-latina-auteurs-anciens",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vita-latina-auteurs-anciens.csl"
  },
  {
    label: "Vita Latina (Fran\xE7ais)",
    id: "vita-latina",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vita-latina.csl"
  },
  {
    label: "Vodohospod\xE1\u0159sk\xE9 technicko-ekonomick\xE9 informace (English)",
    id: "vodohospodarske-technicko-ekonomicke-informace-en",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vodohospodarske-technicko-ekonomicke-informace-en.csl"
  },
  {
    label: "Vodohospod\xE1\u0159sk\xE9 technicko-ekonomick\xE9 informace (\u010Ce\u0161tina)",
    id: "vodohospodarske-technicko-ekonomicke-informace",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vodohospodarske-technicko-ekonomicke-informace.csl"
  },
  {
    label: "Vox Sanguinis",
    id: "vox-sanguinis",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/vox-sanguinis.csl"
  },
  {
    label: "Wader Study",
    id: "wader-study",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wader-study.csl"
  },
  {
    label: "Water Alternatives",
    id: "water-alternatives",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/water-alternatives.csl"
  },
  {
    label: "Water Environment Research",
    id: "water-environment-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/water-environment-research.csl"
  },
  {
    label: "Water SA",
    id: "water-sa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/water-sa.csl"
  },
  {
    label: "Water Science & Technology",
    id: "water-science-and-technology",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/water-science-and-technology.csl"
  },
  {
    label: "Waterbirds",
    id: "waterbirds",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/waterbirds.csl"
  },
  {
    label: "Weed Research",
    id: "weed-research",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/weed-research.csl"
  },
  {
    label: "Weed Science Society of America",
    id: "weed-science-society-of-america",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/weed-science-society-of-america.csl"
  },
  {
    label: "West European Politics",
    id: "west-european-politics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/west-european-politics.csl"
  },
  {
    label: "Western Journal of Emergency Medicine",
    id: "western-journal-of-emergency-medicine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/western-journal-of-emergency-medicine.csl"
  },
  {
    label: "Westf\xE4lische Wilhelms-Universit\xE4t M\xFCnster - Medizinische Fakult\xE4t (Deutsch)",
    id: "westfalische-wilhelms-universitat-munster-medizinische-fakultat",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/westfalische-wilhelms-universitat-munster-medizinische-fakultat.csl"
  },
  {
    label: "Wetlands",
    id: "wetlands",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wetlands.csl"
  },
  {
    label: "Wheaton College - Ph.D. in Biblical and Theological Studies",
    id: "wheaton-college-phd-in-biblical-and-theological-studies",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wheaton-college-phd-in-biblical-and-theological-studies.csl"
  },
  {
    label: "WHO Regional Office for Europe - Harvard",
    id: "who-europe-harvard",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/who-europe-harvard.csl"
  },
  {
    label: "WHO Regional Office for Europe (numeric)",
    id: "who-europe-numeric",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/who-europe-numeric.csl"
  },
  {
    label: "Wiesbaden Business School",
    id: "wiesbaden-business-school",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wiesbaden-business-school.csl"
  },
  {
    label: "Wikipedia Templates",
    id: "wikipedia-templates",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wikipedia-templates.csl"
  },
  {
    label: "Wiley-VCH books",
    id: "wiley-vch-books",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wiley-vch-books.csl"
  },
  {
    label: "Wiley Analytical Science",
    id: "wiley-was",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wiley-was.csl"
  },
  {
    label: "Wireless Communications and Mobile Computing",
    id: "wireless-communications-and-mobile-computing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wireless-communications-and-mobile-computing.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien - Abteilung f\xFCr Bildungswissenschaft (Deutsch - \xD6sterreich)",
    id: "wirtschaftsuniversitat-wien-abteilung-fur-bildungswissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-abteilung-fur-bildungswissenschaft.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien (author-date)",
    id: "wirtschaftsuniversitat-wien-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-author-date.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien - Handel und Marketing (Deutsch - \xD6sterreich)",
    id: "wirtschaftsuniversitat-wien-handel-und-marketing",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-handel-und-marketing.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien - Health Care Management",
    id: "wirtschaftsuniversitat-wien-health-care-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-health-care-management.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien - Institut f\xFCr BWL des Au\xDFenhandels (Deutsch - \xD6sterreich)",
    id: "wirtschaftsuniversitat-wien-institut-fur-bwl-des-aussenhandels",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-institut-fur-bwl-des-aussenhandels.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien - Institut f\xFCr Transportwirtschaft und Logistik (Deutsch - \xD6sterreich)",
    id: "wirtschaftsuniversitat-wien-institut-fur-transportwirtschaft-und-logistik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-institut-fur-transportwirtschaft-und-logistik.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien - Unternehmensrechnung und Controlling",
    id: "wirtschaftsuniversitat-wien-unternehmensrechnung-und-controlling",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-unternehmensrechnung-und-controlling.csl"
  },
  {
    label: "Wirtschaftsuniversit\xE4t Wien - Wirtschaftsp\xE4dagogik (Deutsch - \xD6sterreich)",
    id: "wirtschaftsuniversitat-wien-wirtschaftspadagogik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wirtschaftsuniversitat-wien-wirtschaftspadagogik.csl"
  },
  {
    label: "Wissenschaftlicher Industrielogistik-Dialog (Deutsch - \xD6sterreich)",
    id: "wissenschaftlicher-industrielogistik-dialog",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wissenschaftlicher-industrielogistik-dialog.csl"
  },
  {
    label: "Wolters Kluwerbrede Schrijfwijzer (author-date, Nederlands)",
    id: "wolters-kluwerbrede-schrijfwijzer-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/wolters-kluwerbrede-schrijfwijzer-author-date.csl"
  },
  {
    label: "World Applied Sciences Journal",
    id: "world-applied-sciences-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/world-applied-sciences-journal.csl"
  },
  {
    label: "World Congress on Engineering Asset Management 2010",
    id: "world-congress-on-engineering-asset-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/world-congress-on-engineering-asset-management.csl"
  },
  {
    label: "World Mycotoxin Journal",
    id: "world-mycotoxin-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/world-mycotoxin-journal.csl"
  },
  {
    label: "World Organisation for Animal Health - Scientific and Technical Review",
    id: "world-organisation-for-animal-health-scientific-and-technical-review",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/world-organisation-for-animal-health-scientific-and-technical-review.csl"
  },
  {
    label: "World Politics",
    id: "world-politics",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/world-politics.csl"
  },
  {
    label: "World's Poultry Science Journal",
    id: "worlds-poultry-science-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/worlds-poultry-science-journal.csl"
  },
  {
    label: "World's Veterinary Journal",
    id: "worlds-veterinary-journal",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/worlds-veterinary-journal.csl"
  },
  {
    label: "Xenotransplantation",
    id: "xenotransplantation",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/xenotransplantation.csl"
  },
  {
    label: "Yeast",
    id: "yeast",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/yeast.csl"
  },
  {
    label: "Yozgat Bozok \xDCniversitesi - Fen Bilimleri Enstit\xFCs\xFC (T\xFCrk\xE7e)",
    id: "yozgat-bozok-universitesi-fen-bilimleri-enstitusu",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/yozgat-bozok-universitesi-fen-bilimleri-enstitusu.csl"
  },
  {
    label: "Zastosowania Komputer\xF3w w Elektrotechnice",
    id: "zastosowania-komputerow-w-elektrotechnice",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zastosowania-komputerow-w-elektrotechnice.csl"
  },
  {
    label: "ZDfm \u2013 Zeitschrift f\xFCr Diversit\xE4tsforschung und -management (Deutsch - \xD6sterreich)",
    id: "zdfm-zeitschrift-fur-diversitatsforschung-und-management",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zdfm-zeitschrift-fur-diversitatsforschung-und-management.csl"
  },
  {
    label: "Zdravni\u0161ki Vestnik (Slovenian Medical Journal)",
    id: "zdravniski-vestnik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zdravniski-vestnik.csl"
  },
  {
    label: "Zeitgeschichte (Deutsch)",
    id: "zeitgeschichte",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitgeschichte.csl"
  },
  {
    label: "Zeithistorische Forschungen/Studies in Contemporary History",
    id: "zeithistorische-forschungen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeithistorische-forschungen.csl"
  },
  {
    label: "Zeitschrift f\xFCr Allgemeinmedizin",
    id: "zeitschrift-fur-allgemeinmedizin",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-allgemeinmedizin.csl"
  },
  {
    label: "Zeitschrift f\xFCr Antikes Christentum (Journal of Ancient Christianity) (English)",
    id: "zeitschrift-fur-antikes-christentum",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-antikes-christentum.csl"
  },
  {
    label: "Zeitschrift f\xFCr deutsche Philologie (Deutsch)",
    id: "zeitschrift-fur-deutsche-philologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-deutsche-philologie.csl"
  },
  {
    label: "Zeitschrift f\xFCr die Geschichte des Oberrheins (Deutsch)",
    id: "zeitschrift-fur-die-geschichte-des-oberrheins",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-die-geschichte-des-oberrheins.csl"
  },
  {
    label: "Zeitschrift f\xFCr digitale Geisteswissenschaften (Deutsch)",
    id: "zeitschrift-fur-digitale-geisteswissenschaften",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-digitale-geisteswissenschaften.csl"
  },
  {
    label: "Zeitschrift f\xFCr Fantastikforschung (Deutsch)",
    id: "zeitschrift-fur-fantastikforschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-fantastikforschung.csl"
  },
  {
    label: "Zeitschrift f\xFCr Geschichtsdidaktik (Deutsch)",
    id: "zeitschrift-fur-geschichtsdidaktik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-geschichtsdidaktik.csl"
  },
  {
    label: "Zeitschrift f\xFCr Internationale Beziehungen (Deutsch)",
    id: "zeitschrift-fur-internationale-beziehungen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-internationale-beziehungen.csl"
  },
  {
    label: "Zeitschrift f\xFCr Kunstgeschichte",
    id: "zeitschrift-fur-kunstgeschichte",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-kunstgeschichte.csl"
  },
  {
    label: "Zeitschrift f\xFCr Medien- und Kulturforschung (Deutsch)",
    id: "zeitschrift-fur-medien-und-kulturforschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-medien-und-kulturforschung.csl"
  },
  {
    label: "Zeitschrift f\xFCr Medienwissenschaft (Deutsch)",
    id: "zeitschrift-fur-medienwissenschaft",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-medienwissenschaft.csl"
  },
  {
    label: "Zeitschrift f\xFCr Ostmitteleuropa-Forschung (Deutsch)",
    id: "zeitschrift-fur-ostmitteleuropa-forschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-ostmitteleuropa-forschung.csl"
  },
  {
    label: "Zeitschrift f\xFCr P\xE4dagogik (Deutsch)",
    id: "zeitschrift-fur-padagogik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-padagogik.csl"
  },
  {
    label: "Zeitschrift f\xFCr Papyrologie und Epigraphik",
    id: "zeitschrift-fur-papyrologie-und-epigraphik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-papyrologie-und-epigraphik.csl"
  },
  {
    label: "Zeitschrift f\xFCr Parlamentsfragen (Deutsch)",
    id: "zeitschrift-fur-parlamentsfragen",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-parlamentsfragen.csl"
  },
  {
    label: "Zeitschrift f\xFCr Politik (German)",
    id: "zeitschrift-fur-politik",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-politik.csl"
  },
  {
    label: "Zeitschrift f\xFCr Qualitative Forschung (Deutsch)",
    id: "zeitschrift-fur-qualitative-forschung",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-qualitative-forschung.csl"
  },
  {
    label: "Zeitschrift f\xFCr Religionswissenschaft (author-date)",
    id: "zeitschrift-fur-religionswissenschaft-author-date",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-religionswissenschaft-author-date.csl"
  },
  {
    label: "Zeitschrift f\xFCr Religionswissenschaft (note)",
    id: "zeitschrift-fur-religionswissenschaft-note",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-religionswissenschaft-note.csl"
  },
  {
    label: "Zeitschrift f\xFCr Soziologie (Deutsch)",
    id: "zeitschrift-fur-soziologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-soziologie.csl"
  },
  {
    label: "Zeitschrift f\xFCr Theologie und Kirche (Deutsch)",
    id: "zeitschrift-fur-theologie-und-kirche",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-theologie-und-kirche.csl"
  },
  {
    label: "Zeitschrift f\xFCr Theologie und Philosophie",
    id: "zeitschrift-fur-theologie-und-philosophie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-theologie-und-philosophie.csl"
  },
  {
    label: "Zeitschrift f\xFCr Zahn\xE4rztliche Implantologie (Deutsch)",
    id: "zeitschrift-fur-zahnarztliche-implantologie",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeitschrift-fur-zahnarztliche-implantologie.csl"
  },
  {
    label: "Zeszyty Prawnicze BAS (Polski)",
    id: "zeszyty-prawnicze-bas",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zeszyty-prawnicze-bas.csl"
  },
  {
    label: "Zilsel (Fran\xE7ais)",
    id: "zilsel",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zilsel.csl"
  },
  {
    label: "ZitierGuide: Leitfaden zum fachgerechten Zitieren in rechtswissenschaftlichen Arbeiten (Roger M\xFCller) (Deutsch - Schweiz)",
    id: "zitierguide-leitfaden-zum-fachgerechten-zitieren-in-rechtswissenschaftlichen-arbeiten",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zitierguide-leitfaden-zum-fachgerechten-zitieren-in-rechtswissenschaftlichen-arbeiten.csl"
  },
  {
    label: "Zoological Journal of the Linnean Society",
    id: "zoological-journal-of-the-linnean-society",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zoological-journal-of-the-linnean-society.csl"
  },
  {
    label: "Zootaxa",
    id: "zootaxa",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zootaxa.csl"
  },
  {
    label: "Zwitscher-Maschine",
    id: "zwitscher-maschine",
    value: "https://raw.githubusercontent.com/citation-style-language/styles/master/zwitscher-maschine.csl"
  },
  {
    label: "JM ALWD for WU",
    id: "jm-alwd-wu",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-alwd-wu.csl"
  },
  {
    label: "JM AZR (Erstzitat kurz mit Verzeichnissen)",
    id: "jm-azr-erstzitat-kurz-mit-verzeichnissen",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-azr-erstzitat-kurz-mit-verzeichnissen.csl"
  },
  {
    label: "JM AZR",
    id: "jm-azr",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-azr.csl"
  },
  {
    label: "JM Chicago Manual of Style 16th edition (full note) [Nagoya]",
    id: "jm-chicago-fullnote-bibliography-nagoya",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-chicago-fullnote-bibliography-nagoya.csl"
  },
  {
    label: "JM Chicago Manual of Style 16th edition (full note, polyglot)",
    id: "jm-chicago-fullnote-bibliography-polyglot",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-chicago-fullnote-bibliography-polyglot.csl"
  },
  {
    label: "JM Chicago Manual of Style 16th edition (full note)",
    id: "jm-chicago-fullnote-bibliography",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-chicago-fullnote-bibliography.csl"
  },
  {
    label: "JM Chinese Std GB/T 7714-2005 (numeric, Chinese)",
    id: "jm-chinese-gb7714-2005-numeric",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-chinese-gb7714-2005-numeric.csl"
  },
  {
    label: "JM Diritto pubblico comparato ed europeo",
    id: "jm-diritto-pubblico-comparato-ed-europeo",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-diritto-pubblico-comparato-ed-europeo.csl"
  },
  {
    label: "JM Harvard - Australian National University",
    id: "harvard-australian-national-university",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-harvard-australian-national-university.csl"
  },
  {
    label: "JM IBFD Standard Citations and References (with page label)",
    id: "jm-ibfd-with-page-label",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-ibfd-with-page-label.csl"
  },
  {
    label: "JM IBFD Standard Citations and References",
    id: "jm-ibfd",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-ibfd.csl"
  },
  {
    label: "JM Indigo Book Law Review",
    id: "jm-indigobook-law-review",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-indigobook-law-review.csl"
  },
  {
    label: "JM Indigo Book",
    id: "jm-indigobook",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-indigobook.csl"
  },
  {
    label: "\u65E5\u672C\u793E\u4F1A\u5B66\u4F1A (author-date, Japanese)",
    id: "japan-sociological-society",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-japan-sociological-society.csl"
  },
  {
    label: "JM leg cit mit Literaturverzeichnis",
    id: "jm-leg-cit-literaturverzeichnis",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-leg-cit-literaturverzeichnis.csl"
  },
  {
    label: "JM leg cit ohne Verzeichnisse",
    id: "jm-leg-cit-ohne-verzeichnisse",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-leg-cit-ohne-verzeichnisse.csl"
  },
  {
    label: "JM leg cit mit Rechtsquellenverzeichnis und Literaturverzeichnis",
    id: "jm-leg-cit-rechtsquellenverzeichnis-literaturverzeichnis",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-leg-cit-rechtsquellenverzeichnis-literaturverzeichnis.csl"
  },
  {
    label: "JM - Canadian Guide to Uniform Legal Citation (9th edition) / Manuel canadien de la r\xE9f\xE9rence juridique (9\u1D49 \xE9dition)",
    id: "jm-mgcill-v9",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-mcgill-v9.csl"
  },
  {
    label: "JM New Zealand Law Style",
    id: "jm-new-zealand-law",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-new-zealand-law.csl"
  },
  {
    label: "JM OSCOLA - Oxford Standard for Citation of Legal Authorities",
    id: "jm-oscola",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-oscola.csl"
  },
  {
    label: "JM Taylor & Francis - Chicago Manual of Style (author-date)",
    id: "jm-taylor-and-francis-chicago-author-date",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-taylor-and-francis-chicago-author-date.csl"
  },
  {
    label: "JM Turabian 8th edition (full note, EU multilingual)",
    id: "jm-turabian-fullnote-bibliography-eu-multi",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-turabian-fullnote-bibliography-eu-multi.csl"
  },
  {
    label: "JM Turabian 8th edition (full note, Dutch multilingual)",
    id: "jm-turabian-fullnote-bibliography-nl-multi",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-turabian-fullnote-bibliography-nl-multi.csl"
  },
  {
    label: "JM Vis Moot variant 1",
    id: "jm-vis-moot-1",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-vis-moot-1.csl"
  },
  {
    label: "JM Wirtschaftsuniversit\xE4t Wien \u2013 Steuerrecht",
    id: "jm-wirtschaftsuniversitat-wien-steuerrecht",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/jm-wirtschaftsuniversitat-wien-steuerrecht.csl"
  },
  {
    label: "Verwijzingen en Afkortingen (Belgium)",
    id: "juris-eu.int",
    value: "https://raw.githubusercontent.com/Juris-M/jm-styles/master/v-en-a.csl"
  }
];

// src/utils/cslLangList.ts
var cslLangList = [
  {
    value: "af-ZA",
    label: "Afrikaans",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-af-ZA.xml"
  },
  {
    value: "ar",
    label: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-ar.xml"
  },
  {
    value: "bg-BG",
    label: "\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-bg-BG.xml"
  },
  {
    value: "ca-AD",
    label: "Catal\xE0",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-ca-AD.xml"
  },
  {
    value: "cs-CZ",
    label: "\u010Ce\u0161tina",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-cs-CZ.xml"
  },
  {
    value: "cy-GB",
    label: "Cymraeg",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-cy-GB.xml"
  },
  {
    value: "da-DK",
    label: "Dansk",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-da-DK.xml"
  },
  {
    value: "de-AT",
    label: "Deutsch (\xD6sterreich)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-de-AT.xml"
  },
  {
    value: "de-CH",
    label: "Deutsch (Schweiz)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-de-CH.xml"
  },
  {
    value: "de-DE",
    label: "Deutsch (Deutschland)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-de-DE.xml"
  },
  {
    value: "el-GR",
    label: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-el-GR.xml"
  },
  {
    value: "en-GB",
    label: "English (UK)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-en-GB.xml"
  },
  {
    value: "en-US",
    label: "English (US)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-en-US.xml"
  },
  {
    value: "es-CL",
    label: "Espa\xF1ol (Chile)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-es-CL.xml"
  },
  {
    value: "es-ES",
    label: "Espa\xF1ol (Espa\xF1a)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-es-ES.xml"
  },
  {
    value: "es-MX",
    label: "Espa\xF1ol (M\xE9xico)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-es-MX.xml"
  },
  {
    value: "et-EE",
    label: "Eesti keel",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-et-EE.xml"
  },
  {
    value: "eu",
    label: "Euskara",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-eu.xml"
  },
  {
    value: "fa-IR",
    label: "\u0641\u0627\u0631\u0633\u06CC",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-fa-IR.xml"
  },
  {
    value: "fi-FI",
    label: "Suomi",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-fi-FI.xml"
  },
  {
    value: "fr-CA",
    label: "Fran\xE7ais (Canada)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-fr-CA.xml"
  },
  {
    value: "fr-FR",
    label: "Fran\xE7ais (France)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-fr-FR.xml"
  },
  {
    value: "he-IL",
    label: "\u05E2\u05D1\u05E8\u05D9\u05EA",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-he-IL.xml"
  },
  {
    value: "hi-IN",
    label: "\u0939\u093F\u0902\u0926\u0940",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-hi-IN.xml"
  },
  {
    value: "hr-HR",
    label: "Hrvatski",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-hr-HR.xml"
  },
  {
    value: "hu-HU",
    label: "Magyar",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-hu-HU.xml"
  },
  {
    value: "id-ID",
    label: "Bahasa Indonesia",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-id-ID.xml"
  },
  {
    value: "is-IS",
    label: "\xCDslenska",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-is-IS.xml"
  },
  {
    value: "it-IT",
    label: "Italiano",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-it-IT.xml"
  },
  {
    value: "ja-JP",
    label: "\u65E5\u672C\u8A9E",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-ja-JP.xml"
  },
  {
    value: "km-KH",
    label: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-km-KH.xml"
  },
  {
    value: "ko-KR",
    label: "\uD55C\uAD6D\uC5B4",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-ko-KR.xml"
  },
  {
    value: "la",
    label: "Latina",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-la.xml"
  },
  {
    value: "lt-LT",
    label: "Lietuvi\u0173 kalba",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-lt-LT.xml"
  },
  {
    value: "lv-LV",
    label: "Latvie\u0161u",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-lv-LV.xml"
  },
  {
    value: "mn-MN",
    label: "\u041C\u043E\u043D\u0433\u043E\u043B",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-mn-MN.xml"
  },
  {
    value: "nb-NO",
    label: "Norsk bokm\xE5l",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-nb-NO.xml"
  },
  {
    value: "nl-NL",
    label: "Nederlands",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-nl-NL.xml"
  },
  {
    value: "nn-NO",
    label: "Norsk nynorsk",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-nn-NO.xml"
  },
  {
    value: "pl-PL",
    label: "Polski",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-pl-PL.xml"
  },
  {
    value: "pt-BR",
    label: "Portugu\xEAs (Brasil)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-pt-BR.xml"
  },
  {
    value: "pt-PT",
    label: "Portugu\xEAs (Portugal)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-pt-PT.xml"
  },
  {
    value: "ro-RO",
    label: "Rom\xE2n\u0103",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-ro-RO.xml"
  },
  {
    value: "ru-RU",
    label: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-ru-RU.xml"
  },
  {
    value: "sk-SK",
    label: "Sloven\u010Dina",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-sk-SK.xml"
  },
  {
    value: "sl-SI",
    label: "Sloven\u0161\u010Dina",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-sl-SI.xml"
  },
  {
    value: "sr-RS",
    label: "\u0421\u0440\u043F\u0441\u043A\u0438 / Srpski",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-sr-RS.xml"
  },
  {
    value: "sv-SE",
    label: "Svenska",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-sv-SE.xml"
  },
  {
    value: "th-TH",
    label: "\u0E44\u0E17\u0E22",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-th-TH.xml"
  },
  {
    value: "tr-TR",
    label: "T\xFCrk\xE7e",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-tr-TR.xml"
  },
  {
    value: "uk-UA",
    label: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-uk-UA.xml"
  },
  {
    value: "vi-VN",
    label: "Ti\u1EBFng Vi\u1EC7t",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-vi-VN.xml"
  },
  {
    value: "zh-CN",
    label: "\u4E2D\u6587 (\u4E2D\u56FD\u5927\u9646)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-zh-CN.xml"
  },
  {
    value: "zh-TW",
    label: "\u4E2D\u6587 (\u53F0\u7063)",
    url: "https://raw.githubusercontent.com/citation-style-language/locales/master/locales-zh-TW.xml"
  }
];

// src/settings/list-suggest.ts
var FolderSuggest = class extends TextInputSuggest {
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian5.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};
var CSLListSuggest = class extends TextInputSuggest {
  getSuggestions(inputStr) {
    const lowerCaseInputStr = inputStr.toLowerCase();
    const listItem = cslList.filter((item) => item.label.toLowerCase().contains(lowerCaseInputStr));
    return listItem.map((item) => item.label);
  }
  renderSuggestion(item, el) {
    el.setText(item);
  }
  selectSuggestion(item) {
    this.inputEl.value = item;
    this.inputEl.trigger("input");
    this.close();
  }
};
var CSLLocaleSuggest = class extends TextInputSuggest {
  getSuggestions(inputStr) {
    const lowerCaseInputStr = inputStr.toLowerCase();
    const listItem = cslLangList.filter((item) => item.label.toLowerCase().contains(lowerCaseInputStr));
    return listItem.map((item) => item.label);
  }
  renderSuggestion(item, el) {
    el.setText(item);
  }
  selectSuggestion(item) {
    this.inputEl.value = item;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/settings/settings.tsx
var ReferenceMapSettingTab = class extends import_obsidian7.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    __publicField(this, "plugin");
    __publicField(this, "citationPathLoadingEl");
    __publicField(this, "citationPathErrorEl");
    __publicField(this, "citationPathSuccessEl");
    __publicField(this, "warningEl");
    this.plugin = plugin;
    this.citationPathLoadingEl = document.createElement("div");
    this.citationPathErrorEl = document.createElement("div");
    this.citationPathSuccessEl = document.createElement("div");
    this.warningEl = document.createElement("div");
    this.warningEl.addClass("orm-Warning");
  }
  async checkCitationExportPath(filePath) {
    this.citationPathLoadingEl.addClass("d-none");
    if (filePath.endsWith(".json") || filePath.endsWith(".bib")) {
      try {
        await import_obsidian7.FileSystemAdapter.readLocalFile(resolvePath(filePath, this.app));
        this.citationPathErrorEl.addClass("d-none");
      } catch (e) {
        this.citationPathSuccessEl.addClass("d-none");
        this.citationPathErrorEl.removeClass("d-none");
        return false;
      }
    } else {
      this.citationPathSuccessEl.addClass("d-none");
      this.citationPathErrorEl.removeClass("d-none");
      return false;
    }
    return true;
  }
  showCitationExportPathSuccess() {
    var _a;
    if (!((_a = this.plugin.view) == null ? void 0 : _a.referenceMapData.library.active))
      return;
    this.citationPathSuccessEl.setText(`Successfully Loaded Library Containing References.`);
    this.citationPathSuccessEl.removeClass("d-none");
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: t2("GENERAL_SETTINGS") });
    new import_obsidian7.Setting(containerEl).setName(t2("HIDE_SHOW_ABSTRACT")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showAbstract).onChange(async (value) => {
      this.plugin.settings.showAbstract = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    let truncateLength;
    if (this.plugin.settings.showAbstract) {
      new import_obsidian7.Setting(containerEl).setName(t2("ABSTRACT_TRUNCATE_LENGTH")).setDesc(fragWithHTML(t2("ABSTRACT_TRUNCATE_LENGTH_DESC"))).addSlider((slider) => slider.setLimits(0, 1e3, 20).setValue(this.plugin.settings.abstractTruncateLength).onChange(async (value) => {
        truncateLength.innerText = ` ${value.toString()}`;
        this.plugin.settings.abstractTruncateLength = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      })).settingEl.createDiv("", (el) => {
        truncateLength = el;
        el.style.minWidth = "2.3em";
        el.style.textAlign = "right";
        el.innerText = ` ${this.plugin.settings.abstractTruncateLength.toString()}`;
      });
    }
    new import_obsidian7.Setting(containerEl).setName(t2("HIDE_SHOW_AUTHORS")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showAuthors).onChange(async (value) => {
      this.plugin.settings.showAuthors = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian7.Setting(containerEl).setName(t2("HIDE_SHOW_JOURNAL")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showJournal).onChange(async (value) => {
      this.plugin.settings.showJournal = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian7.Setting(containerEl).setName(t2("HIDE_SHOW_INFLUENTIAL_COUNT")).addToggle((toggle) => toggle.setValue(this.plugin.settings.influentialCount).onChange(async (value) => {
      this.plugin.settings.influentialCount = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian7.Setting(containerEl).setName(t2("HIDE_SHOW_BUTTONS_ON_HOVER")).addToggle((toggle) => toggle.setValue(this.plugin.settings.hideButtonsOnHover).onChange(async (value) => {
      this.plugin.settings.hideButtonsOnHover = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian7.Setting(containerEl).setName(t2("LOOKUP_ENTRIES_LINKED_FILES")).addToggle((toggle) => toggle.setValue(this.plugin.settings.lookupLinkedFiles).onChange(async (value) => {
      this.plugin.settings.lookupLinkedFiles = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian7.Setting(containerEl).setName(t2("ENABLE_SORTING_INDEX_CARDS")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableIndexSorting).onChange(async (value) => {
      this.plugin.settings.enableIndexSorting = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    if (this.plugin.settings.enableIndexSorting) {
      new import_obsidian7.Setting(containerEl).setName(t2("SORT_BY")).addDropdown((dropdown) => dropdown.addOption("year", t2("SORT_BY_YEAR")).addOption("citationCount", t2("SORT_BY_CITATION_COUNT")).addOption("referenceCount", t2("SORT_BY_REFERENCE_COUNT")).addOption("influentialCitationCount", t2("SORT_BY_INFLUENTIAL_CITATION_COUNT")).setValue(this.plugin.settings.sortByIndex).onChange(async (value) => {
        this.plugin.settings.sortByIndex = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian7.Setting(containerEl).setName(t2("SORT_ORDER")).addDropdown((dropdown) => dropdown.addOption("desc", t2("SORT_ORDER_DESC")).addOption("asc", t2("SORT_ORDER_ASC")).setValue(this.plugin.settings.sortOrderIndex).onChange(async (value) => {
        this.plugin.settings.sortOrderIndex = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
    }
    new import_obsidian7.Setting(containerEl).setName(t2("ENABLE_SORTING_REFERENCE_CARDS")).addToggle((toggle) => toggle.setValue(this.plugin.settings.enableReferenceSorting).onChange(async (value) => {
      this.plugin.settings.enableReferenceSorting = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    if (this.plugin.settings.enableReferenceSorting) {
      new import_obsidian7.Setting(containerEl).setName(t2("SORT_BY")).addDropdown((dropdown) => dropdown.addOption("year", t2("SORT_BY_YEAR")).addOption("citationCount", t2("SORT_BY_CITATION_COUNT")).addOption("referenceCount", t2("SORT_BY_REFERENCE_COUNT")).addOption("influentialCitationCount", t2("SORT_BY_INFLUENTIAL_CITATION_COUNT")).setValue(this.plugin.settings.sortByReference).onChange(async (value) => {
        this.plugin.settings.sortByReference = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian7.Setting(containerEl).setName(t2("SORT_ORDER")).addDropdown((dropdown) => dropdown.addOption("desc", t2("SORT_ORDER_DESC")).addOption("asc", t2("SORT_ORDER_ASC")).setValue(this.plugin.settings.sortOrderReference).onChange(async (value) => {
        this.plugin.settings.sortOrderReference = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
    }
    new import_obsidian7.Setting(this.containerEl).setName("Citation style ").addSearch((cb) => {
      new CSLListSuggest(this.app, cb.inputEl);
      cb.setPlaceholder("CSL Style: style-name").setValue(this.plugin.settings.cslStyle).onChange((0, import_obsidian6.debounce)((style) => {
        this.plugin.settings.cslStyle = style;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view) {
            this.plugin.referenceMapData.loadCache();
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
          }
        });
      }, 300));
      cb.containerEl.addClass("orm-csl-search");
    });
    new import_obsidian7.Setting(this.containerEl).setName("Citation language").addSearch((cb) => {
      new CSLLocaleSuggest(this.app, cb.inputEl);
      cb.setPlaceholder("CSL Style Locale: locale-name").setValue(this.plugin.settings.cslLocale).onChange((0, import_obsidian6.debounce)((style) => {
        this.plugin.settings.cslLocale = style;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view) {
            this.plugin.referenceMapData.loadCache();
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
          }
        });
      }, 300));
      cb.containerEl.addClass("orm-csl-search");
    });
    containerEl.createEl("h2", { text: "Static List Settings" });
    new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("SEARCH_CITEKEY"))).setDesc(fragWithHTML(t2("SEARCH_CITEKEY_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.searchCiteKey).onChange(async (value) => {
      this.plugin.settings.searchCiteKey = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.HARD);
      });
      this.display();
    }));
    if (this.plugin.settings.searchCiteKey) {
      new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("SEARCH_CITEKEY_PATH"))).setDesc(fragWithHTML(t2("SEARCH_CITEKEY_PATH_DESC"))).addText((text) => {
        text.setValue(this.plugin.settings.searchCiteKeyPath).onChange(async (value) => {
          this.checkCitationExportPath(value).then((success) => {
            if (success) {
              this.showCitationExportPathSuccess();
              this.plugin.settings.searchCiteKeyPath = value;
              this.plugin.saveSettings().then(() => {
                if (this.plugin.view)
                  this.plugin.referenceMapData.reload(RELOAD.SOFT);
              });
            }
          });
        });
      });
      this.citationPathLoadingEl = containerEl.createEl("p", {
        cls: "orm-PathLoading d-none",
        text: "Loading citation database..."
      });
      this.citationPathErrorEl = containerEl.createEl("p", {
        cls: "orm-PathError d-none",
        text: fragWithHTML(t2("CITEKEY_PATH_ERROR"))
      });
      this.citationPathSuccessEl = containerEl.createEl("p", {
        cls: "orm-PathSuccess d-none",
        text: "Successfully Loaded Library Containing References."
      });
      new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("AUTO_DETECT_UPDATE_TO_CITEKEY"))).setDesc(fragWithHTML(t2("AUTO_DETECT_UPDATE_TO_CITEKEY_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.autoUpdateCitekeyFile).onChange(async (value) => {
        this.plugin.settings.autoUpdateCitekeyFile = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
      containerEl.createDiv("setting-item orm-setting-item-wrapper", (el) => {
        (0, import_client.createRoot)(el).render(/* @__PURE__ */ import_react7.default.createElement(ZoteroPullSetting, {
          plugin: this.plugin
        }));
      });
      new import_obsidian7.Setting(containerEl).setName(t2("CITEKEY_ZOTERO_LINK")).setDesc(fragWithHTML(t2("CITEKEY_ZOTERO_LINK_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.linkCiteKey).onChange(async (value) => {
        this.plugin.settings.linkCiteKey = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian7.Setting(containerEl).setName(t2("FIND_ZOTERO_CITEKEY_FROM_ID")).setDesc(fragWithHTML(t2("FIND_ZOTERO_CITEKEY_FROM_ID_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.findZoteroCiteKeyFromID).onChange(async (value) => {
        this.plugin.settings.findZoteroCiteKeyFromID = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("FIND_CITEKEY_WITHOUT_PREFIX"))).setDesc(fragWithHTML(t2("FIND_CITEKEY_WITHOUT_PREFIX_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.findCiteKeyFromLinksWithoutPrefix).onChange(async (value) => {
        this.plugin.settings.findCiteKeyFromLinksWithoutPrefix = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
    }
    containerEl.createEl("h2", { text: "Buttons Settings" });
    containerEl.createDiv("setting-item orm-setting-item-wrapper", (el) => {
      (0, import_client.createRoot)(el).render(/* @__PURE__ */ import_react7.default.createElement(ButtonSettings, {
        plugin: this.plugin
      }));
    });
    containerEl.createEl("h2", { text: "Search Settings" });
    let zoomText;
    new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("MODAL_SEARCH_LIMIT"))).setDesc(fragWithHTML(t2("MODAL_SEARCH_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(1, 100, 1).setValue(this.plugin.settings.modalSearchLimit).onChange(async (value) => {
      zoomText.innerText = ` ${value.toString()}`;
      this.plugin.settings.modalSearchLimit = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
    })).settingEl.createDiv("", (el) => {
      zoomText = el;
      el.style.minWidth = "2.3em";
      el.style.textAlign = "right";
      el.innerText = ` ${this.plugin.settings.modalSearchLimit.toString()}`;
    });
    new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("MODAL_SEARCH_CREATE_FOLDER"))).setDesc(fragWithHTML(t2("MODAL_SEARCH_CREATE_FOLDER_DESC"))).addSearch((cb) => {
      new FolderSuggest(this.app, cb.inputEl);
      cb.setPlaceholder("Folder Name: folder/subfolder").setValue(this.plugin.settings.folder).onChange((folder) => {
        this.plugin.settings.folder = folder;
        this.plugin.saveSettings();
      });
      cb.containerEl.addClass("orm-csl-search");
    });
    new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("MODAL_SEARCH_CREATE_FILE_FORMAT"))).setDesc(fragWithHTML(t2("MODAL_SEARCH_CREATE_FILE_FORMAT_DESC"))).addText((text) => text.setValue(this.plugin.settings.fileNameFormat).onChange(async (value) => {
      this.plugin.settings.fileNameFormat = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("MODAL_SEARCH_CREATE_FILE_TEMPLATE"))).setDesc(fragWithHTML(t2("MODAL_SEARCH_CREATE_FILE_TEMPLATE_DESC"))).addTextArea((text) => {
      text.inputEl.rows = 7;
      text.setValue(this.plugin.settings.modalCreateTemplate).onChange(async (value) => {
        this.plugin.settings.modalCreateTemplate = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("MODAL_SEARCH_INSERT_TEMPLATE"))).setDesc(fragWithHTML(t2("MODAL_SEARCH_INSERT_TEMPLATE_DESC"))).addTextArea((text) => {
      text.inputEl.rows = 7;
      text.setValue(this.plugin.settings.modalInsertTemplate).onChange(async (value) => {
        this.plugin.settings.modalInsertTemplate = value;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "Misc" });
    let citedMaxLimit;
    new import_obsidian7.Setting(containerEl).setName(t2("CITED_MAX_LIMIT")).setDesc(fragWithHTML(t2("CITED_MAX_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(50, 1e3, 50).setValue(this.plugin.settings.citedLimit).onChange(async (value) => {
      citedMaxLimit.innerText = ` ${value.toString()}`;
      this.plugin.settings.citedLimit = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.SOFT);
      });
    })).settingEl.createDiv("", (el) => {
      citedMaxLimit = el;
      el.style.minWidth = "2.3em";
      el.style.textAlign = "right";
      el.innerText = ` ${this.plugin.settings.citedLimit.toString()}`;
    });
    this.warningEl = containerEl.createEl("p", {
      cls: "orm-Warning",
      text: "WARNING: Increasing this value may substantially slowdown rendering and therefore performance of Obsidian itself for documents containing large number of citations."
    });
    let citingMaxLimit;
    new import_obsidian7.Setting(containerEl).setName(t2("CITING_MAX_LIMIT")).setDesc(fragWithHTML(t2("CITING_MAX_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(50, 1e3, 50).setValue(this.plugin.settings.citingLimit).onChange(async (value) => {
      citingMaxLimit.innerText = ` ${value.toString()}`;
      this.plugin.settings.citingLimit = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.SOFT);
      });
    })).settingEl.createDiv("", (el) => {
      citingMaxLimit = el;
      el.style.minWidth = "2.3em";
      el.style.textAlign = "right";
      el.innerText = ` ${this.plugin.settings.citingLimit.toString()}`;
    });
    this.warningEl = containerEl.createEl("p", {
      cls: "orm-Warning",
      text: "WARNING: Increasing this value may substantially slowdown rendering and therefore performance of Obsidian itself for documents containing large number of citations."
    });
    new import_obsidian7.Setting(containerEl).setName(t2("HIDE_SHOW_REDUNDANT_REFERENCES")).setDesc(fragWithHTML(t2("HIDE_SHOW_REDUNDANT_REFERENCES_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.filterRedundantReferences).onChange(async (value) => {
      this.plugin.settings.filterRedundantReferences = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
    }));
    new import_obsidian7.Setting(containerEl).setName(t2("SEARCH_TITLE")).setDesc(fragWithHTML(t2("SEARCH_TITLE_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.searchTitle).onChange(async (value) => {
      this.plugin.settings.searchTitle = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    let zoomText2;
    if (this.plugin.settings.searchTitle) {
      new import_obsidian7.Setting(containerEl).setName(t2("SEARCH_LIMIT")).setDesc(fragWithHTML(t2("SEARCH_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.searchLimit).onChange(async (value) => {
        zoomText2.innerText = ` ${value.toString()}`;
        this.plugin.settings.searchLimit = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      })).settingEl.createDiv("", (el) => {
        zoomText2 = el;
        el.style.minWidth = "2.3em";
        el.style.textAlign = "right";
        el.innerText = ` ${this.plugin.settings.searchLimit.toString()}`;
      });
    }
    new import_obsidian7.Setting(containerEl).setName(t2("SEARCH_FRONT_MATTER")).setDesc(fragWithHTML(t2("SEARCH_FRONT_MATTER_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.searchFrontMatter).onChange(async (value) => {
      this.plugin.settings.searchFrontMatter = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.VIEW);
      });
      this.display();
    }));
    let zoomText3;
    if (this.plugin.settings.searchFrontMatter) {
      new import_obsidian7.Setting(containerEl).setName(t2("SEARCH_FRONT_MATTER_KEY")).setDesc(fragWithHTML(t2("SEARCH_FRONT_MATTER_KEY_DESC"))).addText((text) => text.setValue(this.plugin.settings.searchFrontMatterKey).onChange(async (value) => {
        this.plugin.settings.searchFrontMatterKey = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      }));
      new import_obsidian7.Setting(containerEl).setName(t2("SEARCH_FRONT_MATTER_LIMIT")).setDesc(fragWithHTML(t2("SEARCH_FRONT_MATTER_LIMIT_DESC"))).addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.searchFrontMatterLimit).onChange(async (value) => {
        zoomText3.innerText = ` ${value.toString()}`;
        this.plugin.settings.searchFrontMatterLimit = value;
        this.plugin.saveSettings().then(() => {
          if (this.plugin.view)
            this.plugin.referenceMapData.reload(RELOAD.VIEW);
        });
      })).settingEl.createDiv("", (el) => {
        zoomText3 = el;
        el.style.minWidth = "2.3em";
        el.style.textAlign = "right";
        el.innerText = ` ${this.plugin.settings.searchFrontMatterLimit.toString()}`;
      });
    }
    new import_obsidian7.Setting(containerEl).setName(fragWithHTML(t2("DEBUG_MODE"))).setDesc(fragWithHTML(t2("DEBUG_MODE_DESC"))).addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
      this.plugin.settings.debugMode = value;
      this.plugin.saveSettings().then(() => {
        if (this.plugin.view)
          this.plugin.referenceMapData.reload(RELOAD.SOFT);
      });
    }));
    containerEl.createEl("hr");
    containerEl.createEl("h2", { text: t2("SEE_DOCUMENTATION") });
    containerEl.createEl("p", {
      text: fragWithHTML(t2("SEE_DOCUMENTATION_DESC"))
    });
  }
};

// src/promise.ts
var PromiseCapability = class {
  constructor() {
    __publicField(this, "settled", false);
    __publicField(this, "promise");
    __publicField(this, "resolve");
    __publicField(this, "reject");
    this.promise = new Promise((resolve, reject) => {
      this.resolve = (data) => {
        resolve(data);
        this.settled = true;
      };
      this.reject = (reason) => {
        reject(reason);
        this.settled = true;
      };
    });
  }
};

// src/sidebar/SidebarView.tsx
var import_react16 = __toESM(require_react());
var import_client2 = __toESM(require_client());
var import_obsidian9 = require("obsidian");

// src/context.tsx
var import_react8 = __toESM(require_react());
var AppContext = (0, import_react8.createContext)(void 0);

// src/events.ts
var import_obsidian8 = require("obsidian");
var EVENTS = {
  SELECTION: "orm-editor-selection",
  UPDATE: "orm-index-update"
};
var EventBus = class extends import_obsidian8.Events {
  constructor() {
    super();
  }
};
var events_default = new EventBus();

// src/sidebar/ReferenceMapList.tsx
var import_react15 = __toESM(require_react());

// src/components/IndexPaperCard.tsx
var import_react14 = __toESM(require_react());

// src/components/PaperList.tsx
var import_react12 = __toESM(require_react());

// src/components/PaperCard.tsx
var import_react11 = __toESM(require_react());

// src/components/PaperHeading.tsx
var import_react9 = __toESM(require_react());
var PaperHeading = ({ paper, settings }) => {
  var _a, _b;
  const { authors, directors, editors, title, year, abstract, paperId, url } = paper.paper;
  const authorID = (_a = authors == null ? void 0 : authors[0]) == null ? void 0 : _a.authorId;
  const isCitekey = (_b = paper == null ? void 0 : paper.id) == null ? void 0 : _b.includes("@");
  const showCitekey = settings.linkCiteKey && isCitekey;
  const isLocal = paper.isLocal;
  const splitTitle = splitString(title, 20);
  const splitAbstract = splitString(abstract, 20);
  const Title = () => {
    let formatTitle = /* @__PURE__ */ import_react9.default.createElement("span", {
      className: "orm-paper-title orm-paper-title-disabled"
    }, paper.location && !settings.lookupLinkedFiles && /* @__PURE__ */ import_react9.default.createElement("span", {
      className: "orm-paper-tag"
    }, paper.location), " " + (splitTitle || "Unknown Title") + " ");
    if (!isLocal) {
      formatTitle = /* @__PURE__ */ import_react9.default.createElement("a", {
        href: `${SEMANTIC_SCHOLAR_URL}/paper/${paperId}`
      }, paper.location && !settings.lookupLinkedFiles && /* @__PURE__ */ import_react9.default.createElement("span", {
        className: "orm-paper-tag"
      }, paper.location), " " + (splitTitle || "Unknown Title") + " ");
    } else if (url) {
      formatTitle = /* @__PURE__ */ import_react9.default.createElement("span", {
        className: "orm-paper-title"
      }, /* @__PURE__ */ import_react9.default.createElement("a", {
        href: url
      }, paper.location && !settings.lookupLinkedFiles && /* @__PURE__ */ import_react9.default.createElement("span", {
        className: "orm-paper-tag"
      }, paper.location), " " + (splitTitle || "Unknown Title") + " "));
    }
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "orm-paper-title"
    }, formatTitle);
  };
  const Abstract = () => {
    const className = isLocal ? "orm-paper-abstract orm-paper-abstract-disabled" : "orm-paper-abstract";
    let truncatedAbstract = splitAbstract;
    if (settings.abstractTruncateLength > 0 && truncatedAbstract.length > settings.abstractTruncateLength) {
      truncatedAbstract = splitAbstract.slice(0, settings.abstractTruncateLength) + " ...";
    }
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className
    }, " " + (truncatedAbstract || "") + " ");
  };
  const Authors = (all = false) => {
    var _a2;
    if (isLocal) {
      if (!all) {
        return /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "orm-paper-authors orm-paper-authors-disabled"
        }, (authors && authors.length > 0 ? authors[0].name : "") + " ", (directors && directors.length > 0 ? directors[0].name : "") + " ", (editors && editors.length > 0 ? editors[0].name : "") + " ", year);
      } else {
        return /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "orm-paper-authors orm-paper-authors-disabled"
        }, (authors || []).map((author) => author.name).join(", ") + " ", (directors || []).map((director) => director.name).join(", ") + " ", (editors || []).map((editor) => editor.name).join(", ") + " ", year);
      }
    } else {
      if (!all) {
        return /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "orm-paper-authors"
        }, /* @__PURE__ */ import_react9.default.createElement("a", {
          href: `${SEMANTIC_SCHOLAR_URL}/author/${authorID}`
        }, (((_a2 = authors == null ? void 0 : authors[0]) == null ? void 0 : _a2.name) || "Unknown Author") + " " + year));
      } else {
        return /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "orm-paper-authors"
        }, /* @__PURE__ */ import_react9.default.createElement("a", {
          href: `${SEMANTIC_SCHOLAR_URL}/author/${authorID}`
        }, (authors || []).map((author) => author.name).join(", ") + " " + year));
      }
    }
  };
  const Journal = () => {
    var _a2, _b2, _c;
    const className = "orm-paper-journal orm-paper-journal-disabled";
    const journalParts = [
      (_a2 = paper.paper.journal) == null ? void 0 : _a2.name,
      (_b2 = paper.paper.journal) == null ? void 0 : _b2.volume,
      (_c = paper.paper.journal) == null ? void 0 : _c.pages
    ];
    const journal = journalParts.filter(Boolean).join(", ");
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className
    }, journal);
  };
  const CardTags = () => {
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "orm-paper-tags"
    }, showCitekey && /* @__PURE__ */ import_react9.default.createElement("span", {
      className: "orm-paper-tag"
    }, /* @__PURE__ */ import_react9.default.createElement("a", {
      href: `zotero://select/items/${paper == null ? void 0 : paper.id}`
    }, paper == null ? void 0 : paper.id)), paper.paper.publicationTypes && paper.paper.publicationTypes.map((type2, index6) => /* @__PURE__ */ import_react9.default.createElement("span", {
      key: `z${index6}`,
      className: "orm-paper-tag"
    }, type2)), isLocal && paper.paper.type && /* @__PURE__ */ import_react9.default.createElement("span", {
      className: "orm-paper-tag"
    }, paper.paper.type));
  };
  return /* @__PURE__ */ import_react9.default.createElement("div", {
    className: "orm-paper-heading"
  }, /* @__PURE__ */ import_react9.default.createElement(Title, null), settings.showAuthors && Authors(true), !settings.showAuthors && Authors(), settings.showJournal && /* @__PURE__ */ import_react9.default.createElement(Journal, null), settings.showAbstract && /* @__PURE__ */ import_react9.default.createElement(Abstract, null), /* @__PURE__ */ import_react9.default.createElement(CardTags, null));
};

// src/components/PaperButtons.tsx
var import_react10 = __toESM(require_react());
var PaperButtons = ({
  settings,
  paper,
  showCountButtons = true,
  setShowReferences = void 0,
  showReferences = false,
  setShowCitations = void 0,
  showCitations = false,
  setIsButtonShown = void 0,
  isButtonShown = false,
  batchCopyMetadataOne = "",
  batchCopyMetadataTwo = "",
  batchCopyMetadataThree = ""
}) => {
  var _a;
  const metadataTemplateOne = settings.formatMetadataCopyOne ? settings.metadataCopyTemplateOne : METADATA_COPY_TEMPLATE_ONE;
  const metadataTemplateTwo = settings.formatMetadataCopyTwo ? settings.metadataCopyTemplateTwo : METADATA_COPY_TEMPLATE_TWO;
  const metadataTemplateThree = settings.formatMetadataCopyThree ? settings.metadataCopyTemplateThree : METADATA_COPY_TEMPLATE_THREE;
  const metaData = makeMetaData(paper);
  let copyMetadataOne = "";
  let copyMetadataTwo = "";
  let copyMetadataThree = "";
  if (settings.formatMetadataCopyOne) {
    settings.metadataCopyOneBatch && batchCopyMetadataOne ? copyMetadataOne = batchCopyMetadataOne : copyMetadataOne = templateReplace(metadataTemplateOne, metaData, paper.id);
  }
  if (settings.formatMetadataCopyTwo) {
    settings.metadataCopyTwoBatch && batchCopyMetadataTwo ? copyMetadataTwo = batchCopyMetadataTwo : copyMetadataTwo = templateReplace(metadataTemplateTwo, metaData, paper.id);
  }
  if (settings.formatMetadataCopyThree) {
    settings.metadataCopyThreeBatch && batchCopyMetadataThree ? copyMetadataThree = batchCopyMetadataThree : copyMetadataThree = templateReplace(metadataTemplateThree, metaData, paper.id);
  }
  let citingCited = null;
  const isReferenceCount = metaData.referenceCount > 0;
  const isCitationCount = metaData.citationCount > 0;
  const handleShowReferencesClick = () => {
    if (setShowReferences && setShowCitations && setIsButtonShown) {
      setShowReferences(!showReferences);
      setShowCitations(false);
      if (showReferences || showCitations) {
        setIsButtonShown(true);
      }
    }
  };
  const handleShowCitationsClick = () => {
    if (setShowCitations && setShowReferences && setIsButtonShown) {
      setShowCitations(!showCitations);
      setShowReferences(false);
      if (showReferences || showCitations) {
        setIsButtonShown(true);
      }
    }
  };
  const renderButton = (showCondition, clickHandler, count, className, isEnabled) => /* @__PURE__ */ import_react10.default.createElement("div", {
    className: isEnabled ? className : "orm-button-disabled",
    style: showCondition && isEnabled ? {
      fontWeight: "bold",
      color: "var(--text-accent)"
    } : {},
    onClick: isEnabled ? clickHandler : null
  }, count);
  citingCited = /* @__PURE__ */ import_react10.default.createElement(import_react10.default.Fragment, null, !paper.isLocal && /* @__PURE__ */ import_react10.default.createElement(import_react10.default.Fragment, null, renderButton(showReferences, handleShowReferencesClick, metaData.referenceCount, "orm-button-references", isReferenceCount && showCountButtons), renderButton(showCitations, handleShowCitationsClick, metaData.citationCount, "orm-button-citations", isCitationCount && showCountButtons), settings.influentialCount && /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-button-disabled"
  }, metaData.influentialCount)), paper.isLocal && /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-is-local orm-button-disabled"
  }, "Local Library"));
  return /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-paper-buttons"
  }, settings.formatMetadataCopyOne && /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-copy-metadata-one",
    onClick: () => {
      copyToClipboard(copyMetadataOne);
    }
  }, /* @__PURE__ */ import_react10.default.createElement(CopyIconOne, null)), settings.formatMetadataCopyTwo && /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-copy-metadata-two",
    onClick: () => {
      copyToClipboard(copyMetadataTwo);
    }
  }, /* @__PURE__ */ import_react10.default.createElement(CopyIconTwo, null)), settings.formatMetadataCopyThree && /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-copy-metadata-three",
    onClick: () => {
      copyToClipboard(copyMetadataThree);
    }
  }, /* @__PURE__ */ import_react10.default.createElement(CopyIconThree, null)), ((_a = paper.paper) == null ? void 0 : _a.isOpenAccess) ? /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-openaccess"
  }, /* @__PURE__ */ import_react10.default.createElement("a", {
    href: `${metaData.pdfurl}`
  }, /* @__PURE__ */ import_react10.default.createElement(OpenAccessIcon, null))) : /* @__PURE__ */ import_react10.default.createElement("div", {
    className: "orm-button-disable"
  }, /* @__PURE__ */ import_react10.default.createElement(OpenAccessIcon, null)), citingCited);
};

// src/components/PaperCard.tsx
var PaperCard = (props) => {
  const paper = props.paper;
  const [isButtonShown, setIsButtonShown] = (0, import_react11.useState)(!props.settings.hideButtonsOnHover);
  const handleHoverButtons = (isShow) => {
    props.settings.hideButtonsOnHover ? setIsButtonShown(isShow) : setIsButtonShown(true);
  };
  return /* @__PURE__ */ import_react11.default.createElement("div", {
    className: "orm-paper-card",
    onMouseEnter: () => handleHoverButtons(true),
    onMouseLeave: () => handleHoverButtons(false)
  }, /* @__PURE__ */ import_react11.default.createElement(PaperHeading, {
    paper,
    settings: props.settings
  }), (isButtonShown || props.showCountButtons) && /* @__PURE__ */ import_react11.default.createElement(PaperButtons, {
    settings: props.settings,
    paper,
    showCountButtons: props.showCountButtons
  }));
};

// src/components/PaperList.tsx
var PaperList = ({ papers, settings, type: type2 }) => {
  const [query, setQuery] = (0, import_react12.useState)("");
  const sortedPapers = settings.enableReferenceSorting ? dataSort(papers, settings.sortByReference, settings.sortOrderReference) : papers;
  const paperList = dataSearch(sortedPapers, query).map((paper, index6) => /* @__PURE__ */ import_react12.default.createElement(PaperCard, {
    key: `${paper.paperId}-${index6}`,
    paper: { id: paper.paperId, location: null, paper },
    settings,
    showCountButtons: false
  }));
  return /* @__PURE__ */ import_react12.default.createElement("div", {
    className: "orm-paper-list"
  }, /* @__PURE__ */ import_react12.default.createElement("div", {
    className: "orm-paper-list-buttons"
  }, /* @__PURE__ */ import_react12.default.createElement("div", {
    className: "orm-search-form"
  }, /* @__PURE__ */ import_react12.default.createElement("div", {
    className: "index-search"
  }, /* @__PURE__ */ import_react12.default.createElement("input", {
    type: "search",
    className: "orm-search-input",
    placeholder: type2,
    onChange: (e) => setQuery(e.target.value),
    style: { padding: "0 30px 0 30px" }
  }), /* @__PURE__ */ import_react12.default.createElement("div", {
    className: "search-icon"
  }, /* @__PURE__ */ import_react12.default.createElement(SearchIcon, null))))), paperList);
};

// src/components/LoadingPuff.tsx
var import_react13 = __toESM(require_react());
var LoadingPuff = () => {
  return /* @__PURE__ */ import_react13.default.createElement("div", {
    className: "orm-loading-puff"
  }, /* @__PURE__ */ import_react13.default.createElement("svg", {
    viewBox: "0 0 40 2",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ import_react13.default.createElement("circle", {
    fill: "var(--orm-paper-buttons-hover-color)",
    stroke: "none",
    cx: "18",
    cy: "1",
    r: "0.15"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "opacity",
    dur: "2s",
    values: "0;1;0",
    repeatCount: "indefinite",
    begin: "0.1"
  })), /* @__PURE__ */ import_react13.default.createElement("circle", {
    fill: "var(--orm-paper-buttons-hover-color)",
    stroke: "none",
    cx: "20",
    cy: "1",
    r: "0.15"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "opacity",
    dur: "2s",
    values: "0;1;0",
    repeatCount: "indefinite",
    begin: "0.4"
  })), /* @__PURE__ */ import_react13.default.createElement("circle", {
    fill: "var(--orm-paper-buttons-hover-color)",
    stroke: "none",
    cx: "22",
    cy: "1",
    r: "0.15"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "opacity",
    dur: "2s",
    values: "0;1;0",
    repeatCount: "indefinite",
    begin: "0.7"
  }))));
};

// src/components/IndexPaperCard.tsx
var IndexPaperCard = (props) => {
  const [references, setReferences] = (0, import_react14.useState)([]);
  const [citations, setCitations] = (0, import_react14.useState)([]);
  const [showReferences, setShowReferences] = (0, import_react14.useState)(false);
  const [showCitations, setShowCitations] = (0, import_react14.useState)(false);
  const [isButtonShown, setIsButtonShown] = (0, import_react14.useState)(!props.plugin.settings.hideButtonsOnHover);
  const [isReferenceLoading, setIsReferenceLoading] = (0, import_react14.useState)(false);
  const [isCitationLoading, setIsCitationLoading] = (0, import_react14.useState)(false);
  const { settings } = props.plugin;
  (0, import_react14.useEffect)(() => {
    if (props.indexPaper.paper.paperId && !props.indexPaper.isLocal) {
      getCitations();
      getReferences();
    }
  }, [props.indexPaper.isLocal]);
  (0, import_react14.useEffect)(() => {
    setIsButtonShown(!settings.hideButtonsOnHover);
  }, [settings.hideButtonsOnHover]);
  const handleHoverButtons = (isShow) => {
    if (!settings.hideButtonsOnHover || showReferences || showCitations) {
      setIsButtonShown(true);
      return;
    }
    setIsButtonShown(isShow);
  };
  const getReferences = async () => {
    setIsReferenceLoading(true);
    const references2 = await props.viewManager.getReferences(props.indexPaper.paper.paperId);
    const filteredReferences = settings.filterRedundantReferences ? references2.filter((reference2) => reference2.referenceCount && reference2.referenceCount > 0 || reference2.citationCount && reference2.citationCount > 0) : references2;
    setReferences(filteredReferences);
    setIsReferenceLoading(false);
  };
  const getCitations = async () => {
    setIsCitationLoading(true);
    const citations2 = await props.viewManager.getCitations(props.indexPaper.paper.paperId);
    const filteredCitations = settings.filterRedundantReferences ? citations2.filter((citation) => citation.referenceCount && citation.referenceCount > 0 || citation.citationCount && citation.citationCount > 0) : citations2;
    setCitations(filteredCitations);
    setIsCitationLoading(false);
  };
  const metadataTemplates = [
    { format: settings.formatMetadataCopyOne, template: settings.metadataCopyTemplateOne, batch: settings.metadataCopyOneBatch },
    { format: settings.formatMetadataCopyTwo, template: settings.metadataCopyTemplateTwo, batch: settings.metadataCopyTwoBatch },
    { format: settings.formatMetadataCopyThree, template: settings.metadataCopyTemplateThree, batch: settings.metadataCopyThreeBatch }
  ];
  const batchCopyMetadata = metadataTemplates.flatMap(({ format, template, batch }) => {
    if (batch && format) {
      return references.map((paper) => {
        const metaData = makeMetaData({ id: paper.paperId, location: null, paper });
        return templateReplace(template, metaData) + "\n";
      });
    }
    return [];
  });
  return /* @__PURE__ */ import_react14.default.createElement("div", {
    className: `orm-root-paper ${props.className}`,
    onMouseEnter: () => handleHoverButtons(true),
    onMouseLeave: () => handleHoverButtons(false)
  }, /* @__PURE__ */ import_react14.default.createElement(PaperHeading, {
    paper: props.indexPaper,
    settings
  }), isButtonShown && /* @__PURE__ */ import_react14.default.createElement(PaperButtons, {
    settings,
    paper: props.indexPaper,
    setShowReferences,
    showReferences,
    setShowCitations,
    showCitations,
    setIsButtonShown,
    isButtonShown,
    batchCopyMetadataOne: batchCopyMetadata[0],
    batchCopyMetadataTwo: batchCopyMetadata[1],
    batchCopyMetadataThree: batchCopyMetadata[2]
  }), (isCitationLoading || isReferenceLoading) && /* @__PURE__ */ import_react14.default.createElement("div", {
    className: "orm-loading"
  }, /* @__PURE__ */ import_react14.default.createElement(LoadingPuff, null)), showReferences && /* @__PURE__ */ import_react14.default.createElement(PaperList, {
    settings,
    papers: references,
    type: "References"
  }), showCitations && /* @__PURE__ */ import_react14.default.createElement(PaperList, {
    settings,
    papers: citations,
    type: "Citations"
  }));
};

// src/sidebar/ReferenceMapList.tsx
var indexSearch = (data, query) => {
  return data.filter((item) => SEARCH_PARAMETERS.some((parameter) => {
    var _a, _b, _c;
    if (parameter === "authors") {
      return (_b = (_a = item.paper) == null ? void 0 : _a.authors) == null ? void 0 : _b.some((author) => {
        var _a2;
        return (_a2 = author.name) == null ? void 0 : _a2.toLowerCase().includes(query.toLowerCase());
      });
    } else {
      return (_c = item.paper[parameter]) == null ? void 0 : _c.toString().toLowerCase().includes(query.toLowerCase());
    }
  }));
};
var UserSearch = ({ isSearchList, setQuery, papers }) => {
  const isCSL = papers == null ? void 0 : papers.some((paper) => paper.paper.csl !== void 0);
  return /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "orm-plugin-name"
  }, /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "orm-search-form"
  }, /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "index-search"
  }, !isCSL && /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "orm-plugin-global-copy-disabled"
  }, /* @__PURE__ */ import_react15.default.createElement(CopyIcon, null)), papers && (papers == null ? void 0 : papers.length) > 0 && isCSL && /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "orm-plugin-global-copy",
    onClick: async () => {
      if (!papers)
        return;
      const bib = papers.map((paper) => paper.paper.csl);
      copyToClipboard(bib == null ? void 0 : bib.join("\n\n"));
    }
  }, /* @__PURE__ */ import_react15.default.createElement(CopyIcon, null)), /* @__PURE__ */ import_react15.default.createElement("input", {
    type: "search",
    className: `orm-search-input ${isSearchList ? "orm-index-search" : "orm-index-no-search"}`,
    placeholder: `Reference Map`,
    onChange: (e) => {
      if (!setQuery)
        return;
      return setQuery(e.target.value);
    },
    style: { padding: "0 35px 0 35px" }
  }), isSearchList && /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "cardCount"
  }, papers && (papers == null ? void 0 : papers.length) > 0 ? papers.length : ""))));
};
var SetKeyInfo = ({ searchCiteKey }) => {
  return /* @__PURE__ */ import_react15.default.createElement("div", null, !searchCiteKey && /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "orm-no-content-subtext"
  }, "Configure ", /* @__PURE__ */ import_react15.default.createElement("code", null, "Get References Using CiteKey"), " in the settings tab to process citations using pandoc citekey"));
};
var ReferenceMapList = (props) => {
  const [papers, setPapers] = (0, import_react15.useState)([]);
  const [selection2, setSelection] = (0, import_react15.useState)("");
  const [query, setQuery] = (0, import_react15.useState)("");
  const activeRef = (0, import_react15.useRef)(null);
  const { viewManager } = props.referenceMapData;
  const fetchData = async () => {
    const { indexIds, citeKeyMap, fileName, frontmatter, basename } = props.updateChecker;
    const updatedIndexIds = indexIds;
    let indexCards = [];
    indexCards = await props.referenceMapData.getIndexCards(updatedIndexIds, citeKeyMap, fileName, frontmatter, basename);
    setPapers(indexCards);
  };
  const getLocalData = async () => {
    const localCards = await props.referenceMapData.getLocalReferences(props.updateChecker.citeKeyMap);
    setPapers(localCards);
  };
  (0, import_react15.useEffect)(() => {
    getLocalData();
  }, [props.updateChecker.basename]);
  (0, import_react15.useEffect)(() => {
    fetchData();
    events_default.on(EVENTS.UPDATE, fetchData);
  }, [
    props.updateChecker.indexIds,
    props.updateChecker.citeKeyMap,
    props.updateChecker.fileName,
    props.updateChecker.frontmatter,
    props.plugin.settings,
    props.referenceMapData.library.libraryData
  ]);
  (0, import_react15.useEffect)(() => {
    if (activeRef.current !== null)
      activeRef.current.scrollIntoView({
        behavior: "smooth",
        inline: "start"
      });
    events_default.on(EVENTS.SELECTION, (sel) => setSelection(sel));
  }, [selection2]);
  if (!props.updateChecker.basename) {
    return /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "orm-no-content"
    }, /* @__PURE__ */ import_react15.default.createElement(UserSearch, null), /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "orm-no-content-subtext"
    }, "No Active Markdown File.", /* @__PURE__ */ import_react15.default.createElement("br", null), "Click on a file to view its references."), /* @__PURE__ */ import_react15.default.createElement(SetKeyInfo, {
      searchCiteKey: props.plugin.settings.searchCiteKey
    }));
  }
  if (papers.length > 0) {
    return /* @__PURE__ */ import_react15.default.createElement(import_react15.default.Fragment, null, /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "orm-reference-map"
    }, /* @__PURE__ */ import_react15.default.createElement(UserSearch, {
      isSearchList: true,
      setQuery,
      papers
    }), indexSearch(papers, query).map((paper, index6) => {
      const paperId = paper.id.replace("@", "");
      const activeIndexCardClass = (selection2 == null ? void 0 : selection2.includes(paperId)) ? "orm-active-index" : "";
      const ref = activeIndexCardClass ? activeRef : null;
      return /* @__PURE__ */ import_react15.default.createElement("div", {
        key: `${paper.id}${index6}${props.updateChecker.basename}`,
        ref
      }, /* @__PURE__ */ import_react15.default.createElement(IndexPaperCard, {
        className: activeIndexCardClass,
        plugin: props.plugin,
        indexPaper: paper,
        viewManager
      }));
    })));
  }
  return /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "orm-no-content"
  }, /* @__PURE__ */ import_react15.default.createElement(UserSearch, null), /* @__PURE__ */ import_react15.default.createElement("div", {
    className: "orm-no-content-subtext"
  }, "No Valid References Found."), /* @__PURE__ */ import_react15.default.createElement(SetKeyInfo, {
    searchCiteKey: props.plugin.settings.searchCiteKey
  }));
};

// src/sidebar/SidebarView.tsx
var REFERENCE_MAP_VIEW_TYPE = "reference-map-view";
var SidebarView = class extends import_obsidian9.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "referenceMapData");
    __publicField(this, "rootEl");
    __publicField(this, "updateChecker");
    __publicField(this, "processReferences", async () => {
      var _a, _b;
      const activeFile = (_a = this.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView)) == null ? void 0 : _a.file;
      await this.referenceMapData.prepare(activeFile, this.app.vault, this.app.metadataCache);
      (_b = this.rootEl) == null ? void 0 : _b.render(/* @__PURE__ */ import_react16.default.createElement(AppContext.Provider, {
        value: this.app
      }, /* @__PURE__ */ import_react16.default.createElement(ReferenceMapList, {
        plugin: this.plugin,
        referenceMapData: this.referenceMapData,
        updateChecker: this.updateChecker
      })));
    });
    this.plugin = plugin;
    this.referenceMapData = this.plugin.referenceMapData;
    this.updateChecker = this.plugin.updateChecker;
    this.rootEl = (0, import_client2.createRoot)(this.containerEl.children[1]);
    this.registerEvent(this.app.metadataCache.on("changed", (0, import_obsidian9.debounce)(async (file) => {
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile && file === activeFile) {
        const updated = await this.referenceMapData.prepare(activeFile, this.app.vault, this.app.metadataCache);
        if (updated) {
          events_default.trigger(EVENTS.UPDATE);
        }
      }
    }, 100, true)));
    this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf2) => {
      if (leaf2) {
        this.app.workspace.iterateRootLeaves((rootLeaf) => {
          const viewType = leaf2.view.getViewType();
          if (rootLeaf === leaf2) {
            if (viewType === "markdown" || viewType === "empty") {
              this.processReferences();
            }
          }
        });
      }
    }));
    this.registerDomEvent(document, "pointerup", (evt) => {
      var _a;
      const selection2 = (_a = window.getSelection()) == null ? void 0 : _a.toString().trim();
      events_default.trigger(EVENTS.SELECTION, selection2);
    });
    this.registerDomEvent(document, "keyup", (evt) => {
      var _a;
      const selection2 = (_a = window.getSelection()) == null ? void 0 : _a.toString().trim();
      events_default.trigger(EVENTS.SELECTION, selection2);
    });
  }
  getViewType() {
    return REFERENCE_MAP_VIEW_TYPE;
  }
  getDisplayText() {
    return t2("REFERENCE_MAP");
  }
  getIcon() {
    return "ReferenceMapIconScroll";
  }
  async onOpen() {
    this.processReferences();
  }
  async onClose() {
    var _a;
    (_a = this.rootEl) == null ? void 0 : _a.unmount();
    this.referenceMapData.viewManager.clearCache();
    return super.onClose();
  }
  onunload() {
    events_default.off(EVENTS.SELECTION, () => {
    });
    events_default.off(EVENTS.UPDATE, () => {
    });
  }
};

// src/graph/GraphView.tsx
var import_react20 = __toESM(require_react());
var import_client3 = __toESM(require_client());
var import_obsidian10 = require("obsidian");

// src/graph/ReferenceMapGraph.tsx
var import_lodash = __toESM(require_lodash());

// node_modules/.pnpm/internmap@2.0.3/node_modules/internmap/src/index.js
var InternMap = class extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
    if (entries != null)
      for (const [key2, value] of entries)
        this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
};
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key))
    return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

// node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/max.js
function max2(values, valueof) {
  let max5;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max5 < value || max5 === void 0 && value >= value)) {
        max5 = value;
      }
    }
  } else {
    let index6 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index6, values)) != null && (max5 < value || max5 === void 0 && value >= value)) {
        max5 = value;
      }
    }
  }
  return max5;
}

// node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/min.js
function min2(values, valueof) {
  let min5;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  } else {
    let index6 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index6, values)) != null && (min5 > value || min5 === void 0 && value >= value)) {
        min5 = value;
      }
    }
  }
  return min5;
}

// node_modules/.pnpm/d3-dispatch@3.0.1/node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _5 = {}, t3; i < n; ++i) {
    if (!(t3 = arguments[i] + "") || t3 in _5 || /[\s.]/.test(t3))
      throw new Error("illegal type: " + t3);
    _5[t3] = [];
  }
  return new Dispatch(_5);
}
function Dispatch(_5) {
  this._ = _5;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t3) {
    var name = "", i = t3.indexOf(".");
    if (i >= 0)
      name = t3.slice(i + 1), t3 = t3.slice(0, i);
    if (t3 && !types.hasOwnProperty(t3))
      throw new Error("unknown type: " + t3);
    return { type: t3, name };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _5 = this._, T = parseTypenames(typename + "", _5), t3, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t3 = (typename = T[i]).type) && (t3 = get(_5[t3], typename.name)))
          return t3;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t3 = (typename = T[i]).type)
        _5[t3] = set(_5[t3], typename.name, callback);
      else if (callback == null)
        for (t3 in _5)
          _5[t3] = set(_5[t3], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy = {}, _5 = this._;
    for (var t3 in _5)
      copy[t3] = _5[t3].slice();
    return new Dispatch(copy);
  },
  call: function(type2, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i = 0, n, t3; i < n; ++i)
        args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t3 = this._[type2], i = 0, n = t3.length; i < n; ++i)
      t3[i].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t3 = this._[type2], i = 0, n = t3.length; i < n; ++i)
      t3[i].value.apply(that, args);
  }
};
function get(type2, name) {
  for (var i = 0, n = type2.length, c2; i < n; ++i) {
    if ((c2 = type2[i]).name === name) {
      return c2.value;
    }
  }
}
function set(type2, name, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name) {
      type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var dispatch_default = dispatch;

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/array.js
function array(x3) {
  return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update3) {
  return new Array(update3.length);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/constant.js
function constant_default(x3) {
  return function() {
    return x3;
  };
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update3, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update3[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update3, exit, data, key) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update3[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant_default(value);
  for (var m2 = groups.length, update3 = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update3[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update3 = new Selection(update3, parents);
  update3._enter = enter;
  update3._exit = exit;
  return update3;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update3 = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update3 = onupdate(update3);
    if (update3)
      update3 = update3.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update3 ? enter.merge(update3).order() : update3;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m2 = groups.length; ++j < m2; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups = this._groups, m2 = groups.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names2) {
  var list = classList(node), i = -1, n = names2.length;
  while (++i < n)
    list.add(names2[i]);
}
function classedRemove(node, names2) {
  var list = classList(node), i = -1, n = names2.length;
  while (++i < n)
    list.remove(names2[i]);
}
function classedTrue(names2) {
  return function() {
    classedAdd(this, names2);
  };
}
function classedFalse(names2) {
  return function() {
    classedRemove(this, names2);
  };
}
function classedFunction(names2, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names2);
  };
}
function classed_default(name, value) {
  var names2 = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names2.length;
    while (++i < n)
      if (!list.contains(names2[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names2, value));
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone2 = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
}
function selection_cloneDeep() {
  var clone2 = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t3) {
    var name = "", i = t3.indexOf(".");
    if (i >= 0)
      name = t3.slice(i + 1), t3 = t3.slice(0, i);
    return { type: t3, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j = 0, m2 = on.length; j < m2; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t3;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m2 = on.length, o; j < m2; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t3 = typenames[i]).type === o.type && t3.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, options));
  return this;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default2,
  [Symbol.iterator]: iterator_default
};
var selection_default = selection;

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}

// node_modules/.pnpm/d3-selection@3.0.0/node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/noevent.js
var nonpassive = { passive: false };
var nonpassivecapture = { capture: true, passive: false };
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root3) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root3.__noselect = root3.style.MozUserSelect;
    root3.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root3) {
    selection2.on("selectstart.drag", null);
  } else {
    root3.style.MozUserSelect = root3.__noselect;
    delete root3.__noselect;
  }
}

// node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/constant.js
var constant_default2 = (x3) => () => x3;

// node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/event.js
function DragEvent(type2, {
  sourceEvent,
  subject,
  target,
  identifier,
  active,
  x: x3,
  y: y3,
  dx,
  dy,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    subject: { value: subject, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    identifier: { value: identifier, enumerable: true, configurable: true },
    active: { value: active, enumerable: true, configurable: true },
    x: { value: x3, enumerable: true, configurable: true },
    y: { value: y3, enumerable: true, configurable: true },
    dx: { value: dx, enumerable: true, configurable: true },
    dy: { value: dy, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}
DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// node_modules/.pnpm/d3-drag@3.0.0/node_modules/d3-drag/src/drag.js
function defaultFilter(event) {
  return !event.ctrlKey && !event.button;
}
function defaultContainer() {
  return this.parentNode;
}
function defaultSubject(event, d) {
  return d == null ? { x: event.x, y: event.y } : d;
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function drag_default() {
  var filter2 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
  function drag(selection2) {
    selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function mousedowned(event, d) {
    if (touchending || !filter2.call(this, event, d))
      return;
    var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
    if (!gesture)
      return;
    select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
    nodrag_default(event.view);
    nopropagation(event);
    mousemoving = false;
    mousedownx = event.clientX;
    mousedowny = event.clientY;
    gesture("start", event);
  }
  function mousemoved(event) {
    noevent_default(event);
    if (!mousemoving) {
      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag", event);
  }
  function mouseupped(event) {
    select_default2(event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event.view, mousemoving);
    noevent_default(event);
    gestures.mouse("end", event);
  }
  function touchstarted(event, d) {
    if (!filter2.call(this, event, d))
      return;
    var touches = event.changedTouches, c2 = container.call(this, event, d), n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(this, c2, event, d, touches[i].identifier, touches[i])) {
        nopropagation(event);
        gesture("start", event, touches[i]);
      }
    }
  }
  function touchmoved(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent_default(event);
        gesture("drag", event, touches[i]);
      }
    }
  }
  function touchended(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, 500);
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation(event);
        gesture("end", event, touches[i]);
      }
    }
  }
  function beforestart(that, container2, event, d, identifier, touch) {
    var dispatch2 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s;
    if ((s = subject.call(that, new DragEvent("beforestart", {
      sourceEvent: event,
      target: drag,
      identifier,
      active,
      x: p[0],
      y: p[1],
      dx: 0,
      dy: 0,
      dispatch: dispatch2
    }), d)) == null)
      return;
    dx = s.x - p[0] || 0;
    dy = s.y - p[1] || 0;
    return function gesture(type2, event2, touch2) {
      var p0 = p, n;
      switch (type2) {
        case "start":
          gestures[identifier] = gesture, n = active++;
          break;
        case "end":
          delete gestures[identifier], --active;
        case "drag":
          p = pointer_default(touch2 || event2, container2), n = active;
          break;
      }
      dispatch2.call(type2, that, new DragEvent(type2, {
        sourceEvent: event2,
        subject: s,
        target: drag,
        identifier,
        active: n,
        x: p[0] + dx,
        y: p[1] + dy,
        dx: p[0] - p0[0],
        dy: p[1] - p0[1],
        dispatch: dispatch2
      }), d);
    };
  }
  drag.filter = function(_5) {
    return arguments.length ? (filter2 = typeof _5 === "function" ? _5 : constant_default2(!!_5), drag) : filter2;
  };
  drag.container = function(_5) {
    return arguments.length ? (container = typeof _5 === "function" ? _5 : constant_default2(_5), drag) : container;
  };
  drag.subject = function(_5) {
    return arguments.length ? (subject = typeof _5 === "function" ? _5 : constant_default2(_5), drag) : subject;
  };
  drag.touchable = function(_5) {
    return arguments.length ? (touchable = typeof _5 === "function" ? _5 : constant_default2(!!_5), drag) : touchable;
  };
  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };
  drag.clickDistance = function(_5) {
    return arguments.length ? (clickDistance2 = (_5 = +_5) * _5, drag) : Math.sqrt(clickDistance2);
  };
  return drag;
}

// node_modules/.pnpm/d3-color@3.1.0/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/.pnpm/d3-color@3.1.0/node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format) {
  var m2, l;
  format = (format + "").trim().toLowerCase();
  return (m2 = reHex.exec(format)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a2) {
  if (a2 <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min5 = Math.min(r, g, b), max5 = Math.max(r, g, b), h = NaN, s = max5 - min5, l = (max5 + min5) / 2;
  if (s) {
    if (r === max5)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max5)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max5 + min5 : 2 - max5 - min5;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/basis.js
function basis(t1, v0, v1, v2, v3) {
  var t22 = t1 * t1, t3 = t22 * t1;
  return ((1 - 3 * t1 + 3 * t22 - t3) * v0 + (4 - 6 * t22 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t22 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t3) {
    var i = t3 <= 0 ? t3 = 0 : t3 >= 1 ? (t3 = 1, n - 1) : Math.floor(t3 * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t3 - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t3) {
    var i = Math.floor(((t3 %= 1) < 0 ? ++t3 : t3) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t3 - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/constant.js
var constant_default3 = (x3) => () => x3;

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t3) {
    return a2 + t3 * d;
  };
}
function exponential(a2, b, y3) {
  return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t3) {
    return Math.pow(a2 + t3 * b, y3);
  };
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y3) : constant_default3(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default3(isNaN(a2) ? b : a2);
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color2 = gamma(y3);
  function rgb2(start3, end2) {
    var r = color2((start3 = rgb(start3)).r, (end2 = rgb(end2)).r), g = color2(start3.g, end2.g), b = color2(start3.b, end2.b), opacity = nogamma(start3.opacity, end2.opacity);
    return function(t3) {
      start3.r = r(t3);
      start3.g = g(t3);
      start3.b = b(t3);
      start3.opacity = opacity(t3);
      return start3 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t3) {
      color2.r = r(t3);
      color2.g = g(t3);
      color2.b = b(t3);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/number.js
function number_default(a2, b) {
  return a2 = +a2, b = +b, function(t3) {
    return a2 * (1 - t3) + b * t3;
  };
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t3) {
    return b(t3) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t3) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t3);
    return s.join("");
  });
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b, c2, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b))
    a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c2 + b * d)
    c2 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c2 * c2 + d * d))
    c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c2)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse2, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s, q) {
    if (a2 !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s = [], q = [];
    a2 = parse2(a2), b = parse2(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s, q);
    rotate(a2.rotate, b.rotate, s, q);
    skewX(a2.skewX, b.skewX, s, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s, q);
    a2 = b = null;
    return function(t3) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t3);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/.pnpm/d3-interpolate@3.0.1/node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x3) {
  return ((x3 = Math.exp(x3)) + 1 / x3) / 2;
}
function sinh(x3) {
  return ((x3 = Math.exp(x3)) - 1 / x3) / 2;
}
function tanh(x3) {
  return ((x3 = Math.exp(2 * x3)) - 1) / (x3 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom2(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t3) {
        return [
          ux0 + t3 * dx,
          uy0 + t3 * dy,
          w0 * Math.exp(rho * t3 * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t3) {
        var s = t3 * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom2.rho = function(_5) {
    var _1 = Math.max(1e-3, +_5), _22 = _1 * _1, _42 = _22 * _22;
    return zoomRho(_1, _22, _42);
  };
  return zoom2;
}(Math.SQRT2, 2, 4);

// node_modules/.pnpm/d3-timer@3.0.1/node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t3 = new Timer();
  t3.restart(callback, delay, time);
  return t3;
}
function timerFlush() {
  now();
  ++frame;
  var t3 = taskHead, e;
  while (t3) {
    if ((e = clockNow - t3._time) >= 0)
      t3._call.call(void 0, e);
    t3 = t3._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now4 = clock.now(), delay = now4 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now4;
}
function nap() {
  var t0, t1 = taskHead, t22, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t22 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t22 : taskHead = t22;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/.pnpm/d3-timer@3.0.1/node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t3 = new Timer();
  delay = delay == null ? 0 : +delay;
  t3.restart((elapsed) => {
    t3.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t3;
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name, id2, index6, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index: index6,
    group,
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start3, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start3(elapsed - self2.delay);
  }
  function start3(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start3);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t3 = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t3);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty2 = true, i;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty2 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty2)
    delete node.__transition;
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t3 = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t3;
          break;
        }
      }
      if (i === n)
        tween1.push(t3);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t3; i < n; ++i) {
      if ((t3 = tween[i]).name === name) {
        return t3.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a2, b) {
  var c2;
  return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c2 = color(b)) ? (b = c2, rgb_default) : string_default)(a2, b);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i) {
  return function(t3) {
    this.setAttribute(name, i.call(this, t3));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t3) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t3));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set2(this, id2).ease = v;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/on.js
function start2(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t3) {
    var i = t3.indexOf(".");
    if (i >= 0)
      t3 = t3.slice(0, i);
    return !t3 || t3 === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start2(name) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule_default(child, name, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/selection.js
var Selection2 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove3;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove3 || (remove3 = styleRemove2(name)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i, priority) {
  return function(t3) {
    this.style.setProperty(name, i.call(this, t3), priority);
  };
}
function styleTween(name, value, priority) {
  var t3, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t3 = (i0 = i) && styleInterpolate(name, i, priority);
    return t3;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t3) {
    this.textContent = i.call(this, t3);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end2 = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end2);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// node_modules/.pnpm/d3-ease@3.0.1/node_modules/d3-ease/src/cubic.js
function cubicInOut(t3) {
  return ((t3 *= 2) <= 1 ? t3 * t3 * t3 : (t3 -= 2) * t3 * t3 + 2) / 2;
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}

// node_modules/.pnpm/d3-transition@3.0.1_d3-selection@3.0.0/node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// node_modules/.pnpm/d3-brush@3.0.0/node_modules/d3-brush/src/brush.js
var { abs, max: max3, min: min3 } = Math;
function number1(e) {
  return [+e[0], +e[1]];
}
function number2(e) {
  return [number1(e[0]), number1(e[1])];
}
var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x3, e) {
    return x3 == null ? null : [[+x3[0], e[0][1]], [+x3[1], e[1][1]]];
  },
  output: function(xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y3, e) {
    return y3 == null ? null : [[e[0][0], +y3[0]], [e[1][0], +y3[1]]];
  },
  output: function(xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) {
    return xy == null ? null : number2(xy);
  },
  output: function(xy) {
    return xy;
  }
};
function type(t3) {
  return { type: t3 };
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/add.js
function add_default(d) {
  const x3 = +this._x.call(null, d), y3 = +this._y.call(null, d);
  return add(this.cover(x3, y3), x3, y3, d);
}
function add(tree, x3, y3, d) {
  if (isNaN(x3) || isNaN(y3))
    return tree;
  var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right2, bottom2, i, j;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right2 = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom2 = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (parent = node, !(node = node[i = bottom2 << 1 | right2]))
      return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x3 === xp && y3 === yp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right2 = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom2 = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
  } while ((i = bottom2 << 1 | right2) === (j = (yp >= ym) << 1 | xp >= xm));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data) {
  var d, i, n = data.length, x3, y3, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
  for (i = 0; i < n; ++i) {
    if (isNaN(x3 = +this._x.call(null, d = data[i])) || isNaN(y3 = +this._y.call(null, d)))
      continue;
    xz[i] = x3;
    yz[i] = y3;
    if (x3 < x0)
      x0 = x3;
    if (x3 > x1)
      x1 = x3;
    if (y3 < y0)
      y0 = y3;
    if (y3 > y1)
      y1 = y3;
  }
  if (x0 > x1 || y0 > y1)
    return this;
  this.cover(x0, y0).cover(x1, y1);
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }
  return this;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/cover.js
function cover_default(x3, y3) {
  if (isNaN(x3 = +x3) || isNaN(y3 = +y3))
    return this;
  var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x3)) + 1;
    y1 = (y0 = Math.floor(y3)) + 1;
  } else {
    var z2 = x1 - x0 || 1, node = this._root, parent, i;
    while (x0 > x3 || x3 >= x1 || y0 > y3 || y3 >= y1) {
      i = (y3 < y0) << 1 | x3 < x0;
      parent = new Array(4), parent[i] = node, node = parent, z2 *= 2;
      switch (i) {
        case 0:
          x1 = x0 + z2, y1 = y0 + z2;
          break;
        case 1:
          x0 = x1 - z2, y1 = y0 + z2;
          break;
        case 2:
          x1 = x0 + z2, y0 = y1 - z2;
          break;
        case 3:
          x0 = x1 - z2, y0 = y1 - z2;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/data.js
function data_default2() {
  var data = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data.push(node.data);
      while (node = node.next);
  });
  return data;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/extent.js
function extent_default(_5) {
  return arguments.length ? this.cover(+_5[0][0], +_5[0][1]).cover(+_5[1][0], +_5[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/quad.js
function quad_default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/find.js
function find_default(x3, y3, radius) {
  var data, x0 = this._x0, y0 = this._y0, x1, y1, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
  if (node)
    quads.push(new quad_default(node, x0, y0, x32, y32));
  if (radius == null)
    radius = Infinity;
  else {
    x0 = x3 - radius, y0 = y3 - radius;
    x32 = x3 + radius, y32 = y3 + radius;
    radius *= radius;
  }
  while (q = quads.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0)
      continue;
    if (node.length) {
      var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2;
      quads.push(new quad_default(node[3], xm, ym, x22, y22), new quad_default(node[2], x1, ym, xm, y22), new quad_default(node[1], xm, y1, x22, ym), new quad_default(node[0], x1, y1, xm, ym));
      if (i = (y3 >= ym) << 1 | x3 >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } else {
      var dx = x3 - +this._x.call(null, node.data), dy = y3 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x3 - d, y0 = y3 - d;
        x32 = x3 + d, y32 = y3 + d;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/remove.js
function remove_default3(d) {
  if (isNaN(x3 = +this._x.call(null, d)) || isNaN(y3 = +this._y.call(null, d)))
    return this;
  var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x3, y3, xm, ym, right2, bottom2, i, j;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right2 = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom2 = y3 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (!(parent = node, node = node[i = bottom2 << 1 | right2]))
        return this;
      if (!node.length)
        break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
        retainer = parent, j = i;
    }
  while (node.data !== d)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i)
    this.remove(data[i]);
  return this;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/root.js
function root_default() {
  return this._root;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/size.js
function size_default2() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/visit.js
function visit_default(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node)
    quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
    }
  }
  return this;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/visitAfter.js
function visitAfter_default(callback) {
  var quads = [], next = [], q;
  if (this._root)
    quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/x.js
function defaultX(d) {
  return d[0];
}
function x_default(_5) {
  return arguments.length ? (this._x = _5, this) : this._x;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/y.js
function defaultY(d) {
  return d[1];
}
function y_default(_5) {
  return arguments.length ? (this._y = _5, this) : this._y;
}

// node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/quadtree.js
function quadtree(nodes, x3, y3) {
  var tree = new Quadtree(x3 == null ? defaultX : x3, y3 == null ? defaultY : y3, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Quadtree(x3, y3, x0, y0, x1, y1) {
  this._x = x3;
  this._y = y3;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy = { data: leaf.data }, next = copy;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy;
}
var treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function() {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
  if (!node)
    return copy;
  if (!node.length)
    return copy._root = leaf_copy(node), copy;
  nodes = [{ source: node, target: copy._root = new Array(4) }];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i] = new Array(4) });
        else
          node.target[i] = leaf_copy(child);
      }
    }
  }
  return copy;
};
treeProto.add = add_default;
treeProto.addAll = addAll;
treeProto.cover = cover_default;
treeProto.data = data_default2;
treeProto.extent = extent_default;
treeProto.find = find_default;
treeProto.remove = remove_default3;
treeProto.removeAll = removeAll;
treeProto.root = root_default;
treeProto.size = size_default2;
treeProto.visit = visit_default;
treeProto.visitAfter = visitAfter_default;
treeProto.x = x_default;
treeProto.y = y_default;

// node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/constant.js
function constant_default5(x3) {
  return function() {
    return x3;
  };
}

// node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/jiggle.js
function jiggle_default(random) {
  return (random() - 0.5) * 1e-6;
}

// node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/collide.js
function x(d) {
  return d.x + d.vx;
}
function y(d) {
  return d.y + d.vy;
}
function collide_default(radius) {
  var nodes, radii, random, strength = 1, iterations = 1;
  if (typeof radius !== "function")
    radius = constant_default5(radius == null ? 1 : +radius);
  function force() {
    var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }
    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x3 = xi - data.x - data.vx, y3 = yi - data.y - data.vy, l = x3 * x3 + y3 * y3;
          if (l < r * r) {
            if (x3 === 0)
              x3 = jiggle_default(random), l += x3 * x3;
            if (y3 === 0)
              y3 = jiggle_default(random), l += y3 * y3;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x3 *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y3 *= l) * r;
            data.vx -= x3 * (r = 1 - r);
            data.vy -= y3 * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }
  function prepare(quad) {
    if (quad.data)
      return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i)
      node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.iterations = function(_5) {
    return arguments.length ? (iterations = +_5, force) : iterations;
  };
  force.strength = function(_5) {
    return arguments.length ? (strength = +_5, force) : strength;
  };
  force.radius = function(_5) {
    return arguments.length ? (radius = typeof _5 === "function" ? _5 : constant_default5(+_5), initialize(), force) : radius;
  };
  return force;
}

// node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/x.js
function x_default2(x3) {
  var strength = constant_default5(0.1), nodes, strengths, xz;
  if (typeof x3 !== "function")
    x3 = constant_default5(x3 == null ? 0 : +x3);
  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x3(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(_5) {
    nodes = _5;
    initialize();
  };
  force.strength = function(_5) {
    return arguments.length ? (strength = typeof _5 === "function" ? _5 : constant_default5(+_5), initialize(), force) : strength;
  };
  force.x = function(_5) {
    return arguments.length ? (x3 = typeof _5 === "function" ? _5 : constant_default5(+_5), initialize(), force) : x3;
  };
  return force;
}

// node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/y.js
function y_default2(y3) {
  var strength = constant_default5(0.1), nodes, strengths, yz;
  if (typeof y3 !== "function")
    y3 = constant_default5(y3 == null ? 0 : +y3);
  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y3(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(_5) {
    nodes = _5;
    initialize();
  };
  force.strength = function(_5) {
    return arguments.length ? (strength = typeof _5 === "function" ? _5 : constant_default5(+_5), initialize(), force) : strength;
  };
  force.y = function(_5) {
    return arguments.length ? (y3 = typeof _5 === "function" ? _5 : constant_default5(+_5), initialize(), force) : y3;
  };
  return force;
}

// node_modules/.pnpm/d3-scale@4.0.2/node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/.pnpm/d3-scale@4.0.2/node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index6 = new InternMap(), domain = [], range = [], unknown = implicit;
  function scale(d) {
    let i = index6.get(d);
    if (i === void 0) {
      if (unknown !== implicit)
        return unknown;
      index6.set(d, i = domain.push(d) - 1);
    }
    return range[i % range.length];
  }
  scale.domain = function(_5) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index6 = new InternMap();
    for (const value of _5) {
      if (index6.has(value))
        continue;
      index6.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_5) {
    return arguments.length ? (range = Array.from(_5), scale) : range.slice();
  };
  scale.unknown = function(_5) {
    return arguments.length ? (unknown = _5, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/.pnpm/d3-scale-chromatic@3.0.0/node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n)
    colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}

// node_modules/.pnpm/d3-scale-chromatic@3.0.0/node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/constant.js
var constant_default6 = (x3) => () => x3;

// node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/transform.js
function Transform(k, x3, y3) {
  this.k = k;
  this.x = x3;
  this.y = y3;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x3, y3) {
    return x3 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x3, this.y + this.k * y3);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x3) {
    return x3 * this.k + this.x;
  },
  applyY: function(y3) {
    return y3 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x3) {
    return (x3 - this.x) / this.k;
  },
  invertY: function(y3) {
    return (y3 - this.y) / this.k;
  },
  rescaleX: function(x3) {
    return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
  },
  rescaleY: function(y3) {
    return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity2 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity2;
  return node.__zoom;
}

// node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/noevent.js
function nopropagation3(event) {
  event.stopImmediatePropagation();
}
function noevent_default3(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/.pnpm/d3-zoom@3.0.0/node_modules/d3-zoom/src/zoom.js
function defaultFilter2(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity2;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}
function zoom_default2() {
  var filter2 = defaultFilter2, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom2(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom2.transform = function(collection, transform2, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform2, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom2.scaleBy = function(selection2, k, p, event) {
    zoom2.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom2.scaleTo = function(selection2, k, p, event) {
    zoom2.transform(selection2, function() {
      var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom2.translateBy = function(selection2, x3, y3, event) {
    zoom2.transform(selection2, function() {
      return constrain(this.__zoom.translate(typeof x3 === "function" ? x3.apply(this, arguments) : x3, typeof y3 === "function" ? y3.apply(this, arguments) : y3), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom2.translateTo = function(selection2, x3, y3, p, event) {
    zoom2.transform(selection2, function() {
      var e = extent.apply(this, arguments), t3 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity2.translate(p0[0], p0[1]).scale(t3.k).translate(typeof x3 === "function" ? -x3.apply(this, arguments) : -x3, typeof y3 === "function" ? -y3.apply(this, arguments) : -y3), e, translateExtent);
    }, p, event);
  };
  function scale(transform2, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x3 = p0[0] - p1[0] * transform2.k, y3 = p0[1] - p1[1] * transform2.k;
    return x3 === transform2.x && y3 === transform2.y ? transform2 : new Transform(transform2.k, x3, y3);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule(transition2, transform2, point, event) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a2 = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a2.invert(p).concat(w / a2.k), b.invert(p).concat(w / b.k));
      return function(t3) {
        if (t3 === 1)
          t3 = b;
        else {
          var l = i(t3), k = w / l[2];
          t3 = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t3);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d = select_default2(this.that).datum();
      listeners.call(type2, this.that, new ZoomEvent(type2, {
        sourceEvent: this.sourceEvent,
        target: zoom2,
        type: type2,
        transform: this.that.__zoom,
        dispatch: listeners
      }), d);
    }
  };
  function wheeled(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var g = gesture(this, args).event(event), t3 = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t3.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t3.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t3.k === k)
      return;
    else {
      g.mouse = [p, t3.invert(p)];
      interrupt_default(this);
      g.start();
    }
    noevent_default3(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t3, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
    nodrag_default(event.view);
    nopropagation3(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt_default(this);
    g.start();
    function mousemoved(event2) {
      noevent_default3(event2);
      if (!g.moved) {
        var dx = event2.clientX - x0, dy = event2.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent_default3(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent_default3(event);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
    else
      select_default2(this).call(zoom2.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t3, p;
    nopropagation3(event);
    for (i = 0; i < n; ++i) {
      t3 = touches[i], p = pointer_default(t3, this);
      p = [p, this.__zoom.invert(p), t3.identifier];
      if (!g.touch0)
        g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2])
        g.touch1 = p, g.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2)
        touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t3, p, l;
    noevent_default3(event);
    for (i = 0; i < n; ++i) {
      t3 = touches[i], p = pointer_default(t3, this);
      if (g.touch0 && g.touch0[2] === t3.identifier)
        g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t3.identifier)
        g.touch1[0] = p;
    }
    t3 = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t3 = scale(t3, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0)
      p = g.touch0[0], l = g.touch0[1];
    else
      return;
    g.zoom("touch", constrain(translate(t3, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t3;
    nopropagation3(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t3 = touches[i];
      if (g.touch0 && g.touch0[2] === t3.identifier)
        delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t3.identifier)
        delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
      g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0)
      g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t3 = pointer_default(t3, this);
        if (Math.hypot(touchfirst[0] - t3[0], touchfirst[1] - t3[1]) < tapDistance) {
          var p = select_default2(this).on("dblclick.zoom");
          if (p)
            p.apply(this, arguments);
        }
      }
    }
  }
  zoom2.wheelDelta = function(_5) {
    return arguments.length ? (wheelDelta = typeof _5 === "function" ? _5 : constant_default6(+_5), zoom2) : wheelDelta;
  };
  zoom2.filter = function(_5) {
    return arguments.length ? (filter2 = typeof _5 === "function" ? _5 : constant_default6(!!_5), zoom2) : filter2;
  };
  zoom2.touchable = function(_5) {
    return arguments.length ? (touchable = typeof _5 === "function" ? _5 : constant_default6(!!_5), zoom2) : touchable;
  };
  zoom2.extent = function(_5) {
    return arguments.length ? (extent = typeof _5 === "function" ? _5 : constant_default6([[+_5[0][0], +_5[0][1]], [+_5[1][0], +_5[1][1]]]), zoom2) : extent;
  };
  zoom2.scaleExtent = function(_5) {
    return arguments.length ? (scaleExtent[0] = +_5[0], scaleExtent[1] = +_5[1], zoom2) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom2.translateExtent = function(_5) {
    return arguments.length ? (translateExtent[0][0] = +_5[0][0], translateExtent[1][0] = +_5[1][0], translateExtent[0][1] = +_5[0][1], translateExtent[1][1] = +_5[1][1], zoom2) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom2.constrain = function(_5) {
    return arguments.length ? (constrain = _5, zoom2) : constrain;
  };
  zoom2.duration = function(_5) {
    return arguments.length ? (duration = +_5, zoom2) : duration;
  };
  zoom2.interpolate = function(_5) {
    return arguments.length ? (interpolate = _5, zoom2) : interpolate;
  };
  zoom2.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom2 : value;
  };
  zoom2.clickDistance = function(_5) {
    return arguments.length ? (clickDistance2 = (_5 = +_5) * _5, zoom2) : Math.sqrt(clickDistance2);
  };
  zoom2.tapDistance = function(_5) {
    return arguments.length ? (tapDistance = +_5, zoom2) : tapDistance;
  };
  return zoom2;
}

// src/graph/ReferenceMapGraph.tsx
var import_react19 = __toESM(require_react());

// node_modules/.pnpm/react-kapsule@2.4.0_react@18.2.0/node_modules/react-kapsule/dist/react-kapsule.mjs
var import_react17 = __toESM(require_react(), 1);

// node_modules/.pnpm/jerrypick@1.1.1/node_modules/jerrypick/dist/jerrypick.mjs
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, i === 0) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var omit = function omit2(obj, keys) {
  var keySet = new Set(keys);
  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(obj).filter(function(_ref2) {
    var _ref3 = _slicedToArray(_ref2, 1), key = _ref3[0];
    return !keySet.has(key);
  }).map(function(_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2), key = _ref5[0], val = _ref5[1];
    return _defineProperty({}, key, val);
  }))));
};

// node_modules/.pnpm/react-kapsule@2.4.0_react@18.2.0/node_modules/react-kapsule/dist/react-kapsule.mjs
var import_fromentries = __toESM(require_fromentries(), 1);
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, i === 0) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray2(arr);
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function index(kapsuleComponent, comboParam) {
  var _ref = _typeof(comboParam) === "object" ? comboParam : {
    wrapperElementType: comboParam,
    methodNames: (arguments.length <= 2 ? void 0 : arguments[2]) || void 0,
    initPropNames: (arguments.length <= 3 ? void 0 : arguments[3]) || void 0
  }, _ref$wrapperElementTy = _ref.wrapperElementType, wrapperElementType = _ref$wrapperElementTy === void 0 ? "div" : _ref$wrapperElementTy, _ref$nodeMapper = _ref.nodeMapper, nodeMapper = _ref$nodeMapper === void 0 ? function(node) {
    return node;
  } : _ref$nodeMapper, _ref$methodNames = _ref.methodNames, methodNames = _ref$methodNames === void 0 ? [] : _ref$methodNames, _ref$initPropNames = _ref.initPropNames, initPropNames = _ref$initPropNames === void 0 ? [] : _ref$initPropNames;
  return /* @__PURE__ */ (0, import_react17.forwardRef)(function(props, ref) {
    var domEl = (0, import_react17.useRef)();
    var _useState = (0, import_react17.useState)({}), _useState2 = _slicedToArray2(_useState, 2), prevProps = _useState2[0], setPrevProps = _useState2[1];
    (0, import_react17.useEffect)(function() {
      return setPrevProps(props);
    });
    var comp = (0, import_react17.useMemo)(function() {
      var configOptions = (0, import_fromentries.default)(initPropNames.filter(function(p) {
        return props.hasOwnProperty(p);
      }).map(function(prop) {
        return [prop, props[prop]];
      }));
      return kapsuleComponent(configOptions);
    }, []);
    useEffectOnce(function() {
      comp(nodeMapper(domEl.current));
    }, import_react17.useLayoutEffect);
    useEffectOnce(function() {
      return comp._destructor instanceof Function ? comp._destructor : void 0;
    });
    var _call = (0, import_react17.useCallback)(function(method) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return comp[method] instanceof Function ? comp[method].apply(comp, args) : void 0;
    }, [comp]);
    var dynamicProps = omit(props, [].concat(_toConsumableArray2(methodNames), _toConsumableArray2(initPropNames)));
    Object.keys(dynamicProps).filter(function(p) {
      return prevProps[p] !== props[p];
    }).forEach(function(p) {
      return _call(p, props[p]);
    });
    (0, import_react17.useImperativeHandle)(ref, function() {
      return (0, import_fromentries.default)(methodNames.map(function(method) {
        return [method, function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _call.apply(void 0, [method].concat(args));
        }];
      }));
    });
    return /* @__PURE__ */ import_react17.default.createElement(wrapperElementType, {
      ref: domEl
    });
  });
}
function useEffectOnce(effect4) {
  var useEffectFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : import_react17.useEffect;
  var destroyFunc = (0, import_react17.useRef)();
  var effectCalled = (0, import_react17.useRef)(false);
  var renderAfterCalled = (0, import_react17.useRef)(false);
  var _useState3 = (0, import_react17.useState)(0), _useState4 = _slicedToArray2(_useState3, 2);
  _useState4[0];
  var setVal = _useState4[1];
  if (effectCalled.current) {
    renderAfterCalled.current = true;
  }
  useEffectFn(function() {
    if (!effectCalled.current) {
      destroyFunc.current = effect4();
      effectCalled.current = true;
    }
    setVal(function(val) {
      return val + 1;
    });
    return function() {
      if (!renderAfterCalled.current)
        return;
      if (destroyFunc.current)
        destroyFunc.current();
    };
  }, []);
}

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root2 = freeGlobal_default || freeSelf || Function("return this")();
var root_default2 = root2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default2.Symbol;
var Symbol_default = Symbol2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index6 = string.length;
  while (index6-- && reWhitespace.test(string.charAt(index6))) {
  }
  return index6;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObject.js
function isObject(value) {
  var type2 = typeof value;
  return value != null && (type2 == "object" || type2 == "function");
}
var isObject_default = isObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/now.js
var now2 = function() {
  return root_default2.Date.now();
};
var now_default = now2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/debounce.js
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax = Math.max;
var nativeMin = Math.min;
function debounce4(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber_default(wait) || 0;
  if (isObject_default(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber_default(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now_default();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now_default());
  }
  function debounced() {
    var time = now_default(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_default = debounce4;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/throttle.js
var FUNC_ERROR_TEXT2 = "Expected a function";
function throttle(func, wait, options) {
  var leading = true, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT2);
  }
  if (isObject_default(options)) {
    leading = "leading" in options ? !!options.leading : leading;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  return debounce_default(func, wait, {
    "leading": leading,
    "maxWait": wait,
    "trailing": trailing
  });
}
var throttle_default = throttle;

// node_modules/.pnpm/@tweenjs+tween.js@21.0.0/node_modules/@tweenjs/tween.js/dist/tween.esm.js
var Easing = Object.freeze({
  Linear: Object.freeze({
    None: function(amount) {
      return amount;
    },
    In: function(amount) {
      return this.None(amount);
    },
    Out: function(amount) {
      return this.None(amount);
    },
    InOut: function(amount) {
      return this.None(amount);
    }
  }),
  Quadratic: Object.freeze({
    In: function(amount) {
      return amount * amount;
    },
    Out: function(amount) {
      return amount * (2 - amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount;
      }
      return -0.5 * (--amount * (amount - 2) - 1);
    }
  }),
  Cubic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount + 2);
    }
  }),
  Quartic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount;
    },
    Out: function(amount) {
      return 1 - --amount * amount * amount * amount;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount;
      }
      return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
    }
  }),
  Quintic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
    }
  }),
  Sinusoidal: Object.freeze({
    In: function(amount) {
      return 1 - Math.sin((1 - amount) * Math.PI / 2);
    },
    Out: function(amount) {
      return Math.sin(amount * Math.PI / 2);
    },
    InOut: function(amount) {
      return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));
    }
  }),
  Exponential: Object.freeze({
    In: function(amount) {
      return amount === 0 ? 0 : Math.pow(1024, amount - 1);
    },
    Out: function(amount) {
      return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      if ((amount *= 2) < 1) {
        return 0.5 * Math.pow(1024, amount - 1);
      }
      return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
    }
  }),
  Circular: Object.freeze({
    In: function(amount) {
      return 1 - Math.sqrt(1 - amount * amount);
    },
    Out: function(amount) {
      return Math.sqrt(1 - --amount * amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
      }
      return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
    }
  }),
  Elastic: Object.freeze({
    In: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
    },
    Out: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      amount *= 2;
      if (amount < 1) {
        return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
      }
      return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
    }
  }),
  Back: Object.freeze({
    In: function(amount) {
      var s = 1.70158;
      return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);
    },
    Out: function(amount) {
      var s = 1.70158;
      return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;
    },
    InOut: function(amount) {
      var s = 1.70158 * 1.525;
      if ((amount *= 2) < 1) {
        return 0.5 * (amount * amount * ((s + 1) * amount - s));
      }
      return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);
    }
  }),
  Bounce: Object.freeze({
    In: function(amount) {
      return 1 - Easing.Bounce.Out(1 - amount);
    },
    Out: function(amount) {
      if (amount < 1 / 2.75) {
        return 7.5625 * amount * amount;
      } else if (amount < 2 / 2.75) {
        return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
      } else if (amount < 2.5 / 2.75) {
        return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
      } else {
        return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
      }
    },
    InOut: function(amount) {
      if (amount < 0.5) {
        return Easing.Bounce.In(amount * 2) * 0.5;
      }
      return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
    }
  }),
  generatePow: function(power) {
    if (power === void 0) {
      power = 4;
    }
    power = power < Number.EPSILON ? Number.EPSILON : power;
    power = power > 1e4 ? 1e4 : power;
    return {
      In: function(amount) {
        return Math.pow(amount, power);
      },
      Out: function(amount) {
        return 1 - Math.pow(1 - amount, power);
      },
      InOut: function(amount) {
        if (amount < 0.5) {
          return Math.pow(amount * 2, power) / 2;
        }
        return (1 - Math.pow(2 - amount * 2, power)) / 2 + 0.5;
      }
    };
  }
});
var now3 = function() {
  return performance.now();
};
var Group = function() {
  function Group2() {
    this._tweens = {};
    this._tweensAddedDuringUpdate = {};
  }
  Group2.prototype.getAll = function() {
    var _this = this;
    return Object.keys(this._tweens).map(function(tweenId) {
      return _this._tweens[tweenId];
    });
  };
  Group2.prototype.removeAll = function() {
    this._tweens = {};
  };
  Group2.prototype.add = function(tween) {
    this._tweens[tween.getId()] = tween;
    this._tweensAddedDuringUpdate[tween.getId()] = tween;
  };
  Group2.prototype.remove = function(tween) {
    delete this._tweens[tween.getId()];
    delete this._tweensAddedDuringUpdate[tween.getId()];
  };
  Group2.prototype.update = function(time, preserve) {
    if (time === void 0) {
      time = now3();
    }
    if (preserve === void 0) {
      preserve = false;
    }
    var tweenIds = Object.keys(this._tweens);
    if (tweenIds.length === 0) {
      return false;
    }
    while (tweenIds.length > 0) {
      this._tweensAddedDuringUpdate = {};
      for (var i = 0; i < tweenIds.length; i++) {
        var tween = this._tweens[tweenIds[i]];
        var autoStart = !preserve;
        if (tween && tween.update(time, autoStart) === false && !preserve) {
          delete this._tweens[tweenIds[i]];
        }
      }
      tweenIds = Object.keys(this._tweensAddedDuringUpdate);
    }
    return true;
  };
  return Group2;
}();
var Interpolation = {
  Linear: function(v, k) {
    var m2 = v.length - 1;
    var f = m2 * k;
    var i = Math.floor(f);
    var fn2 = Interpolation.Utils.Linear;
    if (k < 0) {
      return fn2(v[0], v[1], f);
    }
    if (k > 1) {
      return fn2(v[m2], v[m2 - 1], m2 - f);
    }
    return fn2(v[i], v[i + 1 > m2 ? m2 : i + 1], f - i);
  },
  Bezier: function(v, k) {
    var b = 0;
    var n = v.length - 1;
    var pw = Math.pow;
    var bn = Interpolation.Utils.Bernstein;
    for (var i = 0; i <= n; i++) {
      b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
    }
    return b;
  },
  CatmullRom: function(v, k) {
    var m2 = v.length - 1;
    var f = m2 * k;
    var i = Math.floor(f);
    var fn2 = Interpolation.Utils.CatmullRom;
    if (v[0] === v[m2]) {
      if (k < 0) {
        i = Math.floor(f = m2 * (1 + k));
      }
      return fn2(v[(i - 1 + m2) % m2], v[i], v[(i + 1) % m2], v[(i + 2) % m2], f - i);
    } else {
      if (k < 0) {
        return v[0] - (fn2(v[0], v[0], v[1], v[1], -f) - v[0]);
      }
      if (k > 1) {
        return v[m2] - (fn2(v[m2], v[m2], v[m2 - 1], v[m2 - 1], f - m2) - v[m2]);
      }
      return fn2(v[i ? i - 1 : 0], v[i], v[m2 < i + 1 ? m2 : i + 1], v[m2 < i + 2 ? m2 : i + 2], f - i);
    }
  },
  Utils: {
    Linear: function(p0, p1, t3) {
      return (p1 - p0) * t3 + p0;
    },
    Bernstein: function(n, i) {
      var fc = Interpolation.Utils.Factorial;
      return fc(n) / fc(i) / fc(n - i);
    },
    Factorial: function() {
      var a2 = [1];
      return function(n) {
        var s = 1;
        if (a2[n]) {
          return a2[n];
        }
        for (var i = n; i > 1; i--) {
          s *= i;
        }
        a2[n] = s;
        return s;
      };
    }(),
    CatmullRom: function(p0, p1, p2, p3, t3) {
      var v0 = (p2 - p0) * 0.5;
      var v1 = (p3 - p1) * 0.5;
      var t22 = t3 * t3;
      var t32 = t3 * t22;
      return (2 * p1 - 2 * p2 + v0 + v1) * t32 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t22 + v0 * t3 + p1;
    }
  }
};
var Sequence = function() {
  function Sequence2() {
  }
  Sequence2.nextId = function() {
    return Sequence2._nextId++;
  };
  Sequence2._nextId = 0;
  return Sequence2;
}();
var mainGroup = new Group();
var Tween = function() {
  function Tween2(_object, _group) {
    if (_group === void 0) {
      _group = mainGroup;
    }
    this._object = _object;
    this._group = _group;
    this._isPaused = false;
    this._pauseStart = 0;
    this._valuesStart = {};
    this._valuesEnd = {};
    this._valuesStartRepeat = {};
    this._duration = 1e3;
    this._isDynamic = false;
    this._initialRepeat = 0;
    this._repeat = 0;
    this._yoyo = false;
    this._isPlaying = false;
    this._reversed = false;
    this._delayTime = 0;
    this._startTime = 0;
    this._easingFunction = Easing.Linear.None;
    this._interpolationFunction = Interpolation.Linear;
    this._chainedTweens = [];
    this._onStartCallbackFired = false;
    this._onEveryStartCallbackFired = false;
    this._id = Sequence.nextId();
    this._isChainStopped = false;
    this._propertiesAreSetUp = false;
    this._goToEnd = false;
  }
  Tween2.prototype.getId = function() {
    return this._id;
  };
  Tween2.prototype.isPlaying = function() {
    return this._isPlaying;
  };
  Tween2.prototype.isPaused = function() {
    return this._isPaused;
  };
  Tween2.prototype.to = function(target, duration) {
    if (duration === void 0) {
      duration = 1e3;
    }
    if (this._isPlaying)
      throw new Error("Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.");
    this._valuesEnd = target;
    this._propertiesAreSetUp = false;
    this._duration = duration;
    return this;
  };
  Tween2.prototype.duration = function(duration) {
    if (duration === void 0) {
      duration = 1e3;
    }
    this._duration = duration;
    return this;
  };
  Tween2.prototype.dynamic = function(dynamic) {
    if (dynamic === void 0) {
      dynamic = false;
    }
    this._isDynamic = dynamic;
    return this;
  };
  Tween2.prototype.start = function(time, overrideStartingValues) {
    if (time === void 0) {
      time = now3();
    }
    if (overrideStartingValues === void 0) {
      overrideStartingValues = false;
    }
    if (this._isPlaying) {
      return this;
    }
    this._group && this._group.add(this);
    this._repeat = this._initialRepeat;
    if (this._reversed) {
      this._reversed = false;
      for (var property in this._valuesStartRepeat) {
        this._swapEndStartRepeatValues(property);
        this._valuesStart[property] = this._valuesStartRepeat[property];
      }
    }
    this._isPlaying = true;
    this._isPaused = false;
    this._onStartCallbackFired = false;
    this._onEveryStartCallbackFired = false;
    this._isChainStopped = false;
    this._startTime = time;
    this._startTime += this._delayTime;
    if (!this._propertiesAreSetUp || overrideStartingValues) {
      this._propertiesAreSetUp = true;
      if (!this._isDynamic) {
        var tmp = {};
        for (var prop in this._valuesEnd)
          tmp[prop] = this._valuesEnd[prop];
        this._valuesEnd = tmp;
      }
      this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);
    }
    return this;
  };
  Tween2.prototype.startFromCurrentValues = function(time) {
    return this.start(time, true);
  };
  Tween2.prototype._setupProperties = function(_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {
    for (var property in _valuesEnd) {
      var startValue = _object[property];
      var startValueIsArray = Array.isArray(startValue);
      var propType = startValueIsArray ? "array" : typeof startValue;
      var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);
      if (propType === "undefined" || propType === "function") {
        continue;
      }
      if (isInterpolationList) {
        var endValues = _valuesEnd[property];
        if (endValues.length === 0) {
          continue;
        }
        var temp = [startValue];
        for (var i = 0, l = endValues.length; i < l; i += 1) {
          var value = this._handleRelativeValue(startValue, endValues[i]);
          if (isNaN(value)) {
            isInterpolationList = false;
            console.warn("Found invalid interpolation list. Skipping.");
            break;
          }
          temp.push(value);
        }
        if (isInterpolationList) {
          _valuesEnd[property] = temp;
        }
      }
      if ((propType === "object" || startValueIsArray) && startValue && !isInterpolationList) {
        _valuesStart[property] = startValueIsArray ? [] : {};
        var nestedObject = startValue;
        for (var prop in nestedObject) {
          _valuesStart[property][prop] = nestedObject[prop];
        }
        _valuesStartRepeat[property] = startValueIsArray ? [] : {};
        var endValues = _valuesEnd[property];
        if (!this._isDynamic) {
          var tmp = {};
          for (var prop in endValues)
            tmp[prop] = endValues[prop];
          _valuesEnd[property] = endValues = tmp;
        }
        this._setupProperties(nestedObject, _valuesStart[property], endValues, _valuesStartRepeat[property], overrideStartingValues);
      } else {
        if (typeof _valuesStart[property] === "undefined" || overrideStartingValues) {
          _valuesStart[property] = startValue;
        }
        if (!startValueIsArray) {
          _valuesStart[property] *= 1;
        }
        if (isInterpolationList) {
          _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();
        } else {
          _valuesStartRepeat[property] = _valuesStart[property] || 0;
        }
      }
    }
  };
  Tween2.prototype.stop = function() {
    if (!this._isChainStopped) {
      this._isChainStopped = true;
      this.stopChainedTweens();
    }
    if (!this._isPlaying) {
      return this;
    }
    this._group && this._group.remove(this);
    this._isPlaying = false;
    this._isPaused = false;
    if (this._onStopCallback) {
      this._onStopCallback(this._object);
    }
    return this;
  };
  Tween2.prototype.end = function() {
    this._goToEnd = true;
    this.update(Infinity);
    return this;
  };
  Tween2.prototype.pause = function(time) {
    if (time === void 0) {
      time = now3();
    }
    if (this._isPaused || !this._isPlaying) {
      return this;
    }
    this._isPaused = true;
    this._pauseStart = time;
    this._group && this._group.remove(this);
    return this;
  };
  Tween2.prototype.resume = function(time) {
    if (time === void 0) {
      time = now3();
    }
    if (!this._isPaused || !this._isPlaying) {
      return this;
    }
    this._isPaused = false;
    this._startTime += time - this._pauseStart;
    this._pauseStart = 0;
    this._group && this._group.add(this);
    return this;
  };
  Tween2.prototype.stopChainedTweens = function() {
    for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
      this._chainedTweens[i].stop();
    }
    return this;
  };
  Tween2.prototype.group = function(group) {
    if (group === void 0) {
      group = mainGroup;
    }
    this._group = group;
    return this;
  };
  Tween2.prototype.delay = function(amount) {
    if (amount === void 0) {
      amount = 0;
    }
    this._delayTime = amount;
    return this;
  };
  Tween2.prototype.repeat = function(times) {
    if (times === void 0) {
      times = 0;
    }
    this._initialRepeat = times;
    this._repeat = times;
    return this;
  };
  Tween2.prototype.repeatDelay = function(amount) {
    this._repeatDelayTime = amount;
    return this;
  };
  Tween2.prototype.yoyo = function(yoyo) {
    if (yoyo === void 0) {
      yoyo = false;
    }
    this._yoyo = yoyo;
    return this;
  };
  Tween2.prototype.easing = function(easingFunction) {
    if (easingFunction === void 0) {
      easingFunction = Easing.Linear.None;
    }
    this._easingFunction = easingFunction;
    return this;
  };
  Tween2.prototype.interpolation = function(interpolationFunction) {
    if (interpolationFunction === void 0) {
      interpolationFunction = Interpolation.Linear;
    }
    this._interpolationFunction = interpolationFunction;
    return this;
  };
  Tween2.prototype.chain = function() {
    var tweens = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      tweens[_i] = arguments[_i];
    }
    this._chainedTweens = tweens;
    return this;
  };
  Tween2.prototype.onStart = function(callback) {
    this._onStartCallback = callback;
    return this;
  };
  Tween2.prototype.onEveryStart = function(callback) {
    this._onEveryStartCallback = callback;
    return this;
  };
  Tween2.prototype.onUpdate = function(callback) {
    this._onUpdateCallback = callback;
    return this;
  };
  Tween2.prototype.onRepeat = function(callback) {
    this._onRepeatCallback = callback;
    return this;
  };
  Tween2.prototype.onComplete = function(callback) {
    this._onCompleteCallback = callback;
    return this;
  };
  Tween2.prototype.onStop = function(callback) {
    this._onStopCallback = callback;
    return this;
  };
  Tween2.prototype.update = function(time, autoStart) {
    if (time === void 0) {
      time = now3();
    }
    if (autoStart === void 0) {
      autoStart = true;
    }
    if (this._isPaused)
      return true;
    var property;
    var elapsed;
    var endTime = this._startTime + this._duration;
    if (!this._goToEnd && !this._isPlaying) {
      if (time > endTime)
        return false;
      if (autoStart)
        this.start(time, true);
    }
    this._goToEnd = false;
    if (time < this._startTime) {
      return true;
    }
    if (this._onStartCallbackFired === false) {
      if (this._onStartCallback) {
        this._onStartCallback(this._object);
      }
      this._onStartCallbackFired = true;
    }
    if (this._onEveryStartCallbackFired === false) {
      if (this._onEveryStartCallback) {
        this._onEveryStartCallback(this._object);
      }
      this._onEveryStartCallbackFired = true;
    }
    elapsed = (time - this._startTime) / this._duration;
    elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;
    var value = this._easingFunction(elapsed);
    this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
    if (this._onUpdateCallback) {
      this._onUpdateCallback(this._object, elapsed);
    }
    if (elapsed === 1) {
      if (this._repeat > 0) {
        if (isFinite(this._repeat)) {
          this._repeat--;
        }
        for (property in this._valuesStartRepeat) {
          if (!this._yoyo && typeof this._valuesEnd[property] === "string") {
            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
          }
          if (this._yoyo) {
            this._swapEndStartRepeatValues(property);
          }
          this._valuesStart[property] = this._valuesStartRepeat[property];
        }
        if (this._yoyo) {
          this._reversed = !this._reversed;
        }
        if (this._repeatDelayTime !== void 0) {
          this._startTime = time + this._repeatDelayTime;
        } else {
          this._startTime = time + this._delayTime;
        }
        if (this._onRepeatCallback) {
          this._onRepeatCallback(this._object);
        }
        this._onEveryStartCallbackFired = false;
        return true;
      } else {
        if (this._onCompleteCallback) {
          this._onCompleteCallback(this._object);
        }
        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
          this._chainedTweens[i].start(this._startTime + this._duration, false);
        }
        this._isPlaying = false;
        return false;
      }
    }
    return true;
  };
  Tween2.prototype._updateProperties = function(_object, _valuesStart, _valuesEnd, value) {
    for (var property in _valuesEnd) {
      if (_valuesStart[property] === void 0) {
        continue;
      }
      var start3 = _valuesStart[property] || 0;
      var end2 = _valuesEnd[property];
      var startIsArray = Array.isArray(_object[property]);
      var endIsArray = Array.isArray(end2);
      var isInterpolationList = !startIsArray && endIsArray;
      if (isInterpolationList) {
        _object[property] = this._interpolationFunction(end2, value);
      } else if (typeof end2 === "object" && end2) {
        this._updateProperties(_object[property], start3, end2, value);
      } else {
        end2 = this._handleRelativeValue(start3, end2);
        if (typeof end2 === "number") {
          _object[property] = start3 + (end2 - start3) * value;
        }
      }
    }
  };
  Tween2.prototype._handleRelativeValue = function(start3, end2) {
    if (typeof end2 !== "string") {
      return end2;
    }
    if (end2.charAt(0) === "+" || end2.charAt(0) === "-") {
      return start3 + parseFloat(end2);
    }
    return parseFloat(end2);
  };
  Tween2.prototype._swapEndStartRepeatValues = function(property) {
    var tmp = this._valuesStartRepeat[property];
    var endValue = this._valuesEnd[property];
    if (typeof endValue === "string") {
      this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);
    } else {
      this._valuesStartRepeat[property] = this._valuesEnd[property];
    }
    this._valuesEnd[property] = tmp;
  };
  return Tween2;
}();
var nextId = Sequence.nextId;
var TWEEN = mainGroup;
var getAll = TWEEN.getAll.bind(TWEEN);
var removeAll2 = TWEEN.removeAll.bind(TWEEN);
var add2 = TWEEN.add.bind(TWEEN);
var remove2 = TWEEN.remove.bind(TWEEN);
var update = TWEEN.update.bind(TWEEN);

// node_modules/.pnpm/kapsule@1.14.5/node_modules/kapsule/dist/kapsule.mjs
function _iterableToArrayLimit3(r, l) {
  var t3 = r == null ? null : typeof Symbol != "undefined" && r[Symbol.iterator] || r["@@iterator"];
  if (t3 != null) {
    var e, n, i, u, a2 = [], f = true, o = false;
    try {
      if (i = (t3 = t3.call(r)).next, l === 0) {
        if (Object(t3) !== t3)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t3)).done) && (a2.push(e.value), a2.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && t3.return != null && (u = t3.return(), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a2;
  }
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey2(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _slicedToArray3(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive2(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var Prop = /* @__PURE__ */ _createClass(function Prop2(name, _ref) {
  var _ref$default = _ref["default"], defaultVal = _ref$default === void 0 ? null : _ref$default, _ref$triggerUpdate = _ref.triggerUpdate, triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate, _ref$onChange = _ref.onChange, onChange15 = _ref$onChange === void 0 ? function(newVal, state) {
  } : _ref$onChange;
  _classCallCheck(this, Prop2);
  this.name = name;
  this.defaultVal = defaultVal;
  this.triggerUpdate = triggerUpdate;
  this.onChange = onChange15;
});
function index2(_ref2) {
  var _ref2$stateInit = _ref2.stateInit, stateInit3 = _ref2$stateInit === void 0 ? function() {
    return {};
  } : _ref2$stateInit, _ref2$props = _ref2.props, rawProps = _ref2$props === void 0 ? {} : _ref2$props, _ref2$methods = _ref2.methods, methods = _ref2$methods === void 0 ? {} : _ref2$methods, _ref2$aliases = _ref2.aliases, aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases, _ref2$init = _ref2.init, initFn = _ref2$init === void 0 ? function() {
  } : _ref2$init, _ref2$update = _ref2.update, updateFn2 = _ref2$update === void 0 ? function() {
  } : _ref2$update;
  var props = Object.keys(rawProps).map(function(propName) {
    return new Prop(propName, rawProps[propName]);
  });
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var state = Object.assign({}, stateInit3 instanceof Function ? stateInit3(options) : stateInit3, {
      initialised: false
    });
    var changedProps = {};
    function comp(nodeElement) {
      initStatic(nodeElement, options);
      digest();
      return comp;
    }
    var initStatic = function initStatic2(nodeElement, options2) {
      initFn.call(comp, nodeElement, state, options2);
      state.initialised = true;
    };
    var digest = debounce_default(function() {
      if (!state.initialised) {
        return;
      }
      updateFn2.call(comp, state, changedProps);
      changedProps = {};
    }, 1);
    props.forEach(function(prop) {
      comp[prop.name] = getSetProp(prop);
      function getSetProp(_ref3) {
        var prop2 = _ref3.name, _ref3$triggerUpdate = _ref3.triggerUpdate, redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate, _ref3$onChange = _ref3.onChange, onChange15 = _ref3$onChange === void 0 ? function(newVal, state2) {
        } : _ref3$onChange, _ref3$defaultVal = _ref3.defaultVal, defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;
        return function(_5) {
          var curVal = state[prop2];
          if (!arguments.length) {
            return curVal;
          }
          var val = _5 === void 0 ? defaultVal : _5;
          state[prop2] = val;
          onChange15.call(comp, val, state, curVal);
          !changedProps.hasOwnProperty(prop2) && (changedProps[prop2] = curVal);
          if (redigest) {
            digest();
          }
          return comp;
        };
      }
    });
    Object.keys(methods).forEach(function(methodName) {
      comp[methodName] = function() {
        var _methods$methodName;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [comp, state].concat(args));
      };
    });
    Object.entries(aliases).forEach(function(_ref4) {
      var _ref5 = _slicedToArray3(_ref4, 2), alias = _ref5[0], target = _ref5[1];
      return comp[alias] = comp[target];
    });
    comp.resetProps = function() {
      props.forEach(function(prop) {
        comp[prop.name](prop.defaultVal);
      });
      return comp;
    };
    comp.resetProps();
    state._rerender = digest;
    return comp;
  };
}

// node_modules/.pnpm/accessor-fn@1.5.0/node_modules/accessor-fn/dist/accessor-fn.mjs
var index3 = function(p) {
  return typeof p === "function" ? p : typeof p === "string" ? function(obj) {
    return obj[p];
  } : function(obj) {
    return p;
  };
};

// node_modules/.pnpm/tinycolor2@1.6.0/node_modules/tinycolor2/esm/tinycolor.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
var trimLeft = /^\s+/;
var trimRight = /\s+$/;
function tinycolor(color2, opts) {
  color2 = color2 ? color2 : "";
  opts = opts || {};
  if (color2 instanceof tinycolor) {
    return color2;
  }
  if (!(this instanceof tinycolor)) {
    return new tinycolor(color2, opts);
  }
  var rgb2 = inputToRGB(color2);
  this._originalInput = color2, this._r = rgb2.r, this._g = rgb2.g, this._b = rgb2.b, this._a = rgb2.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb2.format;
  this._gradientType = opts.gradientType;
  if (this._r < 1)
    this._r = Math.round(this._r);
  if (this._g < 1)
    this._g = Math.round(this._g);
  if (this._b < 1)
    this._b = Math.round(this._b);
  this._ok = rgb2.ok;
}
tinycolor.prototype = {
  isDark: function isDark() {
    return this.getBrightness() < 128;
  },
  isLight: function isLight() {
    return !this.isDark();
  },
  isValid: function isValid() {
    return this._ok;
  },
  getOriginalInput: function getOriginalInput() {
    return this._originalInput;
  },
  getFormat: function getFormat() {
    return this._format;
  },
  getAlpha: function getAlpha() {
    return this._a;
  },
  getBrightness: function getBrightness() {
    var rgb2 = this.toRgb();
    return (rgb2.r * 299 + rgb2.g * 587 + rgb2.b * 114) / 1e3;
  },
  getLuminance: function getLuminance() {
    var rgb2 = this.toRgb();
    var RsRGB, GsRGB, BsRGB, R, G, B;
    RsRGB = rgb2.r / 255;
    GsRGB = rgb2.g / 255;
    BsRGB = rgb2.b / 255;
    if (RsRGB <= 0.03928)
      R = RsRGB / 12.92;
    else
      R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    if (GsRGB <= 0.03928)
      G = GsRGB / 12.92;
    else
      G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    if (BsRGB <= 0.03928)
      B = BsRGB / 12.92;
    else
      B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    return 0.2126 * R + 0.7152 * G + 0.0722 * B;
  },
  setAlpha: function setAlpha(value) {
    this._a = boundAlpha(value);
    this._roundA = Math.round(100 * this._a) / 100;
    return this;
  },
  toHsv: function toHsv() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
      a: this._a
    };
  },
  toHsvString: function toHsvString() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v = Math.round(hsv.v * 100);
    return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
  },
  toHsl: function toHsl() {
    var hsl2 = rgbToHsl(this._r, this._g, this._b);
    return {
      h: hsl2.h * 360,
      s: hsl2.s,
      l: hsl2.l,
      a: this._a
    };
  },
  toHslString: function toHslString() {
    var hsl2 = rgbToHsl(this._r, this._g, this._b);
    var h = Math.round(hsl2.h * 360), s = Math.round(hsl2.s * 100), l = Math.round(hsl2.l * 100);
    return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
  },
  toHex: function toHex(allow3Char) {
    return rgbToHex(this._r, this._g, this._b, allow3Char);
  },
  toHexString: function toHexString(allow3Char) {
    return "#" + this.toHex(allow3Char);
  },
  toHex8: function toHex8(allow4Char) {
    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
  },
  toHex8String: function toHex8String(allow4Char) {
    return "#" + this.toHex8(allow4Char);
  },
  toRgb: function toRgb() {
    return {
      r: Math.round(this._r),
      g: Math.round(this._g),
      b: Math.round(this._b),
      a: this._a
    };
  },
  toRgbString: function toRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
  },
  toPercentageRgb: function toPercentageRgb() {
    return {
      r: Math.round(bound01(this._r, 255) * 100) + "%",
      g: Math.round(bound01(this._g, 255) * 100) + "%",
      b: Math.round(bound01(this._b, 255) * 100) + "%",
      a: this._a
    };
  },
  toPercentageRgbString: function toPercentageRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
  },
  toName: function toName() {
    if (this._a === 0) {
      return "transparent";
    }
    if (this._a < 1) {
      return false;
    }
    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
  },
  toFilter: function toFilter(secondColor) {
    var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
    var secondHex8String = hex8String;
    var gradientType = this._gradientType ? "GradientType = 1, " : "";
    if (secondColor) {
      var s = tinycolor(secondColor);
      secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
    }
    return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
  },
  toString: function toString(format) {
    var formatSet = !!format;
    format = format || this._format;
    var formattedString = false;
    var hasAlpha = this._a < 1 && this._a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
    if (needsAlphaFormat) {
      if (format === "name" && this._a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format === "hex" || format === "hex6") {
      formattedString = this.toHexString();
    }
    if (format === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format === "name") {
      formattedString = this.toName();
    }
    if (format === "hsl") {
      formattedString = this.toHslString();
    }
    if (format === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  },
  clone: function clone() {
    return tinycolor(this.toString());
  },
  _applyModification: function _applyModification(fn2, args) {
    var color2 = fn2.apply(null, [this].concat([].slice.call(args)));
    this._r = color2._r;
    this._g = color2._g;
    this._b = color2._b;
    this.setAlpha(color2._a);
    return this;
  },
  lighten: function lighten() {
    return this._applyModification(_lighten, arguments);
  },
  brighten: function brighten() {
    return this._applyModification(_brighten, arguments);
  },
  darken: function darken() {
    return this._applyModification(_darken, arguments);
  },
  desaturate: function desaturate() {
    return this._applyModification(_desaturate, arguments);
  },
  saturate: function saturate() {
    return this._applyModification(_saturate, arguments);
  },
  greyscale: function greyscale() {
    return this._applyModification(_greyscale, arguments);
  },
  spin: function spin() {
    return this._applyModification(_spin, arguments);
  },
  _applyCombination: function _applyCombination(fn2, args) {
    return fn2.apply(null, [this].concat([].slice.call(args)));
  },
  analogous: function analogous() {
    return this._applyCombination(_analogous, arguments);
  },
  complement: function complement() {
    return this._applyCombination(_complement, arguments);
  },
  monochromatic: function monochromatic() {
    return this._applyCombination(_monochromatic, arguments);
  },
  splitcomplement: function splitcomplement() {
    return this._applyCombination(_splitcomplement, arguments);
  },
  triad: function triad() {
    return this._applyCombination(polyad, [3]);
  },
  tetrad: function tetrad() {
    return this._applyCombination(polyad, [4]);
  }
};
tinycolor.fromRatio = function(color2, opts) {
  if (_typeof2(color2) == "object") {
    var newColor = {};
    for (var i in color2) {
      if (color2.hasOwnProperty(i)) {
        if (i === "a") {
          newColor[i] = color2[i];
        } else {
          newColor[i] = convertToPercentage(color2[i]);
        }
      }
    }
    color2 = newColor;
  }
  return tinycolor(color2, opts);
};
function inputToRGB(color2) {
  var rgb2 = {
    r: 0,
    g: 0,
    b: 0
  };
  var a2 = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format = false;
  if (typeof color2 == "string") {
    color2 = stringInputToObject(color2);
  }
  if (_typeof2(color2) == "object") {
    if (isValidCSSUnit(color2.r) && isValidCSSUnit(color2.g) && isValidCSSUnit(color2.b)) {
      rgb2 = rgbToRgb(color2.r, color2.g, color2.b);
      ok = true;
      format = String(color2.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color2.h) && isValidCSSUnit(color2.s) && isValidCSSUnit(color2.v)) {
      s = convertToPercentage(color2.s);
      v = convertToPercentage(color2.v);
      rgb2 = hsvToRgb(color2.h, s, v);
      ok = true;
      format = "hsv";
    } else if (isValidCSSUnit(color2.h) && isValidCSSUnit(color2.s) && isValidCSSUnit(color2.l)) {
      s = convertToPercentage(color2.s);
      l = convertToPercentage(color2.l);
      rgb2 = hslToRgb(color2.h, s, l);
      ok = true;
      format = "hsl";
    }
    if (color2.hasOwnProperty("a")) {
      a2 = color2.a;
    }
  }
  a2 = boundAlpha(a2);
  return {
    ok,
    format: color2.format || format,
    r: Math.min(255, Math.max(rgb2.r, 0)),
    g: Math.min(255, Math.max(rgb2.g, 0)),
    b: Math.min(255, Math.max(rgb2.b, 0)),
    a: a2
  };
}
function rgbToRgb(r, g, b) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max5 = Math.max(r, g, b), min5 = Math.min(r, g, b);
  var h, s, l = (max5 + min5) / 2;
  if (max5 == min5) {
    h = s = 0;
  } else {
    var d = max5 - min5;
    s = l > 0.5 ? d / (2 - max5 - min5) : d / (max5 + min5);
    switch (max5) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    l
  };
}
function hslToRgb(h, s, l) {
  var r, g, b;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  function hue2rgb(p2, q2, t3) {
    if (t3 < 0)
      t3 += 1;
    if (t3 > 1)
      t3 -= 1;
    if (t3 < 1 / 6)
      return p2 + (q2 - p2) * 6 * t3;
    if (t3 < 1 / 2)
      return q2;
    if (t3 < 2 / 3)
      return p2 + (q2 - p2) * (2 / 3 - t3) * 6;
    return p2;
  }
  if (s === 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHsv(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max5 = Math.max(r, g, b), min5 = Math.min(r, g, b);
  var h, s, v = max5;
  var d = max5 - min5;
  s = max5 === 0 ? 0 : d / max5;
  if (max5 == min5) {
    h = 0;
  } else {
    switch (max5) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    v
  };
}
function hsvToRgb(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t3 = v * (1 - (1 - f) * s), mod = i % 6, r = [v, q, p, p, t3, v][mod], g = [t3, v, v, q, p, p][mod], b = [p, p, t3, v, v, q][mod];
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHex(r, g, b, allow3Char) {
  var hex2 = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  if (allow3Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1)) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r, g, b, a2, allow4Char) {
  var hex2 = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a2))];
  if (allow4Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1) && hex2[3].charAt(0) == hex2[3].charAt(1)) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function rgbaToArgbHex(r, g, b, a2) {
  var hex2 = [pad2(convertDecimalToHex(a2)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  return hex2.join("");
}
tinycolor.equals = function(color1, color2) {
  if (!color1 || !color2)
    return false;
  return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};
tinycolor.random = function() {
  return tinycolor.fromRatio({
    r: Math.random(),
    g: Math.random(),
    b: Math.random()
  });
};
function _desaturate(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color2).toHsl();
  hsl2.s -= amount / 100;
  hsl2.s = clamp01(hsl2.s);
  return tinycolor(hsl2);
}
function _saturate(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color2).toHsl();
  hsl2.s += amount / 100;
  hsl2.s = clamp01(hsl2.s);
  return tinycolor(hsl2);
}
function _greyscale(color2) {
  return tinycolor(color2).desaturate(100);
}
function _lighten(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color2).toHsl();
  hsl2.l += amount / 100;
  hsl2.l = clamp01(hsl2.l);
  return tinycolor(hsl2);
}
function _brighten(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var rgb2 = tinycolor(color2).toRgb();
  rgb2.r = Math.max(0, Math.min(255, rgb2.r - Math.round(255 * -(amount / 100))));
  rgb2.g = Math.max(0, Math.min(255, rgb2.g - Math.round(255 * -(amount / 100))));
  rgb2.b = Math.max(0, Math.min(255, rgb2.b - Math.round(255 * -(amount / 100))));
  return tinycolor(rgb2);
}
function _darken(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl2 = tinycolor(color2).toHsl();
  hsl2.l -= amount / 100;
  hsl2.l = clamp01(hsl2.l);
  return tinycolor(hsl2);
}
function _spin(color2, amount) {
  var hsl2 = tinycolor(color2).toHsl();
  var hue = (hsl2.h + amount) % 360;
  hsl2.h = hue < 0 ? 360 + hue : hue;
  return tinycolor(hsl2);
}
function _complement(color2) {
  var hsl2 = tinycolor(color2).toHsl();
  hsl2.h = (hsl2.h + 180) % 360;
  return tinycolor(hsl2);
}
function polyad(color2, number) {
  if (isNaN(number) || number <= 0) {
    throw new Error("Argument to polyad must be a positive number");
  }
  var hsl2 = tinycolor(color2).toHsl();
  var result = [tinycolor(color2)];
  var step = 360 / number;
  for (var i = 1; i < number; i++) {
    result.push(tinycolor({
      h: (hsl2.h + i * step) % 360,
      s: hsl2.s,
      l: hsl2.l
    }));
  }
  return result;
}
function _splitcomplement(color2) {
  var hsl2 = tinycolor(color2).toHsl();
  var h = hsl2.h;
  return [tinycolor(color2), tinycolor({
    h: (h + 72) % 360,
    s: hsl2.s,
    l: hsl2.l
  }), tinycolor({
    h: (h + 216) % 360,
    s: hsl2.s,
    l: hsl2.l
  })];
}
function _analogous(color2, results, slices) {
  results = results || 6;
  slices = slices || 30;
  var hsl2 = tinycolor(color2).toHsl();
  var part = 360 / slices;
  var ret = [tinycolor(color2)];
  for (hsl2.h = (hsl2.h - (part * results >> 1) + 720) % 360; --results; ) {
    hsl2.h = (hsl2.h + part) % 360;
    ret.push(tinycolor(hsl2));
  }
  return ret;
}
function _monochromatic(color2, results) {
  results = results || 6;
  var hsv = tinycolor(color2).toHsv();
  var h = hsv.h, s = hsv.s, v = hsv.v;
  var ret = [];
  var modification = 1 / results;
  while (results--) {
    ret.push(tinycolor({
      h,
      s,
      v
    }));
    v = (v + modification) % 1;
  }
  return ret;
}
tinycolor.mix = function(color1, color2, amount) {
  amount = amount === 0 ? 0 : amount || 50;
  var rgb1 = tinycolor(color1).toRgb();
  var rgb2 = tinycolor(color2).toRgb();
  var p = amount / 100;
  var rgba2 = {
    r: (rgb2.r - rgb1.r) * p + rgb1.r,
    g: (rgb2.g - rgb1.g) * p + rgb1.g,
    b: (rgb2.b - rgb1.b) * p + rgb1.b,
    a: (rgb2.a - rgb1.a) * p + rgb1.a
  };
  return tinycolor(rgba2);
};
tinycolor.readability = function(color1, color2) {
  var c1 = tinycolor(color1);
  var c2 = tinycolor(color2);
  return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
};
tinycolor.isReadable = function(color1, color2, wcag2) {
  var readability = tinycolor.readability(color1, color2);
  var wcag2Parms, out;
  out = false;
  wcag2Parms = validateWCAG2Parms(wcag2);
  switch (wcag2Parms.level + wcag2Parms.size) {
    case "AAsmall":
    case "AAAlarge":
      out = readability >= 4.5;
      break;
    case "AAlarge":
      out = readability >= 3;
      break;
    case "AAAsmall":
      out = readability >= 7;
      break;
  }
  return out;
};
tinycolor.mostReadable = function(baseColor, colorList, args) {
  var bestColor = null;
  var bestScore = 0;
  var readability;
  var includeFallbackColors, level, size;
  args = args || {};
  includeFallbackColors = args.includeFallbackColors;
  level = args.level;
  size = args.size;
  for (var i = 0; i < colorList.length; i++) {
    readability = tinycolor.readability(baseColor, colorList[i]);
    if (readability > bestScore) {
      bestScore = readability;
      bestColor = tinycolor(colorList[i]);
    }
  }
  if (tinycolor.isReadable(baseColor, bestColor, {
    level,
    size
  }) || !includeFallbackColors) {
    return bestColor;
  } else {
    args.includeFallbackColors = false;
    return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
  }
};
var names = tinycolor.names = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "0ff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "00f",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  burntsienna: "ea7e5d",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "0ff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "f0f",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "663399",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
var hexNames = tinycolor.hexNames = flip2(names);
function flip2(o) {
  var flipped = {};
  for (var i in o) {
    if (o.hasOwnProperty(i)) {
      flipped[o[i]] = i;
    }
  }
  return flipped;
}
function boundAlpha(a2) {
  a2 = parseFloat(a2);
  if (isNaN(a2) || a2 < 0 || a2 > 1) {
    a2 = 1;
  }
  return a2;
}
function bound01(n, max5) {
  if (isOnePointZero(n))
    n = "100%";
  var processPercent = isPercentage(n);
  n = Math.min(max5, Math.max(0, parseFloat(n)));
  if (processPercent) {
    n = parseInt(n * max5, 10) / 100;
  }
  if (Math.abs(n - max5) < 1e-6) {
    return 1;
  }
  return n % max5 / parseFloat(max5);
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function isOnePointZero(n) {
  return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") != -1;
}
function pad2(c2) {
  return c2.length == 1 ? "0" + c2 : "" + c2;
}
function convertToPercentage(n) {
  if (n <= 1) {
    n = n * 100 + "%";
  }
  return n;
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
var matchers = function() {
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  return {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
}();
function isValidCSSUnit(color2) {
  return !!matchers.CSS_UNIT.exec(color2);
}
function stringInputToObject(color2) {
  color2 = color2.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
  var named2 = false;
  if (names[color2]) {
    color2 = names[color2];
    named2 = true;
  } else if (color2 == "transparent") {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: "name"
    };
  }
  var match;
  if (match = matchers.rgb.exec(color2)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3]
    };
  }
  if (match = matchers.rgba.exec(color2)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsl.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3]
    };
  }
  if (match = matchers.hsla.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsv.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3]
    };
  }
  if (match = matchers.hsva.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hex8.exec(color2)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named2 ? "name" : "hex8"
    };
  }
  if (match = matchers.hex6.exec(color2)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named2 ? "name" : "hex"
    };
  }
  if (match = matchers.hex4.exec(color2)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      a: convertHexToDecimal(match[4] + "" + match[4]),
      format: named2 ? "name" : "hex8"
    };
  }
  if (match = matchers.hex3.exec(color2)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      format: named2 ? "name" : "hex"
    };
  }
  return false;
}
function validateWCAG2Parms(parms) {
  var level, size;
  parms = parms || {
    level: "AA",
    size: "small"
  };
  level = (parms.level || "AA").toUpperCase();
  size = (parms.size || "small").toLowerCase();
  if (level !== "AA" && level !== "AAA") {
    level = "AA";
  }
  if (size !== "small" && size !== "large") {
    size = "small";
  }
  return {
    level,
    size
  };
}

// node_modules/.pnpm/canvas-color-tracker@1.2.1/node_modules/canvas-color-tracker/dist/canvas-color-tracker.mjs
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey3(descriptor.key), descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _toConsumableArray3(arr) {
  return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread3();
}
function _arrayWithoutHoles3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray4(arr);
}
function _iterableToArray3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray4(o, minLen);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive3(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey3(arg) {
  var key = _toPrimitive3(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var ENTROPY = 123;
var int2HexColor = function int2HexColor2(num) {
  return "#".concat(Math.min(num, Math.pow(2, 24)).toString(16).padStart(6, "0"));
};
var rgb2Int = function rgb2Int2(r, g, b) {
  return (r << 16) + (g << 8) + b;
};
var colorStr2Int = function colorStr2Int2(str) {
  var _tinyColor$toRgb = tinycolor(str).toRgb(), r = _tinyColor$toRgb.r, g = _tinyColor$toRgb.g, b = _tinyColor$toRgb.b;
  return rgb2Int(r, g, b);
};
var checksum = function checksum2(n, csBits) {
  return n * ENTROPY % Math.pow(2, csBits);
};
var _default = /* @__PURE__ */ function() {
  function _default11() {
    var csBits = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6;
    _classCallCheck2(this, _default11);
    this.csBits = csBits;
    this.registry = ["__reserved for background__"];
  }
  _createClass2(_default11, [{
    key: "register",
    value: function register(obj) {
      if (this.registry.length >= Math.pow(2, 24 - this.csBits)) {
        return null;
      }
      var idx = this.registry.length;
      var cs = checksum(idx, this.csBits);
      var color2 = int2HexColor(idx + (cs << 24 - this.csBits));
      this.registry.push(obj);
      return color2;
    }
  }, {
    key: "lookup",
    value: function lookup(color2) {
      var n = typeof color2 === "string" ? colorStr2Int(color2) : rgb2Int.apply(void 0, _toConsumableArray3(color2));
      if (!n)
        return null;
      var idx = n & Math.pow(2, 24 - this.csBits) - 1;
      var cs = n >> 24 - this.csBits & Math.pow(2, this.csBits) - 1;
      if (checksum(idx, this.csBits) !== cs || idx >= this.registry.length)
        return null;
      return this.registry[idx];
    }
  }]);
  return _default11;
}();

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/center.js
function center_default(x3, y3, z2) {
  var nodes, strength = 1;
  if (x3 == null)
    x3 = 0;
  if (y3 == null)
    y3 = 0;
  if (z2 == null)
    z2 = 0;
  function force() {
    var i, n = nodes.length, node, sx = 0, sy = 0, sz = 0;
    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x || 0, sy += node.y || 0, sz += node.z || 0;
    }
    for (sx = (sx / n - x3) * strength, sy = (sy / n - y3) * strength, sz = (sz / n - z2) * strength, i = 0; i < n; ++i) {
      node = nodes[i];
      if (sx) {
        node.x -= sx;
      }
      if (sy) {
        node.y -= sy;
      }
      if (sz) {
        node.z -= sz;
      }
    }
  }
  force.initialize = function(_5) {
    nodes = _5;
  };
  force.x = function(_5) {
    return arguments.length ? (x3 = +_5, force) : x3;
  };
  force.y = function(_5) {
    return arguments.length ? (y3 = +_5, force) : y3;
  };
  force.z = function(_5) {
    return arguments.length ? (z2 = +_5, force) : z2;
  };
  force.strength = function(_5) {
    return arguments.length ? (strength = +_5, force) : strength;
  };
  return force;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/add.js
function add_default2(d) {
  const x3 = +this._x.call(null, d);
  return add3(this.cover(x3), x3, d);
}
function add3(tree, x3, d) {
  if (isNaN(x3))
    return tree;
  var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, x1 = tree._x1, xm, xp, right2, i, j;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right2 = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (parent = node, !(node = node[i = +right2]))
      return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  if (x3 === xp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(2) : tree._root = new Array(2);
    if (right2 = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
  } while ((i = +right2) === (j = +(xp >= xm)));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll2(data) {
  if (!Array.isArray(data))
    data = Array.from(data);
  const n = data.length;
  const xz = new Float64Array(n);
  let x0 = Infinity, x1 = -Infinity;
  for (let i = 0, x3; i < n; ++i) {
    if (isNaN(x3 = +this._x.call(null, data[i])))
      continue;
    xz[i] = x3;
    if (x3 < x0)
      x0 = x3;
    if (x3 > x1)
      x1 = x3;
  }
  if (x0 > x1)
    return this;
  this.cover(x0).cover(x1);
  for (let i = 0; i < n; ++i) {
    add3(this, xz[i], data[i]);
  }
  return this;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/cover.js
function cover_default2(x3) {
  if (isNaN(x3 = +x3))
    return this;
  var x0 = this._x0, x1 = this._x1;
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x3)) + 1;
  } else {
    var z2 = x1 - x0 || 1, node = this._root, parent, i;
    while (x0 > x3 || x3 >= x1) {
      i = +(x3 < x0);
      parent = new Array(2), parent[i] = node, node = parent, z2 *= 2;
      switch (i) {
        case 0:
          x1 = x0 + z2;
          break;
        case 1:
          x0 = x1 - z2;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x0;
  this._x1 = x1;
  return this;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/data.js
function data_default3() {
  var data = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data.push(node.data);
      while (node = node.next);
  });
  return data;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/extent.js
function extent_default2(_5) {
  return arguments.length ? this.cover(+_5[0][0]).cover(+_5[1][0]) : isNaN(this._x0) ? void 0 : [[this._x0], [this._x1]];
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/half.js
function half_default(node, x0, x1) {
  this.node = node;
  this.x0 = x0;
  this.x1 = x1;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/find.js
function find_default2(x3, radius) {
  var data, x0 = this._x0, x1, x22, x32 = this._x1, halves = [], node = this._root, q, i;
  if (node)
    halves.push(new half_default(node, x0, x32));
  if (radius == null)
    radius = Infinity;
  else {
    x0 = x3 - radius;
    x32 = x3 + radius;
  }
  while (q = halves.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x32 || (x22 = q.x1) < x0)
      continue;
    if (node.length) {
      var xm = (x1 + x22) / 2;
      halves.push(new half_default(node[1], xm, x22), new half_default(node[0], x1, xm));
      if (i = +(x3 >= xm)) {
        q = halves[halves.length - 1];
        halves[halves.length - 1] = halves[halves.length - 1 - i];
        halves[halves.length - 1 - i] = q;
      }
    } else {
      var d = Math.abs(x3 - +this._x.call(null, node.data));
      if (d < radius) {
        radius = d;
        x0 = x3 - d;
        x32 = x3 + d;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/remove.js
function remove_default4(d) {
  if (isNaN(x3 = +this._x.call(null, d)))
    return this;
  var parent, node = this._root, retainer, previous, next, x0 = this._x0, x1 = this._x1, x3, xm, right2, i, j;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right2 = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (!(parent = node, node = node[i = +right2]))
        return this;
      if (!node.length)
        break;
      if (parent[i + 1 & 1])
        retainer = parent, j = i;
    }
  while (node.data !== d)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1]) && node === (parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll3(data) {
  for (var i = 0, n = data.length; i < n; ++i)
    this.remove(data[i]);
  return this;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/root.js
function root_default3() {
  return this._root;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/size.js
function size_default3() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/visit.js
function visit_default2(callback) {
  var halves = [], q, node = this._root, child, x0, x1;
  if (node)
    halves.push(new half_default(node, this._x0, this._x1));
  while (q = halves.pop()) {
    if (!callback(node = q.node, x0 = q.x0, x1 = q.x1) && node.length) {
      var xm = (x0 + x1) / 2;
      if (child = node[1])
        halves.push(new half_default(child, xm, x1));
      if (child = node[0])
        halves.push(new half_default(child, x0, xm));
    }
  }
  return this;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/visitAfter.js
function visitAfter_default2(callback) {
  var halves = [], next = [], q;
  if (this._root)
    halves.push(new half_default(this._root, this._x0, this._x1));
  while (q = halves.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, x1 = q.x1, xm = (x0 + x1) / 2;
      if (child = node[0])
        halves.push(new half_default(child, x0, xm));
      if (child = node[1])
        halves.push(new half_default(child, xm, x1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.x1);
  }
  return this;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/x.js
function defaultX2(d) {
  return d[0];
}
function x_default3(_5) {
  return arguments.length ? (this._x = _5, this) : this._x;
}

// node_modules/.pnpm/d3-binarytree@1.0.2/node_modules/d3-binarytree/src/binarytree.js
function binarytree(nodes, x3) {
  var tree = new Binarytree(x3 == null ? defaultX2 : x3, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Binarytree(x3, x0, x1) {
  this._x = x3;
  this._x0 = x0;
  this._x1 = x1;
  this._root = void 0;
}
function leaf_copy2(leaf) {
  var copy = { data: leaf.data }, next = copy;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy;
}
var treeProto2 = binarytree.prototype = Binarytree.prototype;
treeProto2.copy = function() {
  var copy = new Binarytree(this._x, this._x0, this._x1), node = this._root, nodes, child;
  if (!node)
    return copy;
  if (!node.length)
    return copy._root = leaf_copy2(node), copy;
  nodes = [{ source: node, target: copy._root = new Array(2) }];
  while (node = nodes.pop()) {
    for (var i = 0; i < 2; ++i) {
      if (child = node.source[i]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i] = new Array(2) });
        else
          node.target[i] = leaf_copy2(child);
      }
    }
  }
  return copy;
};
treeProto2.add = add_default2;
treeProto2.addAll = addAll2;
treeProto2.cover = cover_default2;
treeProto2.data = data_default3;
treeProto2.extent = extent_default2;
treeProto2.find = find_default2;
treeProto2.remove = remove_default4;
treeProto2.removeAll = removeAll3;
treeProto2.root = root_default3;
treeProto2.size = size_default3;
treeProto2.visit = visit_default2;
treeProto2.visitAfter = visitAfter_default2;
treeProto2.x = x_default3;

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/add.js
function add_default3(d) {
  const x3 = +this._x.call(null, d), y3 = +this._y.call(null, d), z2 = +this._z.call(null, d);
  return add4(this.cover(x3, y3, z2), x3, y3, z2, d);
}
function add4(tree, x3, y3, z2, d) {
  if (isNaN(x3) || isNaN(y3) || isNaN(z2))
    return tree;
  var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, z0 = tree._z0, x1 = tree._x1, y1 = tree._y1, z1 = tree._z1, xm, ym, zm, xp, yp, zp, right2, bottom2, deep, i, j;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right2 = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom2 = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (deep = z2 >= (zm = (z0 + z1) / 2))
      z0 = zm;
    else
      z1 = zm;
    if (parent = node, !(node = node[i = deep << 2 | bottom2 << 1 | right2]))
      return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  zp = +tree._z.call(null, node.data);
  if (x3 === xp && y3 === yp && z2 === zp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(8) : tree._root = new Array(8);
    if (right2 = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom2 = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (deep = z2 >= (zm = (z0 + z1) / 2))
      z0 = zm;
    else
      z1 = zm;
  } while ((i = deep << 2 | bottom2 << 1 | right2) === (j = (zp >= zm) << 2 | (yp >= ym) << 1 | xp >= xm));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll3(data) {
  if (!Array.isArray(data))
    data = Array.from(data);
  const n = data.length;
  const xz = new Float64Array(n);
  const yz = new Float64Array(n);
  const zz = new Float64Array(n);
  let x0 = Infinity, y0 = Infinity, z0 = Infinity, x1 = -Infinity, y1 = -Infinity, z1 = -Infinity;
  for (let i = 0, d, x3, y3, z2; i < n; ++i) {
    if (isNaN(x3 = +this._x.call(null, d = data[i])) || isNaN(y3 = +this._y.call(null, d)) || isNaN(z2 = +this._z.call(null, d)))
      continue;
    xz[i] = x3;
    yz[i] = y3;
    zz[i] = z2;
    if (x3 < x0)
      x0 = x3;
    if (x3 > x1)
      x1 = x3;
    if (y3 < y0)
      y0 = y3;
    if (y3 > y1)
      y1 = y3;
    if (z2 < z0)
      z0 = z2;
    if (z2 > z1)
      z1 = z2;
  }
  if (x0 > x1 || y0 > y1 || z0 > z1)
    return this;
  this.cover(x0, y0, z0).cover(x1, y1, z1);
  for (let i = 0; i < n; ++i) {
    add4(this, xz[i], yz[i], zz[i], data[i]);
  }
  return this;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/cover.js
function cover_default3(x3, y3, z2) {
  if (isNaN(x3 = +x3) || isNaN(y3 = +y3) || isNaN(z2 = +z2))
    return this;
  var x0 = this._x0, y0 = this._y0, z0 = this._z0, x1 = this._x1, y1 = this._y1, z1 = this._z1;
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x3)) + 1;
    y1 = (y0 = Math.floor(y3)) + 1;
    z1 = (z0 = Math.floor(z2)) + 1;
  } else {
    var t3 = x1 - x0 || 1, node = this._root, parent, i;
    while (x0 > x3 || x3 >= x1 || y0 > y3 || y3 >= y1 || z0 > z2 || z2 >= z1) {
      i = (z2 < z0) << 2 | (y3 < y0) << 1 | x3 < x0;
      parent = new Array(8), parent[i] = node, node = parent, t3 *= 2;
      switch (i) {
        case 0:
          x1 = x0 + t3, y1 = y0 + t3, z1 = z0 + t3;
          break;
        case 1:
          x0 = x1 - t3, y1 = y0 + t3, z1 = z0 + t3;
          break;
        case 2:
          x1 = x0 + t3, y0 = y1 - t3, z1 = z0 + t3;
          break;
        case 3:
          x0 = x1 - t3, y0 = y1 - t3, z1 = z0 + t3;
          break;
        case 4:
          x1 = x0 + t3, y1 = y0 + t3, z0 = z1 - t3;
          break;
        case 5:
          x0 = x1 - t3, y1 = y0 + t3, z0 = z1 - t3;
          break;
        case 6:
          x1 = x0 + t3, y0 = y1 - t3, z0 = z1 - t3;
          break;
        case 7:
          x0 = x1 - t3, y0 = y1 - t3, z0 = z1 - t3;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x0;
  this._y0 = y0;
  this._z0 = z0;
  this._x1 = x1;
  this._y1 = y1;
  this._z1 = z1;
  return this;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/data.js
function data_default4() {
  var data = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data.push(node.data);
      while (node = node.next);
  });
  return data;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/extent.js
function extent_default3(_5) {
  return arguments.length ? this.cover(+_5[0][0], +_5[0][1], +_5[0][2]).cover(+_5[1][0], +_5[1][1], +_5[1][2]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]];
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/octant.js
function octant_default(node, x0, y0, z0, x1, y1, z1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.z0 = z0;
  this.x1 = x1;
  this.y1 = y1;
  this.z1 = z1;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/find.js
function find_default3(x3, y3, z2, radius) {
  var data, x0 = this._x0, y0 = this._y0, z0 = this._z0, x1, y1, z1, x22, y22, z22, x32 = this._x1, y32 = this._y1, z3 = this._z1, octs = [], node = this._root, q, i;
  if (node)
    octs.push(new octant_default(node, x0, y0, z0, x32, y32, z3));
  if (radius == null)
    radius = Infinity;
  else {
    x0 = x3 - radius, y0 = y3 - radius, z0 = z2 - radius;
    x32 = x3 + radius, y32 = y3 + radius, z3 = z2 + radius;
    radius *= radius;
  }
  while (q = octs.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (z1 = q.z0) > z3 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0 || (z22 = q.z1) < z0)
      continue;
    if (node.length) {
      var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2, zm = (z1 + z22) / 2;
      octs.push(new octant_default(node[7], xm, ym, zm, x22, y22, z22), new octant_default(node[6], x1, ym, zm, xm, y22, z22), new octant_default(node[5], xm, y1, zm, x22, ym, z22), new octant_default(node[4], x1, y1, zm, xm, ym, z22), new octant_default(node[3], xm, ym, z1, x22, y22, zm), new octant_default(node[2], x1, ym, z1, xm, y22, zm), new octant_default(node[1], xm, y1, z1, x22, ym, zm), new octant_default(node[0], x1, y1, z1, xm, ym, zm));
      if (i = (z2 >= zm) << 2 | (y3 >= ym) << 1 | x3 >= xm) {
        q = octs[octs.length - 1];
        octs[octs.length - 1] = octs[octs.length - 1 - i];
        octs[octs.length - 1 - i] = q;
      }
    } else {
      var dx = x3 - +this._x.call(null, node.data), dy = y3 - +this._y.call(null, node.data), dz = z2 - +this._z.call(null, node.data), d2 = dx * dx + dy * dy + dz * dz;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x3 - d, y0 = y3 - d, z0 = z2 - d;
        x32 = x3 + d, y32 = y3 + d, z3 = z2 + d;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/remove.js
function remove_default5(d) {
  if (isNaN(x3 = +this._x.call(null, d)) || isNaN(y3 = +this._y.call(null, d)) || isNaN(z2 = +this._z.call(null, d)))
    return this;
  var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, z0 = this._z0, x1 = this._x1, y1 = this._y1, z1 = this._z1, x3, y3, z2, xm, ym, zm, right2, bottom2, deep, i, j;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right2 = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom2 = y3 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (deep = z2 >= (zm = (z0 + z1) / 2))
        z0 = zm;
      else
        z1 = zm;
      if (!(parent = node, node = node[i = deep << 2 | bottom2 << 1 | right2]))
        return this;
      if (!node.length)
        break;
      if (parent[i + 1 & 7] || parent[i + 2 & 7] || parent[i + 3 & 7] || parent[i + 4 & 7] || parent[i + 5 & 7] || parent[i + 6 & 7] || parent[i + 7 & 7])
        retainer = parent, j = i;
    }
  while (node.data !== d)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7]) && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll4(data) {
  for (var i = 0, n = data.length; i < n; ++i)
    this.remove(data[i]);
  return this;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/root.js
function root_default4() {
  return this._root;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/size.js
function size_default4() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/visit.js
function visit_default3(callback) {
  var octs = [], q, node = this._root, child, x0, y0, z0, x1, y1, z1;
  if (node)
    octs.push(new octant_default(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
  while (q = octs.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;
      if (child = node[7])
        octs.push(new octant_default(child, xm, ym, zm, x1, y1, z1));
      if (child = node[6])
        octs.push(new octant_default(child, x0, ym, zm, xm, y1, z1));
      if (child = node[5])
        octs.push(new octant_default(child, xm, y0, zm, x1, ym, z1));
      if (child = node[4])
        octs.push(new octant_default(child, x0, y0, zm, xm, ym, z1));
      if (child = node[3])
        octs.push(new octant_default(child, xm, ym, z0, x1, y1, zm));
      if (child = node[2])
        octs.push(new octant_default(child, x0, ym, z0, xm, y1, zm));
      if (child = node[1])
        octs.push(new octant_default(child, xm, y0, z0, x1, ym, zm));
      if (child = node[0])
        octs.push(new octant_default(child, x0, y0, z0, xm, ym, zm));
    }
  }
  return this;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/visitAfter.js
function visitAfter_default3(callback) {
  var octs = [], next = [], q;
  if (this._root)
    octs.push(new octant_default(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
  while (q = octs.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;
      if (child = node[0])
        octs.push(new octant_default(child, x0, y0, z0, xm, ym, zm));
      if (child = node[1])
        octs.push(new octant_default(child, xm, y0, z0, x1, ym, zm));
      if (child = node[2])
        octs.push(new octant_default(child, x0, ym, z0, xm, y1, zm));
      if (child = node[3])
        octs.push(new octant_default(child, xm, ym, z0, x1, y1, zm));
      if (child = node[4])
        octs.push(new octant_default(child, x0, y0, zm, xm, ym, z1));
      if (child = node[5])
        octs.push(new octant_default(child, xm, y0, zm, x1, ym, z1));
      if (child = node[6])
        octs.push(new octant_default(child, x0, ym, zm, xm, y1, z1));
      if (child = node[7])
        octs.push(new octant_default(child, xm, ym, zm, x1, y1, z1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.z0, q.x1, q.y1, q.z1);
  }
  return this;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/x.js
function defaultX3(d) {
  return d[0];
}
function x_default4(_5) {
  return arguments.length ? (this._x = _5, this) : this._x;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/y.js
function defaultY2(d) {
  return d[1];
}
function y_default3(_5) {
  return arguments.length ? (this._y = _5, this) : this._y;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/z.js
function defaultZ(d) {
  return d[2];
}
function z_default(_5) {
  return arguments.length ? (this._z = _5, this) : this._z;
}

// node_modules/.pnpm/d3-octree@1.0.2/node_modules/d3-octree/src/octree.js
function octree(nodes, x3, y3, z2) {
  var tree = new Octree(x3 == null ? defaultX3 : x3, y3 == null ? defaultY2 : y3, z2 == null ? defaultZ : z2, NaN, NaN, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Octree(x3, y3, z2, x0, y0, z0, x1, y1, z1) {
  this._x = x3;
  this._y = y3;
  this._z = z2;
  this._x0 = x0;
  this._y0 = y0;
  this._z0 = z0;
  this._x1 = x1;
  this._y1 = y1;
  this._z1 = z1;
  this._root = void 0;
}
function leaf_copy3(leaf) {
  var copy = { data: leaf.data }, next = copy;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy;
}
var treeProto3 = octree.prototype = Octree.prototype;
treeProto3.copy = function() {
  var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1), node = this._root, nodes, child;
  if (!node)
    return copy;
  if (!node.length)
    return copy._root = leaf_copy3(node), copy;
  nodes = [{ source: node, target: copy._root = new Array(8) }];
  while (node = nodes.pop()) {
    for (var i = 0; i < 8; ++i) {
      if (child = node.source[i]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i] = new Array(8) });
        else
          node.target[i] = leaf_copy3(child);
      }
    }
  }
  return copy;
};
treeProto3.add = add_default3;
treeProto3.addAll = addAll3;
treeProto3.cover = cover_default3;
treeProto3.data = data_default4;
treeProto3.extent = extent_default3;
treeProto3.find = find_default3;
treeProto3.remove = remove_default5;
treeProto3.removeAll = removeAll4;
treeProto3.root = root_default4;
treeProto3.size = size_default4;
treeProto3.visit = visit_default3;
treeProto3.visitAfter = visitAfter_default3;
treeProto3.x = x_default4;
treeProto3.y = y_default3;
treeProto3.z = z_default;

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/constant.js
function constant_default7(x3) {
  return function() {
    return x3;
  };
}

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/jiggle.js
function jiggle_default2(random) {
  return (random() - 0.5) * 1e-6;
}

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/link.js
function index4(d) {
  return d.index;
}
function find2(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node)
    throw new Error("node not found: " + nodeId);
  return node;
}
function link_default(links) {
  var id2 = index4, strength = defaultStrength, strengths, distance = constant_default7(30), distances, nodes, nDim, count, bias, random, iterations = 1;
  if (links == null)
    links = [];
  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }
  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x3 = 0, y3 = 0, z2 = 0, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x3 = target.x + target.vx - source.x - source.vx || jiggle_default2(random);
        if (nDim > 1) {
          y3 = target.y + target.vy - source.y - source.vy || jiggle_default2(random);
        }
        if (nDim > 2) {
          z2 = target.z + target.vz - source.z - source.vz || jiggle_default2(random);
        }
        l = Math.sqrt(x3 * x3 + y3 * y3 + z2 * z2);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x3 *= l, y3 *= l, z2 *= l;
        target.vx -= x3 * (b = bias[i]);
        if (nDim > 1) {
          target.vy -= y3 * b;
        }
        if (nDim > 2) {
          target.vz -= z2 * b;
        }
        source.vx += x3 * (b = 1 - b);
        if (nDim > 1) {
          source.vy += y3 * b;
        }
        if (nDim > 2) {
          source.vz += z2 * b;
        }
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, m2 = links.length, nodeById = new Map(nodes.map((d, i2) => [id2(d, i2, nodes), d])), link;
    for (i = 0, count = new Array(n); i < m2; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object")
        link.source = find2(nodeById, link.source);
      if (typeof link.target !== "object")
        link.target = find2(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }
    for (i = 0, bias = new Array(m2); i < m2; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }
    strengths = new Array(m2), initializeStrength();
    distances = new Array(m2), initializeDistance();
  }
  function initializeStrength() {
    if (!nodes)
      return;
    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }
  function initializeDistance() {
    if (!nodes)
      return;
    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }
  force.initialize = function(_nodes, ...args) {
    nodes = _nodes;
    random = args.find((arg) => typeof arg === "function") || Math.random;
    nDim = args.find((arg) => [1, 2, 3].includes(arg)) || 2;
    initialize();
  };
  force.links = function(_5) {
    return arguments.length ? (links = _5, initialize(), force) : links;
  };
  force.id = function(_5) {
    return arguments.length ? (id2 = _5, force) : id2;
  };
  force.iterations = function(_5) {
    return arguments.length ? (iterations = +_5, force) : iterations;
  };
  force.strength = function(_5) {
    return arguments.length ? (strength = typeof _5 === "function" ? _5 : constant_default7(+_5), initializeStrength(), force) : strength;
  };
  force.distance = function(_5) {
    return arguments.length ? (distance = typeof _5 === "function" ? _5 : constant_default7(+_5), initializeDistance(), force) : distance;
  };
  return force;
}

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/lcg.js
var a = 1664525;
var c = 1013904223;
var m = 4294967296;
function lcg_default() {
  let s = 1;
  return () => (s = (a * s + c) % m) / m;
}

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/simulation.js
var MAX_DIMENSIONS = 3;
function x2(d) {
  return d.x;
}
function y2(d) {
  return d.y;
}
function z(d) {
  return d.z;
}
var initialRadius = 10;
var initialAngleRoll = Math.PI * (3 - Math.sqrt(5));
var initialAngleYaw = Math.PI * 20 / (9 + Math.sqrt(221));
function simulation_default(nodes, numDimensions) {
  numDimensions = numDimensions || 2;
  var nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(numDimensions))), simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = timer(step), event = dispatch_default("tick", "end"), random = lcg_default();
  if (nodes == null)
    nodes = [];
  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }
  function tick(iterations) {
    var i, n = nodes.length, node;
    if (iterations === void 0)
      iterations = 1;
    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.forEach(function(force) {
        force(alpha);
      });
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null)
          node.x += node.vx *= velocityDecay;
        else
          node.x = node.fx, node.vx = 0;
        if (nDim > 1) {
          if (node.fy == null)
            node.y += node.vy *= velocityDecay;
          else
            node.y = node.fy, node.vy = 0;
        }
        if (nDim > 2) {
          if (node.fz == null)
            node.z += node.vz *= velocityDecay;
          else
            node.z = node.fz, node.vz = 0;
        }
      }
    }
    return simulation;
  }
  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null)
        node.x = node.fx;
      if (node.fy != null)
        node.y = node.fy;
      if (node.fz != null)
        node.z = node.fz;
      if (isNaN(node.x) || nDim > 1 && isNaN(node.y) || nDim > 2 && isNaN(node.z)) {
        var radius = initialRadius * (nDim > 2 ? Math.cbrt(0.5 + i) : nDim > 1 ? Math.sqrt(0.5 + i) : i), rollAngle = i * initialAngleRoll, yawAngle = i * initialAngleYaw;
        if (nDim === 1) {
          node.x = radius;
        } else if (nDim === 2) {
          node.x = radius * Math.cos(rollAngle);
          node.y = radius * Math.sin(rollAngle);
        } else {
          node.x = radius * Math.sin(rollAngle) * Math.cos(yawAngle);
          node.y = radius * Math.cos(rollAngle);
          node.z = radius * Math.sin(rollAngle) * Math.sin(yawAngle);
        }
      }
      if (isNaN(node.vx) || nDim > 1 && isNaN(node.vy) || nDim > 2 && isNaN(node.vz)) {
        node.vx = 0;
        if (nDim > 1) {
          node.vy = 0;
        }
        if (nDim > 2) {
          node.vz = 0;
        }
      }
    }
  }
  function initializeForce(force) {
    if (force.initialize)
      force.initialize(nodes, random, nDim);
    return force;
  }
  initializeNodes();
  return simulation = {
    tick,
    restart: function() {
      return stepper.restart(step), simulation;
    },
    stop: function() {
      return stepper.stop(), simulation;
    },
    numDimensions: function(_5) {
      return arguments.length ? (nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(_5))), forces.forEach(initializeForce), simulation) : nDim;
    },
    nodes: function(_5) {
      return arguments.length ? (nodes = _5, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
    },
    alpha: function(_5) {
      return arguments.length ? (alpha = +_5, simulation) : alpha;
    },
    alphaMin: function(_5) {
      return arguments.length ? (alphaMin = +_5, simulation) : alphaMin;
    },
    alphaDecay: function(_5) {
      return arguments.length ? (alphaDecay = +_5, simulation) : +alphaDecay;
    },
    alphaTarget: function(_5) {
      return arguments.length ? (alphaTarget = +_5, simulation) : alphaTarget;
    },
    velocityDecay: function(_5) {
      return arguments.length ? (velocityDecay = 1 - _5, simulation) : 1 - velocityDecay;
    },
    randomSource: function(_5) {
      return arguments.length ? (random = _5, forces.forEach(initializeForce), simulation) : random;
    },
    force: function(name, _5) {
      return arguments.length > 1 ? (_5 == null ? forces.delete(name) : forces.set(name, initializeForce(_5)), simulation) : forces.get(name);
    },
    find: function() {
      var args = Array.prototype.slice.call(arguments);
      var x3 = args.shift() || 0, y3 = (nDim > 1 ? args.shift() : null) || 0, z2 = (nDim > 2 ? args.shift() : null) || 0, radius = args.shift() || Infinity;
      var i = 0, n = nodes.length, dx, dy, dz, d2, node, closest;
      radius *= radius;
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x3 - node.x;
        dy = y3 - (node.y || 0);
        dz = z2 - (node.z || 0);
        d2 = dx * dx + dy * dy + dz * dz;
        if (d2 < radius)
          closest = node, radius = d2;
      }
      return closest;
    },
    on: function(name, _5) {
      return arguments.length > 1 ? (event.on(name, _5), simulation) : event.on(name);
    }
  };
}

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/manyBody.js
function manyBody_default() {
  var nodes, nDim, node, random, alpha, strength = constant_default7(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
  function force(_5) {
    var i, n = nodes.length, tree = (nDim === 1 ? binarytree(nodes, x2) : nDim === 2 ? quadtree(nodes, x2, y2) : nDim === 3 ? octree(nodes, x2, y2, z) : null).visitAfter(accumulate);
    for (alpha = _5, i = 0; i < n; ++i)
      node = nodes[i], tree.visit(apply);
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node2;
    strengths = new Array(n);
    for (i = 0; i < n; ++i)
      node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
  }
  function accumulate(treeNode) {
    var strength2 = 0, q, c2, weight = 0, x3, y3, z2, i;
    var numChildren = treeNode.length;
    if (numChildren) {
      for (x3 = y3 = z2 = i = 0; i < numChildren; ++i) {
        if ((q = treeNode[i]) && (c2 = Math.abs(q.value))) {
          strength2 += q.value, weight += c2, x3 += c2 * (q.x || 0), y3 += c2 * (q.y || 0), z2 += c2 * (q.z || 0);
        }
      }
      strength2 *= Math.sqrt(4 / numChildren);
      treeNode.x = x3 / weight;
      if (nDim > 1) {
        treeNode.y = y3 / weight;
      }
      if (nDim > 2) {
        treeNode.z = z2 / weight;
      }
    } else {
      q = treeNode;
      q.x = q.data.x;
      if (nDim > 1) {
        q.y = q.data.y;
      }
      if (nDim > 2) {
        q.z = q.data.z;
      }
      do
        strength2 += strengths[q.data.index];
      while (q = q.next);
    }
    treeNode.value = strength2;
  }
  function apply(treeNode, x1, arg1, arg2, arg3) {
    if (!treeNode.value)
      return true;
    var x22 = [arg1, arg2, arg3][nDim - 1];
    var x3 = treeNode.x - node.x, y3 = nDim > 1 ? treeNode.y - node.y : 0, z2 = nDim > 2 ? treeNode.z - node.z : 0, w = x22 - x1, l = x3 * x3 + y3 * y3 + z2 * z2;
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x3 === 0)
          x3 = jiggle_default2(random), l += x3 * x3;
        if (nDim > 1 && y3 === 0)
          y3 = jiggle_default2(random), l += y3 * y3;
        if (nDim > 2 && z2 === 0)
          z2 = jiggle_default2(random), l += z2 * z2;
        if (l < distanceMin2)
          l = Math.sqrt(distanceMin2 * l);
        node.vx += x3 * treeNode.value * alpha / l;
        if (nDim > 1) {
          node.vy += y3 * treeNode.value * alpha / l;
        }
        if (nDim > 2) {
          node.vz += z2 * treeNode.value * alpha / l;
        }
      }
      return true;
    } else if (treeNode.length || l >= distanceMax2)
      return;
    if (treeNode.data !== node || treeNode.next) {
      if (x3 === 0)
        x3 = jiggle_default2(random), l += x3 * x3;
      if (nDim > 1 && y3 === 0)
        y3 = jiggle_default2(random), l += y3 * y3;
      if (nDim > 2 && z2 === 0)
        z2 = jiggle_default2(random), l += z2 * z2;
      if (l < distanceMin2)
        l = Math.sqrt(distanceMin2 * l);
    }
    do
      if (treeNode.data !== node) {
        w = strengths[treeNode.data.index] * alpha / l;
        node.vx += x3 * w;
        if (nDim > 1) {
          node.vy += y3 * w;
        }
        if (nDim > 2) {
          node.vz += z2 * w;
        }
      }
    while (treeNode = treeNode.next);
  }
  force.initialize = function(_nodes, ...args) {
    nodes = _nodes;
    random = args.find((arg) => typeof arg === "function") || Math.random;
    nDim = args.find((arg) => [1, 2, 3].includes(arg)) || 2;
    initialize();
  };
  force.strength = function(_5) {
    return arguments.length ? (strength = typeof _5 === "function" ? _5 : constant_default7(+_5), initialize(), force) : strength;
  };
  force.distanceMin = function(_5) {
    return arguments.length ? (distanceMin2 = _5 * _5, force) : Math.sqrt(distanceMin2);
  };
  force.distanceMax = function(_5) {
    return arguments.length ? (distanceMax2 = _5 * _5, force) : Math.sqrt(distanceMax2);
  };
  force.theta = function(_5) {
    return arguments.length ? (theta2 = _5 * _5, force) : Math.sqrt(theta2);
  };
  return force;
}

// node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/radial.js
function radial_default(radius, x3, y3, z2) {
  var nodes, nDim, strength = constant_default7(0.1), strengths, radiuses;
  if (typeof radius !== "function")
    radius = constant_default7(+radius);
  if (x3 == null)
    x3 = 0;
  if (y3 == null)
    y3 = 0;
  if (z2 == null)
    z2 = 0;
  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i], dx = node.x - x3 || 1e-6, dy = (node.y || 0) - y3 || 1e-6, dz = (node.z || 0) - z2 || 1e-6, r = Math.sqrt(dx * dx + dy * dy + dz * dz), k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      if (nDim > 1) {
        node.vy += dy * k;
      }
      if (nDim > 2) {
        node.vz += dz * k;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);
    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(initNodes, ...args) {
    nodes = initNodes;
    nDim = args.find((arg) => [1, 2, 3].includes(arg)) || 2;
    initialize();
  };
  force.strength = function(_5) {
    return arguments.length ? (strength = typeof _5 === "function" ? _5 : constant_default7(+_5), initialize(), force) : strength;
  };
  force.radius = function(_5) {
    return arguments.length ? (radius = typeof _5 === "function" ? _5 : constant_default7(+_5), initialize(), force) : radius;
  };
  force.x = function(_5) {
    return arguments.length ? (x3 = +_5, force) : x3;
  };
  force.y = function(_5) {
    return arguments.length ? (y3 = +_5, force) : y3;
  };
  force.z = function(_5) {
    return arguments.length ? (z2 = +_5, force) : z2;
  };
  return force;
}

// node_modules/.pnpm/bezier-js@6.1.4/node_modules/bezier-js/src/utils.js
var { abs: abs2, cos, sin, acos, atan2, sqrt, pow } = Math;
function crt(v) {
  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);
}
var pi = Math.PI;
var tau = 2 * pi;
var quart = pi / 2;
var epsilon = 1e-6;
var nMax = Number.MAX_SAFE_INTEGER || 9007199254740991;
var nMin = Number.MIN_SAFE_INTEGER || -9007199254740991;
var ZERO = { x: 0, y: 0, z: 0 };
var utils = {
  Tvalues: [
    -0.06405689286260563,
    0.06405689286260563,
    -0.1911188674736163,
    0.1911188674736163,
    -0.3150426796961634,
    0.3150426796961634,
    -0.4337935076260451,
    0.4337935076260451,
    -0.5454214713888396,
    0.5454214713888396,
    -0.6480936519369755,
    0.6480936519369755,
    -0.7401241915785544,
    0.7401241915785544,
    -0.820001985973903,
    0.820001985973903,
    -0.8864155270044011,
    0.8864155270044011,
    -0.9382745520027328,
    0.9382745520027328,
    -0.9747285559713095,
    0.9747285559713095,
    -0.9951872199970213,
    0.9951872199970213
  ],
  Cvalues: [
    0.12793819534675216,
    0.12793819534675216,
    0.1258374563468283,
    0.1258374563468283,
    0.12167047292780339,
    0.12167047292780339,
    0.1155056680537256,
    0.1155056680537256,
    0.10744427011596563,
    0.10744427011596563,
    0.09761865210411388,
    0.09761865210411388,
    0.08619016153195327,
    0.08619016153195327,
    0.0733464814110803,
    0.0733464814110803,
    0.05929858491543678,
    0.05929858491543678,
    0.04427743881741981,
    0.04427743881741981,
    0.028531388628933663,
    0.028531388628933663,
    0.0123412297999872,
    0.0123412297999872
  ],
  arcfn: function(t3, derivativeFn) {
    const d = derivativeFn(t3);
    let l = d.x * d.x + d.y * d.y;
    if (typeof d.z !== "undefined") {
      l += d.z * d.z;
    }
    return sqrt(l);
  },
  compute: function(t3, points, _3d) {
    if (t3 === 0) {
      points[0].t = 0;
      return points[0];
    }
    const order2 = points.length - 1;
    if (t3 === 1) {
      points[order2].t = 1;
      return points[order2];
    }
    const mt = 1 - t3;
    let p = points;
    if (order2 === 0) {
      points[0].t = t3;
      return points[0];
    }
    if (order2 === 1) {
      const ret = {
        x: mt * p[0].x + t3 * p[1].x,
        y: mt * p[0].y + t3 * p[1].y,
        t: t3
      };
      if (_3d) {
        ret.z = mt * p[0].z + t3 * p[1].z;
      }
      return ret;
    }
    if (order2 < 4) {
      let mt2 = mt * mt, t22 = t3 * t3, a2, b, c2, d = 0;
      if (order2 === 2) {
        p = [p[0], p[1], p[2], ZERO];
        a2 = mt2;
        b = mt * t3 * 2;
        c2 = t22;
      } else if (order2 === 3) {
        a2 = mt2 * mt;
        b = mt2 * t3 * 3;
        c2 = mt * t22 * 3;
        d = t3 * t22;
      }
      const ret = {
        x: a2 * p[0].x + b * p[1].x + c2 * p[2].x + d * p[3].x,
        y: a2 * p[0].y + b * p[1].y + c2 * p[2].y + d * p[3].y,
        t: t3
      };
      if (_3d) {
        ret.z = a2 * p[0].z + b * p[1].z + c2 * p[2].z + d * p[3].z;
      }
      return ret;
    }
    const dCpts = JSON.parse(JSON.stringify(points));
    while (dCpts.length > 1) {
      for (let i = 0; i < dCpts.length - 1; i++) {
        dCpts[i] = {
          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t3,
          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t3
        };
        if (typeof dCpts[i].z !== "undefined") {
          dCpts[i].z = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t3;
        }
      }
      dCpts.splice(dCpts.length - 1, 1);
    }
    dCpts[0].t = t3;
    return dCpts[0];
  },
  computeWithRatios: function(t3, points, ratios, _3d) {
    const mt = 1 - t3, r = ratios, p = points;
    let f1 = r[0], f2 = r[1], f3 = r[2], f4 = r[3], d;
    f1 *= mt;
    f2 *= t3;
    if (p.length === 2) {
      d = f1 + f2;
      return {
        x: (f1 * p[0].x + f2 * p[1].x) / d,
        y: (f1 * p[0].y + f2 * p[1].y) / d,
        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,
        t: t3
      };
    }
    f1 *= mt;
    f2 *= 2 * mt;
    f3 *= t3 * t3;
    if (p.length === 3) {
      d = f1 + f2 + f3;
      return {
        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,
        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,
        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,
        t: t3
      };
    }
    f1 *= mt;
    f2 *= 1.5 * mt;
    f3 *= 3 * mt;
    f4 *= t3 * t3 * t3;
    if (p.length === 4) {
      d = f1 + f2 + f3 + f4;
      return {
        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,
        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,
        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,
        t: t3
      };
    }
  },
  derive: function(points, _3d) {
    const dpoints = [];
    for (let p = points, d = p.length, c2 = d - 1; d > 1; d--, c2--) {
      const list = [];
      for (let j = 0, dpt; j < c2; j++) {
        dpt = {
          x: c2 * (p[j + 1].x - p[j].x),
          y: c2 * (p[j + 1].y - p[j].y)
        };
        if (_3d) {
          dpt.z = c2 * (p[j + 1].z - p[j].z);
        }
        list.push(dpt);
      }
      dpoints.push(list);
      p = list;
    }
    return dpoints;
  },
  between: function(v, m2, M) {
    return m2 <= v && v <= M || utils.approximately(v, m2) || utils.approximately(v, M);
  },
  approximately: function(a2, b, precision) {
    return abs2(a2 - b) <= (precision || epsilon);
  },
  length: function(derivativeFn) {
    const z2 = 0.5, len = utils.Tvalues.length;
    let sum = 0;
    for (let i = 0, t3; i < len; i++) {
      t3 = z2 * utils.Tvalues[i] + z2;
      sum += utils.Cvalues[i] * utils.arcfn(t3, derivativeFn);
    }
    return z2 * sum;
  },
  map: function(v, ds, de, ts, te) {
    const d1 = de - ds, d2 = te - ts, v2 = v - ds, r = v2 / d1;
    return ts + d2 * r;
  },
  lerp: function(r, v1, v2) {
    const ret = {
      x: v1.x + r * (v2.x - v1.x),
      y: v1.y + r * (v2.y - v1.y)
    };
    if (v1.z !== void 0 && v2.z !== void 0) {
      ret.z = v1.z + r * (v2.z - v1.z);
    }
    return ret;
  },
  pointToString: function(p) {
    let s = p.x + "/" + p.y;
    if (typeof p.z !== "undefined") {
      s += "/" + p.z;
    }
    return s;
  },
  pointsToString: function(points) {
    return "[" + points.map(utils.pointToString).join(", ") + "]";
  },
  copy: function(obj) {
    return JSON.parse(JSON.stringify(obj));
  },
  angle: function(o, v1, v2) {
    const dx1 = v1.x - o.x, dy1 = v1.y - o.y, dx2 = v2.x - o.x, dy2 = v2.y - o.y, cross = dx1 * dy2 - dy1 * dx2, dot = dx1 * dx2 + dy1 * dy2;
    return atan2(cross, dot);
  },
  round: function(v, d) {
    const s = "" + v;
    const pos = s.indexOf(".");
    return parseFloat(s.substring(0, pos + 1 + d));
  },
  dist: function(p1, p2) {
    const dx = p1.x - p2.x, dy = p1.y - p2.y;
    return sqrt(dx * dx + dy * dy);
  },
  closest: function(LUT, point) {
    let mdist = pow(2, 63), mpos, d;
    LUT.forEach(function(p, idx) {
      d = utils.dist(point, p);
      if (d < mdist) {
        mdist = d;
        mpos = idx;
      }
    });
    return { mdist, mpos };
  },
  abcratio: function(t3, n) {
    if (n !== 2 && n !== 3) {
      return false;
    }
    if (typeof t3 === "undefined") {
      t3 = 0.5;
    } else if (t3 === 0 || t3 === 1) {
      return t3;
    }
    const bottom2 = pow(t3, n) + pow(1 - t3, n), top2 = bottom2 - 1;
    return abs2(top2 / bottom2);
  },
  projectionratio: function(t3, n) {
    if (n !== 2 && n !== 3) {
      return false;
    }
    if (typeof t3 === "undefined") {
      t3 = 0.5;
    } else if (t3 === 0 || t3 === 1) {
      return t3;
    }
    const top2 = pow(1 - t3, n), bottom2 = pow(t3, n) + top2;
    return top2 / bottom2;
  },
  lli8: function(x1, y1, x22, y22, x3, y3, x4, y4) {
    const nx = (x1 * y22 - y1 * x22) * (x3 - x4) - (x1 - x22) * (x3 * y4 - y3 * x4), ny = (x1 * y22 - y1 * x22) * (y3 - y4) - (y1 - y22) * (x3 * y4 - y3 * x4), d = (x1 - x22) * (y3 - y4) - (y1 - y22) * (x3 - x4);
    if (d == 0) {
      return false;
    }
    return { x: nx / d, y: ny / d };
  },
  lli4: function(p1, p2, p3, p4) {
    const x1 = p1.x, y1 = p1.y, x22 = p2.x, y22 = p2.y, x3 = p3.x, y3 = p3.y, x4 = p4.x, y4 = p4.y;
    return utils.lli8(x1, y1, x22, y22, x3, y3, x4, y4);
  },
  lli: function(v1, v2) {
    return utils.lli4(v1, v1.c, v2, v2.c);
  },
  makeline: function(p1, p2) {
    return new Bezier(p1.x, p1.y, (p1.x + p2.x) / 2, (p1.y + p2.y) / 2, p2.x, p2.y);
  },
  findbbox: function(sections) {
    let mx = nMax, my = nMax, MX = nMin, MY = nMin;
    sections.forEach(function(s) {
      const bbox = s.bbox();
      if (mx > bbox.x.min)
        mx = bbox.x.min;
      if (my > bbox.y.min)
        my = bbox.y.min;
      if (MX < bbox.x.max)
        MX = bbox.x.max;
      if (MY < bbox.y.max)
        MY = bbox.y.max;
    });
    return {
      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },
      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my }
    };
  },
  shapeintersections: function(s1, bbox1, s2, bbox2, curveIntersectionThreshold) {
    if (!utils.bboxoverlap(bbox1, bbox2))
      return [];
    const intersections = [];
    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];
    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];
    a1.forEach(function(l1) {
      if (l1.virtual)
        return;
      a2.forEach(function(l2) {
        if (l2.virtual)
          return;
        const iss = l1.intersects(l2, curveIntersectionThreshold);
        if (iss.length > 0) {
          iss.c1 = l1;
          iss.c2 = l2;
          iss.s1 = s1;
          iss.s2 = s2;
          intersections.push(iss);
        }
      });
    });
    return intersections;
  },
  makeshape: function(forward, back, curveIntersectionThreshold) {
    const bpl = back.points.length;
    const fpl = forward.points.length;
    const start3 = utils.makeline(back.points[bpl - 1], forward.points[0]);
    const end2 = utils.makeline(forward.points[fpl - 1], back.points[0]);
    const shape = {
      startcap: start3,
      forward,
      back,
      endcap: end2,
      bbox: utils.findbbox([start3, forward, back, end2])
    };
    shape.intersections = function(s2) {
      return utils.shapeintersections(shape, shape.bbox, s2, s2.bbox, curveIntersectionThreshold);
    };
    return shape;
  },
  getminmax: function(curve, d, list) {
    if (!list)
      return { min: 0, max: 0 };
    let min5 = nMax, max5 = nMin, t3, c2;
    if (list.indexOf(0) === -1) {
      list = [0].concat(list);
    }
    if (list.indexOf(1) === -1) {
      list.push(1);
    }
    for (let i = 0, len = list.length; i < len; i++) {
      t3 = list[i];
      c2 = curve.get(t3);
      if (c2[d] < min5) {
        min5 = c2[d];
      }
      if (c2[d] > max5) {
        max5 = c2[d];
      }
    }
    return { min: min5, mid: (min5 + max5) / 2, max: max5, size: max5 - min5 };
  },
  align: function(points, line) {
    const tx = line.p1.x, ty = line.p1.y, a2 = -atan2(line.p2.y - ty, line.p2.x - tx), d = function(v) {
      return {
        x: (v.x - tx) * cos(a2) - (v.y - ty) * sin(a2),
        y: (v.x - tx) * sin(a2) + (v.y - ty) * cos(a2)
      };
    };
    return points.map(d);
  },
  roots: function(points, line) {
    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };
    const order2 = points.length - 1;
    const aligned = utils.align(points, line);
    const reduce = function(t3) {
      return 0 <= t3 && t3 <= 1;
    };
    if (order2 === 2) {
      const a3 = aligned[0].y, b2 = aligned[1].y, c3 = aligned[2].y, d2 = a3 - 2 * b2 + c3;
      if (d2 !== 0) {
        const m1 = -sqrt(b2 * b2 - a3 * c3), m2 = -a3 + b2, v12 = -(m1 + m2) / d2, v2 = -(-m1 + m2) / d2;
        return [v12, v2].filter(reduce);
      } else if (b2 !== c3 && d2 === 0) {
        return [(2 * b2 - c3) / (2 * b2 - 2 * c3)].filter(reduce);
      }
      return [];
    }
    const pa = aligned[0].y, pb = aligned[1].y, pc = aligned[2].y, pd = aligned[3].y;
    let d = -pa + 3 * pb - 3 * pc + pd, a2 = 3 * pa - 6 * pb + 3 * pc, b = -3 * pa + 3 * pb, c2 = pa;
    if (utils.approximately(d, 0)) {
      if (utils.approximately(a2, 0)) {
        if (utils.approximately(b, 0)) {
          return [];
        }
        return [-c2 / b].filter(reduce);
      }
      const q3 = sqrt(b * b - 4 * a2 * c2), a22 = 2 * a2;
      return [(q3 - b) / a22, (-b - q3) / a22].filter(reduce);
    }
    a2 /= d;
    b /= d;
    c2 /= d;
    const p = (3 * b - a2 * a2) / 3, p3 = p / 3, q = (2 * a2 * a2 * a2 - 9 * a2 * b + 27 * c2) / 27, q2 = q / 2, discriminant = q2 * q2 + p3 * p3 * p3;
    let u1, v1, x1, x22, x3;
    if (discriminant < 0) {
      const mp3 = -p / 3, mp33 = mp3 * mp3 * mp3, r = sqrt(mp33), t3 = -q / (2 * r), cosphi = t3 < -1 ? -1 : t3 > 1 ? 1 : t3, phi = acos(cosphi), crtr = crt(r), t1 = 2 * crtr;
      x1 = t1 * cos(phi / 3) - a2 / 3;
      x22 = t1 * cos((phi + tau) / 3) - a2 / 3;
      x3 = t1 * cos((phi + 2 * tau) / 3) - a2 / 3;
      return [x1, x22, x3].filter(reduce);
    } else if (discriminant === 0) {
      u1 = q2 < 0 ? crt(-q2) : -crt(q2);
      x1 = 2 * u1 - a2 / 3;
      x22 = -u1 - a2 / 3;
      return [x1, x22].filter(reduce);
    } else {
      const sd = sqrt(discriminant);
      u1 = crt(-q2 + sd);
      v1 = crt(q2 + sd);
      return [u1 - v1 - a2 / 3].filter(reduce);
    }
  },
  droots: function(p) {
    if (p.length === 3) {
      const a2 = p[0], b = p[1], c2 = p[2], d = a2 - 2 * b + c2;
      if (d !== 0) {
        const m1 = -sqrt(b * b - a2 * c2), m2 = -a2 + b, v1 = -(m1 + m2) / d, v2 = -(-m1 + m2) / d;
        return [v1, v2];
      } else if (b !== c2 && d === 0) {
        return [(2 * b - c2) / (2 * (b - c2))];
      }
      return [];
    }
    if (p.length === 2) {
      const a2 = p[0], b = p[1];
      if (a2 !== b) {
        return [a2 / (a2 - b)];
      }
      return [];
    }
    return [];
  },
  curvature: function(t3, d1, d2, _3d, kOnly) {
    let num, dnm, adk, dk, k = 0, r = 0;
    const d = utils.compute(t3, d1);
    const dd = utils.compute(t3, d2);
    const qdsum = d.x * d.x + d.y * d.y;
    if (_3d) {
      num = sqrt(pow(d.y * dd.z - dd.y * d.z, 2) + pow(d.z * dd.x - dd.z * d.x, 2) + pow(d.x * dd.y - dd.x * d.y, 2));
      dnm = pow(qdsum + d.z * d.z, 3 / 2);
    } else {
      num = d.x * dd.y - d.y * dd.x;
      dnm = pow(qdsum, 3 / 2);
    }
    if (num === 0 || dnm === 0) {
      return { k: 0, r: 0 };
    }
    k = num / dnm;
    r = dnm / num;
    if (!kOnly) {
      const pk = utils.curvature(t3 - 1e-3, d1, d2, _3d, true).k;
      const nk = utils.curvature(t3 + 1e-3, d1, d2, _3d, true).k;
      dk = (nk - k + (k - pk)) / 2;
      adk = (abs2(nk - k) + abs2(k - pk)) / 2;
    }
    return { k, r, dk, adk };
  },
  inflections: function(points) {
    if (points.length < 4)
      return [];
    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }), a2 = p[2].x * p[1].y, b = p[3].x * p[1].y, c2 = p[1].x * p[2].y, d = p[3].x * p[2].y, v1 = 18 * (-3 * a2 + 2 * b + 3 * c2 - d), v2 = 18 * (3 * a2 - b - 3 * c2), v3 = 18 * (c2 - a2);
    if (utils.approximately(v1, 0)) {
      if (!utils.approximately(v2, 0)) {
        let t3 = -v3 / v2;
        if (0 <= t3 && t3 <= 1)
          return [t3];
      }
      return [];
    }
    const d2 = 2 * v1;
    if (utils.approximately(d2, 0))
      return [];
    const trm = v2 * v2 - 4 * v1 * v3;
    if (trm < 0)
      return [];
    const sq = Math.sqrt(trm);
    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function(r) {
      return 0 <= r && r <= 1;
    });
  },
  bboxoverlap: function(b1, b2) {
    const dims = ["x", "y"], len = dims.length;
    for (let i = 0, dim, l, t3, d; i < len; i++) {
      dim = dims[i];
      l = b1[dim].mid;
      t3 = b2[dim].mid;
      d = (b1[dim].size + b2[dim].size) / 2;
      if (abs2(l - t3) >= d)
        return false;
    }
    return true;
  },
  expandbox: function(bbox, _bbox) {
    if (_bbox.x.min < bbox.x.min) {
      bbox.x.min = _bbox.x.min;
    }
    if (_bbox.y.min < bbox.y.min) {
      bbox.y.min = _bbox.y.min;
    }
    if (_bbox.z && _bbox.z.min < bbox.z.min) {
      bbox.z.min = _bbox.z.min;
    }
    if (_bbox.x.max > bbox.x.max) {
      bbox.x.max = _bbox.x.max;
    }
    if (_bbox.y.max > bbox.y.max) {
      bbox.y.max = _bbox.y.max;
    }
    if (_bbox.z && _bbox.z.max > bbox.z.max) {
      bbox.z.max = _bbox.z.max;
    }
    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;
    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;
    if (bbox.z) {
      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;
    }
    bbox.x.size = bbox.x.max - bbox.x.min;
    bbox.y.size = bbox.y.max - bbox.y.min;
    if (bbox.z) {
      bbox.z.size = bbox.z.max - bbox.z.min;
    }
  },
  pairiteration: function(c1, c2, curveIntersectionThreshold) {
    const c1b = c1.bbox(), c2b = c2.bbox(), r = 1e5, threshold = curveIntersectionThreshold || 0.5;
    if (c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {
      return [
        (r * (c1._t1 + c1._t2) / 2 | 0) / r + "/" + (r * (c2._t1 + c2._t2) / 2 | 0) / r
      ];
    }
    let cc1 = c1.split(0.5), cc2 = c2.split(0.5), pairs = [
      { left: cc1.left, right: cc2.left },
      { left: cc1.left, right: cc2.right },
      { left: cc1.right, right: cc2.right },
      { left: cc1.right, right: cc2.left }
    ];
    pairs = pairs.filter(function(pair) {
      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());
    });
    let results = [];
    if (pairs.length === 0)
      return results;
    pairs.forEach(function(pair) {
      results = results.concat(utils.pairiteration(pair.left, pair.right, threshold));
    });
    results = results.filter(function(v, i) {
      return results.indexOf(v) === i;
    });
    return results;
  },
  getccenter: function(p1, p2, p3) {
    const dx1 = p2.x - p1.x, dy1 = p2.y - p1.y, dx2 = p3.x - p2.x, dy2 = p3.y - p2.y, dx1p = dx1 * cos(quart) - dy1 * sin(quart), dy1p = dx1 * sin(quart) + dy1 * cos(quart), dx2p = dx2 * cos(quart) - dy2 * sin(quart), dy2p = dx2 * sin(quart) + dy2 * cos(quart), mx1 = (p1.x + p2.x) / 2, my1 = (p1.y + p2.y) / 2, mx2 = (p2.x + p3.x) / 2, my2 = (p2.y + p3.y) / 2, mx1n = mx1 + dx1p, my1n = my1 + dy1p, mx2n = mx2 + dx2p, my2n = my2 + dy2p, arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n), r = utils.dist(arc, p1);
    let s = atan2(p1.y - arc.y, p1.x - arc.x), m2 = atan2(p2.y - arc.y, p2.x - arc.x), e = atan2(p3.y - arc.y, p3.x - arc.x), _5;
    if (s < e) {
      if (s > m2 || m2 > e) {
        s += tau;
      }
      if (s > e) {
        _5 = e;
        e = s;
        s = _5;
      }
    } else {
      if (e < m2 && m2 < s) {
        _5 = e;
        e = s;
        s = _5;
      } else {
        e += tau;
      }
    }
    arc.s = s;
    arc.e = e;
    arc.r = r;
    return arc;
  },
  numberSort: function(a2, b) {
    return a2 - b;
  }
};

// node_modules/.pnpm/bezier-js@6.1.4/node_modules/bezier-js/src/poly-bezier.js
var PolyBezier = class {
  constructor(curves) {
    this.curves = [];
    this._3d = false;
    if (!!curves) {
      this.curves = curves;
      this._3d = this.curves[0]._3d;
    }
  }
  valueOf() {
    return this.toString();
  }
  toString() {
    return "[" + this.curves.map(function(curve) {
      return utils.pointsToString(curve.points);
    }).join(", ") + "]";
  }
  addCurve(curve) {
    this.curves.push(curve);
    this._3d = this._3d || curve._3d;
  }
  length() {
    return this.curves.map(function(v) {
      return v.length();
    }).reduce(function(a2, b) {
      return a2 + b;
    });
  }
  curve(idx) {
    return this.curves[idx];
  }
  bbox() {
    const c2 = this.curves;
    var bbox = c2[0].bbox();
    for (var i = 1; i < c2.length; i++) {
      utils.expandbox(bbox, c2[i].bbox());
    }
    return bbox;
  }
  offset(d) {
    const offset2 = [];
    this.curves.forEach(function(v) {
      offset2.push(...v.offset(d));
    });
    return new PolyBezier(offset2);
  }
};

// node_modules/.pnpm/bezier-js@6.1.4/node_modules/bezier-js/src/bezier.js
var { abs: abs3, min: min4, max: max4, cos: cos2, sin: sin2, acos: acos2, sqrt: sqrt2 } = Math;
var pi2 = Math.PI;
var Bezier = class {
  constructor(coords) {
    let args = coords && coords.forEach ? coords : Array.from(arguments).slice();
    let coordlen = false;
    if (typeof args[0] === "object") {
      coordlen = args.length;
      const newargs = [];
      args.forEach(function(point2) {
        ["x", "y", "z"].forEach(function(d) {
          if (typeof point2[d] !== "undefined") {
            newargs.push(point2[d]);
          }
        });
      });
      args = newargs;
    }
    let higher = false;
    const len = args.length;
    if (coordlen) {
      if (coordlen > 4) {
        if (arguments.length !== 1) {
          throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");
        }
        higher = true;
      }
    } else {
      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {
        if (arguments.length !== 1) {
          throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");
        }
      }
    }
    const _3d = this._3d = !higher && (len === 9 || len === 12) || coords && coords[0] && typeof coords[0].z !== "undefined";
    const points = this.points = [];
    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {
      var point = {
        x: args[idx],
        y: args[idx + 1]
      };
      if (_3d) {
        point.z = args[idx + 2];
      }
      points.push(point);
    }
    const order2 = this.order = points.length - 1;
    const dims = this.dims = ["x", "y"];
    if (_3d)
      dims.push("z");
    this.dimlen = dims.length;
    const aligned = utils.align(points, { p1: points[0], p2: points[order2] });
    const baselength = utils.dist(points[0], points[order2]);
    this._linear = aligned.reduce((t3, p) => t3 + abs3(p.y), 0) < baselength / 50;
    this._lut = [];
    this._t1 = 0;
    this._t2 = 1;
    this.update();
  }
  static quadraticFromPoints(p1, p2, p3, t3) {
    if (typeof t3 === "undefined") {
      t3 = 0.5;
    }
    if (t3 === 0) {
      return new Bezier(p2, p2, p3);
    }
    if (t3 === 1) {
      return new Bezier(p1, p2, p2);
    }
    const abc = Bezier.getABC(2, p1, p2, p3, t3);
    return new Bezier(p1, abc.A, p3);
  }
  static cubicFromPoints(S, B, E, t3, d1) {
    if (typeof t3 === "undefined") {
      t3 = 0.5;
    }
    const abc = Bezier.getABC(3, S, B, E, t3);
    if (typeof d1 === "undefined") {
      d1 = utils.dist(B, abc.C);
    }
    const d2 = d1 * (1 - t3) / t3;
    const selen = utils.dist(S, E), lx = (E.x - S.x) / selen, ly = (E.y - S.y) / selen, bx1 = d1 * lx, by1 = d1 * ly, bx2 = d2 * lx, by2 = d2 * ly;
    const e1 = { x: B.x - bx1, y: B.y - by1 }, e2 = { x: B.x + bx2, y: B.y + by2 }, A = abc.A, v1 = { x: A.x + (e1.x - A.x) / (1 - t3), y: A.y + (e1.y - A.y) / (1 - t3) }, v2 = { x: A.x + (e2.x - A.x) / t3, y: A.y + (e2.y - A.y) / t3 }, nc1 = { x: S.x + (v1.x - S.x) / t3, y: S.y + (v1.y - S.y) / t3 }, nc2 = {
      x: E.x + (v2.x - E.x) / (1 - t3),
      y: E.y + (v2.y - E.y) / (1 - t3)
    };
    return new Bezier(S, nc1, nc2, E);
  }
  static getUtils() {
    return utils;
  }
  getUtils() {
    return Bezier.getUtils();
  }
  static get PolyBezier() {
    return PolyBezier;
  }
  valueOf() {
    return this.toString();
  }
  toString() {
    return utils.pointsToString(this.points);
  }
  toSVG() {
    if (this._3d)
      return false;
    const p = this.points, x3 = p[0].x, y3 = p[0].y, s = ["M", x3, y3, this.order === 2 ? "Q" : "C"];
    for (let i = 1, last = p.length; i < last; i++) {
      s.push(p[i].x);
      s.push(p[i].y);
    }
    return s.join(" ");
  }
  setRatios(ratios) {
    if (ratios.length !== this.points.length) {
      throw new Error("incorrect number of ratio values");
    }
    this.ratios = ratios;
    this._lut = [];
  }
  verify() {
    const print = this.coordDigest();
    if (print !== this._print) {
      this._print = print;
      this.update();
    }
  }
  coordDigest() {
    return this.points.map(function(c2, pos) {
      return "" + pos + c2.x + c2.y + (c2.z ? c2.z : 0);
    }).join("");
  }
  update() {
    this._lut = [];
    this.dpoints = utils.derive(this.points, this._3d);
    this.computedirection();
  }
  computedirection() {
    const points = this.points;
    const angle = utils.angle(points[0], points[this.order], points[1]);
    this.clockwise = angle > 0;
  }
  length() {
    return utils.length(this.derivative.bind(this));
  }
  static getABC(order2 = 2, S, B, E, t3 = 0.5) {
    const u = utils.projectionratio(t3, order2), um = 1 - u, C = {
      x: u * S.x + um * E.x,
      y: u * S.y + um * E.y
    }, s = utils.abcratio(t3, order2), A = {
      x: B.x + (B.x - C.x) / s,
      y: B.y + (B.y - C.y) / s
    };
    return { A, B, C, S, E };
  }
  getABC(t3, B) {
    B = B || this.get(t3);
    let S = this.points[0];
    let E = this.points[this.order];
    return Bezier.getABC(this.order, S, B, E, t3);
  }
  getLUT(steps) {
    this.verify();
    steps = steps || 100;
    if (this._lut.length === steps + 1) {
      return this._lut;
    }
    this._lut = [];
    steps++;
    this._lut = [];
    for (let i = 0, p, t3; i < steps; i++) {
      t3 = i / (steps - 1);
      p = this.compute(t3);
      p.t = t3;
      this._lut.push(p);
    }
    return this._lut;
  }
  on(point, error) {
    error = error || 5;
    const lut = this.getLUT(), hits = [];
    for (let i = 0, c2, t3 = 0; i < lut.length; i++) {
      c2 = lut[i];
      if (utils.dist(c2, point) < error) {
        hits.push(c2);
        t3 += i / lut.length;
      }
    }
    if (!hits.length)
      return false;
    return t /= hits.length;
  }
  project(point) {
    const LUT = this.getLUT(), l = LUT.length - 1, closest = utils.closest(LUT, point), mpos = closest.mpos, t1 = (mpos - 1) / l, t22 = (mpos + 1) / l, step = 0.1 / l;
    let mdist = closest.mdist, t3 = t1, ft = t3, p;
    mdist += 1;
    for (let d; t3 < t22 + step; t3 += step) {
      p = this.compute(t3);
      d = utils.dist(point, p);
      if (d < mdist) {
        mdist = d;
        ft = t3;
      }
    }
    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;
    p = this.compute(ft);
    p.t = ft;
    p.d = mdist;
    return p;
  }
  get(t3) {
    return this.compute(t3);
  }
  point(idx) {
    return this.points[idx];
  }
  compute(t3) {
    if (this.ratios) {
      return utils.computeWithRatios(t3, this.points, this.ratios, this._3d);
    }
    return utils.compute(t3, this.points, this._3d, this.ratios);
  }
  raise() {
    const p = this.points, np = [p[0]], k = p.length;
    for (let i = 1, pi3, pim; i < k; i++) {
      pi3 = p[i];
      pim = p[i - 1];
      np[i] = {
        x: (k - i) / k * pi3.x + i / k * pim.x,
        y: (k - i) / k * pi3.y + i / k * pim.y
      };
    }
    np[k] = p[k - 1];
    return new Bezier(np);
  }
  derivative(t3) {
    return utils.compute(t3, this.dpoints[0], this._3d);
  }
  dderivative(t3) {
    return utils.compute(t3, this.dpoints[1], this._3d);
  }
  align() {
    let p = this.points;
    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));
  }
  curvature(t3) {
    return utils.curvature(t3, this.dpoints[0], this.dpoints[1], this._3d);
  }
  inflections() {
    return utils.inflections(this.points);
  }
  normal(t3) {
    return this._3d ? this.__normal3(t3) : this.__normal2(t3);
  }
  __normal2(t3) {
    const d = this.derivative(t3);
    const q = sqrt2(d.x * d.x + d.y * d.y);
    return { t: t3, x: -d.y / q, y: d.x / q };
  }
  __normal3(t3) {
    const r1 = this.derivative(t3), r2 = this.derivative(t3 + 0.01), q1 = sqrt2(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z), q2 = sqrt2(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);
    r1.x /= q1;
    r1.y /= q1;
    r1.z /= q1;
    r2.x /= q2;
    r2.y /= q2;
    r2.z /= q2;
    const c2 = {
      x: r2.y * r1.z - r2.z * r1.y,
      y: r2.z * r1.x - r2.x * r1.z,
      z: r2.x * r1.y - r2.y * r1.x
    };
    const m2 = sqrt2(c2.x * c2.x + c2.y * c2.y + c2.z * c2.z);
    c2.x /= m2;
    c2.y /= m2;
    c2.z /= m2;
    const R = [
      c2.x * c2.x,
      c2.x * c2.y - c2.z,
      c2.x * c2.z + c2.y,
      c2.x * c2.y + c2.z,
      c2.y * c2.y,
      c2.y * c2.z - c2.x,
      c2.x * c2.z - c2.y,
      c2.y * c2.z + c2.x,
      c2.z * c2.z
    ];
    const n = {
      t: t3,
      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,
      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,
      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z
    };
    return n;
  }
  hull(t3) {
    let p = this.points, _p = [], q = [], idx = 0;
    q[idx++] = p[0];
    q[idx++] = p[1];
    q[idx++] = p[2];
    if (this.order === 3) {
      q[idx++] = p[3];
    }
    while (p.length > 1) {
      _p = [];
      for (let i = 0, pt, l = p.length - 1; i < l; i++) {
        pt = utils.lerp(t3, p[i], p[i + 1]);
        q[idx++] = pt;
        _p.push(pt);
      }
      p = _p;
    }
    return q;
  }
  split(t1, t22) {
    if (t1 === 0 && !!t22) {
      return this.split(t22).left;
    }
    if (t22 === 1) {
      return this.split(t1).right;
    }
    const q = this.hull(t1);
    const result = {
      left: this.order === 2 ? new Bezier([q[0], q[3], q[5]]) : new Bezier([q[0], q[4], q[7], q[9]]),
      right: this.order === 2 ? new Bezier([q[5], q[4], q[2]]) : new Bezier([q[9], q[8], q[6], q[3]]),
      span: q
    };
    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);
    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);
    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);
    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);
    if (!t22) {
      return result;
    }
    t22 = utils.map(t22, t1, 1, 0, 1);
    return result.right.split(t22).left;
  }
  extrema() {
    const result = {};
    let roots = [];
    this.dims.forEach(function(dim) {
      let mfn = function(v) {
        return v[dim];
      };
      let p = this.dpoints[0].map(mfn);
      result[dim] = utils.droots(p);
      if (this.order === 3) {
        p = this.dpoints[1].map(mfn);
        result[dim] = result[dim].concat(utils.droots(p));
      }
      result[dim] = result[dim].filter(function(t3) {
        return t3 >= 0 && t3 <= 1;
      });
      roots = roots.concat(result[dim].sort(utils.numberSort));
    }.bind(this));
    result.values = roots.sort(utils.numberSort).filter(function(v, idx) {
      return roots.indexOf(v) === idx;
    });
    return result;
  }
  bbox() {
    const extrema = this.extrema(), result = {};
    this.dims.forEach(function(d) {
      result[d] = utils.getminmax(this, d, extrema[d]);
    }.bind(this));
    return result;
  }
  overlaps(curve) {
    const lbbox = this.bbox(), tbbox = curve.bbox();
    return utils.bboxoverlap(lbbox, tbbox);
  }
  offset(t3, d) {
    if (typeof d !== "undefined") {
      const c2 = this.get(t3), n = this.normal(t3);
      const ret = {
        c: c2,
        n,
        x: c2.x + n.x * d,
        y: c2.y + n.y * d
      };
      if (this._3d) {
        ret.z = c2.z + n.z * d;
      }
      return ret;
    }
    if (this._linear) {
      const nv = this.normal(0), coords = this.points.map(function(p) {
        const ret = {
          x: p.x + t3 * nv.x,
          y: p.y + t3 * nv.y
        };
        if (p.z && nv.z) {
          ret.z = p.z + t3 * nv.z;
        }
        return ret;
      });
      return [new Bezier(coords)];
    }
    return this.reduce().map(function(s) {
      if (s._linear) {
        return s.offset(t3)[0];
      }
      return s.scale(t3);
    });
  }
  simple() {
    if (this.order === 3) {
      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);
      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);
      if (a1 > 0 && a2 < 0 || a1 < 0 && a2 > 0)
        return false;
    }
    const n1 = this.normal(0);
    const n2 = this.normal(1);
    let s = n1.x * n2.x + n1.y * n2.y;
    if (this._3d) {
      s += n1.z * n2.z;
    }
    return abs3(acos2(s)) < pi2 / 3;
  }
  reduce() {
    let i, t1 = 0, t22 = 0, step = 0.01, segment, pass1 = [], pass2 = [];
    let extrema = this.extrema().values;
    if (extrema.indexOf(0) === -1) {
      extrema = [0].concat(extrema);
    }
    if (extrema.indexOf(1) === -1) {
      extrema.push(1);
    }
    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {
      t22 = extrema[i];
      segment = this.split(t1, t22);
      segment._t1 = t1;
      segment._t2 = t22;
      pass1.push(segment);
      t1 = t22;
    }
    pass1.forEach(function(p1) {
      t1 = 0;
      t22 = 0;
      while (t22 <= 1) {
        for (t22 = t1 + step; t22 <= 1 + step; t22 += step) {
          segment = p1.split(t1, t22);
          if (!segment.simple()) {
            t22 -= step;
            if (abs3(t1 - t22) < step) {
              return [];
            }
            segment = p1.split(t1, t22);
            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);
            segment._t2 = utils.map(t22, 0, 1, p1._t1, p1._t2);
            pass2.push(segment);
            t1 = t22;
            break;
          }
        }
      }
      if (t1 < 1) {
        segment = p1.split(t1, 1);
        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);
        segment._t2 = p1._t2;
        pass2.push(segment);
      }
    });
    return pass2;
  }
  translate(v, d1, d2) {
    d2 = typeof d2 === "number" ? d2 : d1;
    const o = this.order;
    let d = this.points.map((_5, i) => (1 - i / o) * d1 + i / o * d2);
    return new Bezier(this.points.map((p, i) => ({
      x: p.x + v.x * d[i],
      y: p.y + v.y * d[i]
    })));
  }
  scale(d) {
    const order2 = this.order;
    let distanceFn = false;
    if (typeof d === "function") {
      distanceFn = d;
    }
    if (distanceFn && order2 === 2) {
      return this.raise().scale(distanceFn);
    }
    const clockwise = this.clockwise;
    const points = this.points;
    if (this._linear) {
      return this.translate(this.normal(0), distanceFn ? distanceFn(0) : d, distanceFn ? distanceFn(1) : d);
    }
    const r1 = distanceFn ? distanceFn(0) : d;
    const r2 = distanceFn ? distanceFn(1) : d;
    const v = [this.offset(0, 10), this.offset(1, 10)];
    const np = [];
    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);
    if (!o) {
      throw new Error("cannot scale this curve. Try reducing it first.");
    }
    [0, 1].forEach(function(t3) {
      const p = np[t3 * order2] = utils.copy(points[t3 * order2]);
      p.x += (t3 ? r2 : r1) * v[t3].n.x;
      p.y += (t3 ? r2 : r1) * v[t3].n.y;
    });
    if (!distanceFn) {
      [0, 1].forEach((t3) => {
        if (order2 === 2 && !!t3)
          return;
        const p = np[t3 * order2];
        const d2 = this.derivative(t3);
        const p2 = { x: p.x + d2.x, y: p.y + d2.y };
        np[t3 + 1] = utils.lli4(p, p2, o, points[t3 + 1]);
      });
      return new Bezier(np);
    }
    [0, 1].forEach(function(t3) {
      if (order2 === 2 && !!t3)
        return;
      var p = points[t3 + 1];
      var ov = {
        x: p.x - o.x,
        y: p.y - o.y
      };
      var rc = distanceFn ? distanceFn((t3 + 1) / order2) : d;
      if (distanceFn && !clockwise)
        rc = -rc;
      var m2 = sqrt2(ov.x * ov.x + ov.y * ov.y);
      ov.x /= m2;
      ov.y /= m2;
      np[t3 + 1] = {
        x: p.x + rc * ov.x,
        y: p.y + rc * ov.y
      };
    });
    return new Bezier(np);
  }
  outline(d1, d2, d3, d4) {
    d2 = d2 === void 0 ? d1 : d2;
    if (this._linear) {
      const n = this.normal(0);
      const start3 = this.points[0];
      const end2 = this.points[this.points.length - 1];
      let s, mid, e;
      if (d3 === void 0) {
        d3 = d1;
        d4 = d2;
      }
      s = { x: start3.x + n.x * d1, y: start3.y + n.y * d1 };
      e = { x: end2.x + n.x * d3, y: end2.y + n.y * d3 };
      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };
      const fline = [s, mid, e];
      s = { x: start3.x - n.x * d2, y: start3.y - n.y * d2 };
      e = { x: end2.x - n.x * d4, y: end2.y - n.y * d4 };
      mid = { x: (s.x + e.x) / 2, y: (s.y + e.y) / 2 };
      const bline = [e, mid, s];
      const ls2 = utils.makeline(bline[2], fline[0]);
      const le2 = utils.makeline(fline[2], bline[0]);
      const segments2 = [ls2, new Bezier(fline), le2, new Bezier(bline)];
      return new PolyBezier(segments2);
    }
    const reduced = this.reduce(), len = reduced.length, fcurves = [];
    let bcurves = [], p, alen = 0, tlen = this.length();
    const graduated = typeof d3 !== "undefined" && typeof d4 !== "undefined";
    function linearDistanceFunction(s, e, tlen2, alen2, slen) {
      return function(v) {
        const f1 = alen2 / tlen2, f2 = (alen2 + slen) / tlen2, d = e - s;
        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);
      };
    }
    reduced.forEach(function(segment) {
      const slen = segment.length();
      if (graduated) {
        fcurves.push(segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen)));
        bcurves.push(segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen)));
      } else {
        fcurves.push(segment.scale(d1));
        bcurves.push(segment.scale(-d2));
      }
      alen += slen;
    });
    bcurves = bcurves.map(function(s) {
      p = s.points;
      if (p[3]) {
        s.points = [p[3], p[2], p[1], p[0]];
      } else {
        s.points = [p[2], p[1], p[0]];
      }
      return s;
    }).reverse();
    const fs5 = fcurves[0].points[0], fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1], bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1], be = bcurves[0].points[0], ls = utils.makeline(bs, fs5), le = utils.makeline(fe, be), segments = [ls].concat(fcurves).concat([le]).concat(bcurves);
    return new PolyBezier(segments);
  }
  outlineshapes(d1, d2, curveIntersectionThreshold) {
    d2 = d2 || d1;
    const outline = this.outline(d1, d2).curves;
    const shapes = [];
    for (let i = 1, len = outline.length; i < len / 2; i++) {
      const shape = utils.makeshape(outline[i], outline[len - i], curveIntersectionThreshold);
      shape.startcap.virtual = i > 1;
      shape.endcap.virtual = i < len / 2 - 1;
      shapes.push(shape);
    }
    return shapes;
  }
  intersects(curve, curveIntersectionThreshold) {
    if (!curve)
      return this.selfintersects(curveIntersectionThreshold);
    if (curve.p1 && curve.p2) {
      return this.lineIntersects(curve);
    }
    if (curve instanceof Bezier) {
      curve = curve.reduce();
    }
    return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);
  }
  lineIntersects(line) {
    const mx = min4(line.p1.x, line.p2.x), my = min4(line.p1.y, line.p2.y), MX = max4(line.p1.x, line.p2.x), MY = max4(line.p1.y, line.p2.y);
    return utils.roots(this.points, line).filter((t3) => {
      var p = this.get(t3);
      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);
    });
  }
  selfintersects(curveIntersectionThreshold) {
    const reduced = this.reduce(), len = reduced.length - 2, results = [];
    for (let i = 0, result, left2, right2; i < len; i++) {
      left2 = reduced.slice(i, i + 1);
      right2 = reduced.slice(i + 2);
      result = this.curveintersects(left2, right2, curveIntersectionThreshold);
      results.push(...result);
    }
    return results;
  }
  curveintersects(c1, c2, curveIntersectionThreshold) {
    const pairs = [];
    c1.forEach(function(l) {
      c2.forEach(function(r) {
        if (l.overlaps(r)) {
          pairs.push({ left: l, right: r });
        }
      });
    });
    let intersections = [];
    pairs.forEach(function(pair) {
      const result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);
      if (result.length > 0) {
        intersections = intersections.concat(result);
      }
    });
    return intersections;
  }
  arcs(errorThreshold) {
    errorThreshold = errorThreshold || 0.5;
    return this._iterate(errorThreshold, []);
  }
  _error(pc, np1, s, e) {
    const q = (e - s) / 4, c1 = this.get(s + q), c2 = this.get(e - q), ref = utils.dist(pc, np1), d1 = utils.dist(pc, c1), d2 = utils.dist(pc, c2);
    return abs3(d1 - ref) + abs3(d2 - ref);
  }
  _iterate(errorThreshold, circles) {
    let t_s = 0, t_e = 1, safety;
    do {
      safety = 0;
      t_e = 1;
      let np1 = this.get(t_s), np2, np3, arc, prev_arc;
      let curr_good = false, prev_good = false, done;
      let t_m = t_e, prev_e = 1, step = 0;
      do {
        prev_good = curr_good;
        prev_arc = arc;
        t_m = (t_s + t_e) / 2;
        step++;
        np2 = this.get(t_m);
        np3 = this.get(t_e);
        arc = utils.getccenter(np1, np2, np3);
        arc.interval = {
          start: t_s,
          end: t_e
        };
        let error = this._error(arc, np1, t_s, t_e);
        curr_good = error <= errorThreshold;
        done = prev_good && !curr_good;
        if (!done)
          prev_e = t_e;
        if (curr_good) {
          if (t_e >= 1) {
            arc.interval.end = prev_e = 1;
            prev_arc = arc;
            if (t_e > 1) {
              let d = {
                x: arc.x + arc.r * cos2(arc.e),
                y: arc.y + arc.r * sin2(arc.e)
              };
              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));
            }
            break;
          }
          t_e = t_e + (t_e - t_s) / 2;
        } else {
          t_e = t_m;
        }
      } while (!done && safety++ < 100);
      if (safety >= 100) {
        break;
      }
      prev_arc = prev_arc ? prev_arc : arc;
      circles.push(prev_arc);
      t_s = prev_e;
    } while (t_e < 1);
    return circles;
  }
};

// node_modules/.pnpm/index-array-by@1.4.1/node_modules/index-array-by/dist/index-array-by.mjs
function _iterableToArrayLimit4(arr, i) {
  var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, i === 0) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray4(arr, i) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i) || _unsupportedIterableToArray5(arr, i) || _nonIterableRest4();
}
function _toConsumableArray4(arr) {
  return _arrayWithoutHoles4(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray5(arr) || _nonIterableSpread4();
}
function _arrayWithoutHoles4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray5(arr);
}
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray4(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray5(o, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive4(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey4(arg) {
  var key = _toPrimitive4(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var index5 = function() {
  var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var keyAccessors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var multiItem = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var flattenKeys = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [void 0] : [keyAccessors]).map(function(key) {
    return {
      keyAccessor: key,
      isProp: !(key instanceof Function)
    };
  });
  var indexedResult = list.reduce(function(res, item) {
    var iterObj = res;
    var itemVal = item;
    keys.forEach(function(_ref, idx) {
      var keyAccessor = _ref.keyAccessor, isProp = _ref.isProp;
      var key;
      if (isProp) {
        var _itemVal = itemVal, propVal = _itemVal[keyAccessor], rest = _objectWithoutProperties(_itemVal, [keyAccessor].map(_toPropertyKey4));
        key = propVal;
        itemVal = rest;
      } else {
        key = keyAccessor(itemVal, idx);
      }
      if (idx + 1 < keys.length) {
        if (!iterObj.hasOwnProperty(key)) {
          iterObj[key] = {};
        }
        iterObj = iterObj[key];
      } else {
        if (multiItem) {
          if (!iterObj.hasOwnProperty(key)) {
            iterObj[key] = [];
          }
          iterObj[key].push(itemVal);
        } else {
          iterObj[key] = itemVal;
        }
      }
    });
    return res;
  }, {});
  if (multiItem instanceof Function) {
    (function reduce(node) {
      var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      if (level === keys.length) {
        Object.keys(node).forEach(function(k) {
          return node[k] = multiItem(node[k]);
        });
      } else {
        Object.values(node).forEach(function(child) {
          return reduce(child, level + 1);
        });
      }
    })(indexedResult);
  }
  var result = indexedResult;
  if (flattenKeys) {
    result = [];
    (function flatten(node) {
      var accKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (accKeys.length === keys.length) {
        result.push({
          keys: accKeys,
          vals: node
        });
      } else {
        Object.entries(node).forEach(function(_ref2) {
          var _ref3 = _slicedToArray4(_ref2, 2), key = _ref3[0], val = _ref3[1];
          return flatten(val, [].concat(_toConsumableArray4(accKeys), [key]));
        });
      }
    })(indexedResult);
    if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {
      result[0].keys = [];
    }
  }
  return result;
};

// node_modules/.pnpm/force-graph@1.43.4/node_modules/force-graph/dist/force-graph.mjs
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = ".force-graph-container canvas {\n  display: block;\n  user-select: none;\n  outline: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.force-graph-container .graph-tooltip {\n  position: absolute;\n  top: 0;\n  font-family: sans-serif;\n  font-size: 16px;\n  padding: 4px;\n  border-radius: 3px;\n  color: #eee;\n  background: rgba(0,0,0,0.65);\n  visibility: hidden; /* by default */\n}\n\n.force-graph-container .clickable {\n  cursor: pointer;\n}\n\n.force-graph-container .grabbable {\n  cursor: move;\n  cursor: grab;\n  cursor: -moz-grab;\n  cursor: -webkit-grab;\n}\n\n.force-graph-container .grabbable:active {\n  cursor: grabbing;\n  cursor: -moz-grabbing;\n  cursor: -webkit-grabbing;\n}\n";
styleInject(css_248z);
function _iterableToArrayLimit5(arr, i) {
  var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, i === 0) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof3(obj) {
  "@babel/helpers - typeof";
  return _typeof3 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof3(obj);
}
function _defineProperty2(obj, key, value) {
  key = _toPropertyKey5(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _slicedToArray5(arr, i) {
  return _arrayWithHoles5(arr) || _iterableToArrayLimit5(arr, i) || _unsupportedIterableToArray6(arr, i) || _nonIterableRest5();
}
function _toConsumableArray5(arr) {
  return _arrayWithoutHoles5(arr) || _iterableToArray5(arr) || _unsupportedIterableToArray6(arr) || _nonIterableSpread5();
}
function _arrayWithoutHoles5(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray6(arr);
}
function _arrayWithHoles5(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray5(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray6(o, minLen);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive5(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey5(arg) {
  var key = _toPrimitive5(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var autoColorScale = ordinal(Paired_default);
function autoColorObjects(objects, colorByAccessor, colorField) {
  if (!colorByAccessor || typeof colorField !== "string")
    return;
  objects.filter(function(obj) {
    return !obj[colorField];
  }).forEach(function(obj) {
    obj[colorField] = autoColorScale(colorByAccessor(obj));
  });
}
function getDagDepths(_ref, idAccessor) {
  var nodes = _ref.nodes, links = _ref.links;
  var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref2$nodeFilter = _ref2.nodeFilter, nodeFilter = _ref2$nodeFilter === void 0 ? function() {
    return true;
  } : _ref2$nodeFilter, _ref2$onLoopError = _ref2.onLoopError, onLoopError = _ref2$onLoopError === void 0 ? function(loopIds) {
    throw "Invalid DAG structure! Found cycle in node path: ".concat(loopIds.join(" -> "), ".");
  } : _ref2$onLoopError;
  var graph = {};
  nodes.forEach(function(node) {
    return graph[idAccessor(node)] = {
      data: node,
      out: [],
      depth: -1,
      skip: !nodeFilter(node)
    };
  });
  links.forEach(function(_ref3) {
    var source = _ref3.source, target = _ref3.target;
    var sourceId = getNodeId(source);
    var targetId = getNodeId(target);
    if (!graph.hasOwnProperty(sourceId))
      throw "Missing source node with id: ".concat(sourceId);
    if (!graph.hasOwnProperty(targetId))
      throw "Missing target node with id: ".concat(targetId);
    var sourceNode = graph[sourceId];
    var targetNode = graph[targetId];
    sourceNode.out.push(targetNode);
    function getNodeId(node) {
      return _typeof3(node) === "object" ? idAccessor(node) : node;
    }
  });
  var foundLoops = [];
  traverse(Object.values(graph));
  var nodeDepths = Object.assign.apply(Object, [{}].concat(_toConsumableArray5(Object.entries(graph).filter(function(_ref4) {
    var _ref5 = _slicedToArray5(_ref4, 2), node = _ref5[1];
    return !node.skip;
  }).map(function(_ref6) {
    var _ref7 = _slicedToArray5(_ref6, 2), id2 = _ref7[0], node = _ref7[1];
    return _defineProperty2({}, id2, node.depth);
  }))));
  return nodeDepths;
  function traverse(nodes2) {
    var nodeStack = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var currentDepth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var _loop = function _loop2() {
      var node = nodes2[i];
      if (nodeStack.indexOf(node) !== -1) {
        var loop = [].concat(_toConsumableArray5(nodeStack.slice(nodeStack.indexOf(node))), [node]).map(function(d) {
          return idAccessor(d.data);
        });
        if (!foundLoops.some(function(foundLoop) {
          return foundLoop.length === loop.length && foundLoop.every(function(id2, idx) {
            return id2 === loop[idx];
          });
        })) {
          foundLoops.push(loop);
          onLoopError(loop);
        }
        return 1;
      }
      if (currentDepth > node.depth) {
        node.depth = currentDepth;
        traverse(node.out, [].concat(_toConsumableArray5(nodeStack), [node]), currentDepth + (node.skip ? 0 : 1));
      }
    };
    for (var i = 0, l = nodes2.length; i < l; i++) {
      if (_loop())
        continue;
    }
  }
}
var DAG_LEVEL_NODE_RATIO = 2;
var notifyRedraw = function notifyRedraw2(_5, state) {
  return state.onNeedsRedraw && state.onNeedsRedraw();
};
var updDataPhotons = function updDataPhotons2(_5, state) {
  if (!state.isShadow) {
    var linkParticlesAccessor = index3(state.linkDirectionalParticles);
    state.graphData.links.forEach(function(link) {
      var numPhotons = Math.round(Math.abs(linkParticlesAccessor(link)));
      if (numPhotons) {
        link.__photons = _toConsumableArray5(Array(numPhotons)).map(function() {
          return {};
        });
      } else {
        delete link.__photons;
      }
    });
  }
};
var CanvasForceGraph = index2({
  props: {
    graphData: {
      "default": {
        nodes: [],
        links: []
      },
      onChange: function onChange(_5, state) {
        state.engineRunning = false;
        updDataPhotons(_5, state);
      }
    },
    dagMode: {
      onChange: function onChange2(dagMode, state) {
        !dagMode && (state.graphData.nodes || []).forEach(function(n) {
          return n.fx = n.fy = void 0;
        });
      }
    },
    dagLevelDistance: {},
    dagNodeFilter: {
      "default": function _default2(node) {
        return true;
      }
    },
    onDagError: {
      triggerUpdate: false
    },
    nodeRelSize: {
      "default": 4,
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    nodeId: {
      "default": "id"
    },
    nodeVal: {
      "default": "val",
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    nodeColor: {
      "default": "color",
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    nodeAutoColorBy: {},
    nodeCanvasObject: {
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    nodeCanvasObjectMode: {
      "default": function _default3() {
        return "replace";
      },
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    nodeVisibility: {
      "default": true,
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkSource: {
      "default": "source"
    },
    linkTarget: {
      "default": "target"
    },
    linkVisibility: {
      "default": true,
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkColor: {
      "default": "color",
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkAutoColorBy: {},
    linkLineDash: {
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkWidth: {
      "default": 1,
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkCurvature: {
      "default": 0,
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkCanvasObject: {
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkCanvasObjectMode: {
      "default": function _default4() {
        return "replace";
      },
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkDirectionalArrowLength: {
      "default": 0,
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkDirectionalArrowColor: {
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkDirectionalArrowRelPos: {
      "default": 0.5,
      triggerUpdate: false,
      onChange: notifyRedraw
    },
    linkDirectionalParticles: {
      "default": 0,
      triggerUpdate: false,
      onChange: updDataPhotons
    },
    linkDirectionalParticleSpeed: {
      "default": 0.01,
      triggerUpdate: false
    },
    linkDirectionalParticleWidth: {
      "default": 4,
      triggerUpdate: false
    },
    linkDirectionalParticleColor: {
      triggerUpdate: false
    },
    globalScale: {
      "default": 1,
      triggerUpdate: false
    },
    d3AlphaMin: {
      "default": 0,
      triggerUpdate: false
    },
    d3AlphaDecay: {
      "default": 0.0228,
      triggerUpdate: false,
      onChange: function onChange3(alphaDecay, state) {
        state.forceLayout.alphaDecay(alphaDecay);
      }
    },
    d3AlphaTarget: {
      "default": 0,
      triggerUpdate: false,
      onChange: function onChange4(alphaTarget, state) {
        state.forceLayout.alphaTarget(alphaTarget);
      }
    },
    d3VelocityDecay: {
      "default": 0.4,
      triggerUpdate: false,
      onChange: function onChange5(velocityDecay, state) {
        state.forceLayout.velocityDecay(velocityDecay);
      }
    },
    warmupTicks: {
      "default": 0,
      triggerUpdate: false
    },
    cooldownTicks: {
      "default": Infinity,
      triggerUpdate: false
    },
    cooldownTime: {
      "default": 15e3,
      triggerUpdate: false
    },
    onUpdate: {
      "default": function _default5() {
      },
      triggerUpdate: false
    },
    onFinishUpdate: {
      "default": function _default6() {
      },
      triggerUpdate: false
    },
    onEngineTick: {
      "default": function _default7() {
      },
      triggerUpdate: false
    },
    onEngineStop: {
      "default": function _default8() {
      },
      triggerUpdate: false
    },
    onNeedsRedraw: {
      triggerUpdate: false
    },
    isShadow: {
      "default": false,
      triggerUpdate: false
    }
  },
  methods: {
    d3Force: function d3Force(state, forceName, forceFn) {
      if (forceFn === void 0) {
        return state.forceLayout.force(forceName);
      }
      state.forceLayout.force(forceName, forceFn);
      return this;
    },
    d3ReheatSimulation: function d3ReheatSimulation(state) {
      state.forceLayout.alpha(1);
      this.resetCountdown();
      return this;
    },
    resetCountdown: function resetCountdown(state) {
      state.cntTicks = 0;
      state.startTickTime = new Date();
      state.engineRunning = true;
      return this;
    },
    isEngineRunning: function isEngineRunning(state) {
      return !!state.engineRunning;
    },
    tickFrame: function tickFrame(state) {
      !state.isShadow && layoutTick();
      paintLinks();
      !state.isShadow && paintArrows();
      !state.isShadow && paintPhotons();
      paintNodes();
      return this;
      function layoutTick() {
        if (state.engineRunning) {
          if (++state.cntTicks > state.cooldownTicks || new Date() - state.startTickTime > state.cooldownTime || state.d3AlphaMin > 0 && state.forceLayout.alpha() < state.d3AlphaMin) {
            state.engineRunning = false;
            state.onEngineStop();
          } else {
            state.forceLayout.tick();
            state.onEngineTick();
          }
        }
      }
      function paintNodes() {
        var getVisibility = index3(state.nodeVisibility);
        var getVal = index3(state.nodeVal);
        var getColor = index3(state.nodeColor);
        var getNodeCanvasObjectMode = index3(state.nodeCanvasObjectMode);
        var ctx = state.ctx;
        var padAmount = state.isShadow / state.globalScale;
        var visibleNodes = state.graphData.nodes.filter(getVisibility);
        ctx.save();
        visibleNodes.forEach(function(node) {
          var nodeCanvasObjectMode = getNodeCanvasObjectMode(node);
          if (state.nodeCanvasObject && (nodeCanvasObjectMode === "before" || nodeCanvasObjectMode === "replace")) {
            state.nodeCanvasObject(node, ctx, state.globalScale);
            if (nodeCanvasObjectMode === "replace") {
              ctx.restore();
              return;
            }
          }
          var r = Math.sqrt(Math.max(0, getVal(node) || 1)) * state.nodeRelSize + padAmount;
          ctx.beginPath();
          ctx.arc(node.x, node.y, r, 0, 2 * Math.PI, false);
          ctx.fillStyle = getColor(node) || "rgba(31, 120, 180, 0.92)";
          ctx.fill();
          if (state.nodeCanvasObject && nodeCanvasObjectMode === "after") {
            state.nodeCanvasObject(node, state.ctx, state.globalScale);
          }
        });
        ctx.restore();
      }
      function paintLinks() {
        var getVisibility = index3(state.linkVisibility);
        var getColor = index3(state.linkColor);
        var getWidth = index3(state.linkWidth);
        var getLineDash = index3(state.linkLineDash);
        var getCurvature = index3(state.linkCurvature);
        var getLinkCanvasObjectMode = index3(state.linkCanvasObjectMode);
        var ctx = state.ctx;
        var padAmount = state.isShadow * 2;
        var visibleLinks = state.graphData.links.filter(getVisibility);
        visibleLinks.forEach(calcLinkControlPoints);
        var beforeCustomLinks = [], afterCustomLinks = [], defaultPaintLinks = visibleLinks;
        if (state.linkCanvasObject) {
          var replaceCustomLinks = [], otherCustomLinks = [];
          visibleLinks.forEach(function(d) {
            return ({
              before: beforeCustomLinks,
              after: afterCustomLinks,
              replace: replaceCustomLinks
            }[getLinkCanvasObjectMode(d)] || otherCustomLinks).push(d);
          });
          defaultPaintLinks = [].concat(_toConsumableArray5(beforeCustomLinks), afterCustomLinks, otherCustomLinks);
          beforeCustomLinks = beforeCustomLinks.concat(replaceCustomLinks);
        }
        ctx.save();
        beforeCustomLinks.forEach(function(link) {
          return state.linkCanvasObject(link, ctx, state.globalScale);
        });
        ctx.restore();
        var linksPerColor = index5(defaultPaintLinks, [getColor, getWidth, getLineDash]);
        ctx.save();
        Object.entries(linksPerColor).forEach(function(_ref) {
          var _ref2 = _slicedToArray5(_ref, 2), color2 = _ref2[0], linksPerWidth = _ref2[1];
          var lineColor = !color2 || color2 === "undefined" ? "rgba(0,0,0,0.15)" : color2;
          Object.entries(linksPerWidth).forEach(function(_ref3) {
            var _ref4 = _slicedToArray5(_ref3, 2), width = _ref4[0], linesPerLineDash = _ref4[1];
            var lineWidth = (width || 1) / state.globalScale + padAmount;
            Object.entries(linesPerLineDash).forEach(function(_ref5) {
              var _ref6 = _slicedToArray5(_ref5, 2);
              _ref6[0];
              var links = _ref6[1];
              var lineDashSegments = getLineDash(links[0]);
              ctx.beginPath();
              links.forEach(function(link) {
                var start3 = link.source;
                var end2 = link.target;
                if (!start3 || !end2 || !start3.hasOwnProperty("x") || !end2.hasOwnProperty("x"))
                  return;
                ctx.moveTo(start3.x, start3.y);
                var controlPoints = link.__controlPoints;
                if (!controlPoints) {
                  ctx.lineTo(end2.x, end2.y);
                } else {
                  ctx[controlPoints.length === 2 ? "quadraticCurveTo" : "bezierCurveTo"].apply(ctx, _toConsumableArray5(controlPoints).concat([end2.x, end2.y]));
                }
              });
              ctx.strokeStyle = lineColor;
              ctx.lineWidth = lineWidth;
              ctx.setLineDash(lineDashSegments || []);
              ctx.stroke();
            });
          });
        });
        ctx.restore();
        ctx.save();
        afterCustomLinks.forEach(function(link) {
          return state.linkCanvasObject(link, ctx, state.globalScale);
        });
        ctx.restore();
        function calcLinkControlPoints(link) {
          var curvature = getCurvature(link);
          if (!curvature) {
            link.__controlPoints = null;
            return;
          }
          var start3 = link.source;
          var end2 = link.target;
          if (!start3 || !end2 || !start3.hasOwnProperty("x") || !end2.hasOwnProperty("x"))
            return;
          var l = Math.sqrt(Math.pow(end2.x - start3.x, 2) + Math.pow(end2.y - start3.y, 2));
          if (l > 0) {
            var a2 = Math.atan2(end2.y - start3.y, end2.x - start3.x);
            var d = l * curvature;
            var cp = {
              x: (start3.x + end2.x) / 2 + d * Math.cos(a2 - Math.PI / 2),
              y: (start3.y + end2.y) / 2 + d * Math.sin(a2 - Math.PI / 2)
            };
            link.__controlPoints = [cp.x, cp.y];
          } else {
            var _d = curvature * 70;
            link.__controlPoints = [end2.x, end2.y - _d, end2.x + _d, end2.y];
          }
        }
      }
      function paintArrows() {
        var ARROW_WH_RATIO = 1.6;
        var ARROW_VLEN_RATIO = 0.2;
        var getLength = index3(state.linkDirectionalArrowLength);
        var getRelPos = index3(state.linkDirectionalArrowRelPos);
        var getVisibility = index3(state.linkVisibility);
        var getColor = index3(state.linkDirectionalArrowColor || state.linkColor);
        var getNodeVal = index3(state.nodeVal);
        var ctx = state.ctx;
        ctx.save();
        state.graphData.links.filter(getVisibility).forEach(function(link) {
          var arrowLength = getLength(link);
          if (!arrowLength || arrowLength < 0)
            return;
          var start3 = link.source;
          var end2 = link.target;
          if (!start3 || !end2 || !start3.hasOwnProperty("x") || !end2.hasOwnProperty("x"))
            return;
          var startR = Math.sqrt(Math.max(0, getNodeVal(start3) || 1)) * state.nodeRelSize;
          var endR = Math.sqrt(Math.max(0, getNodeVal(end2) || 1)) * state.nodeRelSize;
          var arrowRelPos = Math.min(1, Math.max(0, getRelPos(link)));
          var arrowColor = getColor(link) || "rgba(0,0,0,0.28)";
          var arrowHalfWidth = arrowLength / ARROW_WH_RATIO / 2;
          var bzLine = link.__controlPoints && _construct(Bezier, [start3.x, start3.y].concat(_toConsumableArray5(link.__controlPoints), [end2.x, end2.y]));
          var getCoordsAlongLine = bzLine ? function(t3) {
            return bzLine.get(t3);
          } : function(t3) {
            return {
              x: start3.x + (end2.x - start3.x) * t3 || 0,
              y: start3.y + (end2.y - start3.y) * t3 || 0
            };
          };
          var lineLen = bzLine ? bzLine.length() : Math.sqrt(Math.pow(end2.x - start3.x, 2) + Math.pow(end2.y - start3.y, 2));
          var posAlongLine = startR + arrowLength + (lineLen - startR - endR - arrowLength) * arrowRelPos;
          var arrowHead = getCoordsAlongLine(posAlongLine / lineLen);
          var arrowTail = getCoordsAlongLine((posAlongLine - arrowLength) / lineLen);
          var arrowTailVertex = getCoordsAlongLine((posAlongLine - arrowLength * (1 - ARROW_VLEN_RATIO)) / lineLen);
          var arrowTailAngle = Math.atan2(arrowHead.y - arrowTail.y, arrowHead.x - arrowTail.x) - Math.PI / 2;
          ctx.beginPath();
          ctx.moveTo(arrowHead.x, arrowHead.y);
          ctx.lineTo(arrowTail.x + arrowHalfWidth * Math.cos(arrowTailAngle), arrowTail.y + arrowHalfWidth * Math.sin(arrowTailAngle));
          ctx.lineTo(arrowTailVertex.x, arrowTailVertex.y);
          ctx.lineTo(arrowTail.x - arrowHalfWidth * Math.cos(arrowTailAngle), arrowTail.y - arrowHalfWidth * Math.sin(arrowTailAngle));
          ctx.fillStyle = arrowColor;
          ctx.fill();
        });
        ctx.restore();
      }
      function paintPhotons() {
        var getNumPhotons = index3(state.linkDirectionalParticles);
        var getSpeed = index3(state.linkDirectionalParticleSpeed);
        var getDiameter = index3(state.linkDirectionalParticleWidth);
        var getVisibility = index3(state.linkVisibility);
        var getColor = index3(state.linkDirectionalParticleColor || state.linkColor);
        var ctx = state.ctx;
        ctx.save();
        state.graphData.links.filter(getVisibility).forEach(function(link) {
          var numCyclePhotons = getNumPhotons(link);
          if (!link.hasOwnProperty("__photons") || !link.__photons.length)
            return;
          var start3 = link.source;
          var end2 = link.target;
          if (!start3 || !end2 || !start3.hasOwnProperty("x") || !end2.hasOwnProperty("x"))
            return;
          var particleSpeed = getSpeed(link);
          var photons = link.__photons || [];
          var photonR = Math.max(0, getDiameter(link) / 2) / Math.sqrt(state.globalScale);
          var photonColor = getColor(link) || "rgba(0,0,0,0.28)";
          ctx.fillStyle = photonColor;
          var bzLine = link.__controlPoints ? _construct(Bezier, [start3.x, start3.y].concat(_toConsumableArray5(link.__controlPoints), [end2.x, end2.y])) : null;
          var cyclePhotonIdx = 0;
          var needsCleanup = false;
          photons.forEach(function(photon) {
            var singleHop = !!photon.__singleHop;
            if (!photon.hasOwnProperty("__progressRatio")) {
              photon.__progressRatio = singleHop ? 0 : cyclePhotonIdx / numCyclePhotons;
            }
            !singleHop && cyclePhotonIdx++;
            photon.__progressRatio += particleSpeed;
            if (photon.__progressRatio >= 1) {
              if (!singleHop) {
                photon.__progressRatio = photon.__progressRatio % 1;
              } else {
                needsCleanup = true;
                return;
              }
            }
            var photonPosRatio = photon.__progressRatio;
            var coords = bzLine ? bzLine.get(photonPosRatio) : {
              x: start3.x + (end2.x - start3.x) * photonPosRatio || 0,
              y: start3.y + (end2.y - start3.y) * photonPosRatio || 0
            };
            ctx.beginPath();
            ctx.arc(coords.x, coords.y, photonR, 0, 2 * Math.PI, false);
            ctx.fill();
          });
          if (needsCleanup) {
            link.__photons = link.__photons.filter(function(photon) {
              return !photon.__singleHop || photon.__progressRatio <= 1;
            });
          }
        });
        ctx.restore();
      }
    },
    emitParticle: function emitParticle(state, link) {
      if (link) {
        !link.__photons && (link.__photons = []);
        link.__photons.push({
          __singleHop: true
        });
      }
      return this;
    }
  },
  stateInit: function stateInit() {
    return {
      forceLayout: simulation_default().force("link", link_default()).force("charge", manyBody_default()).force("center", center_default()).force("dagRadial", null).stop(),
      engineRunning: false
    };
  },
  init: function init2(canvasCtx, state) {
    state.ctx = canvasCtx;
  },
  update: function update2(state) {
    state.engineRunning = false;
    state.onUpdate();
    if (state.nodeAutoColorBy !== null) {
      autoColorObjects(state.graphData.nodes, index3(state.nodeAutoColorBy), state.nodeColor);
    }
    if (state.linkAutoColorBy !== null) {
      autoColorObjects(state.graphData.links, index3(state.linkAutoColorBy), state.linkColor);
    }
    state.graphData.links.forEach(function(link) {
      link.source = link[state.linkSource];
      link.target = link[state.linkTarget];
    });
    state.forceLayout.stop().alpha(1).nodes(state.graphData.nodes);
    var linkForce = state.forceLayout.force("link");
    if (linkForce) {
      linkForce.id(function(d) {
        return d[state.nodeId];
      }).links(state.graphData.links);
    }
    var nodeDepths = state.dagMode && getDagDepths(state.graphData, function(node) {
      return node[state.nodeId];
    }, {
      nodeFilter: state.dagNodeFilter,
      onLoopError: state.onDagError || void 0
    });
    var maxDepth = Math.max.apply(Math, _toConsumableArray5(Object.values(nodeDepths || [])));
    var dagLevelDistance = state.dagLevelDistance || state.graphData.nodes.length / (maxDepth || 1) * DAG_LEVEL_NODE_RATIO * (["radialin", "radialout"].indexOf(state.dagMode) !== -1 ? 0.7 : 1);
    if (state.dagMode) {
      var getFFn = function getFFn2(fix, invert) {
        return function(node) {
          return !fix ? void 0 : (nodeDepths[node[state.nodeId]] - maxDepth / 2) * dagLevelDistance * (invert ? -1 : 1);
        };
      };
      var fxFn = getFFn(["lr", "rl"].indexOf(state.dagMode) !== -1, state.dagMode === "rl");
      var fyFn = getFFn(["td", "bu"].indexOf(state.dagMode) !== -1, state.dagMode === "bu");
      state.graphData.nodes.filter(state.dagNodeFilter).forEach(function(node) {
        node.fx = fxFn(node);
        node.fy = fyFn(node);
      });
    }
    state.forceLayout.force("dagRadial", ["radialin", "radialout"].indexOf(state.dagMode) !== -1 ? radial_default(function(node) {
      var nodeDepth = nodeDepths[node[state.nodeId]] || -1;
      return (state.dagMode === "radialin" ? maxDepth - nodeDepth : nodeDepth) * dagLevelDistance;
    }).strength(function(node) {
      return state.dagNodeFilter(node) ? 1 : 0;
    }) : null);
    for (var i = 0; i < state.warmupTicks && !(state.d3AlphaMin > 0 && state.forceLayout.alpha() < state.d3AlphaMin); i++) {
      state.forceLayout.tick();
    }
    this.resetCountdown();
    state.onFinishUpdate();
  }
});
function linkKapsule(kapsulePropNames, kapsuleType) {
  var propNames = kapsulePropNames instanceof Array ? kapsulePropNames : [kapsulePropNames];
  var dummyK = new kapsuleType();
  dummyK._destructor && dummyK._destructor();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange15(v, state) {
          propNames.forEach(function(propName) {
            return state[propName][prop](v);
          });
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVals = [];
        propNames.forEach(function(propName) {
          var kapsuleInstance = state[propName];
          var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
          if (returnVal !== kapsuleInstance) {
            returnVals.push(returnVal);
          }
        });
        return returnVals.length ? returnVals[0] : this;
      };
    }
  };
}
var HOVER_CANVAS_THROTTLE_DELAY = 800;
var ZOOM2NODES_FACTOR = 4;
var bindFG = linkKapsule("forceGraph", CanvasForceGraph);
var bindBoth = linkKapsule(["forceGraph", "shadowGraph"], CanvasForceGraph);
var linkedProps = Object.assign.apply(Object, _toConsumableArray5(["nodeColor", "nodeAutoColorBy", "nodeCanvasObject", "nodeCanvasObjectMode", "linkColor", "linkAutoColorBy", "linkLineDash", "linkWidth", "linkCanvasObject", "linkCanvasObjectMode", "linkDirectionalArrowLength", "linkDirectionalArrowColor", "linkDirectionalArrowRelPos", "linkDirectionalParticles", "linkDirectionalParticleSpeed", "linkDirectionalParticleWidth", "linkDirectionalParticleColor", "dagMode", "dagLevelDistance", "dagNodeFilter", "onDagError", "d3AlphaMin", "d3AlphaDecay", "d3VelocityDecay", "warmupTicks", "cooldownTicks", "cooldownTime", "onEngineTick", "onEngineStop"].map(function(p) {
  return _defineProperty2({}, p, bindFG.linkProp(p));
})).concat(_toConsumableArray5(["nodeRelSize", "nodeId", "nodeVal", "nodeVisibility", "linkSource", "linkTarget", "linkVisibility", "linkCurvature"].map(function(p) {
  return _defineProperty2({}, p, bindBoth.linkProp(p));
}))));
var linkedMethods = Object.assign.apply(Object, _toConsumableArray5(["d3Force", "d3ReheatSimulation", "emitParticle"].map(function(p) {
  return _defineProperty2({}, p, bindFG.linkMethod(p));
})));
function adjustCanvasSize(state) {
  if (state.canvas) {
    var curWidth = state.canvas.width;
    var curHeight = state.canvas.height;
    if (curWidth === 300 && curHeight === 150) {
      curWidth = curHeight = 0;
    }
    var pxScale = window.devicePixelRatio;
    curWidth /= pxScale;
    curHeight /= pxScale;
    [state.canvas, state.shadowCanvas].forEach(function(canvas) {
      canvas.style.width = "".concat(state.width, "px");
      canvas.style.height = "".concat(state.height, "px");
      canvas.width = state.width * pxScale;
      canvas.height = state.height * pxScale;
      if (!curWidth && !curHeight) {
        canvas.getContext("2d").scale(pxScale, pxScale);
      }
    });
    var k = transform(state.canvas).k;
    state.zoom.translateBy(state.zoom.__baseElem, (state.width - curWidth) / 2 / k, (state.height - curHeight) / 2 / k);
    state.needsRedraw = true;
  }
}
function resetTransform(ctx) {
  var pxRatio = window.devicePixelRatio;
  ctx.setTransform(pxRatio, 0, 0, pxRatio, 0, 0);
}
function clearCanvas(ctx, width, height) {
  ctx.save();
  resetTransform(ctx);
  ctx.clearRect(0, 0, width, height);
  ctx.restore();
}
var forceGraph = index2({
  props: _objectSpread2({
    width: {
      "default": window.innerWidth,
      onChange: function onChange6(_5, state) {
        return adjustCanvasSize(state);
      },
      triggerUpdate: false
    },
    height: {
      "default": window.innerHeight,
      onChange: function onChange7(_5, state) {
        return adjustCanvasSize(state);
      },
      triggerUpdate: false
    },
    graphData: {
      "default": {
        nodes: [],
        links: []
      },
      onChange: function onChange8(d, state) {
        [{
          type: "Node",
          objs: d.nodes
        }, {
          type: "Link",
          objs: d.links
        }].forEach(hexIndex);
        state.forceGraph.graphData(d);
        state.shadowGraph.graphData(d);
        function hexIndex(_ref4) {
          var type2 = _ref4.type, objs = _ref4.objs;
          objs.filter(function(d2) {
            if (!d2.hasOwnProperty("__indexColor"))
              return true;
            var cur = state.colorTracker.lookup(d2.__indexColor);
            return !cur || !cur.hasOwnProperty("d") || cur.d !== d2;
          }).forEach(function(d2) {
            d2.__indexColor = state.colorTracker.register({
              type: type2,
              d: d2
            });
          });
        }
      },
      triggerUpdate: false
    },
    backgroundColor: {
      onChange: function onChange9(color2, state) {
        state.canvas && color2 && (state.canvas.style.background = color2);
      },
      triggerUpdate: false
    },
    nodeLabel: {
      "default": "name",
      triggerUpdate: false
    },
    nodePointerAreaPaint: {
      onChange: function onChange10(paintFn, state) {
        state.shadowGraph.nodeCanvasObject(!paintFn ? null : function(node, ctx, globalScale) {
          return paintFn(node, node.__indexColor, ctx, globalScale);
        });
        state.flushShadowCanvas && state.flushShadowCanvas();
      },
      triggerUpdate: false
    },
    linkPointerAreaPaint: {
      onChange: function onChange11(paintFn, state) {
        state.shadowGraph.linkCanvasObject(!paintFn ? null : function(link, ctx, globalScale) {
          return paintFn(link, link.__indexColor, ctx, globalScale);
        });
        state.flushShadowCanvas && state.flushShadowCanvas();
      },
      triggerUpdate: false
    },
    linkLabel: {
      "default": "name",
      triggerUpdate: false
    },
    linkHoverPrecision: {
      "default": 4,
      triggerUpdate: false
    },
    minZoom: {
      "default": 0.01,
      onChange: function onChange12(minZoom, state) {
        state.zoom.scaleExtent([minZoom, state.zoom.scaleExtent()[1]]);
      },
      triggerUpdate: false
    },
    maxZoom: {
      "default": 1e3,
      onChange: function onChange13(maxZoom, state) {
        state.zoom.scaleExtent([state.zoom.scaleExtent()[0], maxZoom]);
      },
      triggerUpdate: false
    },
    enableNodeDrag: {
      "default": true,
      triggerUpdate: false
    },
    enableZoomInteraction: {
      "default": true,
      triggerUpdate: false
    },
    enablePanInteraction: {
      "default": true,
      triggerUpdate: false
    },
    enableZoomPanInteraction: {
      "default": true,
      triggerUpdate: false
    },
    enablePointerInteraction: {
      "default": true,
      onChange: function onChange14(_5, state) {
        state.hoverObj = null;
      },
      triggerUpdate: false
    },
    autoPauseRedraw: {
      "default": true,
      triggerUpdate: false
    },
    onNodeDrag: {
      "default": function _default9() {
      },
      triggerUpdate: false
    },
    onNodeDragEnd: {
      "default": function _default10() {
      },
      triggerUpdate: false
    },
    onNodeClick: {
      triggerUpdate: false
    },
    onNodeRightClick: {
      triggerUpdate: false
    },
    onNodeHover: {
      triggerUpdate: false
    },
    onLinkClick: {
      triggerUpdate: false
    },
    onLinkRightClick: {
      triggerUpdate: false
    },
    onLinkHover: {
      triggerUpdate: false
    },
    onBackgroundClick: {
      triggerUpdate: false
    },
    onBackgroundRightClick: {
      triggerUpdate: false
    },
    onZoom: {
      triggerUpdate: false
    },
    onZoomEnd: {
      triggerUpdate: false
    },
    onRenderFramePre: {
      triggerUpdate: false
    },
    onRenderFramePost: {
      triggerUpdate: false
    }
  }, linkedProps),
  aliases: {
    stopAnimation: "pauseAnimation"
  },
  methods: _objectSpread2({
    graph2ScreenCoords: function graph2ScreenCoords(state, x3, y3) {
      var t3 = transform(state.canvas);
      return {
        x: x3 * t3.k + t3.x,
        y: y3 * t3.k + t3.y
      };
    },
    screen2GraphCoords: function screen2GraphCoords(state, x3, y3) {
      var t3 = transform(state.canvas);
      return {
        x: (x3 - t3.x) / t3.k,
        y: (y3 - t3.y) / t3.k
      };
    },
    centerAt: function centerAt(state, x3, y3, transitionDuration) {
      if (!state.canvas)
        return null;
      if (x3 !== void 0 || y3 !== void 0) {
        var finalPos = Object.assign({}, x3 !== void 0 ? {
          x: x3
        } : {}, y3 !== void 0 ? {
          y: y3
        } : {});
        if (!transitionDuration) {
          setCenter(finalPos);
        } else {
          new Tween(getCenter()).to(finalPos, transitionDuration).easing(Easing.Quadratic.Out).onUpdate(setCenter).start();
        }
        return this;
      }
      return getCenter();
      function getCenter() {
        var t3 = transform(state.canvas);
        return {
          x: (state.width / 2 - t3.x) / t3.k,
          y: (state.height / 2 - t3.y) / t3.k
        };
      }
      function setCenter(_ref5) {
        var x4 = _ref5.x, y4 = _ref5.y;
        state.zoom.translateTo(state.zoom.__baseElem, x4 === void 0 ? getCenter().x : x4, y4 === void 0 ? getCenter().y : y4);
        state.needsRedraw = true;
      }
    },
    zoom: function zoom(state, k, transitionDuration) {
      if (!state.canvas)
        return null;
      if (k !== void 0) {
        if (!transitionDuration) {
          setZoom(k);
        } else {
          new Tween({
            k: getZoom()
          }).to({
            k
          }, transitionDuration).easing(Easing.Quadratic.Out).onUpdate(function(_ref6) {
            var k2 = _ref6.k;
            return setZoom(k2);
          }).start();
        }
        return this;
      }
      return getZoom();
      function getZoom() {
        return transform(state.canvas).k;
      }
      function setZoom(k2) {
        state.zoom.scaleTo(state.zoom.__baseElem, k2);
        state.needsRedraw = true;
      }
    },
    zoomToFit: function zoomToFit(state) {
      var transitionDuration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var padding = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;
      for (var _len = arguments.length, bboxArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        bboxArgs[_key - 3] = arguments[_key];
      }
      var bbox = this.getGraphBbox.apply(this, bboxArgs);
      if (bbox) {
        var center = {
          x: (bbox.x[0] + bbox.x[1]) / 2,
          y: (bbox.y[0] + bbox.y[1]) / 2
        };
        var zoomK = Math.max(1e-12, Math.min(1e12, (state.width - padding * 2) / (bbox.x[1] - bbox.x[0]), (state.height - padding * 2) / (bbox.y[1] - bbox.y[0])));
        this.centerAt(center.x, center.y, transitionDuration);
        this.zoom(zoomK, transitionDuration);
      }
      return this;
    },
    getGraphBbox: function getGraphBbox(state) {
      var nodeFilter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
        return true;
      };
      var getVal = index3(state.nodeVal);
      var getR = function getR2(node) {
        return Math.sqrt(Math.max(0, getVal(node) || 1)) * state.nodeRelSize;
      };
      var nodesPos = state.graphData.nodes.filter(nodeFilter).map(function(node) {
        return {
          x: node.x,
          y: node.y,
          r: getR(node)
        };
      });
      return !nodesPos.length ? null : {
        x: [min2(nodesPos, function(node) {
          return node.x - node.r;
        }), max2(nodesPos, function(node) {
          return node.x + node.r;
        })],
        y: [min2(nodesPos, function(node) {
          return node.y - node.r;
        }), max2(nodesPos, function(node) {
          return node.y + node.r;
        })]
      };
    },
    pauseAnimation: function pauseAnimation(state) {
      if (state.animationFrameRequestId) {
        cancelAnimationFrame(state.animationFrameRequestId);
        state.animationFrameRequestId = null;
      }
      return this;
    },
    resumeAnimation: function resumeAnimation(state) {
      if (!state.animationFrameRequestId) {
        this._animationCycle();
      }
      return this;
    },
    _destructor: function _destructor() {
      this.pauseAnimation();
      this.graphData({
        nodes: [],
        links: []
      });
    }
  }, linkedMethods),
  stateInit: function stateInit2() {
    return {
      lastSetZoom: 1,
      zoom: zoom_default2(),
      forceGraph: new CanvasForceGraph(),
      shadowGraph: new CanvasForceGraph().cooldownTicks(0).nodeColor("__indexColor").linkColor("__indexColor").isShadow(true),
      colorTracker: new _default()
    };
  },
  init: function init3(domNode, state) {
    var _this = this;
    domNode.innerHTML = "";
    var container = document.createElement("div");
    container.classList.add("force-graph-container");
    container.style.position = "relative";
    domNode.appendChild(container);
    state.canvas = document.createElement("canvas");
    if (state.backgroundColor)
      state.canvas.style.background = state.backgroundColor;
    container.appendChild(state.canvas);
    state.shadowCanvas = document.createElement("canvas");
    var ctx = state.canvas.getContext("2d");
    var shadowCtx = state.shadowCanvas.getContext("2d", {
      willReadFrequently: true
    });
    var pointerPos = {
      x: -1e12,
      y: -1e12
    };
    var getObjUnderPointer = function getObjUnderPointer2() {
      var obj = null;
      var pxScale = window.devicePixelRatio;
      var px = pointerPos.x > 0 && pointerPos.y > 0 ? shadowCtx.getImageData(pointerPos.x * pxScale, pointerPos.y * pxScale, 1, 1) : null;
      px && (obj = state.colorTracker.lookup(px.data));
      return obj;
    };
    select_default2(state.canvas).call(drag_default().subject(function() {
      if (!state.enableNodeDrag) {
        return null;
      }
      var obj = getObjUnderPointer();
      return obj && obj.type === "Node" ? obj.d : null;
    }).on("start", function(ev) {
      var obj = ev.subject;
      obj.__initialDragPos = {
        x: obj.x,
        y: obj.y,
        fx: obj.fx,
        fy: obj.fy
      };
      if (!ev.active) {
        obj.fx = obj.x;
        obj.fy = obj.y;
      }
      state.canvas.classList.add("grabbable");
    }).on("drag", function(ev) {
      var obj = ev.subject;
      var initPos = obj.__initialDragPos;
      var dragPos = ev;
      var k = transform(state.canvas).k;
      var translate = {
        x: initPos.x + (dragPos.x - initPos.x) / k - obj.x,
        y: initPos.y + (dragPos.y - initPos.y) / k - obj.y
      };
      ["x", "y"].forEach(function(c2) {
        return obj["f".concat(c2)] = obj[c2] = initPos[c2] + (dragPos[c2] - initPos[c2]) / k;
      });
      state.forceGraph.d3AlphaTarget(0.3).resetCountdown();
      state.isPointerDragging = true;
      obj.__dragged = true;
      state.onNodeDrag(obj, translate);
    }).on("end", function(ev) {
      var obj = ev.subject;
      var initPos = obj.__initialDragPos;
      var translate = {
        x: obj.x - initPos.x,
        y: obj.y - initPos.y
      };
      if (initPos.fx === void 0) {
        obj.fx = void 0;
      }
      if (initPos.fy === void 0) {
        obj.fy = void 0;
      }
      delete obj.__initialDragPos;
      if (state.forceGraph.d3AlphaTarget()) {
        state.forceGraph.d3AlphaTarget(0).resetCountdown();
      }
      state.canvas.classList.remove("grabbable");
      state.isPointerDragging = false;
      if (obj.__dragged) {
        delete obj.__dragged;
        state.onNodeDragEnd(obj, translate);
      }
    }));
    state.zoom(state.zoom.__baseElem = select_default2(state.canvas));
    state.zoom.__baseElem.on("dblclick.zoom", null);
    state.zoom.filter(function(ev) {
      return !ev.button && state.enableZoomPanInteraction && (state.enableZoomInteraction || ev.type !== "wheel") && (state.enablePanInteraction || ev.type === "wheel");
    }).on("zoom", function(ev) {
      var t3 = ev.transform;
      [ctx, shadowCtx].forEach(function(c2) {
        resetTransform(c2);
        c2.translate(t3.x, t3.y);
        c2.scale(t3.k, t3.k);
      });
      state.onZoom && state.onZoom(_objectSpread2(_objectSpread2({}, t3), _this.centerAt()));
      state.needsRedraw = true;
    }).on("end", function(ev) {
      return state.onZoomEnd && state.onZoomEnd(_objectSpread2(_objectSpread2({}, ev.transform), _this.centerAt()));
    });
    adjustCanvasSize(state);
    state.forceGraph.onNeedsRedraw(function() {
      return state.needsRedraw = true;
    }).onFinishUpdate(function() {
      if (transform(state.canvas).k === state.lastSetZoom && state.graphData.nodes.length) {
        state.zoom.scaleTo(state.zoom.__baseElem, state.lastSetZoom = ZOOM2NODES_FACTOR / Math.cbrt(state.graphData.nodes.length));
        state.needsRedraw = true;
      }
    });
    var toolTipElem = document.createElement("div");
    toolTipElem.classList.add("graph-tooltip");
    container.appendChild(toolTipElem);
    ["pointermove", "pointerdown"].forEach(function(evType) {
      return container.addEventListener(evType, function(ev) {
        if (evType === "pointerdown") {
          state.isPointerPressed = true;
          state.pointerDownEvent = ev;
        }
        !state.isPointerDragging && ev.type === "pointermove" && state.onBackgroundClick && (ev.pressure > 0 || state.isPointerPressed) && (ev.pointerType !== "touch" || ev.movementX === void 0 || [ev.movementX, ev.movementY].some(function(m2) {
          return Math.abs(m2) > 1;
        })) && (state.isPointerDragging = true);
        var offset2 = getOffset(container);
        pointerPos.x = ev.pageX - offset2.left;
        pointerPos.y = ev.pageY - offset2.top;
        toolTipElem.style.top = "".concat(pointerPos.y, "px");
        toolTipElem.style.left = "".concat(pointerPos.x, "px");
        toolTipElem.style.transform = "translate(-".concat(pointerPos.x / state.width * 100, "%, ").concat(state.height - pointerPos.y < 100 ? "calc(-100% - 8px)" : "21px", ")");
        function getOffset(el) {
          var rect = el.getBoundingClientRect(), scrollLeft = window.pageXOffset || document.documentElement.scrollLeft, scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          return {
            top: rect.top + scrollTop,
            left: rect.left + scrollLeft
          };
        }
      }, {
        passive: true
      });
    });
    container.addEventListener("pointerup", function(ev) {
      state.isPointerPressed = false;
      if (state.isPointerDragging) {
        state.isPointerDragging = false;
        return;
      }
      var cbEvents = [ev, state.pointerDownEvent];
      requestAnimationFrame(function() {
        if (ev.button === 0) {
          if (state.hoverObj) {
            var fn2 = state["on".concat(state.hoverObj.type, "Click")];
            fn2 && fn2.apply(void 0, [state.hoverObj.d].concat(cbEvents));
          } else {
            state.onBackgroundClick && state.onBackgroundClick.apply(state, cbEvents);
          }
        }
        if (ev.button === 2) {
          if (state.hoverObj) {
            var _fn = state["on".concat(state.hoverObj.type, "RightClick")];
            _fn && _fn.apply(void 0, [state.hoverObj.d].concat(cbEvents));
          } else {
            state.onBackgroundRightClick && state.onBackgroundRightClick.apply(state, cbEvents);
          }
        }
      });
    }, {
      passive: true
    });
    container.addEventListener("contextmenu", function(ev) {
      if (!state.onBackgroundRightClick && !state.onNodeRightClick && !state.onLinkRightClick)
        return true;
      ev.preventDefault();
      return false;
    });
    state.forceGraph(ctx);
    state.shadowGraph(shadowCtx);
    var refreshShadowCanvas = throttle_default(function() {
      clearCanvas(shadowCtx, state.width, state.height);
      state.shadowGraph.linkWidth(function(l) {
        return index3(state.linkWidth)(l) + state.linkHoverPrecision;
      });
      var t3 = transform(state.canvas);
      state.shadowGraph.globalScale(t3.k).tickFrame();
    }, HOVER_CANVAS_THROTTLE_DELAY);
    state.flushShadowCanvas = refreshShadowCanvas.flush;
    (this._animationCycle = function animate() {
      var doRedraw = !state.autoPauseRedraw || !!state.needsRedraw || state.forceGraph.isEngineRunning() || state.graphData.links.some(function(d) {
        return d.__photons && d.__photons.length;
      });
      state.needsRedraw = false;
      if (state.enablePointerInteraction) {
        var obj = !state.isPointerDragging ? getObjUnderPointer() : null;
        if (obj !== state.hoverObj) {
          var prevObj = state.hoverObj;
          var prevObjType = prevObj ? prevObj.type : null;
          var objType = obj ? obj.type : null;
          if (prevObjType && prevObjType !== objType) {
            var fn2 = state["on".concat(prevObjType, "Hover")];
            fn2 && fn2(null, prevObj.d);
          }
          if (objType) {
            var _fn2 = state["on".concat(objType, "Hover")];
            _fn2 && _fn2(obj.d, prevObjType === objType ? prevObj.d : null);
          }
          var tooltipContent = obj ? index3(state["".concat(obj.type.toLowerCase(), "Label")])(obj.d) || "" : "";
          toolTipElem.style.visibility = tooltipContent ? "visible" : "hidden";
          toolTipElem.innerHTML = tooltipContent;
          state.canvas.classList[obj && state["on".concat(objType, "Click")] || !obj && state.onBackgroundClick ? "add" : "remove"]("clickable");
          state.hoverObj = obj;
        }
        doRedraw && refreshShadowCanvas();
      }
      if (doRedraw) {
        clearCanvas(ctx, state.width, state.height);
        var globalScale = transform(state.canvas).k;
        state.onRenderFramePre && state.onRenderFramePre(ctx, globalScale);
        state.forceGraph.globalScale(globalScale).tickFrame();
        state.onRenderFramePost && state.onRenderFramePost(ctx, globalScale);
      }
      update();
      state.animationFrameRequestId = requestAnimationFrame(animate);
    })();
  },
  update: function updateFn(state) {
  }
});

// node_modules/.pnpm/react-force-graph-2d@1.25.3_react@18.2.0/node_modules/react-force-graph-2d/dist/react-force-graph-2d.mjs
var import_prop_types = __toESM(require_prop_types(), 1);
var commonPropTypes = {
  width: import_prop_types.default.number,
  height: import_prop_types.default.number,
  graphData: import_prop_types.default.shape({
    nodes: import_prop_types.default.arrayOf(import_prop_types.default.object).isRequired,
    links: import_prop_types.default.arrayOf(import_prop_types.default.object).isRequired
  }),
  backgroundColor: import_prop_types.default.string,
  nodeRelSize: import_prop_types.default.number,
  nodeId: import_prop_types.default.string,
  nodeLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  nodeVal: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  nodeVisibility: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  nodeColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  nodeAutoColorBy: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onNodeHover: import_prop_types.default.func,
  onNodeClick: import_prop_types.default.func,
  linkSource: import_prop_types.default.string,
  linkTarget: import_prop_types.default.string,
  linkLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  linkVisibility: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  linkColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  linkAutoColorBy: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  linkWidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkCurvature: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkDirectionalArrowLength: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkDirectionalArrowColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  linkDirectionalArrowRelPos: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkDirectionalParticles: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkDirectionalParticleSpeed: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkDirectionalParticleWidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkDirectionalParticleColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onLinkHover: import_prop_types.default.func,
  onLinkClick: import_prop_types.default.func,
  dagMode: import_prop_types.default.oneOf(["td", "bu", "lr", "rl", "zin", "zout", "radialin", "radialout"]),
  dagLevelDistance: import_prop_types.default.number,
  dagNodeFilter: import_prop_types.default.func,
  onDagError: import_prop_types.default.func,
  d3AlphaMin: import_prop_types.default.number,
  d3AlphaDecay: import_prop_types.default.number,
  d3VelocityDecay: import_prop_types.default.number,
  warmupTicks: import_prop_types.default.number,
  cooldownTicks: import_prop_types.default.number,
  cooldownTime: import_prop_types.default.number,
  onEngineTick: import_prop_types.default.func,
  onEngineStop: import_prop_types.default.func,
  getGraphBbox: import_prop_types.default.func
};
var pointerBasedPropTypes = {
  zoomToFit: import_prop_types.default.func,
  onNodeRightClick: import_prop_types.default.func,
  onNodeDrag: import_prop_types.default.func,
  onNodeDragEnd: import_prop_types.default.func,
  onLinkRightClick: import_prop_types.default.func,
  linkHoverPrecision: import_prop_types.default.number,
  onBackgroundClick: import_prop_types.default.func,
  onBackgroundRightClick: import_prop_types.default.func,
  enablePointerInteraction: import_prop_types.default.bool,
  enableNodeDrag: import_prop_types.default.bool
};
var threeBasedPropTypes = {
  showNavInfo: import_prop_types.default.bool,
  nodeOpacity: import_prop_types.default.number,
  nodeResolution: import_prop_types.default.number,
  nodeThreeObject: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  nodeThreeObjectExtend: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  linkOpacity: import_prop_types.default.number,
  linkResolution: import_prop_types.default.number,
  linkCurveRotation: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  linkMaterial: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  linkThreeObject: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  linkThreeObjectExtend: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  linkPositionUpdate: import_prop_types.default.func,
  linkDirectionalArrowResolution: import_prop_types.default.number,
  linkDirectionalParticleResolution: import_prop_types.default.number,
  forceEngine: import_prop_types.default.oneOf(["d3", "ngraph"]),
  ngraphPhysics: import_prop_types.default.object,
  numDimensions: import_prop_types.default.oneOf([1, 2, 3])
};
var ForceGraph2DPropTypes = Object.assign({}, commonPropTypes, pointerBasedPropTypes, {
  linkLineDash: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.number), import_prop_types.default.string, import_prop_types.default.func]),
  nodeCanvasObjectMode: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  nodeCanvasObject: import_prop_types.default.func,
  nodePointerAreaPaint: import_prop_types.default.func,
  linkCanvasObjectMode: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  linkCanvasObject: import_prop_types.default.func,
  linkPointerAreaPaint: import_prop_types.default.func,
  autoPauseRedraw: import_prop_types.default.bool,
  minZoom: import_prop_types.default.number,
  maxZoom: import_prop_types.default.number,
  enableZoomInteraction: import_prop_types.default.bool,
  enablePanInteraction: import_prop_types.default.bool,
  onZoom: import_prop_types.default.func,
  onZoomEnd: import_prop_types.default.func,
  onRenderFramePre: import_prop_types.default.func,
  onRenderFramePost: import_prop_types.default.func
});
Object.assign({}, commonPropTypes, pointerBasedPropTypes, threeBasedPropTypes, {
  enableNavigationControls: import_prop_types.default.bool,
  controlType: import_prop_types.default.oneOf(["trackball", "orbit", "fly"]),
  rendererConfig: import_prop_types.default.object,
  extraRenderers: import_prop_types.default.arrayOf(import_prop_types.default.shape({
    render: import_prop_types.default.func.isRequired
  }))
});
Object.assign({}, commonPropTypes, threeBasedPropTypes, {
  nodeDesc: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  linkDesc: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func])
});
Object.assign({}, commonPropTypes, threeBasedPropTypes, {
  markerAttrs: import_prop_types.default.object,
  yOffset: import_prop_types.default.number,
  glScale: import_prop_types.default.number
});
var ForceGraph2D = index(forceGraph, {
  methodNames: [
    "emitParticle",
    "d3Force",
    "d3ReheatSimulation",
    "stopAnimation",
    "pauseAnimation",
    "resumeAnimation",
    "centerAt",
    "zoom",
    "zoomToFit",
    "getGraphBbox",
    "screen2GraphCoords",
    "graph2ScreenCoords"
  ]
});
ForceGraph2D.displayName = "ForceGraph2D";
ForceGraph2D.propTypes = ForceGraph2DPropTypes;

// src/components/PartialLoading.tsx
var import_react18 = __toESM(require_react());
var PartialLoading = (props) => {
  if (props.isLoading) {
    return /* @__PURE__ */ import_react18.default.createElement("div", {
      className: "orm-no-content"
    }, /* @__PURE__ */ import_react18.default.createElement("div", null, /* @__PURE__ */ import_react18.default.createElement("div", {
      className: "orm-no-content-subtext"
    }, /* @__PURE__ */ import_react18.default.createElement("div", {
      className: "orm-loading"
    }, /* @__PURE__ */ import_react18.default.createElement(LoadingPuff, null)))));
  } else {
    return /* @__PURE__ */ import_react18.default.createElement(import_react18.default.Fragment, null);
  }
};

// src/graph/ReferenceMapGraph.tsx
var formatData = (data) => {
  let maxCitationCount = 1;
  let minCitationCount = 0;
  const nodesAndLinks = data.flatMap((item, index6) => {
    const indexId = item.paper.paper.paperId ? item.paper.paper.paperId : item.paper.id;
    const indexCitationCount = item.paper.paper.citationCount ? item.paper.paper.citationCount : 0;
    maxCitationCount = Math.max(maxCitationCount, indexCitationCount);
    minCitationCount = Math.min(minCitationCount, indexCitationCount);
    const nodes2 = [
      {
        id: indexId,
        paperId: item.paper.id,
        name: item.paper.paper.title,
        val: indexCitationCount,
        color: "#61C1E8",
        type: "index",
        data: { id: indexId, location: null, paper: item.paper.paper }
      },
      ...item.references.map((reference2, refIndex) => {
        const referenceId = String(reference2.paperId ? reference2.paperId : `${indexId}-cited-${refIndex}`);
        const referenceCitationCount = reference2.citationCount ? reference2.citationCount : 0;
        maxCitationCount = Math.max(maxCitationCount, referenceCitationCount);
        minCitationCount = Math.min(minCitationCount, referenceCitationCount);
        return {
          id: referenceId,
          paperId: reference2.paperId,
          name: reference2.title,
          val: referenceCitationCount,
          color: "#7ABA57",
          type: "reference",
          data: { id: referenceId, location: null, paper: reference2 }
        };
      }),
      ...item.citations.map((citation, citIndex) => {
        const citationId = String(citation.paperId ? citation.paperId : `${indexId}-citing-${citIndex}`);
        const citationCitationCount = citation.citationCount ? citation.citationCount : 0;
        maxCitationCount = Math.max(maxCitationCount, citationCitationCount);
        minCitationCount = Math.min(minCitationCount, citationCitationCount);
        return {
          id: citationId,
          paperId: citation.paperId,
          name: citation.title,
          val: citationCitationCount,
          color: "#A15399",
          type: "citation",
          data: { id: citationId, location: null, paper: citation }
        };
      })
    ];
    const links2 = [
      ...item.references.map((reference2, refIndex) => ({
        source: indexId,
        target: String(reference2.paperId ? reference2.paperId : `${indexId}-cited-${refIndex}`)
      })),
      ...item.citations.map((citation, citIndex) => ({
        source: String(citation.paperId ? citation.paperId : `${indexId}-citing-${citIndex}`),
        target: indexId
      }))
    ];
    return { nodes: nodes2, links: links2 };
  });
  const nodes = nodesAndLinks.flatMap(({ nodes: nodes2 }) => nodes2);
  const links = nodesAndLinks.flatMap(({ links: links2 }) => links2);
  nodes.forEach((node) => {
    node.val = 3 + (node.val - minCitationCount) * 20 / (maxCitationCount - minCitationCount);
  });
  const tempData = {
    nodes: import_lodash.default.uniqBy(nodes, "id"),
    links
  };
  return tempData;
};
var ReferenceMapGraph = (props) => {
  const [data, setData] = (0, import_react19.useState)({ nodes: [], links: [] });
  const [isLoading, setIsLoading] = (0, import_react19.useState)(false);
  const fgRef = (0, import_react19.useRef)();
  const [selectedNode, setSelectedNode] = (0, import_react19.useState)();
  const { settings } = props;
  const { viewManager } = props.referenceMapData;
  const tempTextColor = getComputedStyle(document.body).getPropertyValue("--text-normal");
  const lineColor = "rgba(147, 117, 239, 0.2)";
  const textColor = tempTextColor ? tempTextColor : "black";
  const selectionColor = "#ff7f0e";
  const filterReferences = (references, settings2) => {
    return settings2.filterRedundantReferences ? references.filter((reference2) => reference2.referenceCount && reference2.referenceCount > 0 || reference2.citationCount && reference2.citationCount > 0) : references;
  };
  const fetchData = async (indexCards) => {
    const dataPromises = indexCards.map(async (paper) => {
      const references = await viewManager.getReferences(paper.paper.paperId);
      const filteredReferences = filterReferences(references, settings);
      const citations = await viewManager.getCitations(paper.paper.paperId);
      const filteredCitations = filterReferences(citations, settings);
      return {
        paper,
        references: filteredReferences,
        citations: filteredCitations
      };
    });
    return await Promise.all(dataPromises);
  };
  (0, import_react19.useEffect)(() => {
    setData({ nodes: [], links: [] });
    setSelectedNode(void 0);
  }, [props.updateChecker.basename]);
  (0, import_react19.useEffect)(() => {
    if (fgRef.current) {
      fgRef.current.d3Force("collide", collide_default().radius((node, i, nodes) => {
        if ("val" in node) {
          return node.val + 3;
        } else {
          return 0;
        }
      }));
      fgRef.current.d3Force("x", x_default2(props.width / 2).strength(0.1));
      fgRef.current.d3Force("y", y_default2(props.height / 2).strength(0.1));
    }
  }, [data, props.width, props.height]);
  (0, import_react19.useEffect)(() => {
    const fetchDataAndUpdate = () => {
      setIsLoading(true);
      const { indexIds, citeKeyMap, fileName, frontmatter, basename } = props.updateChecker;
      props.referenceMapData.getIndexCards(indexIds, citeKeyMap, fileName, frontmatter, basename).then(async (cards) => {
        cards = cards.filter((card) => !card.isLocal);
        const graphData = await fetchData(cards);
        const newSubgraph = formatData(graphData);
        const newNodeIds = new Set(newSubgraph.nodes.map((node) => node.id));
        setData((prevData) => ({
          nodes: import_lodash.default.uniqBy([...prevData.nodes, ...newSubgraph.nodes].filter((node) => newNodeIds.has(node.id)), "id"),
          links: [...prevData.links, ...newSubgraph.links].filter((link) => {
            const target = typeof link.target === "object" && link.target !== null ? link.target.id : link.target;
            const source = typeof link.source === "object" && link.source !== null ? link.source.id : link.source;
            return newNodeIds.has(source) && newNodeIds.has(target);
          })
        }));
        setIsLoading(false);
      });
    };
    fetchDataAndUpdate();
    events_default.on(EVENTS.UPDATE, fetchDataAndUpdate);
  }, [
    props.settings,
    props.updateChecker.indexIds,
    props.updateChecker.citeKeys,
    props.updateChecker.fileName,
    props.updateChecker.frontmatter,
    props.referenceMapData.library.libraryData
  ]);
  const nodeObject = (0, import_react19.useCallback)((node, ctx) => {
    ctx.beginPath();
    ctx.arc(node.x, node.y, node.val, 0, 2 * Math.PI, false);
    ctx.fillStyle = node.color;
    ctx.fill();
    ctx.linkColor = lineColor;
    if (node.id === (selectedNode == null ? void 0 : selectedNode.id)) {
      ctx.beginPath();
      ctx.arc(node.x, node.y, node.val + 3, 0, 2 * Math.PI, false);
      ctx.fillStyle = selectionColor;
      ctx.fill();
      ctx.beginPath();
      ctx.arc(node.x, node.y, node.val, 0, 2 * Math.PI, false);
      ctx.fillStyle = node.color;
      ctx.fill();
      if (node.type !== "index") {
        ctx.font = "12px Arial";
        ctx.fillStyle = textColor;
        ctx.fillText(node.name, node.x, node.y);
      }
    }
    if (node.type === "index") {
      ctx.font = "12px Arial";
      ctx.fillStyle = textColor;
      ctx.fillText(node.paperId, node.x, node.y);
    }
  }, [
    selectedNode,
    props.updateChecker.indexIds,
    props.updateChecker.citeKeys,
    props.updateChecker.fileName,
    props.updateChecker.frontmatter
  ]);
  const handleNodeSelect = (node) => {
    setSelectedNode(node);
  };
  const toggleZoom = (node) => {
    if (fgRef.current.zoom() < 1) {
      fgRef.current.zoom(1.9, 200);
      fgRef.current.centerAt(node.x, node.y, 200);
    } else {
      fgRef.current.zoom(0.7, 200);
      fgRef.current.centerAt(node.x, node.y, 200);
    }
  };
  if (!props.updateChecker.basename) {
    return /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "orm-no-content"
    }, /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "orm-no-content-subtext"
    }, "No Active Markdown File.", /* @__PURE__ */ import_react19.default.createElement("br", null), "Click on a file to view its references.")));
  } else if (data.nodes.length > 0 || isLoading) {
    return /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "orm-graph-content"
    }, /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "orm-graph-paper-card"
    }, selectedNode && /* @__PURE__ */ import_react19.default.createElement(PaperCard, {
      paper: selectedNode.data,
      settings,
      showCountButtons: false
    }), /* @__PURE__ */ import_react19.default.createElement(PartialLoading, {
      isLoading
    }))), /* @__PURE__ */ import_react19.default.createElement(ForceGraph2D, {
      ref: fgRef,
      width: props.width,
      height: props.height,
      graphData: data,
      onNodeDrag: (node) => {
        node.fx = node.x;
        node.fy = node.y;
      },
      onNodeDragEnd: (node) => {
        node.fx = node.x;
        node.fy = node.y;
      },
      nodeCanvasObject: nodeObject,
      onNodeClick: handleNodeSelect,
      onNodeRightClick: toggleZoom,
      linkColor: (link) => lineColor
    }));
  } else {
    return /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "orm-no-content"
    }, /* @__PURE__ */ import_react19.default.createElement("div", null, /* @__PURE__ */ import_react19.default.createElement("div", {
      className: "orm-no-content-subtext"
    }, "No Valid References Found (Rendering from Local Library is not supported).")));
  }
};

// src/graph/GraphView.tsx
var REFERENCE_MAP_GRAPH_VIEW_TYPE = "reference-map-graph-view";
var GraphView = class extends import_obsidian10.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "referenceMapData");
    __publicField(this, "rootEl");
    __publicField(this, "viewContent");
    __publicField(this, "updateChecker");
    __publicField(this, "onUnload", () => {
      events_default.off(EVENTS.UPDATE, () => this.openGraph());
    });
    __publicField(this, "openGraph", async () => {
      var _a, _b;
      const activeFile = (_a = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView)) == null ? void 0 : _a.file;
      await this.referenceMapData.prepare(activeFile, this.app.vault, this.app.metadataCache);
      (_b = this.rootEl) == null ? void 0 : _b.render(/* @__PURE__ */ import_react20.default.createElement(AppContext.Provider, {
        value: this.app
      }, /* @__PURE__ */ import_react20.default.createElement(ReferenceMapGraph, {
        width: this.viewContent.innerWidth,
        height: this.viewContent.innerHeight,
        settings: this.plugin.settings,
        referenceMapData: this.referenceMapData,
        updateChecker: this.updateChecker
      })));
    });
    this.plugin = plugin;
    this.referenceMapData = this.plugin.referenceMapData;
    this.updateChecker = this.plugin.updateChecker;
    this.viewContent = this.containerEl.querySelector(".view-content");
    this.rootEl = null;
    if (this.viewContent) {
      this.rootEl = (0, import_client3.createRoot)(this.viewContent);
    } else {
      console.error("Could not find view content");
      return;
    }
    this.registerEvent(this.app.metadataCache.on("changed", (0, import_obsidian10.debounce)(async (file) => {
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile && file === activeFile) {
        const updated = await this.referenceMapData.prepare(activeFile, this.app.vault, this.app.metadataCache);
        if (updated) {
          events_default.trigger(EVENTS.UPDATE);
        }
      }
    }, 100, true)));
    this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf2) => {
      if (leaf2) {
        this.app.workspace.iterateRootLeaves((rootLeaf) => {
          if (rootLeaf === leaf2) {
            if (leaf2.view.getViewType() === "markdown" || leaf2.view.getViewType() === "empty") {
              this.openGraph();
            }
          }
        });
      }
    }));
  }
  getViewType() {
    return REFERENCE_MAP_GRAPH_VIEW_TYPE;
  }
  getDisplayText() {
    return "Reference Map Graph";
  }
  getIcon() {
    return "ReferenceMapGraphIcon";
  }
  onResize() {
    super.onResize();
    this.openGraph();
  }
  async onOpen() {
    this.openGraph();
  }
  async onClose() {
    var _a;
    (_a = this.rootEl) == null ? void 0 : _a.unmount();
    return super.onClose();
  }
};

// src/data/data.ts
var fs4 = __toESM(require("fs"));
var import_bibtex_parser = __toESM(require_bibtex_parser());
var import_lodash3 = __toESM(require_lodash());

// node_modules/.pnpm/lru-cache@7.18.3/node_modules/lru-cache/index.mjs
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var hasAbortController = typeof AbortController === "function";
var AC = hasAbortController ? AbortController : class AbortController2 {
  constructor() {
    this.signal = new AS();
  }
  abort(reason = new Error("This operation was aborted")) {
    this.signal.reason = this.signal.reason || reason;
    this.signal.aborted = true;
    this.signal.dispatchEvent({
      type: "abort",
      target: this.signal
    });
  }
};
var hasAbortSignal = typeof AbortSignal === "function";
var hasACAbortSignal = typeof AC.AbortSignal === "function";
var AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal2 {
  constructor() {
    this.reason = void 0;
    this.aborted = false;
    this._listeners = [];
  }
  dispatchEvent(e) {
    if (e.type === "abort") {
      this.aborted = true;
      this.onabort(e);
      this._listeners.forEach((f) => f(e), this);
    }
  }
  onabort() {
  }
  addEventListener(ev, fn2) {
    if (ev === "abort") {
      this._listeners.push(fn2);
    }
  }
  removeEventListener(ev, fn2) {
    if (ev === "abort") {
      this._listeners = this._listeners.filter((f) => f !== fn2);
    }
  }
};
var warned = /* @__PURE__ */ new Set();
var deprecatedOption = (opt, instead) => {
  const code = `LRU_CACHE_OPTION_${opt}`;
  if (shouldWarn(code)) {
    warn(code, `${opt} option`, `options.${instead}`, LRUCache);
  }
};
var deprecatedMethod = (method, instead) => {
  const code = `LRU_CACHE_METHOD_${method}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get: get3 } = Object.getOwnPropertyDescriptor(prototype, method);
    warn(code, `${method} method`, `cache.${instead}()`, get3);
  }
};
var deprecatedProperty = (field, instead) => {
  const code = `LRU_CACHE_PROPERTY_${field}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get: get3 } = Object.getOwnPropertyDescriptor(prototype, field);
    warn(code, `${field} property`, `cache.${instead}`, get3);
  }
};
var emitWarning = (...a2) => {
  typeof process === "object" && process && typeof process.emitWarning === "function" ? process.emitWarning(...a2) : console.error(...a2);
};
var shouldWarn = (code) => !warned.has(code);
var warn = (code, what, instead, fn2) => {
  warned.add(code);
  const msg = `The ${what} is deprecated. Please use ${instead} instead.`;
  emitWarning(msg, "DeprecationWarning", code, fn2);
};
var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
var getUintArray = (max5) => !isPosInt(max5) ? null : max5 <= Math.pow(2, 8) ? Uint8Array : max5 <= Math.pow(2, 16) ? Uint16Array : max5 <= Math.pow(2, 32) ? Uint32Array : max5 <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var Stack = class {
  constructor(max5) {
    if (max5 === 0) {
      return [];
    }
    const UintArray = getUintArray(max5);
    this.heap = new UintArray(max5);
    this.length = 0;
  }
  push(n) {
    this.heap[this.length++] = n;
  }
  pop() {
    return this.heap[--this.length];
  }
};
var LRUCache = class {
  constructor(options = {}) {
    const {
      max: max5 = 0,
      ttl,
      ttlResolution = 1,
      ttlAutopurge,
      updateAgeOnGet,
      updateAgeOnHas,
      allowStale,
      dispose,
      disposeAfter,
      noDisposeOnSet,
      noUpdateTTL,
      maxSize = 0,
      maxEntrySize = 0,
      sizeCalculation,
      fetchMethod,
      fetchContext,
      noDeleteOnFetchRejection,
      noDeleteOnStaleGet,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort
    } = options;
    const { length, maxAge, stale } = options instanceof LRUCache ? {} : options;
    if (max5 !== 0 && !isPosInt(max5)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max5 ? getUintArray(max5) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max5);
    }
    this.max = max5;
    this.maxSize = maxSize;
    this.maxEntrySize = maxEntrySize || this.maxSize;
    this.sizeCalculation = sizeCalculation || length;
    if (this.sizeCalculation) {
      if (!this.maxSize && !this.maxEntrySize) {
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    this.fetchMethod = fetchMethod || null;
    if (this.fetchMethod && typeof this.fetchMethod !== "function") {
      throw new TypeError("fetchMethod must be a function if specified");
    }
    this.fetchContext = fetchContext;
    if (!this.fetchMethod && fetchContext !== void 0) {
      throw new TypeError("cannot set fetchContext without fetchMethod");
    }
    this.keyMap = /* @__PURE__ */ new Map();
    this.keyList = new Array(max5).fill(null);
    this.valList = new Array(max5).fill(null);
    this.next = new UintArray(max5);
    this.prev = new UintArray(max5);
    this.head = 0;
    this.tail = 0;
    this.free = new Stack(max5);
    this.initialFill = 1;
    this.size = 0;
    if (typeof dispose === "function") {
      this.dispose = dispose;
    }
    if (typeof disposeAfter === "function") {
      this.disposeAfter = disposeAfter;
      this.disposed = [];
    } else {
      this.disposeAfter = null;
      this.disposed = null;
    }
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (this.maxSize !== 0) {
        if (!isPosInt(this.maxSize)) {
          throw new TypeError("maxSize must be a positive integer if specified");
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      }
      this.initializeSizeTracking();
    }
    this.allowStale = !!allowStale || !!stale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || maxAge || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError("ttl must be a positive integer if specified");
      }
      this.initializeTTLTracking();
    }
    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    }
    if (!this.ttlAutopurge && !this.max && !this.maxSize) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, LRUCache);
      }
    }
    if (stale) {
      deprecatedOption("stale", "allowStale");
    }
    if (maxAge) {
      deprecatedOption("maxAge", "ttl");
    }
    if (length) {
      deprecatedOption("length", "sizeCalculation");
    }
  }
  getRemainingTTL(key) {
    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0;
  }
  initializeTTLTracking() {
    this.ttls = new ZeroArray(this.max);
    this.starts = new ZeroArray(this.max);
    this.setItemTTL = (index6, ttl, start3 = perf.now()) => {
      this.starts[index6] = ttl !== 0 ? start3 : 0;
      this.ttls[index6] = ttl;
      if (ttl !== 0 && this.ttlAutopurge) {
        const t3 = setTimeout(() => {
          if (this.isStale(index6)) {
            this.delete(this.keyList[index6]);
          }
        }, ttl + 1);
        if (t3.unref) {
          t3.unref();
        }
      }
    };
    this.updateItemAge = (index6) => {
      this.starts[index6] = this.ttls[index6] !== 0 ? perf.now() : 0;
    };
    this.statusTTL = (status, index6) => {
      if (status) {
        status.ttl = this.ttls[index6];
        status.start = this.starts[index6];
        status.now = cachedNow || getNow();
        status.remainingTTL = status.now + status.ttl - status.start;
      }
    };
    let cachedNow = 0;
    const getNow = () => {
      const n = perf.now();
      if (this.ttlResolution > 0) {
        cachedNow = n;
        const t3 = setTimeout(() => cachedNow = 0, this.ttlResolution);
        if (t3.unref) {
          t3.unref();
        }
      }
      return n;
    };
    this.getRemainingTTL = (key) => {
      const index6 = this.keyMap.get(key);
      if (index6 === void 0) {
        return 0;
      }
      return this.ttls[index6] === 0 || this.starts[index6] === 0 ? Infinity : this.starts[index6] + this.ttls[index6] - (cachedNow || getNow());
    };
    this.isStale = (index6) => {
      return this.ttls[index6] !== 0 && this.starts[index6] !== 0 && (cachedNow || getNow()) - this.starts[index6] > this.ttls[index6];
    };
  }
  updateItemAge(_index) {
  }
  statusTTL(_status, _index) {
  }
  setItemTTL(_index, _ttl, _start) {
  }
  isStale(_index) {
    return false;
  }
  initializeSizeTracking() {
    this.calculatedSize = 0;
    this.sizes = new ZeroArray(this.max);
    this.removeItemSize = (index6) => {
      this.calculatedSize -= this.sizes[index6];
      this.sizes[index6] = 0;
    };
    this.requireSize = (k, v, size, sizeCalculation) => {
      if (this.isBackgroundFetch(v)) {
        return 0;
      }
      if (!isPosInt(size)) {
        if (sizeCalculation) {
          if (typeof sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation must be a function");
          }
          size = sizeCalculation(v, k);
          if (!isPosInt(size)) {
            throw new TypeError("sizeCalculation return invalid (expect positive integer)");
          }
        } else {
          throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
        }
      }
      return size;
    };
    this.addItemSize = (index6, size, status) => {
      this.sizes[index6] = size;
      if (this.maxSize) {
        const maxSize = this.maxSize - this.sizes[index6];
        while (this.calculatedSize > maxSize) {
          this.evict(true);
        }
      }
      this.calculatedSize += this.sizes[index6];
      if (status) {
        status.entrySize = size;
        status.totalCalculatedSize = this.calculatedSize;
      }
    };
  }
  removeItemSize(_index) {
  }
  addItemSize(_index, _size) {
  }
  requireSize(_k, _v, size, sizeCalculation) {
    if (size || sizeCalculation) {
      throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
    }
  }
  *indexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.tail; true; ) {
        if (!this.isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.isStale(i)) {
          yield i;
        }
        if (i === this.head) {
          break;
        } else {
          i = this.prev[i];
        }
      }
    }
  }
  *rindexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.head; true; ) {
        if (!this.isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.isStale(i)) {
          yield i;
        }
        if (i === this.tail) {
          break;
        } else {
          i = this.next[i];
        }
      }
    }
  }
  isValidIndex(index6) {
    return index6 !== void 0 && this.keyMap.get(this.keyList[index6]) === index6;
  }
  *entries() {
    for (const i of this.indexes()) {
      if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield [this.keyList[i], this.valList[i]];
      }
    }
  }
  *rentries() {
    for (const i of this.rindexes()) {
      if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield [this.keyList[i], this.valList[i]];
      }
    }
  }
  *keys() {
    for (const i of this.indexes()) {
      if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.keyList[i];
      }
    }
  }
  *rkeys() {
    for (const i of this.rindexes()) {
      if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.keyList[i];
      }
    }
  }
  *values() {
    for (const i of this.indexes()) {
      if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.valList[i];
      }
    }
  }
  *rvalues() {
    for (const i of this.rindexes()) {
      if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.valList[i];
      }
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  find(fn2, getOptions) {
    for (const i of this.indexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      if (fn2(value, this.keyList[i], this)) {
        return this.get(this.keyList[i], getOptions);
      }
    }
  }
  forEach(fn2, thisp = this) {
    for (const i of this.indexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn2.call(thisp, value, this.keyList[i], this);
    }
  }
  rforEach(fn2, thisp = this) {
    for (const i of this.rindexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn2.call(thisp, value, this.keyList[i], this);
    }
  }
  get prune() {
    deprecatedMethod("prune", "purgeStale");
    return this.purgeStale;
  }
  purgeStale() {
    let deleted = false;
    for (const i of this.rindexes({ allowStale: true })) {
      if (this.isStale(i)) {
        this.delete(this.keyList[i]);
        deleted = true;
      }
    }
    return deleted;
  }
  dump() {
    const arr = [];
    for (const i of this.indexes({ allowStale: true })) {
      const key = this.keyList[i];
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      const entry = { value };
      if (this.ttls) {
        entry.ttl = this.ttls[i];
        const age = perf.now() - this.starts[i];
        entry.start = Math.floor(Date.now() - age);
      }
      if (this.sizes) {
        entry.size = this.sizes[i];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  dispose(_v, _k, _reason) {
  }
  set(k, v, {
    ttl = this.ttl,
    start: start3,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    status
  } = {}) {
    size = this.requireSize(k, v, size, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      this.delete(k);
      return this;
    }
    let index6 = this.size === 0 ? void 0 : this.keyMap.get(k);
    if (index6 === void 0) {
      index6 = this.newIndex();
      this.keyList[index6] = k;
      this.valList[index6] = v;
      this.keyMap.set(k, index6);
      this.next[this.tail] = index6;
      this.prev[index6] = this.tail;
      this.tail = index6;
      this.size++;
      this.addItemSize(index6, size, status);
      if (status) {
        status.set = "add";
      }
      noUpdateTTL = false;
    } else {
      this.moveToTail(index6);
      const oldVal = this.valList[index6];
      if (v !== oldVal) {
        if (this.isBackgroundFetch(oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
        } else {
          if (!noDisposeOnSet) {
            this.dispose(oldVal, k, "set");
            if (this.disposeAfter) {
              this.disposed.push([oldVal, k, "set"]);
            }
          }
        }
        this.removeItemSize(index6);
        this.valList[index6] = v;
        this.addItemSize(index6, size, status);
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0)
            status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {
      this.initializeTTLTracking();
    }
    if (!noUpdateTTL) {
      this.setItemTTL(index6, ttl, start3);
    }
    this.statusTTL(status, index6);
    if (this.disposeAfter) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return this;
  }
  newIndex() {
    if (this.size === 0) {
      return this.tail;
    }
    if (this.size === this.max && this.max !== 0) {
      return this.evict(false);
    }
    if (this.free.length !== 0) {
      return this.free.pop();
    }
    return this.initialFill++;
  }
  pop() {
    if (this.size) {
      const val = this.valList[this.head];
      this.evict(true);
      return val;
    }
  }
  evict(free) {
    const head = this.head;
    const k = this.keyList[head];
    const v = this.valList[head];
    if (this.isBackgroundFetch(v)) {
      v.__abortController.abort(new Error("evicted"));
    } else {
      this.dispose(v, k, "evict");
      if (this.disposeAfter) {
        this.disposed.push([v, k, "evict"]);
      }
    }
    this.removeItemSize(head);
    if (free) {
      this.keyList[head] = null;
      this.valList[head] = null;
      this.free.push(head);
    }
    this.head = this.next[head];
    this.keyMap.delete(k);
    this.size--;
    return head;
  }
  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {
    const index6 = this.keyMap.get(k);
    if (index6 !== void 0) {
      if (!this.isStale(index6)) {
        if (updateAgeOnHas) {
          this.updateItemAge(index6);
        }
        if (status)
          status.has = "hit";
        this.statusTTL(status, index6);
        return true;
      } else if (status) {
        status.has = "stale";
        this.statusTTL(status, index6);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  peek(k, { allowStale = this.allowStale } = {}) {
    const index6 = this.keyMap.get(k);
    if (index6 !== void 0 && (allowStale || !this.isStale(index6))) {
      const v = this.valList[index6];
      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    }
  }
  backgroundFetch(k, index6, options, context) {
    const v = index6 === void 0 ? void 0 : this.valList[index6];
    if (this.isBackgroundFetch(v)) {
      return v;
    }
    const ac = new AC();
    if (options.signal) {
      options.signal.addEventListener("abort", () => ac.abort(options.signal.reason));
    }
    const fetchOpts = {
      signal: ac.signal,
      options,
      context
    };
    const cb = (v2, updateCache = false) => {
      const { aborted } = ac.signal;
      const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
      if (options.status) {
        if (aborted && !updateCache) {
          options.status.fetchAborted = true;
          options.status.fetchError = ac.signal.reason;
          if (ignoreAbort)
            options.status.fetchAbortIgnored = true;
        } else {
          options.status.fetchResolved = true;
        }
      }
      if (aborted && !ignoreAbort && !updateCache) {
        return fetchFail(ac.signal.reason);
      }
      if (this.valList[index6] === p) {
        if (v2 === void 0) {
          if (p.__staleWhileFetching) {
            this.valList[index6] = p.__staleWhileFetching;
          } else {
            this.delete(k);
          }
        } else {
          if (options.status)
            options.status.fetchUpdated = true;
          this.set(k, v2, fetchOpts.options);
        }
      }
      return v2;
    };
    const eb = (er) => {
      if (options.status) {
        options.status.fetchRejected = true;
        options.status.fetchError = er;
      }
      return fetchFail(er);
    };
    const fetchFail = (er) => {
      const { aborted } = ac.signal;
      const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
      const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
      const noDelete = allowStale || options.noDeleteOnFetchRejection;
      if (this.valList[index6] === p) {
        const del = !noDelete || p.__staleWhileFetching === void 0;
        if (del) {
          this.delete(k);
        } else if (!allowStaleAborted) {
          this.valList[index6] = p.__staleWhileFetching;
        }
      }
      if (allowStale) {
        if (options.status && p.__staleWhileFetching !== void 0) {
          options.status.returnedStale = true;
        }
        return p.__staleWhileFetching;
      } else if (p.__returned === p) {
        throw er;
      }
    };
    const pcall = (res, rej) => {
      this.fetchMethod(k, v, fetchOpts).then((v2) => res(v2), rej);
      ac.signal.addEventListener("abort", () => {
        if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
          res();
          if (options.allowStaleOnFetchAbort) {
            res = (v2) => cb(v2, true);
          }
        }
      });
    };
    if (options.status)
      options.status.fetchDispatched = true;
    const p = new Promise(pcall).then(cb, eb);
    p.__abortController = ac;
    p.__staleWhileFetching = v;
    p.__returned = null;
    if (index6 === void 0) {
      this.set(k, p, { ...fetchOpts.options, status: void 0 });
      index6 = this.keyMap.get(k);
    } else {
      this.valList[index6] = p;
    }
    return p;
  }
  isBackgroundFetch(p) {
    return p && typeof p === "object" && typeof p.then === "function" && Object.prototype.hasOwnProperty.call(p, "__staleWhileFetching") && Object.prototype.hasOwnProperty.call(p, "__returned") && (p.__returned === p || p.__returned === null);
  }
  async fetch(k, {
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    ttl = this.ttl,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
    allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
    ignoreFetchAbort = this.ignoreFetchAbort,
    allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
    fetchContext = this.fetchContext,
    forceRefresh = false,
    status,
    signal
  } = {}) {
    if (!this.fetchMethod) {
      if (status)
        status.fetch = "get";
      return this.get(k, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index6 = this.keyMap.get(k);
    if (index6 === void 0) {
      if (status)
        status.fetch = "miss";
      const p = this.backgroundFetch(k, index6, options, fetchContext);
      return p.__returned = p;
    } else {
      const v = this.valList[index6];
      if (this.isBackgroundFetch(v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale)
            status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = this.isStale(index6);
      if (!forceRefresh && !isStale) {
        if (status)
          status.fetch = "hit";
        this.moveToTail(index6);
        if (updateAgeOnGet) {
          this.updateItemAge(index6);
        }
        this.statusTTL(status, index6);
        return v;
      }
      const p = this.backgroundFetch(k, index6, options, fetchContext);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = hasStale && isStale ? "stale" : "refresh";
        if (staleVal && isStale)
          status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  get(k, {
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    status
  } = {}) {
    const index6 = this.keyMap.get(k);
    if (index6 !== void 0) {
      const value = this.valList[index6];
      const fetching = this.isBackgroundFetch(value);
      this.statusTTL(status, index6);
      if (this.isStale(index6)) {
        if (status)
          status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.delete(k);
          }
          if (status)
            status.returnedStale = allowStale;
          return allowStale ? value : void 0;
        } else {
          if (status) {
            status.returnedStale = allowStale && value.__staleWhileFetching !== void 0;
          }
          return allowStale ? value.__staleWhileFetching : void 0;
        }
      } else {
        if (status)
          status.get = "hit";
        if (fetching) {
          return value.__staleWhileFetching;
        }
        this.moveToTail(index6);
        if (updateAgeOnGet) {
          this.updateItemAge(index6);
        }
        return value;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  connect(p, n) {
    this.prev[n] = p;
    this.next[p] = n;
  }
  moveToTail(index6) {
    if (index6 !== this.tail) {
      if (index6 === this.head) {
        this.head = this.next[index6];
      } else {
        this.connect(this.prev[index6], this.next[index6]);
      }
      this.connect(this.tail, index6);
      this.tail = index6;
    }
  }
  get del() {
    deprecatedMethod("del", "delete");
    return this.delete;
  }
  delete(k) {
    let deleted = false;
    if (this.size !== 0) {
      const index6 = this.keyMap.get(k);
      if (index6 !== void 0) {
        deleted = true;
        if (this.size === 1) {
          this.clear();
        } else {
          this.removeItemSize(index6);
          const v = this.valList[index6];
          if (this.isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            this.dispose(v, k, "delete");
            if (this.disposeAfter) {
              this.disposed.push([v, k, "delete"]);
            }
          }
          this.keyMap.delete(k);
          this.keyList[index6] = null;
          this.valList[index6] = null;
          if (index6 === this.tail) {
            this.tail = this.prev[index6];
          } else if (index6 === this.head) {
            this.head = this.next[index6];
          } else {
            this.next[this.prev[index6]] = this.next[index6];
            this.prev[this.next[index6]] = this.prev[index6];
          }
          this.size--;
          this.free.push(index6);
        }
      }
    }
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return deleted;
  }
  clear() {
    for (const index6 of this.rindexes({ allowStale: true })) {
      const v = this.valList[index6];
      if (this.isBackgroundFetch(v)) {
        v.__abortController.abort(new Error("deleted"));
      } else {
        const k = this.keyList[index6];
        this.dispose(v, k, "delete");
        if (this.disposeAfter) {
          this.disposed.push([v, k, "delete"]);
        }
      }
    }
    this.keyMap.clear();
    this.valList.fill(null);
    this.keyList.fill(null);
    if (this.ttls) {
      this.ttls.fill(0);
      this.starts.fill(0);
    }
    if (this.sizes) {
      this.sizes.fill(0);
    }
    this.head = 0;
    this.tail = 0;
    this.initialFill = 1;
    this.free.length = 0;
    this.calculatedSize = 0;
    this.size = 0;
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
  }
  get reset() {
    deprecatedMethod("reset", "clear");
    return this.clear;
  }
  get length() {
    deprecatedProperty("length", "size");
    return this.size;
  }
  static get AbortController() {
    return AC;
  }
  static get AbortSignal() {
    return AS;
  }
};
var lru_cache_default = LRUCache;

// src/apis/s2agAPI.ts
var import_lodash2 = __toESM(require_lodash());
var import_obsidian11 = require("obsidian");
var SEMANTIC_SCHOLAR_BATCH_URL = "https://api.semanticscholar.org/graph/v1/paper/batch";
var getBatchItems = async (paperIds, debugMode = false) => {
  const data = {
    ids: paperIds,
    fields: SEMANTIC_FIELDS.join(",")
  };
  const response = await (0, import_obsidian11.requestUrl)({
    url: SEMANTIC_SCHOLAR_BATCH_URL,
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  });
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return response.json.data;
};
var getIndexItem = async (paperId, debugMode = false) => {
  const url = `${SEMANTIC_SCHOLAR_API_URL}/paper/${paperId}?fields=${SEMANTIC_FIELDS.join(",")}`;
  const response = await (0, import_obsidian11.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return null;
  }
  return response.json;
};
var getReferenceItems = async (paperId, limit = 100, debugMode = false) => {
  const url = `${SEMANTIC_SCHOLAR_API_URL}/paper/${paperId}/references?limit=${limit}&fields=${SEMANTIC_FIELDS.join(",")}`;
  const response = await (0, import_obsidian11.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return import_lodash2.default.map(response.json.data, "citedPaper");
};
var getCitationItems = async (paperId, limit = 100, debugMode = false) => {
  const url = `${SEMANTIC_SCHOLAR_API_URL}/paper/${paperId}/citations?limit=${limit}&fields=${SEMANTIC_FIELDS.join(",")}`;
  const response = await (0, import_obsidian11.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return import_lodash2.default.map(response.json.data, "citingPaper");
};
var getSearchItems = async (query, limit, debugMode = false) => {
  const url = `${SEMANTIC_SCHOLAR_API_URL}/paper/search?query=${query}&fields=${SEMANTIC_FIELDS.join(",")}&offset=0&limit=${limit}`;
  const response = await (0, import_obsidian11.requestUrl)(url);
  if (response.status !== 200) {
    if (debugMode)
      console.log(`Error ${response.status}`);
    return [];
  }
  return response.json.data;
};

// src/data/viewManager.ts
var ViewManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    __publicField(this, "indexCache", new lru_cache_default({ max: 150 }));
    __publicField(this, "refCache", new lru_cache_default({ max: 150 }));
    __publicField(this, "citeCache", new lru_cache_default({ max: 150 }));
    __publicField(this, "searchCache", new lru_cache_default({ max: 20 }));
    __publicField(this, "batchCache", new lru_cache_default({ max: 50 }));
    __publicField(this, "clearCache", () => {
      this.indexCache.clear();
      this.batchCache.clear();
      this.refCache.clear();
      this.citeCache.clear();
      this.searchCache.clear();
    });
    __publicField(this, "getBatchPapers", async (paperIds) => {
      const cachedBatch = this.batchCache.get(paperIds.join(","));
      if (cachedBatch) {
        return cachedBatch;
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const batchPapers = await getBatchItems(paperIds, debugMode);
        this.batchCache.set(paperIds.join(","), batchPapers);
        return batchPapers;
      } catch (e) {
        if (debugMode) {
          console.log("ORM: S2AG API Batch request error", e);
        }
        return [];
      }
    });
    __publicField(this, "getIndexPaper", async (paperId, cacheError = true) => {
      if (this.indexCache.has(paperId)) {
        return this.indexCache.get(paperId);
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const paper = await getIndexItem(paperId, debugMode);
        this.indexCache.set(paperId, paper);
        return paper;
      } catch (e) {
        if (debugMode) {
          console.log(`ORM: S2AG API index card request error with status ${e}. Fallback library is used to show metadata. Check your internet connection, Validity of DOI/URL in the local library`);
        }
        if (cacheError)
          this.indexCache.set(paperId, null);
        return null;
      }
    });
    __publicField(this, "searchIndexPapers", async (query, limit = 0, cache = true) => {
      const cacheKey = `${query}${limit}`;
      const cachedSearch = this.searchCache.get(cacheKey);
      if (cachedSearch) {
        return cachedSearch;
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const indexCardsList = await getSearchItems(query, limit, debugMode);
        if (cache) {
          this.searchCache.set(cacheKey, indexCardsList);
        }
        return indexCardsList;
      } catch (e) {
        if (debugMode) {
          console.log(`ORM: S2AG API index card request error with status ${e}`);
        }
        return [];
      }
    });
    __publicField(this, "getReferences", async (paperId) => {
      var _a;
      if (this.refCache.has(paperId)) {
        return (_a = this.refCache.get(paperId)) != null ? _a : [];
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const references = await getReferenceItems(paperId, this.plugin.settings.citedLimit, debugMode);
        this.refCache.set(paperId, references);
        return references;
      } catch (e) {
        if (debugMode) {
          console.log(`ORM: S2AG API reference card request error with status ${e}`);
        }
        return [];
      }
    });
    __publicField(this, "getCitations", async (paperId) => {
      var _a;
      if (this.citeCache.has(paperId)) {
        return (_a = this.citeCache.get(paperId)) != null ? _a : [];
      }
      const debugMode = this.plugin.settings.debugMode;
      try {
        const citations = await getCitationItems(paperId, this.plugin.settings.citingLimit, debugMode);
        this.citeCache.set(paperId, citations);
        return citations;
      } catch (e) {
        if (debugMode) {
          console.log(`ORM: S2AG API citation card request error with status ${e}`);
        }
        return [];
      }
    });
  }
};

// src/utils/cslHelpers.ts
var import_https = __toESM(require("https"));
var import_fs3 = __toESM(require("fs"));
var import_path3 = __toESM(require("path"));
async function getCSLLocale(localeCache, cacheDir, lang) {
  if (!lang)
    lang = "en-US";
  if (localeCache.has(lang)) {
    return localeCache.get(lang);
  }
  const url = `https://raw.githubusercontent.com/citation-style-language/locales/master/locales-${lang}.xml`;
  const outPath = import_path3.default.join(cacheDir, `locales-${lang}.xml`);
  ensureDir(cacheDir);
  if (import_fs3.default.existsSync(outPath)) {
    const localeData = import_fs3.default.readFileSync(outPath).toString();
    localeCache.set(lang, localeData);
    return localeData;
  }
  const str = await new Promise((res, rej) => {
    import_https.default.get(url, (result) => {
      let output = "";
      result.setEncoding("utf8");
      result.on("data", (chunk) => output += chunk);
      result.on("error", (e) => rej(`Downloading locale: ${e}`));
      result.on("close", () => {
        rej(new Error("Error: cannot download locale"));
      });
      result.on("end", () => {
        if (/^404: Not Found/.test(output)) {
          rej(new Error("Error downloading locale: 404: Not Found"));
        } else {
          res(output);
        }
      });
    });
  });
  import_fs3.default.writeFileSync(outPath, str);
  localeCache.set(lang, str);
  return str;
}
async function getCSLStyle(styleCache, cacheDir, url) {
  if (!url)
    url = "https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl";
  if (styleCache.has(url)) {
    return styleCache.get(url);
  }
  const fileFromURL = url.split("/").pop();
  const outPath = import_path3.default.join(cacheDir, fileFromURL != null ? fileFromURL : "");
  ensureDir(cacheDir);
  if (import_fs3.default.existsSync(outPath)) {
    const styleData = import_fs3.default.readFileSync(outPath).toString();
    styleCache.set(url, styleData);
    return styleData;
  }
  const str = await new Promise((res, rej) => {
    import_https.default.get(url, (result) => {
      let output = "";
      result.setEncoding("utf8");
      result.on("data", (chunk) => output += chunk);
      result.on("error", (e) => rej(`Error downloading CSL: ${e}`));
      result.on("close", () => {
        rej(new Error("Error: cannot download CSL"));
      });
      result.on("end", () => {
        try {
          res(output);
        } catch (e) {
          rej(e);
        }
      });
    });
  });
  import_fs3.default.writeFileSync(outPath, str);
  styleCache.set(url, str);
  return str;
}

// src/data/data.ts
var ReferenceMapData = class {
  constructor(plugin) {
    __publicField(this, "plugin");
    __publicField(this, "library");
    __publicField(this, "viewManager");
    __publicField(this, "initPromise");
    __publicField(this, "cache");
    __publicField(this, "loadBibFileFromUserPath", async () => {
      const { searchCiteKey, searchCiteKeyPath, debugMode } = this.plugin.settings;
      if (!searchCiteKey || !searchCiteKeyPath)
        return null;
      const libraryPath = resolvePath(searchCiteKeyPath, this.plugin.app);
      try {
        const stats = fs4.statSync(libraryPath);
        const mtime = stats.mtimeMs;
        if (mtime === this.library.mtime)
          return null;
        if (debugMode)
          console.log(`ORM: Loading library from '${searchCiteKeyPath}'`);
        let rawData;
        try {
          rawData = fs4.readFileSync(libraryPath).toString();
        } catch (e) {
          if (debugMode)
            console.warn("ORM: Warnings associated with loading the library file.");
          return null;
        }
        const isJson = searchCiteKeyPath.endsWith(".json");
        const isBib = searchCiteKeyPath.endsWith(".bib");
        if (!isJson && !isBib)
          return null;
        let libraryData;
        try {
          if (isJson) {
            libraryData = JSON.parse(rawData);
          } else {
            libraryData = (0, import_bibtex_parser.parse)(rawData, { errorHandler: () => {
            } }).entries;
          }
        } catch (e) {
          if (debugMode)
            console.warn("ORM: Warnings associated with loading the library file.");
          return null;
        }
        this.library = {
          active: true,
          adapter: isJson ? "csl-json" : "bibtex",
          libraryData,
          mtime
        };
        return libraryData;
      } catch (e) {
        if (debugMode)
          console.log("ORM: Error loading library file.");
        return null;
      }
    });
    __publicField(this, "loadLibrary", async (fromCache) => {
      if (this.plugin.settings.searchCiteKey && this.plugin.settings.pullFromZotero) {
        await this.loadBibFileFromCache(fromCache);
        this.plugin.updateChecker.library = this.library;
        return;
      } else if (this.plugin.settings.searchCiteKey && this.plugin.settings.searchCiteKeyPath) {
        await this.loadBibFileFromUserPath();
        this.plugin.updateChecker.library = this.library;
        return;
      } else {
        this.library = DEFAULT_LIBRARY;
      }
    });
    __publicField(this, "prepare", async (activeFile, vault, metadataCache) => {
      let isUpdate = false;
      if (!activeFile) {
        this.plugin.updateChecker.resetCache();
        this.plugin.updateChecker.basename = "";
        isUpdate = true;
      } else {
        const settings = this.plugin.settings;
        let fileCache = "";
        let isFm = false, isFn = false, isIdx = false, isCite = false;
        this.plugin.updateChecker.basename = activeFile.basename;
        try {
          fileCache = await vault.cachedRead(activeFile);
        } catch (e) {
          fileCache = await vault.read(activeFile);
        }
        if (activeFile.extension === "canvas") {
          fileCache += await getCanvasContent(fileCache, vault);
        }
        if (settings.lookupLinkedFiles) {
          const linkedFiles = getLinkedFiles(activeFile, metadataCache);
          for (const file of linkedFiles) {
            if (file) {
              const cache = await vault.cachedRead(file);
              fileCache += cache;
            }
          }
        }
        const fileMetadataCache = metadataCache.getFileCache(activeFile);
        const isLibrary = settings.searchCiteKey && this.library.libraryData !== null;
        if (isLibrary && settings.autoUpdateCitekeyFile)
          this.loadLibrary(false);
        this.plugin.updateChecker.setCache(fileCache, fileMetadataCache);
        const prefix = settings.findCiteKeyFromLinksWithoutPrefix ? "" : "@";
        if (settings.searchFrontMatter)
          isFm = this.plugin.updateChecker.checkFrontmatterUpdate(settings.searchFrontMatterKey);
        if (settings.searchTitle)
          isFn = this.plugin.updateChecker.checkFileNameUpdate();
        if (settings.searchCiteKey)
          isCite = this.plugin.updateChecker.checkCiteKeysUpdate(prefix);
        isIdx = this.plugin.updateChecker.checkIndexIdsUpdate();
        isUpdate = isFm || isFn || isIdx || isCite;
      }
      return isUpdate;
    });
    __publicField(this, "getLocalReferences", async (citeKeyMap = []) => {
      const indexCards = [];
      if (import_lodash3.default.isEmpty(citeKeyMap))
        return indexCards;
      import_lodash3.default.map(citeKeyMap, (item) => {
        var _a;
        const localPaper = (_a = this.library.libraryData) == null ? void 0 : _a.find((entry) => entry.id === item.citeKey.replace("@", ""));
        if (localPaper) {
          const paper_ = fillMissingReference(localPaper);
          indexCards.push({
            id: item.citeKey,
            location: item.location,
            isLocal: true,
            paper: paper_,
            bibEntry: localPaper
          });
        }
      });
      return indexCards;
    });
    __publicField(this, "getIndexCards", async (indexIds, citeKeyMap, fileName, frontmatter, basename) => {
      const indexCards = [];
      const settings = this.plugin.settings;
      if (indexIds.size > 0) {
        await Promise.all(import_lodash3.default.map([...indexIds], async (paperId) => {
          const paper = await this.viewManager.getIndexPaper(paperId);
          if (paper && paper.paperId) {
            const paperCiteId = settings.searchCiteKey && this.library.libraryData !== null && settings.findZoteroCiteKeyFromID ? setCiteKeyId(paperId, this.library) : paperId;
            indexCards.push({
              id: paperCiteId,
              location: null,
              isLocal: false,
              paper,
              bibEntry: void 0
            });
          }
        }));
      }
      if (citeKeyMap.length > 0 && settings.searchCiteKey) {
        await Promise.all(import_lodash3.default.map(citeKeyMap, async (item, index6) => {
          var _a;
          const localPaper = (_a = this.library.libraryData) == null ? void 0 : _a.find((entry) => entry.id === item.citeKey.replace("@", ""));
          if (localPaper) {
            let isLocal = true;
            let paper = fillMissingReference(localPaper);
            if (item.citeKey !== item.paperId) {
              const indexPaper = await this.viewManager.getIndexPaper(item.paperId);
              if (indexPaper && indexPaper.paperId) {
                paper = fillMissingReference(localPaper, indexPaper);
                isLocal = false;
              }
            }
            indexCards.push({
              id: item.citeKey,
              location: item.location,
              isLocal,
              paper,
              bibEntry: localPaper
            });
          }
        }));
      }
      if (settings.searchTitle && fileName && !EXCLUDE_FILE_NAMES.some((name) => basename.toLowerCase() === name.toLowerCase())) {
        const titleSearchPapers = await this.viewManager.searchIndexPapers(fileName, settings.searchLimit);
        import_lodash3.default.forEach(titleSearchPapers, (paper) => {
          indexCards.push({ id: paper.paperId, location: null, isLocal: false, paper });
        });
      }
      if (settings.searchFrontMatter && frontmatter) {
        const frontMatterPapers = await this.viewManager.searchIndexPapers(frontmatter, settings.searchFrontMatterLimit);
        import_lodash3.default.forEach(frontMatterPapers, (paper) => {
          indexCards.push({ id: paper.paperId, location: null, isLocal: false, paper });
        });
      }
      const indexCards_ = this.preProcessReferences(indexCards);
      if (indexCards_.length > 0) {
        const CiteKeyEntry = indexCards_.map((indexPaper) => {
          return convertToCiteKeyEntry(indexPaper, indexPaper.id);
        });
        this.plugin.updateChecker.checkCSlEngineUpdate(CiteKeyEntry, this.cache.styleCache.get(this.cache.styleURL), this.cache.localeCache.get(this.cache.locale));
        const bibData = this.plugin.updateChecker.getCSL(CiteKeyEntry.map((item) => item.id));
        if (bibData) {
          const indexCardsMap = new Map(indexCards_.map((item) => [item.id, item]));
          bibData.forEach((item) => {
            const paper = indexCardsMap.get(item.id);
            if (paper) {
              paper.paper.csl = item.bib;
            }
          });
        }
      }
      return indexCards_;
    });
    __publicField(this, "preProcessReferences", (indexCards) => {
      let indexCardsTemp = removeNullReferences(indexCards);
      if (!this.plugin.settings.enableIndexSorting) {
        indexCardsTemp = indexCardsTemp.sort((a2, b) => {
          if (a2.location === null)
            return 1;
          if (b.location === null)
            return -1;
          return a2.location - b.location;
        });
      }
      indexCardsTemp = import_lodash3.default.uniqBy(indexCardsTemp, (item) => item.paper.paperId);
      if (this.plugin.settings.enableIndexSorting) {
        indexCardsTemp = indexSort(indexCardsTemp, this.plugin.settings.sortByIndex, this.plugin.settings.sortOrderIndex);
      }
      return indexCardsTemp;
    });
    this.plugin = plugin;
    this.library = DEFAULT_LIBRARY;
    this.viewManager = new ViewManager(plugin);
    this.initPromise = new PromiseCapability();
    this.cache = {
      styleURL: "",
      locale: "",
      styleCache: /* @__PURE__ */ new Map(),
      localeCache: /* @__PURE__ */ new Map()
    };
  }
  async loadCache() {
    var _a, _b, _c, _d;
    const { cacheDir, settings } = this.plugin;
    if (!fs4.existsSync(cacheDir)) {
      fs4.mkdirSync(cacheDir);
    }
    this.cache.styleURL = (_b = (_a = cslList.find((item) => item.label === settings.cslStyle)) == null ? void 0 : _a.value) != null ? _b : settings.defaultStyleURL;
    this.cache.locale = (_d = (_c = cslLangList.find((item) => item.label === settings.cslLocale)) == null ? void 0 : _c.value) != null ? _d : settings.defaultLocale;
    const citationStyle = await getCSLStyle(this.cache.styleCache, cacheDir, this.cache.styleURL);
    const citationLocale = await getCSLLocale(this.cache.localeCache, cacheDir, this.cache.locale);
    if (citationStyle && citationLocale) {
      return true;
    }
    return false;
  }
  async reload(reloadType) {
    var _a, _b, _c;
    const debug = this.plugin.settings.debugMode;
    if (reloadType === RELOAD.HARD) {
      this.viewManager.clearCache();
      this.library.mtime = 0;
      await this.loadLibrary(false);
      this.loadCache();
      this.plugin.updateChecker.library = this.library;
      (_a = this.plugin.view) == null ? void 0 : _a.processReferences();
      if (debug)
        console.log("ORM: Reloaded View and library");
    } else if (reloadType === RELOAD.SOFT) {
      await this.loadLibrary(false);
      this.viewManager.clearCache();
      this.plugin.updateChecker.library = this.library;
      (_b = this.plugin.view) == null ? void 0 : _b.processReferences();
      if (debug)
        console.log("ORM: Reloaded library");
    } else if (reloadType === RELOAD.VIEW) {
      (_c = this.plugin.view) == null ? void 0 : _c.processReferences();
      if (debug)
        console.log("ORM: Reloaded View");
    }
  }
  async reinit(clearCache) {
    this.initPromise = new PromiseCapability();
    if (this.plugin.settings.pullFromZotero) {
      await this.loadBibFileFromCache(false);
    } else {
      await this.loadBibFileFromCache(true);
    }
    this.initPromise.resolve();
  }
  async loadBibFileFromCache(fromCache) {
    var _a;
    const { settings, cacheDir } = this.plugin;
    if (!((_a = settings.zoteroGroups) == null ? void 0 : _a.length))
      return;
    const bib = [];
    for (const group of settings.zoteroGroups) {
      try {
        const list = await getZBib(settings.zoteroPort, cacheDir, group.id, fromCache);
        if (list == null ? void 0 : list.length) {
          bib.push(...list);
          group.lastUpdate = Date.now();
        }
      } catch (e) {
        console.error("Error fetching bibliography from Zotero", e);
        continue;
      }
    }
    this.library = {
      active: true,
      adapter: "csl-json",
      libraryData: bib,
      mtime: Date.now()
    };
    return bib;
  }
};

// src/data/updateChecker.ts
var import_obsidian12 = require("obsidian");
var import_citeproc = __toESM(require_citeproc_commonjs());
var import_lodash4 = __toESM(require_lodash());
var UpdateChecker = class {
  constructor() {
    __publicField(this, "citeKeys");
    __publicField(this, "citeKeyMap");
    __publicField(this, "indexIds");
    __publicField(this, "library");
    __publicField(this, "fileMetadataCache");
    __publicField(this, "fileCache", "");
    __publicField(this, "frontmatter", "");
    __publicField(this, "fileName", "");
    __publicField(this, "basename", "");
    __publicField(this, "cslEngine");
    __publicField(this, "resetCache", () => {
      this.citeKeys = /* @__PURE__ */ new Set();
      this.citeKeyMap = [];
      this.indexIds = /* @__PURE__ */ new Set();
      this.fileMetadataCache = null;
      this.fileCache = "";
      this.frontmatter = "";
      this.fileName = "";
      this.basename = "";
    });
    __publicField(this, "setCache", (fileCache, fileMetadataCache) => {
      this.fileCache = fileCache;
      this.fileMetadataCache = fileMetadataCache;
    });
    __publicField(this, "checkCiteKeysUpdate", (prefix = "@", checkOrder = false) => {
      if (this.library === null)
        return false;
      const newCiteKeys = getCiteKeys(this.library, this.fileCache, prefix);
      if (import_lodash4.default.isEqual(Array.from(newCiteKeys), Array.from(this.citeKeys))) {
        return false;
      }
      this.citeKeys = newCiteKeys;
      this.citeKeyMap = getCiteKeyIds(this.citeKeys, this.library);
      return true;
    });
    __publicField(this, "checkIndexIdsUpdate", () => {
      const newIds = getPaperIds(this.fileCache);
      if (import_lodash4.default.isEqual(Array.from(newIds), Array.from(this.indexIds)))
        return false;
      this.indexIds = newIds;
      return true;
    });
    __publicField(this, "checkFrontmatterUpdate", (key = "") => {
      var _a, _b, _c;
      if (!((_a = this.fileMetadataCache) == null ? void 0 : _a.frontmatter)) {
        this.frontmatter = "";
        return false;
      }
      const keywords = (_c = (_b = this.fileMetadataCache) == null ? void 0 : _b.frontmatter) == null ? void 0 : _c[key];
      this.frontmatter = extractKeywords(keywords).unique().join("+");
      return true;
    });
    __publicField(this, "checkFileNameUpdate", () => {
      if (!this.basename) {
        this.fileName = "";
        return false;
      }
      if (!EXCLUDE_FILE_NAMES.some((name) => this.basename.toLowerCase() === name.toLowerCase())) {
        this.fileName = extractKeywords(this.basename).unique().join("+");
        return true;
      }
      return false;
    });
    __publicField(this, "checkCSlEngineUpdate", (references, citationStyle, citationLocale) => {
      if (!(references.length > 0))
        return null;
      if (!citationStyle || !citationLocale)
        return null;
      const citeprocOptions = {
        retrieveLocale: () => citationLocale,
        retrieveItem: (id2) => references.find((item) => item.id === id2)
      };
      this.cslEngine = new import_citeproc.default.Engine(citeprocOptions, citationStyle);
      return this.cslEngine;
    });
    __publicField(this, "getCSL", (ids) => {
      var _a;
      if (!this.cslEngine)
        return null;
      this.cslEngine.updateItems(ids);
      const bibHtml = this.cslEngine.makeBibliography();
      const bibMetadataIds = (_a = bibHtml[0]) == null ? void 0 : _a.entry_ids;
      const cslData = bibMetadataIds.map((id2, index6) => {
        const bib = (0, import_obsidian12.htmlToMarkdown)(fragWithHTML(bibHtml[1][index6])).replace(/\n/, " ");
        const index_ = index6 + 1;
        return { id: id2[0], index: index_, bib };
      });
      if (cslData.length === 0)
        return null;
      return cslData;
    });
    this.citeKeys = /* @__PURE__ */ new Set();
    this.citeKeyMap = [];
    this.indexIds = /* @__PURE__ */ new Set();
    this.frontmatter = "";
    this.fileName = "";
    this.basename = "";
    this.fileMetadataCache = null;
    this.cslEngine = null;
  }
};

// src/search/SearchModal.tsx
var import_obsidian13 = require("obsidian");
var ReferenceSearchModal = class extends import_obsidian13.Modal {
  constructor(plugin, query, mode, callback) {
    super(plugin.app);
    this.plugin = plugin;
    this.query = query;
    this.mode = mode;
    this.callback = callback;
    __publicField(this, "isBusy", false);
    __publicField(this, "okBtnRef");
  }
  setBusy(busy) {
    var _a, _b;
    this.isBusy = busy;
    (_a = this.okBtnRef) == null ? void 0 : _a.setDisabled(busy);
    (_b = this.okBtnRef) == null ? void 0 : _b.setButtonText(busy ? "Requesting..." : "Search");
  }
  async searchReference() {
    if (!this.query) {
      throw new Error("ORM: No query entered.");
    }
    if (!this.isBusy) {
      try {
        this.setBusy(true);
        const paperIds = getPaperIds(this.query);
        if (paperIds.size > 0) {
          const paperPromises = Array.from(paperIds).map((paperId) => new ViewManager(this.plugin).getIndexPaper(paperId));
          const papers = await Promise.all(paperPromises);
          const validPapers = papers.filter((paper) => paper !== null);
          if (validPapers.length > 0) {
            this.callback(null, validPapers);
            this.close();
            return;
          }
        } else {
          const searchResults = await new ViewManager(this.plugin).searchIndexPapers(this.query, this.plugin.settings.modalSearchLimit, false);
          this.setBusy(false);
          if (!(searchResults == null ? void 0 : searchResults.length)) {
            new import_obsidian13.Notice(`No results found for "${this.query}"`);
            return;
          }
          this.callback(null, searchResults);
        }
      } catch (err) {
        this.callback(err);
      }
      this.close();
    }
  }
  submitEnterCallback(event) {
    if (event.key === "Enter" && !event.isComposing) {
      this.searchReference();
    }
  }
  onOpen() {
    const { contentEl } = this;
    const search_heading = contentEl.createDiv({ cls: "orm-search-modal-input-heading", text: "Search References" });
    search_heading.createDiv({ cls: "orm-search-modal-input-heading-mode", text: `${this.mode}` });
    contentEl.createDiv({ cls: "orm-search-modal-input" }, (settingItem) => {
      new import_obsidian13.TextComponent(settingItem).setValue(this.query).setPlaceholder("Search by keyword, title, authors, journal, abstract, ID, DOI, etc.").onChange((value) => this.query = value).inputEl.addEventListener("keydown", this.submitEnterCallback.bind(this));
    });
    new import_obsidian13.Setting(contentEl).setClass("orm-search-modal-input-button").addButton((btn) => {
      return this.okBtnRef = btn.setButtonText("Search").setCta().onClick(() => {
        this.searchReference();
      });
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/search/SuggestModal.tsx
var import_obsidian14 = require("obsidian");
var ReferenceSuggestModal = class extends import_obsidian14.SuggestModal {
  constructor(app2, suggestion, onChoose) {
    super(app2);
    this.suggestion = suggestion;
    this.onChoose = onChoose;
  }
  getSuggestions(query) {
    return this.suggestion.filter((reference2) => {
      var _a;
      return (_a = reference2.title) == null ? void 0 : _a.toLowerCase().includes(query == null ? void 0 : query.toLowerCase());
    });
  }
  renderSuggestion(reference2, el) {
    const data = makeMetaData({ id: reference2.paperId, location: null, paper: reference2 });
    el.createEl("div", { cls: "orm-modal-paper-title", text: data.title });
    el.createEl("div", { cls: "orm-modal-paper-authors", text: data.authors });
    el.createEl("div", { cls: "orm-modal-paper-year", text: `${data.year}, ${data.journal}, ${data.volume}, ${data.pages}` });
  }
  onChooseSuggestion(reference2) {
    this.onChoose(null, makeMetaData({ id: reference2.paperId, location: null, paper: reference2 }));
  }
};

// src/main.ts
var ReferenceMap = class extends import_obsidian15.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
    __publicField(this, "cacheDir");
    __publicField(this, "referenceMapData");
    __publicField(this, "updateChecker");
    __publicField(this, "_initPromise");
  }
  get initPromise() {
    if (!this._initPromise) {
      return this._initPromise = new PromiseCapability();
    }
    return this._initPromise;
  }
  async onload() {
    this.cacheDir = import_path4.default.join(getVaultRoot(this.app), ".reference-map");
    this.referenceMapData = new ReferenceMapData(this);
    this.updateChecker = new UpdateChecker();
    this.loadSettings().then(() => {
      this.init();
      this.initPromise.promise.then(() => {
        this.referenceMapData.loadLibrary(true);
        this.referenceMapData.loadCache();
      }).finally(() => {
        this.updateChecker.library = this.referenceMapData.library;
        this.referenceMapData.initPromise.resolve();
      });
      this.initPromise.resolve();
    });
  }
  async init() {
    addIcons();
    this.addSettingTab(new ReferenceMapSettingTab(this.app, this));
    this.registerView(REFERENCE_MAP_VIEW_TYPE, (leaf) => new SidebarView(leaf, this));
    this.registerView(REFERENCE_MAP_GRAPH_VIEW_TYPE, (leaf) => new GraphView(leaf, this));
    this.addCommand({
      id: "show-reference-map-sidebar-view",
      name: "Show Sidebar View",
      callback: () => {
        this.ensureLeafExists(true);
      }
    });
    this.addCommand({
      id: "reload-reference-map-library",
      name: "Refresh View and Library",
      callback: () => {
        if (this.view) {
          this.referenceMapData.reload(RELOAD.HARD);
        }
      }
    });
    this.addCommand({
      id: "open-reference-map-search-modal-to-insert",
      name: "Search Online and Insert",
      callback: () => this.insertMetadata()
    });
    this.addCommand({
      id: "open-reference-map-search-modal-to-create",
      name: "Search Online and Create",
      callback: () => this.createNewReferenceNote()
    });
    this.addCommand({
      id: "open-reference-map-graph",
      name: "Open Literature Graph",
      callback: () => this.openReferenceMapGraph(false)
    });
    this.addCommand({
      id: "convert-selection-zotero-link",
      name: "Convert Selection to Zotero Link",
      callback: () => this.convertSelectionToZoteroLink()
    });
    this.app.workspace.onLayoutReady(() => {
      this.ensureLeafExists(false);
    });
    this.addRibbonIcon("ReferenceMapIconScroll", "Reference Map", async (evt) => {
      this.ensureLeafExists(true);
    });
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(REFERENCE_MAP_GRAPH_VIEW_TYPE);
  }
  ensureLeafExists(active = false) {
    const { workspace } = this.app;
    const preferredSidebar = DIRECTION.RIGHT;
    let leaf;
    const existingPluginLeaves = workspace.getLeavesOfType(REFERENCE_MAP_VIEW_TYPE);
    if (existingPluginLeaves.length > 0) {
      leaf = existingPluginLeaves[0];
    } else {
      leaf = preferredSidebar === DIRECTION.LEFT ? workspace.getLeftLeaf(false) : workspace.getRightLeaf(false);
      workspace.revealLeaf(leaf);
      leaf.setViewState({ type: REFERENCE_MAP_VIEW_TYPE });
    }
    if (active) {
      workspace.setActiveLeaf(leaf);
    }
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(REFERENCE_MAP_VIEW_TYPE);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: REFERENCE_MAP_VIEW_TYPE,
      active: false
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(REFERENCE_MAP_VIEW_TYPE)[0]);
  }
  get view() {
    const leaves = this.app.workspace.getLeavesOfType(REFERENCE_MAP_VIEW_TYPE);
    if (!(leaves == null ? void 0 : leaves.length))
      return null;
    return leaves[0].view;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async createNewReferenceNote() {
    try {
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian15.MarkdownView);
      if (!markdownView || markdownView.getMode() !== "source") {
        new import_obsidian15.Notice("No active markdown view OR in Reading view");
        return;
      }
      const selection2 = markdownView.editor.getSelection().trim();
      const metaData = await this.searchReferenceMetadata(selection2, "create");
      const activeLeaf = this.app.workspace.getLeaf();
      if (!activeLeaf) {
        new import_obsidian15.Notice("No active leaf");
        return;
      }
      const renderedContents = await this.getRenderedContentsForCreate(metaData);
      const fileName = makeFileName(metaData, this.settings.fileNameFormat);
      let filePath;
      if (this.settings.folder) {
        filePath = `${this.settings.folder}/${fileName}`;
      } else {
        filePath = `${fileName}`;
      }
      const targetFile = await this.app.vault.create(filePath, renderedContents);
      await activeLeaf.openFile(targetFile, { state: { mode: "source" } });
    } catch (err) {
      new import_obsidian15.Notice("Sorry, something went wrong.");
    }
  }
  async insertMetadata() {
    try {
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian15.MarkdownView);
      if (!markdownView || markdownView.getMode() !== "source") {
        new import_obsidian15.Notice("No active markdown view OR in Reading view");
        return;
      }
      const selection2 = markdownView.editor.getSelection().trim();
      const reference2 = await this.searchReferenceMetadata(selection2, "insert");
      if (!markdownView.editor) {
        return;
      }
      const renderedContents = await this.getRenderedContentsForInsert(reference2);
      markdownView.editor.replaceRange(renderedContents, markdownView.editor.getCursor());
    } catch (err) {
      new import_obsidian15.Notice("Sorry, something went wrong.");
    }
  }
  async searchReferenceMetadata(query, mode) {
    const searchedReferences = await this.openReferenceSearchModal(query, mode);
    return await this.openReferenceSuggestModal(searchedReferences);
  }
  async openReferenceSearchModal(query = "", mode = "insert") {
    return new Promise((resolve, reject) => {
      new ReferenceSearchModal(this, query, mode, (error, results) => {
        if (error) {
          reject(error);
        } else if (results) {
          resolve(results);
        } else {
          reject(new Error("No results returned"));
        }
      }).open();
    });
  }
  async openReferenceSuggestModal(references) {
    return new Promise((resolve, reject) => {
      new ReferenceSuggestModal(this.app, references, (error, selectedReference) => {
        if (error) {
          reject(error);
        } else if (selectedReference) {
          resolve(selectedReference);
        } else {
          reject(new Error("No reference selected"));
        }
      }).open();
    });
  }
  async getRenderedContentsForInsert(metaData) {
    const template = this.settings.modalInsertTemplate || METADATA_MODAL_INSERT_TEMPLATE;
    return templateReplace(template, metaData);
  }
  async getRenderedContentsForCreate(metaData) {
    const template = this.settings.modalCreateTemplate || METADATA_MODAL_CREATE_TEMPLATE;
    return templateReplace(template, metaData);
  }
  async openReferenceMapGraph(active = false) {
    const { workspace } = this.app;
    let leaf;
    const existingPluginLeaves = workspace.getLeavesOfType(REFERENCE_MAP_GRAPH_VIEW_TYPE);
    if (existingPluginLeaves.length > 0) {
      leaf = existingPluginLeaves[0];
    } else {
      leaf = workspace.getLeaf("split", "vertical");
      leaf.setViewState({ type: REFERENCE_MAP_GRAPH_VIEW_TYPE });
    }
    if (active) {
      workspace.revealLeaf(leaf);
    }
  }
  async convertSelectionToZoteroLink() {
    try {
      if (!this.settings.searchCiteKey) {
        new import_obsidian15.Notice("Please enable Get references using citeKey in the settings.");
        return;
      }
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian15.MarkdownView);
      if (!markdownView || markdownView.getMode() !== "source") {
        new import_obsidian15.Notice("No active markdown view OR in Reading view");
        return;
      }
      const selection2 = markdownView.editor.getSelection().trim();
      const from = markdownView.editor.getCursor("from");
      const to = markdownView.editor.getCursor("to");
      const citeKeys = Array.from(this.updateChecker.citeKeys);
      const foundCiteKey = citeKeys.find((key) => selection2.includes(key));
      if (foundCiteKey) {
        const renderedContents = `[${selection2}](zotero://select/items/@${foundCiteKey})`;
        markdownView.editor.replaceRange(renderedContents, from, to);
        return;
      } else {
        new import_obsidian15.Notice("No citekey found in the selection.");
        return;
      }
    } catch (err) {
      new import_obsidian15.Notice("Sorry, something went wrong.");
    }
  }
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! fromentries. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* nosourcemap */